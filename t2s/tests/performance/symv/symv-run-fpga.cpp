/*******************************************************************************
* Copyright 2021 Intel Corporation
*
* Licensed under the BSD-2-Clause Plus Patent License (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* https://opensource.org/licenses/BSDplusPatent
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions
* and limitations under the License.
*
*
* SPDX-License-Identifier: BSD-2-Clause-Patent
*******************************************************************************/
// The header file generated by symv.cpp
#include "symv-interface.h"

// Constant parameters (inner loop bounds) of the design
#include "const-parameters.h"

// Outer loop bounds for testing
#ifdef TINY // For verifying correctness only
    #define K           2
    #define I           4
    #define II          4
#else
    #define K           32
    #define I           32
#endif

// Roofline utilities
#include "Roofline.h"

// The only header file needed for including T2S.
#include "HalideBuffer.h"

// For printing output
#include <stdio.h>
#include <iostream>

// For validation of results.
#include <assert.h>

using namespace std;

#define MATRIX_OP_IDENTITY 0;
#define MATRIX_OP_TRANSPOSE 1;

int main()
{
    const int TOTAL_I = II * I;
    const int TOTAL_K = KKK * KK * K;

    int opa;
    opa = MATRIX_OP_IDENTITY;

    float alpha, beta;
    Halide::Runtime::Buffer<float> a(TOTAL_K, TOTAL_I), x(TOTAL_K), yy(TOTAL_I);

    alpha = 1;//random();
    beta = 1;//random();
    for (size_t i = 0; i < TOTAL_I; i++) {
        for (size_t k = 0; k < TOTAL_K; k++) {
            if (k >= i) {
                a(k, i) = random();
            } else {
                a(k, i) = a(i, k);
            }
        }
    }

    for (size_t k = 0; k < TOTAL_K; k++) {
        x(k) = random();
    }

    for (size_t i = 0; i < TOTAL_I; i++) {
        yy(i) = random() * random();
    }

    Halide::Runtime::Buffer<float> y(KKK, KK, K);
    symv(alpha, beta, a, x, yy, y);

#ifdef TINY
    // Validate the results
    for (int i = 0; i < I; i++)
        for (int ii = 0; ii < II; ii++) {
            size_t total_i = ii + II * i;
            float golden = 0;
            for (int k = 0; k < TOTAL_K; k++) {
                float aa = a(k, total_i);
                float xx = x(k);
                golden += aa * xx;
            }
            golden = alpha * golden + beta * yy(total_i);
            cout << "(" << total_i << ") - (" << total_i % KKK << ", " << total_i / KKK % KK << ", " << total_i / KKK / KK << ") " << golden << " " << y(total_i % KKK, total_i / KKK % KK, total_i / KKK / KK) << endl;
            // assert(fabs(golden - y(iii, ii, i)) < 0.005*fabs(golden));
        }
#else
    // Report performance. DSPs, FMax and ExecTime are automatically figured out from the static analysis
    // during FPGA synthesis and and the dynamic profile during the FGPA execution.
    float mem_bandwidth = 34; // pac_a10 on DevCloud has 34GB/s memory bandwidth
    float compute_roof = 2 * DSPs() * FMax();
    float number_ops = 2 * (float)(III * II * I) * (float)(KKK * KK * K); // Total operations (GFLOP for SYMV), independent of designs
    float number_bytes = (float)(KKK * III) * (float)(KK * II) * (float)(K * I) * 4 +
                         (float)(KKK * KK * K) * 4 +
                         (float)(III * II * I) * 4;
    float exec_time= ExecTime();
    roofline(mem_bandwidth, compute_roof, number_ops, number_bytes,exec_time);
    if (fopen("roofline.png", "r") == NULL) {
        cout << "Failed to draw roofline!\n";
        return 1;
    }
#endif

    printf("Success\n");
    return 0;
}
