Section: 
Section: .interp
Section: .note.ABI-tag
Section: .hash
Section: .gnu.hash
Section: .dynsym
Section: .dynstr
Section: .gnu.version
Section: .gnu.version_r
Section: .rela.dyn
Section: .rela.plt
Section: .init
Section: .plt
Section: .text
Section: .fini
Section: .rodata
Section: .eh_frame_hdr
Section: .eh_frame
Section: .gcc_except_table
Section: .init_array
Section: .fini_array
Section: .data.rel.ro
Section: .dynamic
Section: .got
Section: .got.plt
Section: .data
Section: .bss
Section: .comment
Section: .debug_aranges
Section: .debug_info
Section: .debug_abbrev
Section: .debug_line
Section: .debug_str
Section: .debug_ranges
Section: .symtab
Section: .strtab
Section: .shstrtab
see value
(float32)P(_0, _1)
see value
(float32)W(_0, _1)
see value
select((cooo == 0), (float32)P_im(((((cii + (4*ci)) + (32*mk)) + (128*mx)) + (512*nn)), (((((((yyy_xxx + (7*yy_xx)) + (49*y_x)) % 7)*2) + ky) + (15*(((((yyy_xxx + (7*yy_xx)) + (49*y_x))/7)*2) + kx))) + (225*n))), (float32)A(cii, (cooo - 1), yyy_xxx, yy_xx, y_x, my, mx, coo, nn, ky, kx, ci, mk, co, n))
see value
select((yyy_xxx == 0), (float32)W_im((((cooo + (8*coo)) + (8*co)) + (32*my)), ((((cii + (4*ky)) + (12*kx)) + (36*ci)) + (288*mk))), (float32)B(cii, cooo, (yyy_xxx - 1), yy_xx, y_x, my, mx, coo, nn, ky, kx, ci, mk, co, n))
see value
(select((((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) && (kx == 0)), 0.000000f, select((cii == 0), select((ky == 0), select((kx == 0), select((ci == 0), (float32)C(((cii + 4) - 1), cooo, yyy_xxx, yy_xx, y_x, my, mx, coo, nn, ((ky + 3) - 1), ((kx + 3) - 1), ((ci + 8) - 1), (mk - 1), co, n), (float32)C(((cii + 4) - 1), cooo, yyy_xxx, yy_xx, y_x, my, mx, coo, nn, ((ky + 3) - 1), ((kx + 3) - 1), (ci - 1), mk, co, n)), (float32)C(((cii + 4) - 1), cooo, yyy_xxx, yy_xx, y_x, my, mx, coo, nn, ((ky + 3) - 1), (kx - 1), ci, mk, co, n)), (float32)C(((cii + 4) - 1), cooo, yyy_xxx, yy_xx, y_x, my, mx, coo, nn, (ky - 1), kx, ci, mk, co, n)), (float32)C((cii - 1), cooo, yyy_xxx, yy_xx, y_x, my, mx, coo, nn, ky, kx, ci, mk, co, n))) + ((float32)A(cii, cooo, yyy_xxx, yy_xx, y_x, my, mx, coo, nn, ky, kx, ci, mk, co, n)*(float32)B(cii, cooo, yyy_xxx, yy_xx, y_x, my, mx, coo, nn, ky, kx, ci, mk, co, n)))
see value
select((((((cii == 3) && (ci == 7)) && (mk == 3)) && (ky == 2)) && (kx == 2)), (float32)C(cii, cooo, yyy_xxx, yy_xx, y_x, my, mx, coo, nn, ky, kx, ci, mk, co, n))
After merging A with B, C, Out:
Func A at Place Device:
Func B at Place Device:
float32   B(cii
, cooo
, yyy_xxx
, yy_xx
, y_x
, my
, mx
, coo
, nn
, ky
, kx
, ci
, mk
, co
, n
) = select((yyy_xxx == 0), (float32)W_im((((cooo + (8*coo)) + (8*co)) + (32*my)), ((((cii + (4*ky)) + (12*kx)) + (36*ci)) + (288*mk))), (float32)B(cii, cooo, (yyy_xxx - 1), yy_xx, y_x, my, mx, coo, nn, ky, kx, ci, mk, co, n))
 
    RVars: 
    Splits: 
    Dims: cii, cooo, yyy_xxx, yy_xx, y_x, my, mx, coo, nn, ky, kx, ci, mk, co, n, __outermost
    Fuse level: A.s0.cii
    Fuse pairs: 
    Merged ures: 
Func C at Place Device:
float32   C(cii
, cooo
, yyy_xxx
, yy_xx
, y_x
, my
, mx
, coo
, nn
, ky
, kx
, ci
, mk
, co
, n
) = (select((((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) && (kx == 0)), 0.000000f, select((cii == 0), select((ky == 0), select((kx == 0), select((ci == 0), (float32)C(((cii + 4) - 1), cooo, yyy_xxx, yy_xx, y_x, my, mx, coo, nn, ((ky + 3) - 1), ((kx + 3) - 1), ((ci + 8) - 1), (mk - 1), co, n), (float32)C(((cii + 4) - 1), cooo, yyy_xxx, yy_xx, y_x, my, mx, coo, nn, ((ky + 3) - 1), ((kx + 3) - 1), (ci - 1), mk, co, n)), (float32)C(((cii + 4) - 1), cooo, yyy_xxx, yy_xx, y_x, my, mx, coo, nn, ((ky + 3) - 1), (kx - 1), ci, mk, co, n)), (float32)C(((cii + 4) - 1), cooo, yyy_xxx, yy_xx, y_x, my, mx, coo, nn, (ky - 1), kx, ci, mk, co, n)), (float32)C((cii - 1), cooo, yyy_xxx, yy_xx, y_x, my, mx, coo, nn, ky, kx, ci, mk, co, n))) + ((float32)A(cii, cooo, yyy_xxx, yy_xx, y_x, my, mx, coo, nn, ky, kx, ci, mk, co, n)*(float32)B(cii, cooo, yyy_xxx, yy_xx, y_x, my, mx, coo, nn, ky, kx, ci, mk, co, n)))
 
    RVars: 
    Splits: 
    Dims: cii, cooo, yyy_xxx, yy_xx, y_x, my, mx, coo, nn, ky, kx, ci, mk, co, n, __outermost
    Fuse level: B.s0.cii
    Fuse pairs: 
    Merged ures: 
Func Out at Place Device:
float32   Out(cooo
, yyy_xxx
, yy_xx
, y_x
, my
, mx
, coo
, nn
, co
, n
) = select((((((cii == 3) && (ci == 7)) && (mk == 3)) && (ky == 2)) && (kx == 2)), (float32)C(cii, cooo, yyy_xxx, yy_xx, y_x, my, mx, coo, nn, ky, kx, ci, mk, co, n))
 
    RVars: 
    Splits: 
    Dims: cooo, yyy_xxx, yy_xx, y_x, my, mx, coo, nn, co, n, __outermost
    Fuse level: C.s0.cii
    Fuse pairs: 
    Merged ures: 
float32   A(cii
, cooo
, yyy_xxx
, yy_xx
, y_x
, my
, mx
, coo
, nn
, ky
, kx
, ci
, mk
, co
, n
) = select((cooo == 0), (float32)P_im(((((cii + (4*ci)) + (32*mk)) + (128*mx)) + (512*nn)), (((((((yyy_xxx + (7*yy_xx)) + (49*y_x)) % 7)*2) + ky) + (15*(((((yyy_xxx + (7*yy_xx)) + (49*y_x))/7)*2) + kx))) + (225*n))), (float32)A(cii, (cooo - 1), yyy_xxx, yy_xx, y_x, my, mx, coo, nn, ky, kx, ci, mk, co, n))
 
    RVars: 
    Splits: 
    Dims: cii, cooo, yyy_xxx, yy_xx, y_x, my, mx, coo, nn, ky, kx, ci, mk, co, n, __outermost
    Fuse level: .
    Fuse pairs: 
    Merged ures: B, C, Out

Var cooo = (0 + (1*cooo))
Var yyy_xxx = (0 + (1*yyy_xxx))
Var yy_xx = (0 + (1*yy_xx))
Var cii = (0 + (1*cii))
User error triggered at /home/tzl/betat2sp/Halide/src/Func.cpp:1858
Warning: (at ./capsule.cpp:83) Out already has a compute_with at C.s0.cooo. Replacing it with a new compute_with at C.s0.cii
User error triggered at /home/tzl/betat2sp/Halide/src/Func.cpp:1858
Warning: (at ./capsule.cpp:83) C already has a compute_with at B.s0.cii. Replacing it with a new compute_with at B.s0.cii
User error triggered at /home/tzl/betat2sp/Halide/src/Func.cpp:1858
Warning: (at ./capsule.cpp:83) B already has a compute_with at A.s0.cii. Replacing it with a new compute_with at A.s0.cii
User error triggered at /home/tzl/betat2sp/Halide/src/Func.cpp:1858
Warning: (at ./capsule.cpp:102) Out already has a compute_with at C.s0.cooo. Replacing it with a new compute_with at C.s0.cii
User error triggered at /home/tzl/betat2sp/Halide/src/Func.cpp:1858
Warning: (at ./capsule.cpp:102) C already has a compute_with at B.s0.cii. Replacing it with a new compute_with at B.s0.cii
User error triggered at /home/tzl/betat2sp/Halide/src/Func.cpp:1858
Warning: (at ./capsule.cpp:102) B already has a compute_with at A.s0.cii. Replacing it with a new compute_with at A.s0.cii
P.gpu_fetch(yy_xx, {cii, yyy_xxx});
W.gpu_fetch(ci, {cii, cooo});
Out.gpu_store((((((cooo + (8*coo)) + (8*co)) + (32*my)) + (128*mx)) + (512*nn)), (((((yyy_xxx + (7*yy_xx)) + (49*y_x)) % 7) + (7*(((yyy_xxx + (7*yy_xx)) + (49*y_x))/7))) + (49*n)));
User error triggered at /home/tzl/betat2sp/Halide/../t2s/src/Stensor.cpp:688
Warning: (at ./capsule.cpp:102) Currently the GPU runtime is under developement, so we just emit out the source code in capsule_genx.cpp
Preprocessing functions in the environment:
User error triggered at /home/tzl/betat2sp/Halide/src/Func.cpp:1858
Warning: (at ./capsule.cpp:102) Out already has a compute_with at C.s0.cooo. Replacing it with a new compute_with at C.s0.cii
User error triggered at /home/tzl/betat2sp/Halide/src/Func.cpp:1858
Warning: (at ./capsule.cpp:102) C already has a compute_with at B.s0.cii. Replacing it with a new compute_with at B.s0.cii
User error triggered at /home/tzl/betat2sp/Halide/src/Func.cpp:1858
Warning: (at ./capsule.cpp:102) B already has a compute_with at A.s0.cii. Replacing it with a new compute_with at A.s0.cii
STT does not cover all the dependencies, try to flatten the time loop...
Deep-copy function contents: "A"
Deep-copy function contents: "B"
Deep-copy function contents: "C"
Deep-copy function contents: "Out"
Deep-copy function contents: "P_im"
Deep-copy function contents: "W_im"
Substituting calls in Out
...Replace call to Func "C" with "C"
Substituting calls in C
...Replace call to Func "C" with "C"
...Replace call to Func "C" with "C"
...Replace call to Func "C" with "C"
...Replace call to Func "C" with "C"
...Replace call to Func "C" with "C"
...Replace call to Func "A" with "A"
...Replace call to Func "B" with "B"
Substituting calls in B
...Replace call to Func "W_im" with "W_im"
...Replace call to Func "B" with "B"
Substituting calls in W_im
Substituting calls in P_im
Substituting calls in A
...Replace call to Func "P_im" with "P_im"
...Replace call to Func "A" with "A"
Adding deep-copied version to outputs: Out
Creating initial loop nests...
Injecting realization of { A, B, C, Out }
Injecting { A, B, C, Out } entering for-loop over .__root
Found compute level at .__root
Value 0 = select((A.s0.cooo == 0), (float32)P_im(((((A.s0.cii + (4*A.s0.ci)) + (32*A.s0.mk)) + (128*A.s0.mx)) + (512*A.s0.nn)), (((((((A.s0.yyy_xxx + (7*A.s0.yy_xx)) + (49*A.s0.y_x)) % 7)*2) + A.s0.ky) + (15*(((((A.s0.yyy_xxx + (7*A.s0.yy_xx)) + (49*A.s0.y_x))/7)*2) + A.s0.kx))) + (225*A.s0.n))), (float32)A(A.s0.cii, (A.s0.cooo - 1), A.s0.yyy_xxx, A.s0.yy_xx, A.s0.y_x, A.s0.my, A.s0.mx, A.s0.coo, A.s0.nn, A.s0.ky, A.s0.kx, A.s0.ci, A.s0.mk, A.s0.co, A.s0.n))
Site 0 = A.s0.cii
Site 1 = A.s0.cooo
Site 2 = A.s0.yyy_xxx
Site 3 = A.s0.yy_xx
Site 4 = A.s0.y_x
Site 5 = A.s0.my
Site 6 = A.s0.mx
Site 7 = A.s0.coo
Site 8 = A.s0.nn
Site 9 = A.s0.ky
Site 10 = A.s0.kx
Site 11 = A.s0.ci
Site 12 = A.s0.mk
Site 13 = A.s0.co
Site 14 = A.s0.n
Value 0 = select((B.s0.yyy_xxx == 0), (float32)W_im((((B.s0.cooo + (8*B.s0.coo)) + (8*B.s0.co)) + (32*B.s0.my)), ((((B.s0.cii + (4*B.s0.ky)) + (12*B.s0.kx)) + (36*B.s0.ci)) + (288*B.s0.mk))), (float32)B(B.s0.cii, B.s0.cooo, (B.s0.yyy_xxx - 1), B.s0.yy_xx, B.s0.y_x, B.s0.my, B.s0.mx, B.s0.coo, B.s0.nn, B.s0.ky, B.s0.kx, B.s0.ci, B.s0.mk, B.s0.co, B.s0.n))
Site 0 = B.s0.cii
Site 1 = B.s0.cooo
Site 2 = B.s0.yyy_xxx
Site 3 = B.s0.yy_xx
Site 4 = B.s0.y_x
Site 5 = B.s0.my
Site 6 = B.s0.mx
Site 7 = B.s0.coo
Site 8 = B.s0.nn
Site 9 = B.s0.ky
Site 10 = B.s0.kx
Site 11 = B.s0.ci
Site 12 = B.s0.mk
Site 13 = B.s0.co
Site 14 = B.s0.n
Value 0 = (select((((((C.s0.cii == 0) && (C.s0.ci == 0)) && (C.s0.mk == 0)) && (C.s0.ky == 0)) && (C.s0.kx == 0)), 0.000000f, select((C.s0.cii == 0), select((C.s0.ky == 0), select((C.s0.kx == 0), select((C.s0.ci == 0), (float32)C(((C.s0.cii + 4) - 1), C.s0.cooo, C.s0.yyy_xxx, C.s0.yy_xx, C.s0.y_x, C.s0.my, C.s0.mx, C.s0.coo, C.s0.nn, ((C.s0.ky + 3) - 1), ((C.s0.kx + 3) - 1), ((C.s0.ci + 8) - 1), (C.s0.mk - 1), C.s0.co, C.s0.n), (float32)C(((C.s0.cii + 4) - 1), C.s0.cooo, C.s0.yyy_xxx, C.s0.yy_xx, C.s0.y_x, C.s0.my, C.s0.mx, C.s0.coo, C.s0.nn, ((C.s0.ky + 3) - 1), ((C.s0.kx + 3) - 1), (C.s0.ci - 1), C.s0.mk, C.s0.co, C.s0.n)), (float32)C(((C.s0.cii + 4) - 1), C.s0.cooo, C.s0.yyy_xxx, C.s0.yy_xx, C.s0.y_x, C.s0.my, C.s0.mx, C.s0.coo, C.s0.nn, ((C.s0.ky + 3) - 1), (C.s0.kx - 1), C.s0.ci, C.s0.mk, C.s0.co, C.s0.n)), (float32)C(((C.s0.cii + 4) - 1), C.s0.cooo, C.s0.yyy_xxx, C.s0.yy_xx, C.s0.y_x, C.s0.my, C.s0.mx, C.s0.coo, C.s0.nn, (C.s0.ky - 1), C.s0.kx, C.s0.ci, C.s0.mk, C.s0.co, C.s0.n)), (float32)C((C.s0.cii - 1), C.s0.cooo, C.s0.yyy_xxx, C.s0.yy_xx, C.s0.y_x, C.s0.my, C.s0.mx, C.s0.coo, C.s0.nn, C.s0.ky, C.s0.kx, C.s0.ci, C.s0.mk, C.s0.co, C.s0.n))) + ((float32)A(C.s0.cii, C.s0.cooo, C.s0.yyy_xxx, C.s0.yy_xx, C.s0.y_x, C.s0.my, C.s0.mx, C.s0.coo, C.s0.nn, C.s0.ky, C.s0.kx, C.s0.ci, C.s0.mk, C.s0.co, C.s0.n)*(float32)B(C.s0.cii, C.s0.cooo, C.s0.yyy_xxx, C.s0.yy_xx, C.s0.y_x, C.s0.my, C.s0.mx, C.s0.coo, C.s0.nn, C.s0.ky, C.s0.kx, C.s0.ci, C.s0.mk, C.s0.co, C.s0.n)))
Site 0 = C.s0.cii
Site 1 = C.s0.cooo
Site 2 = C.s0.yyy_xxx
Site 3 = C.s0.yy_xx
Site 4 = C.s0.y_x
Site 5 = C.s0.my
Site 6 = C.s0.mx
Site 7 = C.s0.coo
Site 8 = C.s0.nn
Site 9 = C.s0.ky
Site 10 = C.s0.kx
Site 11 = C.s0.ci
Site 12 = C.s0.mk
Site 13 = C.s0.co
Site 14 = C.s0.n
Value 0 = select((((((C.s0.cii == 3) && (C.s0.ci == 7)) && (C.s0.mk == 3)) && (C.s0.ky == 2)) && (C.s0.kx == 2)), (float32)C(C.s0.cii, C.s0.cooo, C.s0.yyy_xxx, C.s0.yy_xx, C.s0.y_x, C.s0.my, C.s0.mx, C.s0.coo, C.s0.nn, C.s0.ky, C.s0.kx, C.s0.ci, C.s0.mk, C.s0.co, C.s0.n))
Site 0 = Out.s0.cooo
Site 1 = Out.s0.yyy_xxx
Site 2 = Out.s0.yy_xx
Site 3 = Out.s0.y_x
Site 4 = Out.s0.my
Site 5 = Out.s0.mx
Site 6 = Out.s0.coo
Site 7 = Out.s0.nn
Site 8 = Out.s0.co
Site 9 = Out.s0.n
Found store level at .__root
for (.__root, 0, 1) {
 realize C[C.cii.min_realized, C.cii.extent_realized], [C.cooo.min_realized, C.cooo.extent_realized], [C.yyy_xxx.min_realized, C.yyy_xxx.extent_realized], [C.yy_xx.min_realized, C.yy_xx.extent_realized], [C.y_x.min_realized, C.y_x.extent_realized], [C.my.min_realized, C.my.extent_realized], [C.mx.min_realized, C.mx.extent_realized], [C.coo.min_realized, C.coo.extent_realized], [C.nn.min_realized, C.nn.extent_realized], [C.ky.min_realized, C.ky.extent_realized], [C.kx.min_realized, C.kx.extent_realized], [C.ci.min_realized, C.ci.extent_realized], [C.mk.min_realized, C.mk.extent_realized], [C.co.min_realized, C.co.extent_realized], [C.n.min_realized, C.n.extent_realized] of type `float32' {
  realize B[B.cii.min_realized, B.cii.extent_realized], [B.cooo.min_realized, B.cooo.extent_realized], [B.yyy_xxx.min_realized, B.yyy_xxx.extent_realized], [B.yy_xx.min_realized, B.yy_xx.extent_realized], [B.y_x.min_realized, B.y_x.extent_realized], [B.my.min_realized, B.my.extent_realized], [B.mx.min_realized, B.mx.extent_realized], [B.coo.min_realized, B.coo.extent_realized], [B.nn.min_realized, B.nn.extent_realized], [B.ky.min_realized, B.ky.extent_realized], [B.kx.min_realized, B.kx.extent_realized], [B.ci.min_realized, B.ci.extent_realized], [B.mk.min_realized, B.mk.extent_realized], [B.co.min_realized, B.co.extent_realized], [B.n.min_realized, B.n.extent_realized] of type `float32' {
   realize A[A.cii.min_realized, A.cii.extent_realized], [A.cooo.min_realized, A.cooo.extent_realized], [A.yyy_xxx.min_realized, A.yyy_xxx.extent_realized], [A.yy_xx.min_realized, A.yy_xx.extent_realized], [A.y_x.min_realized, A.y_x.extent_realized], [A.my.min_realized, A.my.extent_realized], [A.mx.min_realized, A.mx.extent_realized], [A.coo.min_realized, A.coo.extent_realized], [A.nn.min_realized, A.nn.extent_realized], [A.ky.min_realized, A.ky.extent_realized], [A.kx.min_realized, A.kx.extent_realized], [A.ci.min_realized, A.ci.extent_realized], [A.mk.min_realized, A.mk.extent_realized], [A.co.min_realized, A.co.extent_realized], [A.n.min_realized, A.n.extent_realized] of type `float32' {
    produce Out {
     produce C {
      produce B {
       produce A {
        let A.s0.__outermost.loop_extent = 1
        let A.s0.__outermost.loop_max = 0
        let A.s0.__outermost.loop_min = 0
        let B.s0.__outermost.loop_extent = 1
        let B.s0.__outermost.loop_max = 0
        let B.s0.__outermost.loop_min = 0
        let C.s0.__outermost.loop_extent = 1
        let C.s0.__outermost.loop_max = 0
        let C.s0.__outermost.loop_min = 0
        let Out.s0.__outermost.loop_extent = 1
        let Out.s0.__outermost.loop_max = 0
        let Out.s0.__outermost.loop_min = 0
        for (A.s0.__outermost, A.s0.__outermost.loop_min, A.s0.__outermost.loop_extent) {
         let A.s0.n.loop_max = ((0 + (P.extent.1/3600)) - 1)
         let A.s0.n.loop_min = 0
         let A.s0.n.loop_extent = ((((0 + (P.extent.1/3600)) - 1) + 1) - 0)
         gpu_block<Default_GPU> (A.s0.n, A.s0.n.loop_min, A.s0.n.loop_extent) {
          let A.s0.nn.loop_max = ((0 + 16) - 1)
          let A.s0.nn.loop_min = 0
          let A.s0.nn.loop_extent = ((((0 + 16) - 1) + 1) - 0)
          gpu_block<Default_GPU> (A.s0.nn, A.s0.nn.loop_min, A.s0.nn.loop_extent) {
           let A.s0.co.loop_max = ((0 + 4) - 1)
           let A.s0.co.loop_min = 0
           let A.s0.co.loop_extent = ((((0 + 4) - 1) + 1) - 0)
           gpu_block<Default_GPU> (A.s0.co, A.s0.co.loop_min, A.s0.co.loop_extent) {
            let A.s0.mx.loop_max = ((0 + 4) - 1)
            let A.s0.mx.loop_min = 0
            let A.s0.mx.loop_extent = ((((0 + 4) - 1) + 1) - 0)
            gpu_thread<Default_GPU> (A.s0.mx, A.s0.mx.loop_min, A.s0.mx.loop_extent) {
             let A.s0.my.loop_max = ((0 + 4) - 1)
             let A.s0.my.loop_min = 0
             let A.s0.my.loop_extent = ((((0 + 4) - 1) + 1) - 0)
             gpu_thread<Default_GPU> (A.s0.my, A.s0.my.loop_min, A.s0.my.loop_extent) {
              let A.s0.mk.loop_max = ((0 + 4) - 1)
              let A.s0.mk.loop_min = 0
              let A.s0.mk.loop_extent = ((((0 + 4) - 1) + 1) - 0)
              for (A.s0.mk, A.s0.mk.loop_min, A.s0.mk.loop_extent) {
               let A.s0.ci.loop_max = ((0 + 8) - 1)
               let A.s0.ci.loop_min = 0
               let A.s0.ci.loop_extent = ((((0 + 8) - 1) + 1) - 0)
               for (A.s0.ci, A.s0.ci.loop_min, A.s0.ci.loop_extent) {
                let A.s0.yy_xx.loop_max = ((0 + 7) - 1)
                let A.s0.yy_xx.loop_min = 0
                let A.s0.yy_xx.loop_extent = ((((0 + 7) - 1) + 1) - 0)
                for (A.s0.yy_xx, A.s0.yy_xx.loop_min, A.s0.yy_xx.loop_extent) {
                 let A.s0.yyy_xxx.loop_max = ((0 + 7) - 1)
                 let A.s0.yyy_xxx.loop_min = 0
                 let A.s0.yyy_xxx.loop_extent = ((((0 + 7) - 1) + 1) - 0)
                 for (A.s0.yyy_xxx, A.s0.yyy_xxx.loop_min, A.s0.yyy_xxx.loop_extent) {
                  let A.s0.kx.loop_max = ((0 + 3) - 1)
                  let A.s0.kx.loop_min = 0
                  let A.s0.kx.loop_extent = ((((0 + 3) - 1) + 1) - 0)
                  for (A.s0.kx, A.s0.kx.loop_min, A.s0.kx.loop_extent) {
                   let A.s0.ky.loop_max = ((0 + 3) - 1)
                   let A.s0.ky.loop_min = 0
                   let A.s0.ky.loop_extent = ((((0 + 3) - 1) + 1) - 0)
                   for (A.s0.ky, A.s0.ky.loop_min, A.s0.ky.loop_extent) {
                    let A.s0.coo.loop_max = ((0 + 1) - 1)
                    let A.s0.coo.loop_min = 0
                    let A.s0.coo.loop_extent = ((((0 + 1) - 1) + 1) - 0)
                    for (A.s0.coo, A.s0.coo.loop_min, A.s0.coo.loop_extent) {
                     let A.s0.y_x.loop_max = ((0 + 1) - 1)
                     let A.s0.y_x.loop_min = 0
                     let A.s0.y_x.loop_extent = ((((0 + 1) - 1) + 1) - 0)
                     for (A.s0.y_x, A.s0.y_x.loop_min, A.s0.y_x.loop_extent) {
                      let A.s0.cooo.loop_max = ((0 + 8) - 1)
                      let A.s0.cooo.loop_min = 0
                      let A.s0.cooo.loop_extent = ((((0 + 8) - 1) + 1) - 0)
                      vectorized (A.s0.cooo, A.s0.cooo.loop_min, A.s0.cooo.loop_extent) {
                       let A.s0.cii.loop_max = ((0 + 4) - 1)
                       let A.s0.cii.loop_min = 0
                       let A.s0.cii.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                       for (A.s0.cii, A.s0.cii.loop_min, A.s0.cii.loop_extent) {
                        A(A.s0.cii, A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, A.s0.y_x, A.s0.my, A.s0.mx, A.s0.coo, A.s0.nn, A.s0.ky, A.s0.kx, A.s0.ci, A.s0.mk, A.s0.co, A.s0.n) = select((A.s0.cooo == 0), (float32)P_im(((((A.s0.cii + (4*A.s0.ci)) + (32*A.s0.mk)) + (128*A.s0.mx)) + (512*A.s0.nn)), (((((((A.s0.yyy_xxx + (7*A.s0.yy_xx)) + (49*A.s0.y_x)) % 7)*2) + A.s0.ky) + (15*(((((A.s0.yyy_xxx + (7*A.s0.yy_xx)) + (49*A.s0.y_x))/7)*2) + A.s0.kx))) + (225*A.s0.n))), A(A.s0.cii, (A.s0.cooo - 1), A.s0.yyy_xxx, A.s0.yy_xx, A.s0.y_x, A.s0.my, A.s0.mx, A.s0.coo, A.s0.nn, A.s0.ky, A.s0.kx, A.s0.ci, A.s0.mk, A.s0.co, A.s0.n))
                        for (B.s0.__outermost, B.s0.__outermost.loop_min, B.s0.__outermost.loop_extent) {
                         let B.s0.n.loop_max = ((0 + (P.extent.1/3600)) - 1)
                         let B.s0.n.loop_min = 0
                         let B.s0.n.loop_extent = ((((0 + (P.extent.1/3600)) - 1) + 1) - 0)
                         let B.s0.fused.n.loop_extent = 1
                         let B.s0.fused.n.loop_max = A.s0.n
                         let B.s0.fused.n.loop_min = A.s0.n
                         for (B.s0.fused.n, B.s0.fused.n.loop_min, B.s0.fused.n.loop_extent) {
                          let B.s0.nn.loop_max = ((0 + 16) - 1)
                          let B.s0.nn.loop_min = 0
                          let B.s0.nn.loop_extent = ((((0 + 16) - 1) + 1) - 0)
                          let B.s0.fused.nn.loop_extent = 1
                          let B.s0.fused.nn.loop_max = A.s0.nn
                          let B.s0.fused.nn.loop_min = A.s0.nn
                          for (B.s0.fused.nn, B.s0.fused.nn.loop_min, B.s0.fused.nn.loop_extent) {
                           let B.s0.co.loop_max = ((0 + 4) - 1)
                           let B.s0.co.loop_min = 0
                           let B.s0.co.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                           let B.s0.fused.co.loop_extent = 1
                           let B.s0.fused.co.loop_max = A.s0.co
                           let B.s0.fused.co.loop_min = A.s0.co
                           for (B.s0.fused.co, B.s0.fused.co.loop_min, B.s0.fused.co.loop_extent) {
                            let B.s0.mx.loop_max = ((0 + 4) - 1)
                            let B.s0.mx.loop_min = 0
                            let B.s0.mx.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                            let B.s0.fused.mx.loop_extent = 1
                            let B.s0.fused.mx.loop_max = A.s0.mx
                            let B.s0.fused.mx.loop_min = A.s0.mx
                            for (B.s0.fused.mx, B.s0.fused.mx.loop_min, B.s0.fused.mx.loop_extent) {
                             let B.s0.my.loop_max = ((0 + 4) - 1)
                             let B.s0.my.loop_min = 0
                             let B.s0.my.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                             let B.s0.fused.my.loop_extent = 1
                             let B.s0.fused.my.loop_max = A.s0.my
                             let B.s0.fused.my.loop_min = A.s0.my
                             for (B.s0.fused.my, B.s0.fused.my.loop_min, B.s0.fused.my.loop_extent) {
                              let B.s0.mk.loop_max = ((0 + 4) - 1)
                              let B.s0.mk.loop_min = 0
                              let B.s0.mk.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                              let B.s0.fused.mk.loop_extent = 1
                              let B.s0.fused.mk.loop_max = A.s0.mk
                              let B.s0.fused.mk.loop_min = A.s0.mk
                              for (B.s0.fused.mk, B.s0.fused.mk.loop_min, B.s0.fused.mk.loop_extent) {
                               let B.s0.ci.loop_max = ((0 + 8) - 1)
                               let B.s0.ci.loop_min = 0
                               let B.s0.ci.loop_extent = ((((0 + 8) - 1) + 1) - 0)
                               let B.s0.fused.ci.loop_extent = 1
                               let B.s0.fused.ci.loop_max = A.s0.ci
                               let B.s0.fused.ci.loop_min = A.s0.ci
                               for (B.s0.fused.ci, B.s0.fused.ci.loop_min, B.s0.fused.ci.loop_extent) {
                                let B.s0.yy_xx.loop_max = ((0 + 7) - 1)
                                let B.s0.yy_xx.loop_min = 0
                                let B.s0.yy_xx.loop_extent = ((((0 + 7) - 1) + 1) - 0)
                                let B.s0.fused.yy_xx.loop_extent = 1
                                let B.s0.fused.yy_xx.loop_max = A.s0.yy_xx
                                let B.s0.fused.yy_xx.loop_min = A.s0.yy_xx
                                for (B.s0.fused.yy_xx, B.s0.fused.yy_xx.loop_min, B.s0.fused.yy_xx.loop_extent) {
                                 let B.s0.yyy_xxx.loop_max = ((0 + 7) - 1)
                                 let B.s0.yyy_xxx.loop_min = 0
                                 let B.s0.yyy_xxx.loop_extent = ((((0 + 7) - 1) + 1) - 0)
                                 let B.s0.fused.yyy_xxx.loop_extent = 1
                                 let B.s0.fused.yyy_xxx.loop_max = A.s0.yyy_xxx
                                 let B.s0.fused.yyy_xxx.loop_min = A.s0.yyy_xxx
                                 for (B.s0.fused.yyy_xxx, B.s0.fused.yyy_xxx.loop_min, B.s0.fused.yyy_xxx.loop_extent) {
                                  let B.s0.kx.loop_max = ((0 + 3) - 1)
                                  let B.s0.kx.loop_min = 0
                                  let B.s0.kx.loop_extent = ((((0 + 3) - 1) + 1) - 0)
                                  let B.s0.fused.kx.loop_extent = 1
                                  let B.s0.fused.kx.loop_max = A.s0.kx
                                  let B.s0.fused.kx.loop_min = A.s0.kx
                                  for (B.s0.fused.kx, B.s0.fused.kx.loop_min, B.s0.fused.kx.loop_extent) {
                                   let B.s0.ky.loop_max = ((0 + 3) - 1)
                                   let B.s0.ky.loop_min = 0
                                   let B.s0.ky.loop_extent = ((((0 + 3) - 1) + 1) - 0)
                                   let B.s0.fused.ky.loop_extent = 1
                                   let B.s0.fused.ky.loop_max = A.s0.ky
                                   let B.s0.fused.ky.loop_min = A.s0.ky
                                   for (B.s0.fused.ky, B.s0.fused.ky.loop_min, B.s0.fused.ky.loop_extent) {
                                    let B.s0.coo.loop_max = ((0 + 1) - 1)
                                    let B.s0.coo.loop_min = 0
                                    let B.s0.coo.loop_extent = ((((0 + 1) - 1) + 1) - 0)
                                    let B.s0.fused.coo.loop_extent = 1
                                    let B.s0.fused.coo.loop_max = A.s0.coo
                                    let B.s0.fused.coo.loop_min = A.s0.coo
                                    for (B.s0.fused.coo, B.s0.fused.coo.loop_min, B.s0.fused.coo.loop_extent) {
                                     let B.s0.y_x.loop_max = ((0 + 1) - 1)
                                     let B.s0.y_x.loop_min = 0
                                     let B.s0.y_x.loop_extent = ((((0 + 1) - 1) + 1) - 0)
                                     let B.s0.fused.y_x.loop_extent = 1
                                     let B.s0.fused.y_x.loop_max = A.s0.y_x
                                     let B.s0.fused.y_x.loop_min = A.s0.y_x
                                     for (B.s0.fused.y_x, B.s0.fused.y_x.loop_min, B.s0.fused.y_x.loop_extent) {
                                      let B.s0.cooo.loop_max = ((0 + 8) - 1)
                                      let B.s0.cooo.loop_min = 0
                                      let B.s0.cooo.loop_extent = ((((0 + 8) - 1) + 1) - 0)
                                      let B.s0.fused.cooo.loop_extent = 1
                                      let B.s0.fused.cooo.loop_max = A.s0.cooo
                                      let B.s0.fused.cooo.loop_min = A.s0.cooo
                                      for (B.s0.fused.cooo, B.s0.fused.cooo.loop_min, B.s0.fused.cooo.loop_extent) {
                                       let B.s0.cii.loop_max = ((0 + 4) - 1)
                                       let B.s0.cii.loop_min = 0
                                       let B.s0.cii.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                                       let B.s0.fused.cii.loop_extent = 1
                                       let B.s0.fused.cii.loop_max = A.s0.cii
                                       let B.s0.fused.cii.loop_min = A.s0.cii
                                       for (B.s0.fused.cii, B.s0.fused.cii.loop_min, B.s0.fused.cii.loop_extent) {
                                        B(B.s0.fused.cii, B.s0.fused.cooo, B.s0.fused.yyy_xxx, B.s0.fused.yy_xx, B.s0.fused.y_x, B.s0.fused.my, B.s0.fused.mx, B.s0.fused.coo, B.s0.fused.nn, B.s0.fused.ky, B.s0.fused.kx, B.s0.fused.ci, B.s0.fused.mk, B.s0.fused.co, B.s0.fused.n) = select((B.s0.fused.yyy_xxx == 0), (float32)W_im((((B.s0.fused.cooo + (8*B.s0.fused.coo)) + (8*B.s0.fused.co)) + (32*B.s0.fused.my)), ((((B.s0.fused.cii + (4*B.s0.fused.ky)) + (12*B.s0.fused.kx)) + (36*B.s0.fused.ci)) + (288*B.s0.fused.mk))), B(B.s0.fused.cii, B.s0.fused.cooo, (B.s0.fused.yyy_xxx - 1), B.s0.fused.yy_xx, B.s0.fused.y_x, B.s0.fused.my, B.s0.fused.mx, B.s0.fused.coo, B.s0.fused.nn, B.s0.fused.ky, B.s0.fused.kx, B.s0.fused.ci, B.s0.fused.mk, B.s0.fused.co, B.s0.fused.n))
                                        for (C.s0.__outermost, C.s0.__outermost.loop_min, C.s0.__outermost.loop_extent) {
                                         let C.s0.n.loop_max = ((0 + (P.extent.1/3600)) - 1)
                                         let C.s0.n.loop_min = 0
                                         let C.s0.n.loop_extent = ((((0 + (P.extent.1/3600)) - 1) + 1) - 0)
                                         let C.s0.fused.n.loop_extent = 1
                                         let C.s0.fused.n.loop_max = B.s0.fused.n
                                         let C.s0.fused.n.loop_min = B.s0.fused.n
                                         for (C.s0.fused.n, C.s0.fused.n.loop_min, C.s0.fused.n.loop_extent) {
                                          let C.s0.nn.loop_max = ((0 + 16) - 1)
                                          let C.s0.nn.loop_min = 0
                                          let C.s0.nn.loop_extent = ((((0 + 16) - 1) + 1) - 0)
                                          let C.s0.fused.nn.loop_extent = 1
                                          let C.s0.fused.nn.loop_max = B.s0.fused.nn
                                          let C.s0.fused.nn.loop_min = B.s0.fused.nn
                                          for (C.s0.fused.nn, C.s0.fused.nn.loop_min, C.s0.fused.nn.loop_extent) {
                                           let C.s0.co.loop_max = ((0 + 4) - 1)
                                           let C.s0.co.loop_min = 0
                                           let C.s0.co.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                                           let C.s0.fused.co.loop_extent = 1
                                           let C.s0.fused.co.loop_max = B.s0.fused.co
                                           let C.s0.fused.co.loop_min = B.s0.fused.co
                                           for (C.s0.fused.co, C.s0.fused.co.loop_min, C.s0.fused.co.loop_extent) {
                                            let C.s0.mx.loop_max = ((0 + 4) - 1)
                                            let C.s0.mx.loop_min = 0
                                            let C.s0.mx.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                                            let C.s0.fused.mx.loop_extent = 1
                                            let C.s0.fused.mx.loop_max = B.s0.fused.mx
                                            let C.s0.fused.mx.loop_min = B.s0.fused.mx
                                            for (C.s0.fused.mx, C.s0.fused.mx.loop_min, C.s0.fused.mx.loop_extent) {
                                             let C.s0.my.loop_max = ((0 + 4) - 1)
                                             let C.s0.my.loop_min = 0
                                             let C.s0.my.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                                             let C.s0.fused.my.loop_extent = 1
                                             let C.s0.fused.my.loop_max = B.s0.fused.my
                                             let C.s0.fused.my.loop_min = B.s0.fused.my
                                             for (C.s0.fused.my, C.s0.fused.my.loop_min, C.s0.fused.my.loop_extent) {
                                              let C.s0.mk.loop_max = ((0 + 4) - 1)
                                              let C.s0.mk.loop_min = 0
                                              let C.s0.mk.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                                              let C.s0.fused.mk.loop_extent = 1
                                              let C.s0.fused.mk.loop_max = B.s0.fused.mk
                                              let C.s0.fused.mk.loop_min = B.s0.fused.mk
                                              for (C.s0.fused.mk, C.s0.fused.mk.loop_min, C.s0.fused.mk.loop_extent) {
                                               let C.s0.ci.loop_max = ((0 + 8) - 1)
                                               let C.s0.ci.loop_min = 0
                                               let C.s0.ci.loop_extent = ((((0 + 8) - 1) + 1) - 0)
                                               let C.s0.fused.ci.loop_extent = 1
                                               let C.s0.fused.ci.loop_max = B.s0.fused.ci
                                               let C.s0.fused.ci.loop_min = B.s0.fused.ci
                                               for (C.s0.fused.ci, C.s0.fused.ci.loop_min, C.s0.fused.ci.loop_extent) {
                                                let C.s0.yy_xx.loop_max = ((0 + 7) - 1)
                                                let C.s0.yy_xx.loop_min = 0
                                                let C.s0.yy_xx.loop_extent = ((((0 + 7) - 1) + 1) - 0)
                                                let C.s0.fused.yy_xx.loop_extent = 1
                                                let C.s0.fused.yy_xx.loop_max = B.s0.fused.yy_xx
                                                let C.s0.fused.yy_xx.loop_min = B.s0.fused.yy_xx
                                                for (C.s0.fused.yy_xx, C.s0.fused.yy_xx.loop_min, C.s0.fused.yy_xx.loop_extent) {
                                                 let C.s0.yyy_xxx.loop_max = ((0 + 7) - 1)
                                                 let C.s0.yyy_xxx.loop_min = 0
                                                 let C.s0.yyy_xxx.loop_extent = ((((0 + 7) - 1) + 1) - 0)
                                                 let C.s0.fused.yyy_xxx.loop_extent = 1
                                                 let C.s0.fused.yyy_xxx.loop_max = B.s0.fused.yyy_xxx
                                                 let C.s0.fused.yyy_xxx.loop_min = B.s0.fused.yyy_xxx
                                                 for (C.s0.fused.yyy_xxx, C.s0.fused.yyy_xxx.loop_min, C.s0.fused.yyy_xxx.loop_extent) {
                                                  let C.s0.kx.loop_max = ((0 + 3) - 1)
                                                  let C.s0.kx.loop_min = 0
                                                  let C.s0.kx.loop_extent = ((((0 + 3) - 1) + 1) - 0)
                                                  let C.s0.fused.kx.loop_extent = 1
                                                  let C.s0.fused.kx.loop_max = B.s0.fused.kx
                                                  let C.s0.fused.kx.loop_min = B.s0.fused.kx
                                                  for (C.s0.fused.kx, C.s0.fused.kx.loop_min, C.s0.fused.kx.loop_extent) {
                                                   let C.s0.ky.loop_max = ((0 + 3) - 1)
                                                   let C.s0.ky.loop_min = 0
                                                   let C.s0.ky.loop_extent = ((((0 + 3) - 1) + 1) - 0)
                                                   let C.s0.fused.ky.loop_extent = 1
                                                   let C.s0.fused.ky.loop_max = B.s0.fused.ky
                                                   let C.s0.fused.ky.loop_min = B.s0.fused.ky
                                                   for (C.s0.fused.ky, C.s0.fused.ky.loop_min, C.s0.fused.ky.loop_extent) {
                                                    let C.s0.coo.loop_max = ((0 + 1) - 1)
                                                    let C.s0.coo.loop_min = 0
                                                    let C.s0.coo.loop_extent = ((((0 + 1) - 1) + 1) - 0)
                                                    let C.s0.fused.coo.loop_extent = 1
                                                    let C.s0.fused.coo.loop_max = B.s0.fused.coo
                                                    let C.s0.fused.coo.loop_min = B.s0.fused.coo
                                                    for (C.s0.fused.coo, C.s0.fused.coo.loop_min, C.s0.fused.coo.loop_extent) {
                                                     let C.s0.y_x.loop_max = ((0 + 1) - 1)
                                                     let C.s0.y_x.loop_min = 0
                                                     let C.s0.y_x.loop_extent = ((((0 + 1) - 1) + 1) - 0)
                                                     let C.s0.fused.y_x.loop_extent = 1
                                                     let C.s0.fused.y_x.loop_max = B.s0.fused.y_x
                                                     let C.s0.fused.y_x.loop_min = B.s0.fused.y_x
                                                     for (C.s0.fused.y_x, C.s0.fused.y_x.loop_min, C.s0.fused.y_x.loop_extent) {
                                                      let C.s0.cooo.loop_max = ((0 + 8) - 1)
                                                      let C.s0.cooo.loop_min = 0
                                                      let C.s0.cooo.loop_extent = ((((0 + 8) - 1) + 1) - 0)
                                                      let C.s0.fused.cooo.loop_extent = 1
                                                      let C.s0.fused.cooo.loop_max = B.s0.fused.cooo
                                                      let C.s0.fused.cooo.loop_min = B.s0.fused.cooo
                                                      for (C.s0.fused.cooo, C.s0.fused.cooo.loop_min, C.s0.fused.cooo.loop_extent) {
                                                       let C.s0.cii.loop_max = ((0 + 4) - 1)
                                                       let C.s0.cii.loop_min = 0
                                                       let C.s0.cii.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                                                       let C.s0.fused.cii.loop_extent = 1
                                                       let C.s0.fused.cii.loop_max = B.s0.fused.cii
                                                       let C.s0.fused.cii.loop_min = B.s0.fused.cii
                                                       for (C.s0.fused.cii, C.s0.fused.cii.loop_min, C.s0.fused.cii.loop_extent) {
                                                        C(C.s0.fused.cii, C.s0.fused.cooo, C.s0.fused.yyy_xxx, C.s0.fused.yy_xx, C.s0.fused.y_x, C.s0.fused.my, C.s0.fused.mx, C.s0.fused.coo, C.s0.fused.nn, C.s0.fused.ky, C.s0.fused.kx, C.s0.fused.ci, C.s0.fused.mk, C.s0.fused.co, C.s0.fused.n) = (select((((((C.s0.fused.cii == 0) && (C.s0.fused.ci == 0)) && (C.s0.fused.mk == 0)) && (C.s0.fused.ky == 0)) && (C.s0.fused.kx == 0)), 0.000000f, select((C.s0.fused.cii == 0), select((C.s0.fused.ky == 0), select((C.s0.fused.kx == 0), select((C.s0.fused.ci == 0), C(((C.s0.fused.cii + 4) - 1), C.s0.fused.cooo, C.s0.fused.yyy_xxx, C.s0.fused.yy_xx, C.s0.fused.y_x, C.s0.fused.my, C.s0.fused.mx, C.s0.fused.coo, C.s0.fused.nn, ((C.s0.fused.ky + 3) - 1), ((C.s0.fused.kx + 3) - 1), ((C.s0.fused.ci + 8) - 1), (C.s0.fused.mk - 1), C.s0.fused.co, C.s0.fused.n), C(((C.s0.fused.cii + 4) - 1), C.s0.fused.cooo, C.s0.fused.yyy_xxx, C.s0.fused.yy_xx, C.s0.fused.y_x, C.s0.fused.my, C.s0.fused.mx, C.s0.fused.coo, C.s0.fused.nn, ((C.s0.fused.ky + 3) - 1), ((C.s0.fused.kx + 3) - 1), (C.s0.fused.ci - 1), C.s0.fused.mk, C.s0.fused.co, C.s0.fused.n)), C(((C.s0.fused.cii + 4) - 1), C.s0.fused.cooo, C.s0.fused.yyy_xxx, C.s0.fused.yy_xx, C.s0.fused.y_x, C.s0.fused.my, C.s0.fused.mx, C.s0.fused.coo, C.s0.fused.nn, ((C.s0.fused.ky + 3) - 1), (C.s0.fused.kx - 1), C.s0.fused.ci, C.s0.fused.mk, C.s0.fused.co, C.s0.fused.n)), C(((C.s0.fused.cii + 4) - 1), C.s0.fused.cooo, C.s0.fused.yyy_xxx, C.s0.fused.yy_xx, C.s0.fused.y_x, C.s0.fused.my, C.s0.fused.mx, C.s0.fused.coo, C.s0.fused.nn, (C.s0.fused.ky - 1), C.s0.fused.kx, C.s0.fused.ci, C.s0.fused.mk, C.s0.fused.co, C.s0.fused.n)), C((C.s0.fused.cii - 1), C.s0.fused.cooo, C.s0.fused.yyy_xxx, C.s0.fused.yy_xx, C.s0.fused.y_x, C.s0.fused.my, C.s0.fused.mx, C.s0.fused.coo, C.s0.fused.nn, C.s0.fused.ky, C.s0.fused.kx, C.s0.fused.ci, C.s0.fused.mk, C.s0.fused.co, C.s0.fused.n))) + (A(C.s0.fused.cii, C.s0.fused.cooo, C.s0.fused.yyy_xxx, C.s0.fused.yy_xx, C.s0.fused.y_x, C.s0.fused.my, C.s0.fused.mx, C.s0.fused.coo, C.s0.fused.nn, C.s0.fused.ky, C.s0.fused.kx, C.s0.fused.ci, C.s0.fused.mk, C.s0.fused.co, C.s0.fused.n)*B(C.s0.fused.cii, C.s0.fused.cooo, C.s0.fused.yyy_xxx, C.s0.fused.yy_xx, C.s0.fused.y_x, C.s0.fused.my, C.s0.fused.mx, C.s0.fused.coo, C.s0.fused.nn, C.s0.fused.ky, C.s0.fused.kx, C.s0.fused.ci, C.s0.fused.mk, C.s0.fused.co, C.s0.fused.n)))
                                                        for (Out.s0.__outermost, Out.s0.__outermost.loop_min, Out.s0.__outermost.loop_extent) {
                                                         let Out.s0.n.loop_max = ((0 + (P.extent.1/3600)) - 1)
                                                         let Out.s0.n.loop_min = 0
                                                         let Out.s0.n.loop_extent = ((((0 + (P.extent.1/3600)) - 1) + 1) - 0)
                                                         let Out.s0.fused.n.loop_extent = 1
                                                         let Out.s0.fused.n.loop_max = C.s0.fused.n
                                                         let Out.s0.fused.n.loop_min = C.s0.fused.n
                                                         for (Out.s0.fused.n, Out.s0.fused.n.loop_min, Out.s0.fused.n.loop_extent) {
                                                          let Out.s0.nn.loop_max = ((0 + 16) - 1)
                                                          let Out.s0.nn.loop_min = 0
                                                          let Out.s0.nn.loop_extent = ((((0 + 16) - 1) + 1) - 0)
                                                          let Out.s0.fused.nn.loop_extent = 1
                                                          let Out.s0.fused.nn.loop_max = C.s0.fused.nn
                                                          let Out.s0.fused.nn.loop_min = C.s0.fused.nn
                                                          for (Out.s0.fused.nn, Out.s0.fused.nn.loop_min, Out.s0.fused.nn.loop_extent) {
                                                           let Out.s0.co.loop_max = ((0 + 4) - 1)
                                                           let Out.s0.co.loop_min = 0
                                                           let Out.s0.co.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                                                           let Out.s0.fused.co.loop_extent = 1
                                                           let Out.s0.fused.co.loop_max = C.s0.fused.co
                                                           let Out.s0.fused.co.loop_min = C.s0.fused.co
                                                           for (Out.s0.fused.co, Out.s0.fused.co.loop_min, Out.s0.fused.co.loop_extent) {
                                                            let Out.s0.mx.loop_max = ((0 + 4) - 1)
                                                            let Out.s0.mx.loop_min = 0
                                                            let Out.s0.mx.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                                                            let Out.s0.fused.mx.loop_extent = 1
                                                            let Out.s0.fused.mx.loop_max = C.s0.fused.mx
                                                            let Out.s0.fused.mx.loop_min = C.s0.fused.mx
                                                            for (Out.s0.fused.mx, Out.s0.fused.mx.loop_min, Out.s0.fused.mx.loop_extent) {
                                                             let Out.s0.my.loop_max = ((0 + 4) - 1)
                                                             let Out.s0.my.loop_min = 0
                                                             let Out.s0.my.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                                                             let Out.s0.fused.my.loop_extent = 1
                                                             let Out.s0.fused.my.loop_max = C.s0.fused.my
                                                             let Out.s0.fused.my.loop_min = C.s0.fused.my
                                                             for (Out.s0.fused.my, Out.s0.fused.my.loop_min, Out.s0.fused.my.loop_extent) {
                                                              let Out.s0.yy_xx.loop_max = ((0 + 7) - 1)
                                                              let Out.s0.yy_xx.loop_min = 0
                                                              let Out.s0.yy_xx.loop_extent = ((((0 + 7) - 1) + 1) - 0)
                                                              let Out.s0.fused.yy_xx.loop_extent = 1
                                                              let Out.s0.fused.yy_xx.loop_max = C.s0.fused.yy_xx
                                                              let Out.s0.fused.yy_xx.loop_min = C.s0.fused.yy_xx
                                                              for (Out.s0.fused.yy_xx, Out.s0.fused.yy_xx.loop_min, Out.s0.fused.yy_xx.loop_extent) {
                                                               let Out.s0.yyy_xxx.loop_max = ((0 + 7) - 1)
                                                               let Out.s0.yyy_xxx.loop_min = 0
                                                               let Out.s0.yyy_xxx.loop_extent = ((((0 + 7) - 1) + 1) - 0)
                                                               let Out.s0.fused.yyy_xxx.loop_extent = 1
                                                               let Out.s0.fused.yyy_xxx.loop_max = C.s0.fused.yyy_xxx
                                                               let Out.s0.fused.yyy_xxx.loop_min = C.s0.fused.yyy_xxx
                                                               for (Out.s0.fused.yyy_xxx, Out.s0.fused.yyy_xxx.loop_min, Out.s0.fused.yyy_xxx.loop_extent) {
                                                                let Out.s0.coo.loop_max = ((0 + 1) - 1)
                                                                let Out.s0.coo.loop_min = 0
                                                                let Out.s0.coo.loop_extent = ((((0 + 1) - 1) + 1) - 0)
                                                                let Out.s0.fused.coo.loop_extent = 1
                                                                let Out.s0.fused.coo.loop_max = C.s0.fused.coo
                                                                let Out.s0.fused.coo.loop_min = C.s0.fused.coo
                                                                for (Out.s0.fused.coo, Out.s0.fused.coo.loop_min, Out.s0.fused.coo.loop_extent) {
                                                                 let Out.s0.y_x.loop_max = ((0 + 1) - 1)
                                                                 let Out.s0.y_x.loop_min = 0
                                                                 let Out.s0.y_x.loop_extent = ((((0 + 1) - 1) + 1) - 0)
                                                                 let Out.s0.fused.y_x.loop_extent = 1
                                                                 let Out.s0.fused.y_x.loop_max = C.s0.fused.y_x
                                                                 let Out.s0.fused.y_x.loop_min = C.s0.fused.y_x
                                                                 for (Out.s0.fused.y_x, Out.s0.fused.y_x.loop_min, Out.s0.fused.y_x.loop_extent) {
                                                                  let Out.s0.cooo.loop_max = ((0 + 8) - 1)
                                                                  let Out.s0.cooo.loop_min = 0
                                                                  let Out.s0.cooo.loop_extent = ((((0 + 8) - 1) + 1) - 0)
                                                                  let Out.s0.fused.cooo.loop_extent = 1
                                                                  let Out.s0.fused.cooo.loop_max = C.s0.fused.cooo
                                                                  let Out.s0.fused.cooo.loop_min = C.s0.fused.cooo
                                                                  for (Out.s0.fused.cooo, Out.s0.fused.cooo.loop_min, Out.s0.fused.cooo.loop_extent) {
                                                                   Out(Out.s0.fused.cooo, Out.s0.fused.yyy_xxx, Out.s0.fused.yy_xx, Out.s0.fused.y_x, Out.s0.fused.my, Out.s0.fused.mx, Out.s0.fused.coo, Out.s0.fused.nn, Out.s0.fused.co, Out.s0.fused.n) = select((((((C.s0.fused.cii == 3) && (C.s0.fused.ci == 7)) && (C.s0.fused.mk == 3)) && (C.s0.fused.ky == 2)) && (C.s0.fused.kx == 2)), C(C.s0.fused.cii, C.s0.fused.cooo, C.s0.fused.yyy_xxx, C.s0.fused.yy_xx, C.s0.fused.y_x, C.s0.fused.my, C.s0.fused.mx, C.s0.fused.coo, C.s0.fused.nn, C.s0.fused.ky, C.s0.fused.kx, C.s0.fused.ci, C.s0.fused.mk, C.s0.fused.co, C.s0.fused.n))
                                                                  }
                                                                 }
                                                                }
                                                               }
                                                              }
                                                             }
                                                            }
                                                           }
                                                          }
                                                         }
                                                        }
                                                       }
                                                      }
                                                     }
                                                    }
                                                   }
                                                  }
                                                 }
                                                }
                                               }
                                              }
                                             }
                                            }
                                           }
                                          }
                                         }
                                        }
                                       }
                                      }
                                     }
                                    }
                                   }
                                  }
                                 }
                                }
                               }
                              }
                             }
                            }
                           }
                          }
                         }
                        }
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
    consume C {
     consume B {
      consume A {
       0
      }
     }
    }
   }
  }
 }
}

Inlining W_im



Input to CSE select((B.s0.fused.yyy_xxx == 0), (let W_im._1 = ((((B.s0.fused.cii + (4*B.s0.fused.ky)) + (12*B.s0.fused.kx)) + (36*B.s0.fused.ci)) + (288*B.s0.fused.mk)) in (let W_im._0 = (((B.s0.fused.cooo + (8*B.s0.fused.coo)) + (8*B.s0.fused.co)) + (32*B.s0.fused.my)) in (float32)W(W_im._0, W_im._1))), (float32)B(B.s0.fused.cii, B.s0.fused.cooo, (B.s0.fused.yyy_xxx - 1), B.s0.fused.yy_xx, B.s0.fused.y_x, B.s0.fused.my, B.s0.fused.mx, B.s0.fused.coo, B.s0.fused.nn, B.s0.fused.ky, B.s0.fused.kx, B.s0.fused.ci, B.s0.fused.mk, B.s0.fused.co, B.s0.fused.n))
After removing lets: select((B.s0.fused.yyy_xxx == 0), (float32)W((((B.s0.fused.cooo + (8*B.s0.fused.coo)) + (8*B.s0.fused.co)) + (32*B.s0.fused.my)), ((((B.s0.fused.cii + (4*B.s0.fused.ky)) + (12*B.s0.fused.kx)) + (36*B.s0.fused.ci)) + (288*B.s0.fused.mk))), (float32)B(B.s0.fused.cii, B.s0.fused.cooo, (B.s0.fused.yyy_xxx - 1), B.s0.fused.yy_xx, B.s0.fused.y_x, B.s0.fused.my, B.s0.fused.mx, B.s0.fused.coo, B.s0.fused.nn, B.s0.fused.ky, B.s0.fused.kx, B.s0.fused.ci, B.s0.fused.mk, B.s0.fused.co, B.s0.fused.n))
Include: select((B.s0.fused.yyy_xxx == 0), (float32)W((((B.s0.fused.cooo + (8*B.s0.fused.coo)) + (8*B.s0.fused.co)) + (32*B.s0.fused.my)), ((((B.s0.fused.cii + (4*B.s0.fused.ky)) + (12*B.s0.fused.kx)) + (36*B.s0.fused.ci)) + (288*B.s0.fused.mk))), (float32)B(B.s0.fused.cii, B.s0.fused.cooo, (B.s0.fused.yyy_xxx - 1), B.s0.fused.yy_xx, B.s0.fused.y_x, B.s0.fused.my, B.s0.fused.mx, B.s0.fused.coo, B.s0.fused.nn, B.s0.fused.ky, B.s0.fused.kx, B.s0.fused.ci, B.s0.fused.mk, B.s0.fused.co, B.s0.fused.n)); should extract: 1
Include: (B.s0.fused.yyy_xxx == 0); should extract: 1
Include: B.s0.fused.yyy_xxx; should extract: 0
Include: 0; should extract: 0
Include: (float32)W((((B.s0.fused.cooo + (8*B.s0.fused.coo)) + (8*B.s0.fused.co)) + (32*B.s0.fused.my)), ((((B.s0.fused.cii + (4*B.s0.fused.ky)) + (12*B.s0.fused.kx)) + (36*B.s0.fused.ci)) + (288*B.s0.fused.mk))); should extract: 1
Include: (((B.s0.fused.cooo + (8*B.s0.fused.coo)) + (8*B.s0.fused.co)) + (32*B.s0.fused.my)); should extract: 1
Include: ((B.s0.fused.cooo + (8*B.s0.fused.coo)) + (8*B.s0.fused.co)); should extract: 1
Include: (B.s0.fused.cooo + (8*B.s0.fused.coo)); should extract: 1
Include: B.s0.fused.cooo; should extract: 0
Include: (8*B.s0.fused.coo); should extract: 0
Include: 8; should extract: 0
Include: B.s0.fused.coo; should extract: 0
Include: (8*B.s0.fused.co); should extract: 0
Include: 8; should extract: 0
Include: B.s0.fused.co; should extract: 0
Include: (32*B.s0.fused.my); should extract: 0
Include: 32; should extract: 0
Include: B.s0.fused.my; should extract: 0
Include: ((((B.s0.fused.cii + (4*B.s0.fused.ky)) + (12*B.s0.fused.kx)) + (36*B.s0.fused.ci)) + (288*B.s0.fused.mk)); should extract: 1
Include: (((B.s0.fused.cii + (4*B.s0.fused.ky)) + (12*B.s0.fused.kx)) + (36*B.s0.fused.ci)); should extract: 1
Include: ((B.s0.fused.cii + (4*B.s0.fused.ky)) + (12*B.s0.fused.kx)); should extract: 1
Include: (B.s0.fused.cii + (4*B.s0.fused.ky)); should extract: 1
Include: B.s0.fused.cii; should extract: 0
Include: (4*B.s0.fused.ky); should extract: 0
Include: 4; should extract: 0
Include: B.s0.fused.ky; should extract: 0
Include: (12*B.s0.fused.kx); should extract: 0
Include: 12; should extract: 0
Include: B.s0.fused.kx; should extract: 0
Include: (36*B.s0.fused.ci); should extract: 0
Include: 36; should extract: 0
Include: B.s0.fused.ci; should extract: 0
Include: (288*B.s0.fused.mk); should extract: 0
Include: 288; should extract: 0
Include: B.s0.fused.mk; should extract: 0
Include: (float32)B(B.s0.fused.cii, B.s0.fused.cooo, (B.s0.fused.yyy_xxx - 1), B.s0.fused.yy_xx, B.s0.fused.y_x, B.s0.fused.my, B.s0.fused.mx, B.s0.fused.coo, B.s0.fused.nn, B.s0.fused.ky, B.s0.fused.kx, B.s0.fused.ci, B.s0.fused.mk, B.s0.fused.co, B.s0.fused.n); should extract: 1
Include: B.s0.fused.cii; should extract: 0
Include: B.s0.fused.cooo; should extract: 0
Include: (B.s0.fused.yyy_xxx - 1); should extract: 0
Include: B.s0.fused.yyy_xxx; should extract: 0
Include: 1; should extract: 0
Include: B.s0.fused.yy_xx; should extract: 0
Include: B.s0.fused.y_x; should extract: 0
Include: B.s0.fused.my; should extract: 0
Include: B.s0.fused.mx; should extract: 0
Include: B.s0.fused.coo; should extract: 0
Include: B.s0.fused.nn; should extract: 0
Include: B.s0.fused.ky; should extract: 0
Include: B.s0.fused.kx; should extract: 0
Include: B.s0.fused.ci; should extract: 0
Include: B.s0.fused.mk; should extract: 0
Include: B.s0.fused.co; should extract: 0
Include: B.s0.fused.n; should extract: 0
Canonical form without lets select((B.s0.fused.yyy_xxx == 0), (float32)W((((B.s0.fused.cooo + (8*B.s0.fused.coo)) + (8*B.s0.fused.co)) + (32*B.s0.fused.my)), ((((B.s0.fused.cii + (4*B.s0.fused.ky)) + (12*B.s0.fused.kx)) + (36*B.s0.fused.ci)) + (288*B.s0.fused.mk))), (float32)B(B.s0.fused.cii, B.s0.fused.cooo, (B.s0.fused.yyy_xxx - 1), B.s0.fused.yy_xx, B.s0.fused.y_x, B.s0.fused.my, B.s0.fused.mx, B.s0.fused.coo, B.s0.fused.nn, B.s0.fused.ky, B.s0.fused.kx, B.s0.fused.ci, B.s0.fused.mk, B.s0.fused.co, B.s0.fused.n))
0: B.s0.fused.yyy_xxx, 0
1: 0, 0
2: (B.s0.fused.yyy_xxx == 0), 1
3: B.s0.fused.cooo, 0
4: 8, 0
5: B.s0.fused.coo, 0
6: (8*B.s0.fused.coo), 0
7: (B.s0.fused.cooo + (8*B.s0.fused.coo)), 1
8: B.s0.fused.co, 0
9: (8*B.s0.fused.co), 0
10: ((B.s0.fused.cooo + (8*B.s0.fused.coo)) + (8*B.s0.fused.co)), 1
11: 32, 0
12: B.s0.fused.my, 0
13: (32*B.s0.fused.my), 0
14: (((B.s0.fused.cooo + (8*B.s0.fused.coo)) + (8*B.s0.fused.co)) + (32*B.s0.fused.my)), 1
15: B.s0.fused.cii, 0
16: 4, 0
17: B.s0.fused.ky, 0
18: (4*B.s0.fused.ky), 0
19: (B.s0.fused.cii + (4*B.s0.fused.ky)), 1
20: 12, 0
21: B.s0.fused.kx, 0
22: (12*B.s0.fused.kx), 0
23: ((B.s0.fused.cii + (4*B.s0.fused.ky)) + (12*B.s0.fused.kx)), 1
24: 36, 0
25: B.s0.fused.ci, 0
26: (36*B.s0.fused.ci), 0
27: (((B.s0.fused.cii + (4*B.s0.fused.ky)) + (12*B.s0.fused.kx)) + (36*B.s0.fused.ci)), 1
28: 288, 0
29: B.s0.fused.mk, 0
30: (288*B.s0.fused.mk), 0
31: ((((B.s0.fused.cii + (4*B.s0.fused.ky)) + (12*B.s0.fused.kx)) + (36*B.s0.fused.ci)) + (288*B.s0.fused.mk)), 1
32: (float32)W((((B.s0.fused.cooo + (8*B.s0.fused.coo)) + (8*B.s0.fused.co)) + (32*B.s0.fused.my)), ((((B.s0.fused.cii + (4*B.s0.fused.ky)) + (12*B.s0.fused.kx)) + (36*B.s0.fused.ci)) + (288*B.s0.fused.mk))), 1
33: 1, 0
34: (B.s0.fused.yyy_xxx - 1), 0
35: B.s0.fused.yy_xx, 0
36: B.s0.fused.y_x, 0
37: B.s0.fused.mx, 0
38: B.s0.fused.nn, 0
39: B.s0.fused.n, 0
40: (float32)B(B.s0.fused.cii, B.s0.fused.cooo, (B.s0.fused.yyy_xxx - 1), B.s0.fused.yy_xx, B.s0.fused.y_x, B.s0.fused.my, B.s0.fused.mx, B.s0.fused.coo, B.s0.fused.nn, B.s0.fused.ky, B.s0.fused.kx, B.s0.fused.ci, B.s0.fused.mk, B.s0.fused.co, B.s0.fused.n), 1
41: select((B.s0.fused.yyy_xxx == 0), (float32)W((((B.s0.fused.cooo + (8*B.s0.fused.coo)) + (8*B.s0.fused.co)) + (32*B.s0.fused.my)), ((((B.s0.fused.cii + (4*B.s0.fused.ky)) + (12*B.s0.fused.kx)) + (36*B.s0.fused.ci)) + (288*B.s0.fused.mk))), (float32)B(B.s0.fused.cii, B.s0.fused.cooo, (B.s0.fused.yyy_xxx - 1), B.s0.fused.yy_xx, B.s0.fused.y_x, B.s0.fused.my, B.s0.fused.mx, B.s0.fused.coo, B.s0.fused.nn, B.s0.fused.ky, B.s0.fused.kx, B.s0.fused.ci, B.s0.fused.mk, B.s0.fused.co, B.s0.fused.n)), 1
With variables select((B.s0.fused.yyy_xxx == 0), (float32)W((((B.s0.fused.cooo + (8*B.s0.fused.coo)) + (8*B.s0.fused.co)) + (32*B.s0.fused.my)), ((((B.s0.fused.cii + (4*B.s0.fused.ky)) + (12*B.s0.fused.kx)) + (36*B.s0.fused.ci)) + (288*B.s0.fused.mk))), (float32)B(B.s0.fused.cii, B.s0.fused.cooo, (B.s0.fused.yyy_xxx - 1), B.s0.fused.yy_xx, B.s0.fused.y_x, B.s0.fused.my, B.s0.fused.mx, B.s0.fused.coo, B.s0.fused.nn, B.s0.fused.ky, B.s0.fused.kx, B.s0.fused.ci, B.s0.fused.mk, B.s0.fused.co, B.s0.fused.n))
With lets: select((B.s0.fused.yyy_xxx == 0), (float32)W((((B.s0.fused.cooo + (8*B.s0.fused.coo)) + (8*B.s0.fused.co)) + (32*B.s0.fused.my)), ((((B.s0.fused.cii + (4*B.s0.fused.ky)) + (12*B.s0.fused.kx)) + (36*B.s0.fused.ci)) + (288*B.s0.fused.mk))), (float32)B(B.s0.fused.cii, B.s0.fused.cooo, (B.s0.fused.yyy_xxx - 1), B.s0.fused.yy_xx, B.s0.fused.y_x, B.s0.fused.my, B.s0.fused.mx, B.s0.fused.coo, B.s0.fused.nn, B.s0.fused.ky, B.s0.fused.kx, B.s0.fused.ci, B.s0.fused.mk, B.s0.fused.co, B.s0.fused.n))
for (.__root, 0, 1) {
 realize C[C.cii.min_realized, C.cii.extent_realized], [C.cooo.min_realized, C.cooo.extent_realized], [C.yyy_xxx.min_realized, C.yyy_xxx.extent_realized], [C.yy_xx.min_realized, C.yy_xx.extent_realized], [C.y_x.min_realized, C.y_x.extent_realized], [C.my.min_realized, C.my.extent_realized], [C.mx.min_realized, C.mx.extent_realized], [C.coo.min_realized, C.coo.extent_realized], [C.nn.min_realized, C.nn.extent_realized], [C.ky.min_realized, C.ky.extent_realized], [C.kx.min_realized, C.kx.extent_realized], [C.ci.min_realized, C.ci.extent_realized], [C.mk.min_realized, C.mk.extent_realized], [C.co.min_realized, C.co.extent_realized], [C.n.min_realized, C.n.extent_realized] of type `float32' {
  realize B[B.cii.min_realized, B.cii.extent_realized], [B.cooo.min_realized, B.cooo.extent_realized], [B.yyy_xxx.min_realized, B.yyy_xxx.extent_realized], [B.yy_xx.min_realized, B.yy_xx.extent_realized], [B.y_x.min_realized, B.y_x.extent_realized], [B.my.min_realized, B.my.extent_realized], [B.mx.min_realized, B.mx.extent_realized], [B.coo.min_realized, B.coo.extent_realized], [B.nn.min_realized, B.nn.extent_realized], [B.ky.min_realized, B.ky.extent_realized], [B.kx.min_realized, B.kx.extent_realized], [B.ci.min_realized, B.ci.extent_realized], [B.mk.min_realized, B.mk.extent_realized], [B.co.min_realized, B.co.extent_realized], [B.n.min_realized, B.n.extent_realized] of type `float32' {
   realize A[A.cii.min_realized, A.cii.extent_realized], [A.cooo.min_realized, A.cooo.extent_realized], [A.yyy_xxx.min_realized, A.yyy_xxx.extent_realized], [A.yy_xx.min_realized, A.yy_xx.extent_realized], [A.y_x.min_realized, A.y_x.extent_realized], [A.my.min_realized, A.my.extent_realized], [A.mx.min_realized, A.mx.extent_realized], [A.coo.min_realized, A.coo.extent_realized], [A.nn.min_realized, A.nn.extent_realized], [A.ky.min_realized, A.ky.extent_realized], [A.kx.min_realized, A.kx.extent_realized], [A.ci.min_realized, A.ci.extent_realized], [A.mk.min_realized, A.mk.extent_realized], [A.co.min_realized, A.co.extent_realized], [A.n.min_realized, A.n.extent_realized] of type `float32' {
    produce Out {
     produce C {
      produce B {
       produce A {
        let A.s0.__outermost.loop_extent = 1
        let A.s0.__outermost.loop_max = 0
        let A.s0.__outermost.loop_min = 0
        let B.s0.__outermost.loop_extent = 1
        let B.s0.__outermost.loop_max = 0
        let B.s0.__outermost.loop_min = 0
        let C.s0.__outermost.loop_extent = 1
        let C.s0.__outermost.loop_max = 0
        let C.s0.__outermost.loop_min = 0
        let Out.s0.__outermost.loop_extent = 1
        let Out.s0.__outermost.loop_max = 0
        let Out.s0.__outermost.loop_min = 0
        for (A.s0.__outermost, A.s0.__outermost.loop_min, A.s0.__outermost.loop_extent) {
         let A.s0.n.loop_max = ((0 + (P.extent.1/3600)) - 1)
         let A.s0.n.loop_min = 0
         let A.s0.n.loop_extent = ((((0 + (P.extent.1/3600)) - 1) + 1) - 0)
         gpu_block<Default_GPU> (A.s0.n, A.s0.n.loop_min, A.s0.n.loop_extent) {
          let A.s0.nn.loop_max = ((0 + 16) - 1)
          let A.s0.nn.loop_min = 0
          let A.s0.nn.loop_extent = ((((0 + 16) - 1) + 1) - 0)
          gpu_block<Default_GPU> (A.s0.nn, A.s0.nn.loop_min, A.s0.nn.loop_extent) {
           let A.s0.co.loop_max = ((0 + 4) - 1)
           let A.s0.co.loop_min = 0
           let A.s0.co.loop_extent = ((((0 + 4) - 1) + 1) - 0)
           gpu_block<Default_GPU> (A.s0.co, A.s0.co.loop_min, A.s0.co.loop_extent) {
            let A.s0.mx.loop_max = ((0 + 4) - 1)
            let A.s0.mx.loop_min = 0
            let A.s0.mx.loop_extent = ((((0 + 4) - 1) + 1) - 0)
            gpu_thread<Default_GPU> (A.s0.mx, A.s0.mx.loop_min, A.s0.mx.loop_extent) {
             let A.s0.my.loop_max = ((0 + 4) - 1)
             let A.s0.my.loop_min = 0
             let A.s0.my.loop_extent = ((((0 + 4) - 1) + 1) - 0)
             gpu_thread<Default_GPU> (A.s0.my, A.s0.my.loop_min, A.s0.my.loop_extent) {
              let A.s0.mk.loop_max = ((0 + 4) - 1)
              let A.s0.mk.loop_min = 0
              let A.s0.mk.loop_extent = ((((0 + 4) - 1) + 1) - 0)
              for (A.s0.mk, A.s0.mk.loop_min, A.s0.mk.loop_extent) {
               let A.s0.ci.loop_max = ((0 + 8) - 1)
               let A.s0.ci.loop_min = 0
               let A.s0.ci.loop_extent = ((((0 + 8) - 1) + 1) - 0)
               for (A.s0.ci, A.s0.ci.loop_min, A.s0.ci.loop_extent) {
                let A.s0.yy_xx.loop_max = ((0 + 7) - 1)
                let A.s0.yy_xx.loop_min = 0
                let A.s0.yy_xx.loop_extent = ((((0 + 7) - 1) + 1) - 0)
                for (A.s0.yy_xx, A.s0.yy_xx.loop_min, A.s0.yy_xx.loop_extent) {
                 let A.s0.yyy_xxx.loop_max = ((0 + 7) - 1)
                 let A.s0.yyy_xxx.loop_min = 0
                 let A.s0.yyy_xxx.loop_extent = ((((0 + 7) - 1) + 1) - 0)
                 for (A.s0.yyy_xxx, A.s0.yyy_xxx.loop_min, A.s0.yyy_xxx.loop_extent) {
                  let A.s0.kx.loop_max = ((0 + 3) - 1)
                  let A.s0.kx.loop_min = 0
                  let A.s0.kx.loop_extent = ((((0 + 3) - 1) + 1) - 0)
                  for (A.s0.kx, A.s0.kx.loop_min, A.s0.kx.loop_extent) {
                   let A.s0.ky.loop_max = ((0 + 3) - 1)
                   let A.s0.ky.loop_min = 0
                   let A.s0.ky.loop_extent = ((((0 + 3) - 1) + 1) - 0)
                   for (A.s0.ky, A.s0.ky.loop_min, A.s0.ky.loop_extent) {
                    let A.s0.coo.loop_max = ((0 + 1) - 1)
                    let A.s0.coo.loop_min = 0
                    let A.s0.coo.loop_extent = ((((0 + 1) - 1) + 1) - 0)
                    for (A.s0.coo, A.s0.coo.loop_min, A.s0.coo.loop_extent) {
                     let A.s0.y_x.loop_max = ((0 + 1) - 1)
                     let A.s0.y_x.loop_min = 0
                     let A.s0.y_x.loop_extent = ((((0 + 1) - 1) + 1) - 0)
                     for (A.s0.y_x, A.s0.y_x.loop_min, A.s0.y_x.loop_extent) {
                      let A.s0.cooo.loop_max = ((0 + 8) - 1)
                      let A.s0.cooo.loop_min = 0
                      let A.s0.cooo.loop_extent = ((((0 + 8) - 1) + 1) - 0)
                      vectorized (A.s0.cooo, A.s0.cooo.loop_min, A.s0.cooo.loop_extent) {
                       let A.s0.cii.loop_max = ((0 + 4) - 1)
                       let A.s0.cii.loop_min = 0
                       let A.s0.cii.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                       for (A.s0.cii, A.s0.cii.loop_min, A.s0.cii.loop_extent) {
                        A(A.s0.cii, A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, A.s0.y_x, A.s0.my, A.s0.mx, A.s0.coo, A.s0.nn, A.s0.ky, A.s0.kx, A.s0.ci, A.s0.mk, A.s0.co, A.s0.n) = select((A.s0.cooo == 0), (float32)P_im(((((A.s0.cii + (4*A.s0.ci)) + (32*A.s0.mk)) + (128*A.s0.mx)) + (512*A.s0.nn)), (((((((A.s0.yyy_xxx + (7*A.s0.yy_xx)) + (49*A.s0.y_x)) % 7)*2) + A.s0.ky) + (15*(((((A.s0.yyy_xxx + (7*A.s0.yy_xx)) + (49*A.s0.y_x))/7)*2) + A.s0.kx))) + (225*A.s0.n))), A(A.s0.cii, (A.s0.cooo - 1), A.s0.yyy_xxx, A.s0.yy_xx, A.s0.y_x, A.s0.my, A.s0.mx, A.s0.coo, A.s0.nn, A.s0.ky, A.s0.kx, A.s0.ci, A.s0.mk, A.s0.co, A.s0.n))
                        for (B.s0.__outermost, B.s0.__outermost.loop_min, B.s0.__outermost.loop_extent) {
                         let B.s0.n.loop_max = ((0 + (P.extent.1/3600)) - 1)
                         let B.s0.n.loop_min = 0
                         let B.s0.n.loop_extent = ((((0 + (P.extent.1/3600)) - 1) + 1) - 0)
                         let B.s0.fused.n.loop_extent = 1
                         let B.s0.fused.n.loop_max = A.s0.n
                         let B.s0.fused.n.loop_min = A.s0.n
                         for (B.s0.fused.n, B.s0.fused.n.loop_min, B.s0.fused.n.loop_extent) {
                          let B.s0.nn.loop_max = ((0 + 16) - 1)
                          let B.s0.nn.loop_min = 0
                          let B.s0.nn.loop_extent = ((((0 + 16) - 1) + 1) - 0)
                          let B.s0.fused.nn.loop_extent = 1
                          let B.s0.fused.nn.loop_max = A.s0.nn
                          let B.s0.fused.nn.loop_min = A.s0.nn
                          for (B.s0.fused.nn, B.s0.fused.nn.loop_min, B.s0.fused.nn.loop_extent) {
                           let B.s0.co.loop_max = ((0 + 4) - 1)
                           let B.s0.co.loop_min = 0
                           let B.s0.co.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                           let B.s0.fused.co.loop_extent = 1
                           let B.s0.fused.co.loop_max = A.s0.co
                           let B.s0.fused.co.loop_min = A.s0.co
                           for (B.s0.fused.co, B.s0.fused.co.loop_min, B.s0.fused.co.loop_extent) {
                            let B.s0.mx.loop_max = ((0 + 4) - 1)
                            let B.s0.mx.loop_min = 0
                            let B.s0.mx.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                            let B.s0.fused.mx.loop_extent = 1
                            let B.s0.fused.mx.loop_max = A.s0.mx
                            let B.s0.fused.mx.loop_min = A.s0.mx
                            for (B.s0.fused.mx, B.s0.fused.mx.loop_min, B.s0.fused.mx.loop_extent) {
                             let B.s0.my.loop_max = ((0 + 4) - 1)
                             let B.s0.my.loop_min = 0
                             let B.s0.my.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                             let B.s0.fused.my.loop_extent = 1
                             let B.s0.fused.my.loop_max = A.s0.my
                             let B.s0.fused.my.loop_min = A.s0.my
                             for (B.s0.fused.my, B.s0.fused.my.loop_min, B.s0.fused.my.loop_extent) {
                              let B.s0.mk.loop_max = ((0 + 4) - 1)
                              let B.s0.mk.loop_min = 0
                              let B.s0.mk.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                              let B.s0.fused.mk.loop_extent = 1
                              let B.s0.fused.mk.loop_max = A.s0.mk
                              let B.s0.fused.mk.loop_min = A.s0.mk
                              for (B.s0.fused.mk, B.s0.fused.mk.loop_min, B.s0.fused.mk.loop_extent) {
                               let B.s0.ci.loop_max = ((0 + 8) - 1)
                               let B.s0.ci.loop_min = 0
                               let B.s0.ci.loop_extent = ((((0 + 8) - 1) + 1) - 0)
                               let B.s0.fused.ci.loop_extent = 1
                               let B.s0.fused.ci.loop_max = A.s0.ci
                               let B.s0.fused.ci.loop_min = A.s0.ci
                               for (B.s0.fused.ci, B.s0.fused.ci.loop_min, B.s0.fused.ci.loop_extent) {
                                let B.s0.yy_xx.loop_max = ((0 + 7) - 1)
                                let B.s0.yy_xx.loop_min = 0
                                let B.s0.yy_xx.loop_extent = ((((0 + 7) - 1) + 1) - 0)
                                let B.s0.fused.yy_xx.loop_extent = 1
                                let B.s0.fused.yy_xx.loop_max = A.s0.yy_xx
                                let B.s0.fused.yy_xx.loop_min = A.s0.yy_xx
                                for (B.s0.fused.yy_xx, B.s0.fused.yy_xx.loop_min, B.s0.fused.yy_xx.loop_extent) {
                                 let B.s0.yyy_xxx.loop_max = ((0 + 7) - 1)
                                 let B.s0.yyy_xxx.loop_min = 0
                                 let B.s0.yyy_xxx.loop_extent = ((((0 + 7) - 1) + 1) - 0)
                                 let B.s0.fused.yyy_xxx.loop_extent = 1
                                 let B.s0.fused.yyy_xxx.loop_max = A.s0.yyy_xxx
                                 let B.s0.fused.yyy_xxx.loop_min = A.s0.yyy_xxx
                                 for (B.s0.fused.yyy_xxx, B.s0.fused.yyy_xxx.loop_min, B.s0.fused.yyy_xxx.loop_extent) {
                                  let B.s0.kx.loop_max = ((0 + 3) - 1)
                                  let B.s0.kx.loop_min = 0
                                  let B.s0.kx.loop_extent = ((((0 + 3) - 1) + 1) - 0)
                                  let B.s0.fused.kx.loop_extent = 1
                                  let B.s0.fused.kx.loop_max = A.s0.kx
                                  let B.s0.fused.kx.loop_min = A.s0.kx
                                  for (B.s0.fused.kx, B.s0.fused.kx.loop_min, B.s0.fused.kx.loop_extent) {
                                   let B.s0.ky.loop_max = ((0 + 3) - 1)
                                   let B.s0.ky.loop_min = 0
                                   let B.s0.ky.loop_extent = ((((0 + 3) - 1) + 1) - 0)
                                   let B.s0.fused.ky.loop_extent = 1
                                   let B.s0.fused.ky.loop_max = A.s0.ky
                                   let B.s0.fused.ky.loop_min = A.s0.ky
                                   for (B.s0.fused.ky, B.s0.fused.ky.loop_min, B.s0.fused.ky.loop_extent) {
                                    let B.s0.coo.loop_max = ((0 + 1) - 1)
                                    let B.s0.coo.loop_min = 0
                                    let B.s0.coo.loop_extent = ((((0 + 1) - 1) + 1) - 0)
                                    let B.s0.fused.coo.loop_extent = 1
                                    let B.s0.fused.coo.loop_max = A.s0.coo
                                    let B.s0.fused.coo.loop_min = A.s0.coo
                                    for (B.s0.fused.coo, B.s0.fused.coo.loop_min, B.s0.fused.coo.loop_extent) {
                                     let B.s0.y_x.loop_max = ((0 + 1) - 1)
                                     let B.s0.y_x.loop_min = 0
                                     let B.s0.y_x.loop_extent = ((((0 + 1) - 1) + 1) - 0)
                                     let B.s0.fused.y_x.loop_extent = 1
                                     let B.s0.fused.y_x.loop_max = A.s0.y_x
                                     let B.s0.fused.y_x.loop_min = A.s0.y_x
                                     for (B.s0.fused.y_x, B.s0.fused.y_x.loop_min, B.s0.fused.y_x.loop_extent) {
                                      let B.s0.cooo.loop_max = ((0 + 8) - 1)
                                      let B.s0.cooo.loop_min = 0
                                      let B.s0.cooo.loop_extent = ((((0 + 8) - 1) + 1) - 0)
                                      let B.s0.fused.cooo.loop_extent = 1
                                      let B.s0.fused.cooo.loop_max = A.s0.cooo
                                      let B.s0.fused.cooo.loop_min = A.s0.cooo
                                      for (B.s0.fused.cooo, B.s0.fused.cooo.loop_min, B.s0.fused.cooo.loop_extent) {
                                       let B.s0.cii.loop_max = ((0 + 4) - 1)
                                       let B.s0.cii.loop_min = 0
                                       let B.s0.cii.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                                       let B.s0.fused.cii.loop_extent = 1
                                       let B.s0.fused.cii.loop_max = A.s0.cii
                                       let B.s0.fused.cii.loop_min = A.s0.cii
                                       for (B.s0.fused.cii, B.s0.fused.cii.loop_min, B.s0.fused.cii.loop_extent) {
                                        B(B.s0.fused.cii, B.s0.fused.cooo, B.s0.fused.yyy_xxx, B.s0.fused.yy_xx, B.s0.fused.y_x, B.s0.fused.my, B.s0.fused.mx, B.s0.fused.coo, B.s0.fused.nn, B.s0.fused.ky, B.s0.fused.kx, B.s0.fused.ci, B.s0.fused.mk, B.s0.fused.co, B.s0.fused.n) = select((B.s0.fused.yyy_xxx == 0), (float32)W((((B.s0.fused.cooo + (8*B.s0.fused.coo)) + (8*B.s0.fused.co)) + (32*B.s0.fused.my)), ((((B.s0.fused.cii + (4*B.s0.fused.ky)) + (12*B.s0.fused.kx)) + (36*B.s0.fused.ci)) + (288*B.s0.fused.mk))), B(B.s0.fused.cii, B.s0.fused.cooo, (B.s0.fused.yyy_xxx - 1), B.s0.fused.yy_xx, B.s0.fused.y_x, B.s0.fused.my, B.s0.fused.mx, B.s0.fused.coo, B.s0.fused.nn, B.s0.fused.ky, B.s0.fused.kx, B.s0.fused.ci, B.s0.fused.mk, B.s0.fused.co, B.s0.fused.n))
                                        for (C.s0.__outermost, C.s0.__outermost.loop_min, C.s0.__outermost.loop_extent) {
                                         let C.s0.n.loop_max = ((0 + (P.extent.1/3600)) - 1)
                                         let C.s0.n.loop_min = 0
                                         let C.s0.n.loop_extent = ((((0 + (P.extent.1/3600)) - 1) + 1) - 0)
                                         let C.s0.fused.n.loop_extent = 1
                                         let C.s0.fused.n.loop_max = B.s0.fused.n
                                         let C.s0.fused.n.loop_min = B.s0.fused.n
                                         for (C.s0.fused.n, C.s0.fused.n.loop_min, C.s0.fused.n.loop_extent) {
                                          let C.s0.nn.loop_max = ((0 + 16) - 1)
                                          let C.s0.nn.loop_min = 0
                                          let C.s0.nn.loop_extent = ((((0 + 16) - 1) + 1) - 0)
                                          let C.s0.fused.nn.loop_extent = 1
                                          let C.s0.fused.nn.loop_max = B.s0.fused.nn
                                          let C.s0.fused.nn.loop_min = B.s0.fused.nn
                                          for (C.s0.fused.nn, C.s0.fused.nn.loop_min, C.s0.fused.nn.loop_extent) {
                                           let C.s0.co.loop_max = ((0 + 4) - 1)
                                           let C.s0.co.loop_min = 0
                                           let C.s0.co.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                                           let C.s0.fused.co.loop_extent = 1
                                           let C.s0.fused.co.loop_max = B.s0.fused.co
                                           let C.s0.fused.co.loop_min = B.s0.fused.co
                                           for (C.s0.fused.co, C.s0.fused.co.loop_min, C.s0.fused.co.loop_extent) {
                                            let C.s0.mx.loop_max = ((0 + 4) - 1)
                                            let C.s0.mx.loop_min = 0
                                            let C.s0.mx.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                                            let C.s0.fused.mx.loop_extent = 1
                                            let C.s0.fused.mx.loop_max = B.s0.fused.mx
                                            let C.s0.fused.mx.loop_min = B.s0.fused.mx
                                            for (C.s0.fused.mx, C.s0.fused.mx.loop_min, C.s0.fused.mx.loop_extent) {
                                             let C.s0.my.loop_max = ((0 + 4) - 1)
                                             let C.s0.my.loop_min = 0
                                             let C.s0.my.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                                             let C.s0.fused.my.loop_extent = 1
                                             let C.s0.fused.my.loop_max = B.s0.fused.my
                                             let C.s0.fused.my.loop_min = B.s0.fused.my
                                             for (C.s0.fused.my, C.s0.fused.my.loop_min, C.s0.fused.my.loop_extent) {
                                              let C.s0.mk.loop_max = ((0 + 4) - 1)
                                              let C.s0.mk.loop_min = 0
                                              let C.s0.mk.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                                              let C.s0.fused.mk.loop_extent = 1
                                              let C.s0.fused.mk.loop_max = B.s0.fused.mk
                                              let C.s0.fused.mk.loop_min = B.s0.fused.mk
                                              for (C.s0.fused.mk, C.s0.fused.mk.loop_min, C.s0.fused.mk.loop_extent) {
                                               let C.s0.ci.loop_max = ((0 + 8) - 1)
                                               let C.s0.ci.loop_min = 0
                                               let C.s0.ci.loop_extent = ((((0 + 8) - 1) + 1) - 0)
                                               let C.s0.fused.ci.loop_extent = 1
                                               let C.s0.fused.ci.loop_max = B.s0.fused.ci
                                               let C.s0.fused.ci.loop_min = B.s0.fused.ci
                                               for (C.s0.fused.ci, C.s0.fused.ci.loop_min, C.s0.fused.ci.loop_extent) {
                                                let C.s0.yy_xx.loop_max = ((0 + 7) - 1)
                                                let C.s0.yy_xx.loop_min = 0
                                                let C.s0.yy_xx.loop_extent = ((((0 + 7) - 1) + 1) - 0)
                                                let C.s0.fused.yy_xx.loop_extent = 1
                                                let C.s0.fused.yy_xx.loop_max = B.s0.fused.yy_xx
                                                let C.s0.fused.yy_xx.loop_min = B.s0.fused.yy_xx
                                                for (C.s0.fused.yy_xx, C.s0.fused.yy_xx.loop_min, C.s0.fused.yy_xx.loop_extent) {
                                                 let C.s0.yyy_xxx.loop_max = ((0 + 7) - 1)
                                                 let C.s0.yyy_xxx.loop_min = 0
                                                 let C.s0.yyy_xxx.loop_extent = ((((0 + 7) - 1) + 1) - 0)
                                                 let C.s0.fused.yyy_xxx.loop_extent = 1
                                                 let C.s0.fused.yyy_xxx.loop_max = B.s0.fused.yyy_xxx
                                                 let C.s0.fused.yyy_xxx.loop_min = B.s0.fused.yyy_xxx
                                                 for (C.s0.fused.yyy_xxx, C.s0.fused.yyy_xxx.loop_min, C.s0.fused.yyy_xxx.loop_extent) {
                                                  let C.s0.kx.loop_max = ((0 + 3) - 1)
                                                  let C.s0.kx.loop_min = 0
                                                  let C.s0.kx.loop_extent = ((((0 + 3) - 1) + 1) - 0)
                                                  let C.s0.fused.kx.loop_extent = 1
                                                  let C.s0.fused.kx.loop_max = B.s0.fused.kx
                                                  let C.s0.fused.kx.loop_min = B.s0.fused.kx
                                                  for (C.s0.fused.kx, C.s0.fused.kx.loop_min, C.s0.fused.kx.loop_extent) {
                                                   let C.s0.ky.loop_max = ((0 + 3) - 1)
                                                   let C.s0.ky.loop_min = 0
                                                   let C.s0.ky.loop_extent = ((((0 + 3) - 1) + 1) - 0)
                                                   let C.s0.fused.ky.loop_extent = 1
                                                   let C.s0.fused.ky.loop_max = B.s0.fused.ky
                                                   let C.s0.fused.ky.loop_min = B.s0.fused.ky
                                                   for (C.s0.fused.ky, C.s0.fused.ky.loop_min, C.s0.fused.ky.loop_extent) {
                                                    let C.s0.coo.loop_max = ((0 + 1) - 1)
                                                    let C.s0.coo.loop_min = 0
                                                    let C.s0.coo.loop_extent = ((((0 + 1) - 1) + 1) - 0)
                                                    let C.s0.fused.coo.loop_extent = 1
                                                    let C.s0.fused.coo.loop_max = B.s0.fused.coo
                                                    let C.s0.fused.coo.loop_min = B.s0.fused.coo
                                                    for (C.s0.fused.coo, C.s0.fused.coo.loop_min, C.s0.fused.coo.loop_extent) {
                                                     let C.s0.y_x.loop_max = ((0 + 1) - 1)
                                                     let C.s0.y_x.loop_min = 0
                                                     let C.s0.y_x.loop_extent = ((((0 + 1) - 1) + 1) - 0)
                                                     let C.s0.fused.y_x.loop_extent = 1
                                                     let C.s0.fused.y_x.loop_max = B.s0.fused.y_x
                                                     let C.s0.fused.y_x.loop_min = B.s0.fused.y_x
                                                     for (C.s0.fused.y_x, C.s0.fused.y_x.loop_min, C.s0.fused.y_x.loop_extent) {
                                                      let C.s0.cooo.loop_max = ((0 + 8) - 1)
                                                      let C.s0.cooo.loop_min = 0
                                                      let C.s0.cooo.loop_extent = ((((0 + 8) - 1) + 1) - 0)
                                                      let C.s0.fused.cooo.loop_extent = 1
                                                      let C.s0.fused.cooo.loop_max = B.s0.fused.cooo
                                                      let C.s0.fused.cooo.loop_min = B.s0.fused.cooo
                                                      for (C.s0.fused.cooo, C.s0.fused.cooo.loop_min, C.s0.fused.cooo.loop_extent) {
                                                       let C.s0.cii.loop_max = ((0 + 4) - 1)
                                                       let C.s0.cii.loop_min = 0
                                                       let C.s0.cii.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                                                       let C.s0.fused.cii.loop_extent = 1
                                                       let C.s0.fused.cii.loop_max = B.s0.fused.cii
                                                       let C.s0.fused.cii.loop_min = B.s0.fused.cii
                                                       for (C.s0.fused.cii, C.s0.fused.cii.loop_min, C.s0.fused.cii.loop_extent) {
                                                        C(C.s0.fused.cii, C.s0.fused.cooo, C.s0.fused.yyy_xxx, C.s0.fused.yy_xx, C.s0.fused.y_x, C.s0.fused.my, C.s0.fused.mx, C.s0.fused.coo, C.s0.fused.nn, C.s0.fused.ky, C.s0.fused.kx, C.s0.fused.ci, C.s0.fused.mk, C.s0.fused.co, C.s0.fused.n) = (select((((((C.s0.fused.cii == 0) && (C.s0.fused.ci == 0)) && (C.s0.fused.mk == 0)) && (C.s0.fused.ky == 0)) && (C.s0.fused.kx == 0)), 0.000000f, select((C.s0.fused.cii == 0), select((C.s0.fused.ky == 0), select((C.s0.fused.kx == 0), select((C.s0.fused.ci == 0), C(((C.s0.fused.cii + 4) - 1), C.s0.fused.cooo, C.s0.fused.yyy_xxx, C.s0.fused.yy_xx, C.s0.fused.y_x, C.s0.fused.my, C.s0.fused.mx, C.s0.fused.coo, C.s0.fused.nn, ((C.s0.fused.ky + 3) - 1), ((C.s0.fused.kx + 3) - 1), ((C.s0.fused.ci + 8) - 1), (C.s0.fused.mk - 1), C.s0.fused.co, C.s0.fused.n), C(((C.s0.fused.cii + 4) - 1), C.s0.fused.cooo, C.s0.fused.yyy_xxx, C.s0.fused.yy_xx, C.s0.fused.y_x, C.s0.fused.my, C.s0.fused.mx, C.s0.fused.coo, C.s0.fused.nn, ((C.s0.fused.ky + 3) - 1), ((C.s0.fused.kx + 3) - 1), (C.s0.fused.ci - 1), C.s0.fused.mk, C.s0.fused.co, C.s0.fused.n)), C(((C.s0.fused.cii + 4) - 1), C.s0.fused.cooo, C.s0.fused.yyy_xxx, C.s0.fused.yy_xx, C.s0.fused.y_x, C.s0.fused.my, C.s0.fused.mx, C.s0.fused.coo, C.s0.fused.nn, ((C.s0.fused.ky + 3) - 1), (C.s0.fused.kx - 1), C.s0.fused.ci, C.s0.fused.mk, C.s0.fused.co, C.s0.fused.n)), C(((C.s0.fused.cii + 4) - 1), C.s0.fused.cooo, C.s0.fused.yyy_xxx, C.s0.fused.yy_xx, C.s0.fused.y_x, C.s0.fused.my, C.s0.fused.mx, C.s0.fused.coo, C.s0.fused.nn, (C.s0.fused.ky - 1), C.s0.fused.kx, C.s0.fused.ci, C.s0.fused.mk, C.s0.fused.co, C.s0.fused.n)), C((C.s0.fused.cii - 1), C.s0.fused.cooo, C.s0.fused.yyy_xxx, C.s0.fused.yy_xx, C.s0.fused.y_x, C.s0.fused.my, C.s0.fused.mx, C.s0.fused.coo, C.s0.fused.nn, C.s0.fused.ky, C.s0.fused.kx, C.s0.fused.ci, C.s0.fused.mk, C.s0.fused.co, C.s0.fused.n))) + (A(C.s0.fused.cii, C.s0.fused.cooo, C.s0.fused.yyy_xxx, C.s0.fused.yy_xx, C.s0.fused.y_x, C.s0.fused.my, C.s0.fused.mx, C.s0.fused.coo, C.s0.fused.nn, C.s0.fused.ky, C.s0.fused.kx, C.s0.fused.ci, C.s0.fused.mk, C.s0.fused.co, C.s0.fused.n)*B(C.s0.fused.cii, C.s0.fused.cooo, C.s0.fused.yyy_xxx, C.s0.fused.yy_xx, C.s0.fused.y_x, C.s0.fused.my, C.s0.fused.mx, C.s0.fused.coo, C.s0.fused.nn, C.s0.fused.ky, C.s0.fused.kx, C.s0.fused.ci, C.s0.fused.mk, C.s0.fused.co, C.s0.fused.n)))
                                                        for (Out.s0.__outermost, Out.s0.__outermost.loop_min, Out.s0.__outermost.loop_extent) {
                                                         let Out.s0.n.loop_max = ((0 + (P.extent.1/3600)) - 1)
                                                         let Out.s0.n.loop_min = 0
                                                         let Out.s0.n.loop_extent = ((((0 + (P.extent.1/3600)) - 1) + 1) - 0)
                                                         let Out.s0.fused.n.loop_extent = 1
                                                         let Out.s0.fused.n.loop_max = C.s0.fused.n
                                                         let Out.s0.fused.n.loop_min = C.s0.fused.n
                                                         for (Out.s0.fused.n, Out.s0.fused.n.loop_min, Out.s0.fused.n.loop_extent) {
                                                          let Out.s0.nn.loop_max = ((0 + 16) - 1)
                                                          let Out.s0.nn.loop_min = 0
                                                          let Out.s0.nn.loop_extent = ((((0 + 16) - 1) + 1) - 0)
                                                          let Out.s0.fused.nn.loop_extent = 1
                                                          let Out.s0.fused.nn.loop_max = C.s0.fused.nn
                                                          let Out.s0.fused.nn.loop_min = C.s0.fused.nn
                                                          for (Out.s0.fused.nn, Out.s0.fused.nn.loop_min, Out.s0.fused.nn.loop_extent) {
                                                           let Out.s0.co.loop_max = ((0 + 4) - 1)
                                                           let Out.s0.co.loop_min = 0
                                                           let Out.s0.co.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                                                           let Out.s0.fused.co.loop_extent = 1
                                                           let Out.s0.fused.co.loop_max = C.s0.fused.co
                                                           let Out.s0.fused.co.loop_min = C.s0.fused.co
                                                           for (Out.s0.fused.co, Out.s0.fused.co.loop_min, Out.s0.fused.co.loop_extent) {
                                                            let Out.s0.mx.loop_max = ((0 + 4) - 1)
                                                            let Out.s0.mx.loop_min = 0
                                                            let Out.s0.mx.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                                                            let Out.s0.fused.mx.loop_extent = 1
                                                            let Out.s0.fused.mx.loop_max = C.s0.fused.mx
                                                            let Out.s0.fused.mx.loop_min = C.s0.fused.mx
                                                            for (Out.s0.fused.mx, Out.s0.fused.mx.loop_min, Out.s0.fused.mx.loop_extent) {
                                                             let Out.s0.my.loop_max = ((0 + 4) - 1)
                                                             let Out.s0.my.loop_min = 0
                                                             let Out.s0.my.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                                                             let Out.s0.fused.my.loop_extent = 1
                                                             let Out.s0.fused.my.loop_max = C.s0.fused.my
                                                             let Out.s0.fused.my.loop_min = C.s0.fused.my
                                                             for (Out.s0.fused.my, Out.s0.fused.my.loop_min, Out.s0.fused.my.loop_extent) {
                                                              let Out.s0.yy_xx.loop_max = ((0 + 7) - 1)
                                                              let Out.s0.yy_xx.loop_min = 0
                                                              let Out.s0.yy_xx.loop_extent = ((((0 + 7) - 1) + 1) - 0)
                                                              let Out.s0.fused.yy_xx.loop_extent = 1
                                                              let Out.s0.fused.yy_xx.loop_max = C.s0.fused.yy_xx
                                                              let Out.s0.fused.yy_xx.loop_min = C.s0.fused.yy_xx
                                                              for (Out.s0.fused.yy_xx, Out.s0.fused.yy_xx.loop_min, Out.s0.fused.yy_xx.loop_extent) {
                                                               let Out.s0.yyy_xxx.loop_max = ((0 + 7) - 1)
                                                               let Out.s0.yyy_xxx.loop_min = 0
                                                               let Out.s0.yyy_xxx.loop_extent = ((((0 + 7) - 1) + 1) - 0)
                                                               let Out.s0.fused.yyy_xxx.loop_extent = 1
                                                               let Out.s0.fused.yyy_xxx.loop_max = C.s0.fused.yyy_xxx
                                                               let Out.s0.fused.yyy_xxx.loop_min = C.s0.fused.yyy_xxx
                                                               for (Out.s0.fused.yyy_xxx, Out.s0.fused.yyy_xxx.loop_min, Out.s0.fused.yyy_xxx.loop_extent) {
                                                                let Out.s0.coo.loop_max = ((0 + 1) - 1)
                                                                let Out.s0.coo.loop_min = 0
                                                                let Out.s0.coo.loop_extent = ((((0 + 1) - 1) + 1) - 0)
                                                                let Out.s0.fused.coo.loop_extent = 1
                                                                let Out.s0.fused.coo.loop_max = C.s0.fused.coo
                                                                let Out.s0.fused.coo.loop_min = C.s0.fused.coo
                                                                for (Out.s0.fused.coo, Out.s0.fused.coo.loop_min, Out.s0.fused.coo.loop_extent) {
                                                                 let Out.s0.y_x.loop_max = ((0 + 1) - 1)
                                                                 let Out.s0.y_x.loop_min = 0
                                                                 let Out.s0.y_x.loop_extent = ((((0 + 1) - 1) + 1) - 0)
                                                                 let Out.s0.fused.y_x.loop_extent = 1
                                                                 let Out.s0.fused.y_x.loop_max = C.s0.fused.y_x
                                                                 let Out.s0.fused.y_x.loop_min = C.s0.fused.y_x
                                                                 for (Out.s0.fused.y_x, Out.s0.fused.y_x.loop_min, Out.s0.fused.y_x.loop_extent) {
                                                                  let Out.s0.cooo.loop_max = ((0 + 8) - 1)
                                                                  let Out.s0.cooo.loop_min = 0
                                                                  let Out.s0.cooo.loop_extent = ((((0 + 8) - 1) + 1) - 0)
                                                                  let Out.s0.fused.cooo.loop_extent = 1
                                                                  let Out.s0.fused.cooo.loop_max = C.s0.fused.cooo
                                                                  let Out.s0.fused.cooo.loop_min = C.s0.fused.cooo
                                                                  for (Out.s0.fused.cooo, Out.s0.fused.cooo.loop_min, Out.s0.fused.cooo.loop_extent) {
                                                                   Out(Out.s0.fused.cooo, Out.s0.fused.yyy_xxx, Out.s0.fused.yy_xx, Out.s0.fused.y_x, Out.s0.fused.my, Out.s0.fused.mx, Out.s0.fused.coo, Out.s0.fused.nn, Out.s0.fused.co, Out.s0.fused.n) = select((((((C.s0.fused.cii == 3) && (C.s0.fused.ci == 7)) && (C.s0.fused.mk == 3)) && (C.s0.fused.ky == 2)) && (C.s0.fused.kx == 2)), C(C.s0.fused.cii, C.s0.fused.cooo, C.s0.fused.yyy_xxx, C.s0.fused.yy_xx, C.s0.fused.y_x, C.s0.fused.my, C.s0.fused.mx, C.s0.fused.coo, C.s0.fused.nn, C.s0.fused.ky, C.s0.fused.kx, C.s0.fused.ci, C.s0.fused.mk, C.s0.fused.co, C.s0.fused.n))
                                                                  }
                                                                 }
                                                                }
                                                               }
                                                              }
                                                             }
                                                            }
                                                           }
                                                          }
                                                         }
                                                        }
                                                       }
                                                      }
                                                     }
                                                    }
                                                   }
                                                  }
                                                 }
                                                }
                                               }
                                              }
                                             }
                                            }
                                           }
                                          }
                                         }
                                        }
                                       }
                                      }
                                     }
                                    }
                                   }
                                  }
                                 }
                                }
                               }
                              }
                             }
                            }
                           }
                          }
                         }
                        }
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
    consume C {
     consume B {
      consume A {
       0
      }
     }
    }
   }
  }
 }
}

Inlining P_im



Input to CSE select((A.s0.cooo == 0), (let P_im._1 = (((((((A.s0.yyy_xxx + (7*A.s0.yy_xx)) + (49*A.s0.y_x)) % 7)*2) + A.s0.ky) + (15*(((((A.s0.yyy_xxx + (7*A.s0.yy_xx)) + (49*A.s0.y_x))/7)*2) + A.s0.kx))) + (225*A.s0.n)) in (let P_im._0 = ((((A.s0.cii + (4*A.s0.ci)) + (32*A.s0.mk)) + (128*A.s0.mx)) + (512*A.s0.nn)) in (float32)P(P_im._0, P_im._1))), (float32)A(A.s0.cii, (A.s0.cooo - 1), A.s0.yyy_xxx, A.s0.yy_xx, A.s0.y_x, A.s0.my, A.s0.mx, A.s0.coo, A.s0.nn, A.s0.ky, A.s0.kx, A.s0.ci, A.s0.mk, A.s0.co, A.s0.n))
After removing lets: select((A.s0.cooo == 0), (float32)P(((((A.s0.cii + (4*A.s0.ci)) + (32*A.s0.mk)) + (128*A.s0.mx)) + (512*A.s0.nn)), (((((((A.s0.yyy_xxx + (7*A.s0.yy_xx)) + (49*A.s0.y_x)) % 7)*2) + A.s0.ky) + (15*(((((A.s0.yyy_xxx + (7*A.s0.yy_xx)) + (49*A.s0.y_x))/7)*2) + A.s0.kx))) + (225*A.s0.n))), (float32)A(A.s0.cii, (A.s0.cooo - 1), A.s0.yyy_xxx, A.s0.yy_xx, A.s0.y_x, A.s0.my, A.s0.mx, A.s0.coo, A.s0.nn, A.s0.ky, A.s0.kx, A.s0.ci, A.s0.mk, A.s0.co, A.s0.n))
Include: select((A.s0.cooo == 0), (float32)P(((((A.s0.cii + (4*A.s0.ci)) + (32*A.s0.mk)) + (128*A.s0.mx)) + (512*A.s0.nn)), (((((((A.s0.yyy_xxx + (7*A.s0.yy_xx)) + (49*A.s0.y_x)) % 7)*2) + A.s0.ky) + (15*(((((A.s0.yyy_xxx + (7*A.s0.yy_xx)) + (49*A.s0.y_x))/7)*2) + A.s0.kx))) + (225*A.s0.n))), (float32)A(A.s0.cii, (A.s0.cooo - 1), A.s0.yyy_xxx, A.s0.yy_xx, A.s0.y_x, A.s0.my, A.s0.mx, A.s0.coo, A.s0.nn, A.s0.ky, A.s0.kx, A.s0.ci, A.s0.mk, A.s0.co, A.s0.n)); should extract: 1
Include: (A.s0.cooo == 0); should extract: 1
Include: A.s0.cooo; should extract: 0
Include: 0; should extract: 0
Include: (float32)P(((((A.s0.cii + (4*A.s0.ci)) + (32*A.s0.mk)) + (128*A.s0.mx)) + (512*A.s0.nn)), (((((((A.s0.yyy_xxx + (7*A.s0.yy_xx)) + (49*A.s0.y_x)) % 7)*2) + A.s0.ky) + (15*(((((A.s0.yyy_xxx + (7*A.s0.yy_xx)) + (49*A.s0.y_x))/7)*2) + A.s0.kx))) + (225*A.s0.n))); should extract: 1
Include: ((((A.s0.cii + (4*A.s0.ci)) + (32*A.s0.mk)) + (128*A.s0.mx)) + (512*A.s0.nn)); should extract: 1
Include: (((A.s0.cii + (4*A.s0.ci)) + (32*A.s0.mk)) + (128*A.s0.mx)); should extract: 1
Include: ((A.s0.cii + (4*A.s0.ci)) + (32*A.s0.mk)); should extract: 1
Include: (A.s0.cii + (4*A.s0.ci)); should extract: 1
Include: A.s0.cii; should extract: 0
Include: (4*A.s0.ci); should extract: 0
Include: 4; should extract: 0
Include: A.s0.ci; should extract: 0
Include: (32*A.s0.mk); should extract: 0
Include: 32; should extract: 0
Include: A.s0.mk; should extract: 0
Include: (128*A.s0.mx); should extract: 0
Include: 128; should extract: 0
Include: A.s0.mx; should extract: 0
Include: (512*A.s0.nn); should extract: 0
Include: 512; should extract: 0
Include: A.s0.nn; should extract: 0
Include: (((((((A.s0.yyy_xxx + (7*A.s0.yy_xx)) + (49*A.s0.y_x)) % 7)*2) + A.s0.ky) + (15*(((((A.s0.yyy_xxx + (7*A.s0.yy_xx)) + (49*A.s0.y_x))/7)*2) + A.s0.kx))) + (225*A.s0.n)); should extract: 1
Include: ((((((A.s0.yyy_xxx + (7*A.s0.yy_xx)) + (49*A.s0.y_x)) % 7)*2) + A.s0.ky) + (15*(((((A.s0.yyy_xxx + (7*A.s0.yy_xx)) + (49*A.s0.y_x))/7)*2) + A.s0.kx))); should extract: 1
Include: (((((A.s0.yyy_xxx + (7*A.s0.yy_xx)) + (49*A.s0.y_x)) % 7)*2) + A.s0.ky); should extract: 1
Include: ((((A.s0.yyy_xxx + (7*A.s0.yy_xx)) + (49*A.s0.y_x)) % 7)*2); should extract: 0
Include: (((A.s0.yyy_xxx + (7*A.s0.yy_xx)) + (49*A.s0.y_x)) % 7); should extract: 1
Include: ((A.s0.yyy_xxx + (7*A.s0.yy_xx)) + (49*A.s0.y_x)); should extract: 1
Include: (A.s0.yyy_xxx + (7*A.s0.yy_xx)); should extract: 1
Include: A.s0.yyy_xxx; should extract: 0
Include: (7*A.s0.yy_xx); should extract: 0
Include: 7; should extract: 0
Include: A.s0.yy_xx; should extract: 0
Include: (49*A.s0.y_x); should extract: 0
Include: 49; should extract: 0
Include: A.s0.y_x; should extract: 0
Include: 7; should extract: 0
Include: 2; should extract: 0
Include: A.s0.ky; should extract: 0
Include: (15*(((((A.s0.yyy_xxx + (7*A.s0.yy_xx)) + (49*A.s0.y_x))/7)*2) + A.s0.kx)); should extract: 0
Include: 15; should extract: 0
Include: (((((A.s0.yyy_xxx + (7*A.s0.yy_xx)) + (49*A.s0.y_x))/7)*2) + A.s0.kx); should extract: 1
Include: ((((A.s0.yyy_xxx + (7*A.s0.yy_xx)) + (49*A.s0.y_x))/7)*2); should extract: 0
Include: (((A.s0.yyy_xxx + (7*A.s0.yy_xx)) + (49*A.s0.y_x))/7); should extract: 0
Include: ((A.s0.yyy_xxx + (7*A.s0.yy_xx)) + (49*A.s0.y_x)); should extract: 1
Include: 7; should extract: 0
Include: 2; should extract: 0
Include: A.s0.kx; should extract: 0
Include: (225*A.s0.n); should extract: 0
Include: 225; should extract: 0
Include: A.s0.n; should extract: 0
Include: (float32)A(A.s0.cii, (A.s0.cooo - 1), A.s0.yyy_xxx, A.s0.yy_xx, A.s0.y_x, A.s0.my, A.s0.mx, A.s0.coo, A.s0.nn, A.s0.ky, A.s0.kx, A.s0.ci, A.s0.mk, A.s0.co, A.s0.n); should extract: 1
Include: A.s0.cii; should extract: 0
Include: (A.s0.cooo - 1); should extract: 0
Include: A.s0.cooo; should extract: 0
Include: 1; should extract: 0
Include: A.s0.yyy_xxx; should extract: 0
Include: A.s0.yy_xx; should extract: 0
Include: A.s0.y_x; should extract: 0
Include: A.s0.my; should extract: 0
Include: A.s0.mx; should extract: 0
Include: A.s0.coo; should extract: 0
Include: A.s0.nn; should extract: 0
Include: A.s0.ky; should extract: 0
Include: A.s0.kx; should extract: 0
Include: A.s0.ci; should extract: 0
Include: A.s0.mk; should extract: 0
Include: A.s0.co; should extract: 0
Include: A.s0.n; should extract: 0
Canonical form without lets select((A.s0.cooo == 0), (float32)P(((((A.s0.cii + (4*A.s0.ci)) + (32*A.s0.mk)) + (128*A.s0.mx)) + (512*A.s0.nn)), (((((((A.s0.yyy_xxx + (7*A.s0.yy_xx)) + (49*A.s0.y_x)) % 7)*2) + A.s0.ky) + (15*(((((A.s0.yyy_xxx + (7*A.s0.yy_xx)) + (49*A.s0.y_x))/7)*2) + A.s0.kx))) + (225*A.s0.n))), (float32)A(A.s0.cii, (A.s0.cooo - 1), A.s0.yyy_xxx, A.s0.yy_xx, A.s0.y_x, A.s0.my, A.s0.mx, A.s0.coo, A.s0.nn, A.s0.ky, A.s0.kx, A.s0.ci, A.s0.mk, A.s0.co, A.s0.n))
0: A.s0.cooo, 0
1: 0, 0
2: (A.s0.cooo == 0), 1
3: A.s0.cii, 0
4: 4, 0
5: A.s0.ci, 0
6: (4*A.s0.ci), 0
7: (A.s0.cii + (4*A.s0.ci)), 1
8: 32, 0
9: A.s0.mk, 0
10: (32*A.s0.mk), 0
11: ((A.s0.cii + (4*A.s0.ci)) + (32*A.s0.mk)), 1
12: 128, 0
13: A.s0.mx, 0
14: (128*A.s0.mx), 0
15: (((A.s0.cii + (4*A.s0.ci)) + (32*A.s0.mk)) + (128*A.s0.mx)), 1
16: 512, 0
17: A.s0.nn, 0
18: (512*A.s0.nn), 0
19: ((((A.s0.cii + (4*A.s0.ci)) + (32*A.s0.mk)) + (128*A.s0.mx)) + (512*A.s0.nn)), 1
20: A.s0.yyy_xxx, 0
21: 7, 0
22: A.s0.yy_xx, 0
23: (7*A.s0.yy_xx), 0
24: (A.s0.yyy_xxx + (7*A.s0.yy_xx)), 1
25: 49, 0
26: A.s0.y_x, 0
27: (49*A.s0.y_x), 0
28: ((A.s0.yyy_xxx + (7*A.s0.yy_xx)) + (49*A.s0.y_x)), 2
29: (((A.s0.yyy_xxx + (7*A.s0.yy_xx)) + (49*A.s0.y_x)) % 7), 1
30: 2, 0
31: ((((A.s0.yyy_xxx + (7*A.s0.yy_xx)) + (49*A.s0.y_x)) % 7)*2), 0
32: A.s0.ky, 0
33: (((((A.s0.yyy_xxx + (7*A.s0.yy_xx)) + (49*A.s0.y_x)) % 7)*2) + A.s0.ky), 1
34: 15, 0
35: (((A.s0.yyy_xxx + (7*A.s0.yy_xx)) + (49*A.s0.y_x))/7), 0
36: ((((A.s0.yyy_xxx + (7*A.s0.yy_xx)) + (49*A.s0.y_x))/7)*2), 0
37: A.s0.kx, 0
38: (((((A.s0.yyy_xxx + (7*A.s0.yy_xx)) + (49*A.s0.y_x))/7)*2) + A.s0.kx), 1
39: (15*(((((A.s0.yyy_xxx + (7*A.s0.yy_xx)) + (49*A.s0.y_x))/7)*2) + A.s0.kx)), 0
40: ((((((A.s0.yyy_xxx + (7*A.s0.yy_xx)) + (49*A.s0.y_x)) % 7)*2) + A.s0.ky) + (15*(((((A.s0.yyy_xxx + (7*A.s0.yy_xx)) + (49*A.s0.y_x))/7)*2) + A.s0.kx))), 1
41: 225, 0
42: A.s0.n, 0
43: (225*A.s0.n), 0
44: (((((((A.s0.yyy_xxx + (7*A.s0.yy_xx)) + (49*A.s0.y_x)) % 7)*2) + A.s0.ky) + (15*(((((A.s0.yyy_xxx + (7*A.s0.yy_xx)) + (49*A.s0.y_x))/7)*2) + A.s0.kx))) + (225*A.s0.n)), 1
45: (float32)P(((((A.s0.cii + (4*A.s0.ci)) + (32*A.s0.mk)) + (128*A.s0.mx)) + (512*A.s0.nn)), (((((((A.s0.yyy_xxx + (7*A.s0.yy_xx)) + (49*A.s0.y_x)) % 7)*2) + A.s0.ky) + (15*(((((A.s0.yyy_xxx + (7*A.s0.yy_xx)) + (49*A.s0.y_x))/7)*2) + A.s0.kx))) + (225*A.s0.n))), 1
46: 1, 0
47: (A.s0.cooo - 1), 0
48: A.s0.my, 0
49: A.s0.coo, 0
50: A.s0.co, 0
51: (float32)A(A.s0.cii, (A.s0.cooo - 1), A.s0.yyy_xxx, A.s0.yy_xx, A.s0.y_x, A.s0.my, A.s0.mx, A.s0.coo, A.s0.nn, A.s0.ky, A.s0.kx, A.s0.ci, A.s0.mk, A.s0.co, A.s0.n), 1
52: select((A.s0.cooo == 0), (float32)P(((((A.s0.cii + (4*A.s0.ci)) + (32*A.s0.mk)) + (128*A.s0.mx)) + (512*A.s0.nn)), (((((((A.s0.yyy_xxx + (7*A.s0.yy_xx)) + (49*A.s0.y_x)) % 7)*2) + A.s0.ky) + (15*(((((A.s0.yyy_xxx + (7*A.s0.yy_xx)) + (49*A.s0.y_x))/7)*2) + A.s0.kx))) + (225*A.s0.n))), (float32)A(A.s0.cii, (A.s0.cooo - 1), A.s0.yyy_xxx, A.s0.yy_xx, A.s0.y_x, A.s0.my, A.s0.mx, A.s0.coo, A.s0.nn, A.s0.ky, A.s0.kx, A.s0.ci, A.s0.mk, A.s0.co, A.s0.n)), 1
With variables select((A.s0.cooo == 0), (float32)P(((((A.s0.cii + (4*A.s0.ci)) + (32*A.s0.mk)) + (128*A.s0.mx)) + (512*A.s0.nn)), (((((t0 % 7)*2) + A.s0.ky) + (15*(((t0/7)*2) + A.s0.kx))) + (225*A.s0.n))), (float32)A(A.s0.cii, (A.s0.cooo - 1), A.s0.yyy_xxx, A.s0.yy_xx, A.s0.y_x, A.s0.my, A.s0.mx, A.s0.coo, A.s0.nn, A.s0.ky, A.s0.kx, A.s0.ci, A.s0.mk, A.s0.co, A.s0.n))
With lets: (let t0 = ((A.s0.yyy_xxx + (7*A.s0.yy_xx)) + (49*A.s0.y_x)) in select((A.s0.cooo == 0), (float32)P(((((A.s0.cii + (4*A.s0.ci)) + (32*A.s0.mk)) + (128*A.s0.mx)) + (512*A.s0.nn)), (((((t0 % 7)*2) + A.s0.ky) + (15*(((t0/7)*2) + A.s0.kx))) + (225*A.s0.n))), (float32)A(A.s0.cii, (A.s0.cooo - 1), A.s0.yyy_xxx, A.s0.yy_xx, A.s0.y_x, A.s0.my, A.s0.mx, A.s0.coo, A.s0.nn, A.s0.ky, A.s0.kx, A.s0.ci, A.s0.mk, A.s0.co, A.s0.n)))
for (.__root, 0, 1) {
 realize C[C.cii.min_realized, C.cii.extent_realized], [C.cooo.min_realized, C.cooo.extent_realized], [C.yyy_xxx.min_realized, C.yyy_xxx.extent_realized], [C.yy_xx.min_realized, C.yy_xx.extent_realized], [C.y_x.min_realized, C.y_x.extent_realized], [C.my.min_realized, C.my.extent_realized], [C.mx.min_realized, C.mx.extent_realized], [C.coo.min_realized, C.coo.extent_realized], [C.nn.min_realized, C.nn.extent_realized], [C.ky.min_realized, C.ky.extent_realized], [C.kx.min_realized, C.kx.extent_realized], [C.ci.min_realized, C.ci.extent_realized], [C.mk.min_realized, C.mk.extent_realized], [C.co.min_realized, C.co.extent_realized], [C.n.min_realized, C.n.extent_realized] of type `float32' {
  realize B[B.cii.min_realized, B.cii.extent_realized], [B.cooo.min_realized, B.cooo.extent_realized], [B.yyy_xxx.min_realized, B.yyy_xxx.extent_realized], [B.yy_xx.min_realized, B.yy_xx.extent_realized], [B.y_x.min_realized, B.y_x.extent_realized], [B.my.min_realized, B.my.extent_realized], [B.mx.min_realized, B.mx.extent_realized], [B.coo.min_realized, B.coo.extent_realized], [B.nn.min_realized, B.nn.extent_realized], [B.ky.min_realized, B.ky.extent_realized], [B.kx.min_realized, B.kx.extent_realized], [B.ci.min_realized, B.ci.extent_realized], [B.mk.min_realized, B.mk.extent_realized], [B.co.min_realized, B.co.extent_realized], [B.n.min_realized, B.n.extent_realized] of type `float32' {
   realize A[A.cii.min_realized, A.cii.extent_realized], [A.cooo.min_realized, A.cooo.extent_realized], [A.yyy_xxx.min_realized, A.yyy_xxx.extent_realized], [A.yy_xx.min_realized, A.yy_xx.extent_realized], [A.y_x.min_realized, A.y_x.extent_realized], [A.my.min_realized, A.my.extent_realized], [A.mx.min_realized, A.mx.extent_realized], [A.coo.min_realized, A.coo.extent_realized], [A.nn.min_realized, A.nn.extent_realized], [A.ky.min_realized, A.ky.extent_realized], [A.kx.min_realized, A.kx.extent_realized], [A.ci.min_realized, A.ci.extent_realized], [A.mk.min_realized, A.mk.extent_realized], [A.co.min_realized, A.co.extent_realized], [A.n.min_realized, A.n.extent_realized] of type `float32' {
    produce Out {
     produce C {
      produce B {
       produce A {
        let A.s0.__outermost.loop_extent = 1
        let A.s0.__outermost.loop_max = 0
        let A.s0.__outermost.loop_min = 0
        let B.s0.__outermost.loop_extent = 1
        let B.s0.__outermost.loop_max = 0
        let B.s0.__outermost.loop_min = 0
        let C.s0.__outermost.loop_extent = 1
        let C.s0.__outermost.loop_max = 0
        let C.s0.__outermost.loop_min = 0
        let Out.s0.__outermost.loop_extent = 1
        let Out.s0.__outermost.loop_max = 0
        let Out.s0.__outermost.loop_min = 0
        for (A.s0.__outermost, A.s0.__outermost.loop_min, A.s0.__outermost.loop_extent) {
         let A.s0.n.loop_max = ((0 + (P.extent.1/3600)) - 1)
         let A.s0.n.loop_min = 0
         let A.s0.n.loop_extent = ((((0 + (P.extent.1/3600)) - 1) + 1) - 0)
         gpu_block<Default_GPU> (A.s0.n, A.s0.n.loop_min, A.s0.n.loop_extent) {
          let A.s0.nn.loop_max = ((0 + 16) - 1)
          let A.s0.nn.loop_min = 0
          let A.s0.nn.loop_extent = ((((0 + 16) - 1) + 1) - 0)
          gpu_block<Default_GPU> (A.s0.nn, A.s0.nn.loop_min, A.s0.nn.loop_extent) {
           let A.s0.co.loop_max = ((0 + 4) - 1)
           let A.s0.co.loop_min = 0
           let A.s0.co.loop_extent = ((((0 + 4) - 1) + 1) - 0)
           gpu_block<Default_GPU> (A.s0.co, A.s0.co.loop_min, A.s0.co.loop_extent) {
            let A.s0.mx.loop_max = ((0 + 4) - 1)
            let A.s0.mx.loop_min = 0
            let A.s0.mx.loop_extent = ((((0 + 4) - 1) + 1) - 0)
            gpu_thread<Default_GPU> (A.s0.mx, A.s0.mx.loop_min, A.s0.mx.loop_extent) {
             let A.s0.my.loop_max = ((0 + 4) - 1)
             let A.s0.my.loop_min = 0
             let A.s0.my.loop_extent = ((((0 + 4) - 1) + 1) - 0)
             gpu_thread<Default_GPU> (A.s0.my, A.s0.my.loop_min, A.s0.my.loop_extent) {
              let A.s0.mk.loop_max = ((0 + 4) - 1)
              let A.s0.mk.loop_min = 0
              let A.s0.mk.loop_extent = ((((0 + 4) - 1) + 1) - 0)
              for (A.s0.mk, A.s0.mk.loop_min, A.s0.mk.loop_extent) {
               let A.s0.ci.loop_max = ((0 + 8) - 1)
               let A.s0.ci.loop_min = 0
               let A.s0.ci.loop_extent = ((((0 + 8) - 1) + 1) - 0)
               for (A.s0.ci, A.s0.ci.loop_min, A.s0.ci.loop_extent) {
                let A.s0.yy_xx.loop_max = ((0 + 7) - 1)
                let A.s0.yy_xx.loop_min = 0
                let A.s0.yy_xx.loop_extent = ((((0 + 7) - 1) + 1) - 0)
                for (A.s0.yy_xx, A.s0.yy_xx.loop_min, A.s0.yy_xx.loop_extent) {
                 let A.s0.yyy_xxx.loop_max = ((0 + 7) - 1)
                 let A.s0.yyy_xxx.loop_min = 0
                 let A.s0.yyy_xxx.loop_extent = ((((0 + 7) - 1) + 1) - 0)
                 for (A.s0.yyy_xxx, A.s0.yyy_xxx.loop_min, A.s0.yyy_xxx.loop_extent) {
                  let A.s0.kx.loop_max = ((0 + 3) - 1)
                  let A.s0.kx.loop_min = 0
                  let A.s0.kx.loop_extent = ((((0 + 3) - 1) + 1) - 0)
                  for (A.s0.kx, A.s0.kx.loop_min, A.s0.kx.loop_extent) {
                   let A.s0.ky.loop_max = ((0 + 3) - 1)
                   let A.s0.ky.loop_min = 0
                   let A.s0.ky.loop_extent = ((((0 + 3) - 1) + 1) - 0)
                   for (A.s0.ky, A.s0.ky.loop_min, A.s0.ky.loop_extent) {
                    let A.s0.coo.loop_max = ((0 + 1) - 1)
                    let A.s0.coo.loop_min = 0
                    let A.s0.coo.loop_extent = ((((0 + 1) - 1) + 1) - 0)
                    for (A.s0.coo, A.s0.coo.loop_min, A.s0.coo.loop_extent) {
                     let A.s0.y_x.loop_max = ((0 + 1) - 1)
                     let A.s0.y_x.loop_min = 0
                     let A.s0.y_x.loop_extent = ((((0 + 1) - 1) + 1) - 0)
                     for (A.s0.y_x, A.s0.y_x.loop_min, A.s0.y_x.loop_extent) {
                      let A.s0.cooo.loop_max = ((0 + 8) - 1)
                      let A.s0.cooo.loop_min = 0
                      let A.s0.cooo.loop_extent = ((((0 + 8) - 1) + 1) - 0)
                      vectorized (A.s0.cooo, A.s0.cooo.loop_min, A.s0.cooo.loop_extent) {
                       let A.s0.cii.loop_max = ((0 + 4) - 1)
                       let A.s0.cii.loop_min = 0
                       let A.s0.cii.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                       for (A.s0.cii, A.s0.cii.loop_min, A.s0.cii.loop_extent) {
                        A(A.s0.cii, A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, A.s0.y_x, A.s0.my, A.s0.mx, A.s0.coo, A.s0.nn, A.s0.ky, A.s0.kx, A.s0.ci, A.s0.mk, A.s0.co, A.s0.n) = (let t0 = ((A.s0.yyy_xxx + (7*A.s0.yy_xx)) + (49*A.s0.y_x)) in select((A.s0.cooo == 0), (float32)P(((((A.s0.cii + (4*A.s0.ci)) + (32*A.s0.mk)) + (128*A.s0.mx)) + (512*A.s0.nn)), (((((t0 % 7)*2) + A.s0.ky) + (15*(((t0/7)*2) + A.s0.kx))) + (225*A.s0.n))), A(A.s0.cii, (A.s0.cooo - 1), A.s0.yyy_xxx, A.s0.yy_xx, A.s0.y_x, A.s0.my, A.s0.mx, A.s0.coo, A.s0.nn, A.s0.ky, A.s0.kx, A.s0.ci, A.s0.mk, A.s0.co, A.s0.n)))
                        for (B.s0.__outermost, B.s0.__outermost.loop_min, B.s0.__outermost.loop_extent) {
                         let B.s0.n.loop_max = ((0 + (P.extent.1/3600)) - 1)
                         let B.s0.n.loop_min = 0
                         let B.s0.n.loop_extent = ((((0 + (P.extent.1/3600)) - 1) + 1) - 0)
                         let B.s0.fused.n.loop_extent = 1
                         let B.s0.fused.n.loop_max = A.s0.n
                         let B.s0.fused.n.loop_min = A.s0.n
                         for (B.s0.fused.n, B.s0.fused.n.loop_min, B.s0.fused.n.loop_extent) {
                          let B.s0.nn.loop_max = ((0 + 16) - 1)
                          let B.s0.nn.loop_min = 0
                          let B.s0.nn.loop_extent = ((((0 + 16) - 1) + 1) - 0)
                          let B.s0.fused.nn.loop_extent = 1
                          let B.s0.fused.nn.loop_max = A.s0.nn
                          let B.s0.fused.nn.loop_min = A.s0.nn
                          for (B.s0.fused.nn, B.s0.fused.nn.loop_min, B.s0.fused.nn.loop_extent) {
                           let B.s0.co.loop_max = ((0 + 4) - 1)
                           let B.s0.co.loop_min = 0
                           let B.s0.co.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                           let B.s0.fused.co.loop_extent = 1
                           let B.s0.fused.co.loop_max = A.s0.co
                           let B.s0.fused.co.loop_min = A.s0.co
                           for (B.s0.fused.co, B.s0.fused.co.loop_min, B.s0.fused.co.loop_extent) {
                            let B.s0.mx.loop_max = ((0 + 4) - 1)
                            let B.s0.mx.loop_min = 0
                            let B.s0.mx.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                            let B.s0.fused.mx.loop_extent = 1
                            let B.s0.fused.mx.loop_max = A.s0.mx
                            let B.s0.fused.mx.loop_min = A.s0.mx
                            for (B.s0.fused.mx, B.s0.fused.mx.loop_min, B.s0.fused.mx.loop_extent) {
                             let B.s0.my.loop_max = ((0 + 4) - 1)
                             let B.s0.my.loop_min = 0
                             let B.s0.my.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                             let B.s0.fused.my.loop_extent = 1
                             let B.s0.fused.my.loop_max = A.s0.my
                             let B.s0.fused.my.loop_min = A.s0.my
                             for (B.s0.fused.my, B.s0.fused.my.loop_min, B.s0.fused.my.loop_extent) {
                              let B.s0.mk.loop_max = ((0 + 4) - 1)
                              let B.s0.mk.loop_min = 0
                              let B.s0.mk.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                              let B.s0.fused.mk.loop_extent = 1
                              let B.s0.fused.mk.loop_max = A.s0.mk
                              let B.s0.fused.mk.loop_min = A.s0.mk
                              for (B.s0.fused.mk, B.s0.fused.mk.loop_min, B.s0.fused.mk.loop_extent) {
                               let B.s0.ci.loop_max = ((0 + 8) - 1)
                               let B.s0.ci.loop_min = 0
                               let B.s0.ci.loop_extent = ((((0 + 8) - 1) + 1) - 0)
                               let B.s0.fused.ci.loop_extent = 1
                               let B.s0.fused.ci.loop_max = A.s0.ci
                               let B.s0.fused.ci.loop_min = A.s0.ci
                               for (B.s0.fused.ci, B.s0.fused.ci.loop_min, B.s0.fused.ci.loop_extent) {
                                let B.s0.yy_xx.loop_max = ((0 + 7) - 1)
                                let B.s0.yy_xx.loop_min = 0
                                let B.s0.yy_xx.loop_extent = ((((0 + 7) - 1) + 1) - 0)
                                let B.s0.fused.yy_xx.loop_extent = 1
                                let B.s0.fused.yy_xx.loop_max = A.s0.yy_xx
                                let B.s0.fused.yy_xx.loop_min = A.s0.yy_xx
                                for (B.s0.fused.yy_xx, B.s0.fused.yy_xx.loop_min, B.s0.fused.yy_xx.loop_extent) {
                                 let B.s0.yyy_xxx.loop_max = ((0 + 7) - 1)
                                 let B.s0.yyy_xxx.loop_min = 0
                                 let B.s0.yyy_xxx.loop_extent = ((((0 + 7) - 1) + 1) - 0)
                                 let B.s0.fused.yyy_xxx.loop_extent = 1
                                 let B.s0.fused.yyy_xxx.loop_max = A.s0.yyy_xxx
                                 let B.s0.fused.yyy_xxx.loop_min = A.s0.yyy_xxx
                                 for (B.s0.fused.yyy_xxx, B.s0.fused.yyy_xxx.loop_min, B.s0.fused.yyy_xxx.loop_extent) {
                                  let B.s0.kx.loop_max = ((0 + 3) - 1)
                                  let B.s0.kx.loop_min = 0
                                  let B.s0.kx.loop_extent = ((((0 + 3) - 1) + 1) - 0)
                                  let B.s0.fused.kx.loop_extent = 1
                                  let B.s0.fused.kx.loop_max = A.s0.kx
                                  let B.s0.fused.kx.loop_min = A.s0.kx
                                  for (B.s0.fused.kx, B.s0.fused.kx.loop_min, B.s0.fused.kx.loop_extent) {
                                   let B.s0.ky.loop_max = ((0 + 3) - 1)
                                   let B.s0.ky.loop_min = 0
                                   let B.s0.ky.loop_extent = ((((0 + 3) - 1) + 1) - 0)
                                   let B.s0.fused.ky.loop_extent = 1
                                   let B.s0.fused.ky.loop_max = A.s0.ky
                                   let B.s0.fused.ky.loop_min = A.s0.ky
                                   for (B.s0.fused.ky, B.s0.fused.ky.loop_min, B.s0.fused.ky.loop_extent) {
                                    let B.s0.coo.loop_max = ((0 + 1) - 1)
                                    let B.s0.coo.loop_min = 0
                                    let B.s0.coo.loop_extent = ((((0 + 1) - 1) + 1) - 0)
                                    let B.s0.fused.coo.loop_extent = 1
                                    let B.s0.fused.coo.loop_max = A.s0.coo
                                    let B.s0.fused.coo.loop_min = A.s0.coo
                                    for (B.s0.fused.coo, B.s0.fused.coo.loop_min, B.s0.fused.coo.loop_extent) {
                                     let B.s0.y_x.loop_max = ((0 + 1) - 1)
                                     let B.s0.y_x.loop_min = 0
                                     let B.s0.y_x.loop_extent = ((((0 + 1) - 1) + 1) - 0)
                                     let B.s0.fused.y_x.loop_extent = 1
                                     let B.s0.fused.y_x.loop_max = A.s0.y_x
                                     let B.s0.fused.y_x.loop_min = A.s0.y_x
                                     for (B.s0.fused.y_x, B.s0.fused.y_x.loop_min, B.s0.fused.y_x.loop_extent) {
                                      let B.s0.cooo.loop_max = ((0 + 8) - 1)
                                      let B.s0.cooo.loop_min = 0
                                      let B.s0.cooo.loop_extent = ((((0 + 8) - 1) + 1) - 0)
                                      let B.s0.fused.cooo.loop_extent = 1
                                      let B.s0.fused.cooo.loop_max = A.s0.cooo
                                      let B.s0.fused.cooo.loop_min = A.s0.cooo
                                      for (B.s0.fused.cooo, B.s0.fused.cooo.loop_min, B.s0.fused.cooo.loop_extent) {
                                       let B.s0.cii.loop_max = ((0 + 4) - 1)
                                       let B.s0.cii.loop_min = 0
                                       let B.s0.cii.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                                       let B.s0.fused.cii.loop_extent = 1
                                       let B.s0.fused.cii.loop_max = A.s0.cii
                                       let B.s0.fused.cii.loop_min = A.s0.cii
                                       for (B.s0.fused.cii, B.s0.fused.cii.loop_min, B.s0.fused.cii.loop_extent) {
                                        B(B.s0.fused.cii, B.s0.fused.cooo, B.s0.fused.yyy_xxx, B.s0.fused.yy_xx, B.s0.fused.y_x, B.s0.fused.my, B.s0.fused.mx, B.s0.fused.coo, B.s0.fused.nn, B.s0.fused.ky, B.s0.fused.kx, B.s0.fused.ci, B.s0.fused.mk, B.s0.fused.co, B.s0.fused.n) = select((B.s0.fused.yyy_xxx == 0), (float32)W((((B.s0.fused.cooo + (8*B.s0.fused.coo)) + (8*B.s0.fused.co)) + (32*B.s0.fused.my)), ((((B.s0.fused.cii + (4*B.s0.fused.ky)) + (12*B.s0.fused.kx)) + (36*B.s0.fused.ci)) + (288*B.s0.fused.mk))), B(B.s0.fused.cii, B.s0.fused.cooo, (B.s0.fused.yyy_xxx - 1), B.s0.fused.yy_xx, B.s0.fused.y_x, B.s0.fused.my, B.s0.fused.mx, B.s0.fused.coo, B.s0.fused.nn, B.s0.fused.ky, B.s0.fused.kx, B.s0.fused.ci, B.s0.fused.mk, B.s0.fused.co, B.s0.fused.n))
                                        for (C.s0.__outermost, C.s0.__outermost.loop_min, C.s0.__outermost.loop_extent) {
                                         let C.s0.n.loop_max = ((0 + (P.extent.1/3600)) - 1)
                                         let C.s0.n.loop_min = 0
                                         let C.s0.n.loop_extent = ((((0 + (P.extent.1/3600)) - 1) + 1) - 0)
                                         let C.s0.fused.n.loop_extent = 1
                                         let C.s0.fused.n.loop_max = B.s0.fused.n
                                         let C.s0.fused.n.loop_min = B.s0.fused.n
                                         for (C.s0.fused.n, C.s0.fused.n.loop_min, C.s0.fused.n.loop_extent) {
                                          let C.s0.nn.loop_max = ((0 + 16) - 1)
                                          let C.s0.nn.loop_min = 0
                                          let C.s0.nn.loop_extent = ((((0 + 16) - 1) + 1) - 0)
                                          let C.s0.fused.nn.loop_extent = 1
                                          let C.s0.fused.nn.loop_max = B.s0.fused.nn
                                          let C.s0.fused.nn.loop_min = B.s0.fused.nn
                                          for (C.s0.fused.nn, C.s0.fused.nn.loop_min, C.s0.fused.nn.loop_extent) {
                                           let C.s0.co.loop_max = ((0 + 4) - 1)
                                           let C.s0.co.loop_min = 0
                                           let C.s0.co.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                                           let C.s0.fused.co.loop_extent = 1
                                           let C.s0.fused.co.loop_max = B.s0.fused.co
                                           let C.s0.fused.co.loop_min = B.s0.fused.co
                                           for (C.s0.fused.co, C.s0.fused.co.loop_min, C.s0.fused.co.loop_extent) {
                                            let C.s0.mx.loop_max = ((0 + 4) - 1)
                                            let C.s0.mx.loop_min = 0
                                            let C.s0.mx.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                                            let C.s0.fused.mx.loop_extent = 1
                                            let C.s0.fused.mx.loop_max = B.s0.fused.mx
                                            let C.s0.fused.mx.loop_min = B.s0.fused.mx
                                            for (C.s0.fused.mx, C.s0.fused.mx.loop_min, C.s0.fused.mx.loop_extent) {
                                             let C.s0.my.loop_max = ((0 + 4) - 1)
                                             let C.s0.my.loop_min = 0
                                             let C.s0.my.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                                             let C.s0.fused.my.loop_extent = 1
                                             let C.s0.fused.my.loop_max = B.s0.fused.my
                                             let C.s0.fused.my.loop_min = B.s0.fused.my
                                             for (C.s0.fused.my, C.s0.fused.my.loop_min, C.s0.fused.my.loop_extent) {
                                              let C.s0.mk.loop_max = ((0 + 4) - 1)
                                              let C.s0.mk.loop_min = 0
                                              let C.s0.mk.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                                              let C.s0.fused.mk.loop_extent = 1
                                              let C.s0.fused.mk.loop_max = B.s0.fused.mk
                                              let C.s0.fused.mk.loop_min = B.s0.fused.mk
                                              for (C.s0.fused.mk, C.s0.fused.mk.loop_min, C.s0.fused.mk.loop_extent) {
                                               let C.s0.ci.loop_max = ((0 + 8) - 1)
                                               let C.s0.ci.loop_min = 0
                                               let C.s0.ci.loop_extent = ((((0 + 8) - 1) + 1) - 0)
                                               let C.s0.fused.ci.loop_extent = 1
                                               let C.s0.fused.ci.loop_max = B.s0.fused.ci
                                               let C.s0.fused.ci.loop_min = B.s0.fused.ci
                                               for (C.s0.fused.ci, C.s0.fused.ci.loop_min, C.s0.fused.ci.loop_extent) {
                                                let C.s0.yy_xx.loop_max = ((0 + 7) - 1)
                                                let C.s0.yy_xx.loop_min = 0
                                                let C.s0.yy_xx.loop_extent = ((((0 + 7) - 1) + 1) - 0)
                                                let C.s0.fused.yy_xx.loop_extent = 1
                                                let C.s0.fused.yy_xx.loop_max = B.s0.fused.yy_xx
                                                let C.s0.fused.yy_xx.loop_min = B.s0.fused.yy_xx
                                                for (C.s0.fused.yy_xx, C.s0.fused.yy_xx.loop_min, C.s0.fused.yy_xx.loop_extent) {
                                                 let C.s0.yyy_xxx.loop_max = ((0 + 7) - 1)
                                                 let C.s0.yyy_xxx.loop_min = 0
                                                 let C.s0.yyy_xxx.loop_extent = ((((0 + 7) - 1) + 1) - 0)
                                                 let C.s0.fused.yyy_xxx.loop_extent = 1
                                                 let C.s0.fused.yyy_xxx.loop_max = B.s0.fused.yyy_xxx
                                                 let C.s0.fused.yyy_xxx.loop_min = B.s0.fused.yyy_xxx
                                                 for (C.s0.fused.yyy_xxx, C.s0.fused.yyy_xxx.loop_min, C.s0.fused.yyy_xxx.loop_extent) {
                                                  let C.s0.kx.loop_max = ((0 + 3) - 1)
                                                  let C.s0.kx.loop_min = 0
                                                  let C.s0.kx.loop_extent = ((((0 + 3) - 1) + 1) - 0)
                                                  let C.s0.fused.kx.loop_extent = 1
                                                  let C.s0.fused.kx.loop_max = B.s0.fused.kx
                                                  let C.s0.fused.kx.loop_min = B.s0.fused.kx
                                                  for (C.s0.fused.kx, C.s0.fused.kx.loop_min, C.s0.fused.kx.loop_extent) {
                                                   let C.s0.ky.loop_max = ((0 + 3) - 1)
                                                   let C.s0.ky.loop_min = 0
                                                   let C.s0.ky.loop_extent = ((((0 + 3) - 1) + 1) - 0)
                                                   let C.s0.fused.ky.loop_extent = 1
                                                   let C.s0.fused.ky.loop_max = B.s0.fused.ky
                                                   let C.s0.fused.ky.loop_min = B.s0.fused.ky
                                                   for (C.s0.fused.ky, C.s0.fused.ky.loop_min, C.s0.fused.ky.loop_extent) {
                                                    let C.s0.coo.loop_max = ((0 + 1) - 1)
                                                    let C.s0.coo.loop_min = 0
                                                    let C.s0.coo.loop_extent = ((((0 + 1) - 1) + 1) - 0)
                                                    let C.s0.fused.coo.loop_extent = 1
                                                    let C.s0.fused.coo.loop_max = B.s0.fused.coo
                                                    let C.s0.fused.coo.loop_min = B.s0.fused.coo
                                                    for (C.s0.fused.coo, C.s0.fused.coo.loop_min, C.s0.fused.coo.loop_extent) {
                                                     let C.s0.y_x.loop_max = ((0 + 1) - 1)
                                                     let C.s0.y_x.loop_min = 0
                                                     let C.s0.y_x.loop_extent = ((((0 + 1) - 1) + 1) - 0)
                                                     let C.s0.fused.y_x.loop_extent = 1
                                                     let C.s0.fused.y_x.loop_max = B.s0.fused.y_x
                                                     let C.s0.fused.y_x.loop_min = B.s0.fused.y_x
                                                     for (C.s0.fused.y_x, C.s0.fused.y_x.loop_min, C.s0.fused.y_x.loop_extent) {
                                                      let C.s0.cooo.loop_max = ((0 + 8) - 1)
                                                      let C.s0.cooo.loop_min = 0
                                                      let C.s0.cooo.loop_extent = ((((0 + 8) - 1) + 1) - 0)
                                                      let C.s0.fused.cooo.loop_extent = 1
                                                      let C.s0.fused.cooo.loop_max = B.s0.fused.cooo
                                                      let C.s0.fused.cooo.loop_min = B.s0.fused.cooo
                                                      for (C.s0.fused.cooo, C.s0.fused.cooo.loop_min, C.s0.fused.cooo.loop_extent) {
                                                       let C.s0.cii.loop_max = ((0 + 4) - 1)
                                                       let C.s0.cii.loop_min = 0
                                                       let C.s0.cii.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                                                       let C.s0.fused.cii.loop_extent = 1
                                                       let C.s0.fused.cii.loop_max = B.s0.fused.cii
                                                       let C.s0.fused.cii.loop_min = B.s0.fused.cii
                                                       for (C.s0.fused.cii, C.s0.fused.cii.loop_min, C.s0.fused.cii.loop_extent) {
                                                        C(C.s0.fused.cii, C.s0.fused.cooo, C.s0.fused.yyy_xxx, C.s0.fused.yy_xx, C.s0.fused.y_x, C.s0.fused.my, C.s0.fused.mx, C.s0.fused.coo, C.s0.fused.nn, C.s0.fused.ky, C.s0.fused.kx, C.s0.fused.ci, C.s0.fused.mk, C.s0.fused.co, C.s0.fused.n) = (select((((((C.s0.fused.cii == 0) && (C.s0.fused.ci == 0)) && (C.s0.fused.mk == 0)) && (C.s0.fused.ky == 0)) && (C.s0.fused.kx == 0)), 0.000000f, select((C.s0.fused.cii == 0), select((C.s0.fused.ky == 0), select((C.s0.fused.kx == 0), select((C.s0.fused.ci == 0), C(((C.s0.fused.cii + 4) - 1), C.s0.fused.cooo, C.s0.fused.yyy_xxx, C.s0.fused.yy_xx, C.s0.fused.y_x, C.s0.fused.my, C.s0.fused.mx, C.s0.fused.coo, C.s0.fused.nn, ((C.s0.fused.ky + 3) - 1), ((C.s0.fused.kx + 3) - 1), ((C.s0.fused.ci + 8) - 1), (C.s0.fused.mk - 1), C.s0.fused.co, C.s0.fused.n), C(((C.s0.fused.cii + 4) - 1), C.s0.fused.cooo, C.s0.fused.yyy_xxx, C.s0.fused.yy_xx, C.s0.fused.y_x, C.s0.fused.my, C.s0.fused.mx, C.s0.fused.coo, C.s0.fused.nn, ((C.s0.fused.ky + 3) - 1), ((C.s0.fused.kx + 3) - 1), (C.s0.fused.ci - 1), C.s0.fused.mk, C.s0.fused.co, C.s0.fused.n)), C(((C.s0.fused.cii + 4) - 1), C.s0.fused.cooo, C.s0.fused.yyy_xxx, C.s0.fused.yy_xx, C.s0.fused.y_x, C.s0.fused.my, C.s0.fused.mx, C.s0.fused.coo, C.s0.fused.nn, ((C.s0.fused.ky + 3) - 1), (C.s0.fused.kx - 1), C.s0.fused.ci, C.s0.fused.mk, C.s0.fused.co, C.s0.fused.n)), C(((C.s0.fused.cii + 4) - 1), C.s0.fused.cooo, C.s0.fused.yyy_xxx, C.s0.fused.yy_xx, C.s0.fused.y_x, C.s0.fused.my, C.s0.fused.mx, C.s0.fused.coo, C.s0.fused.nn, (C.s0.fused.ky - 1), C.s0.fused.kx, C.s0.fused.ci, C.s0.fused.mk, C.s0.fused.co, C.s0.fused.n)), C((C.s0.fused.cii - 1), C.s0.fused.cooo, C.s0.fused.yyy_xxx, C.s0.fused.yy_xx, C.s0.fused.y_x, C.s0.fused.my, C.s0.fused.mx, C.s0.fused.coo, C.s0.fused.nn, C.s0.fused.ky, C.s0.fused.kx, C.s0.fused.ci, C.s0.fused.mk, C.s0.fused.co, C.s0.fused.n))) + (A(C.s0.fused.cii, C.s0.fused.cooo, C.s0.fused.yyy_xxx, C.s0.fused.yy_xx, C.s0.fused.y_x, C.s0.fused.my, C.s0.fused.mx, C.s0.fused.coo, C.s0.fused.nn, C.s0.fused.ky, C.s0.fused.kx, C.s0.fused.ci, C.s0.fused.mk, C.s0.fused.co, C.s0.fused.n)*B(C.s0.fused.cii, C.s0.fused.cooo, C.s0.fused.yyy_xxx, C.s0.fused.yy_xx, C.s0.fused.y_x, C.s0.fused.my, C.s0.fused.mx, C.s0.fused.coo, C.s0.fused.nn, C.s0.fused.ky, C.s0.fused.kx, C.s0.fused.ci, C.s0.fused.mk, C.s0.fused.co, C.s0.fused.n)))
                                                        for (Out.s0.__outermost, Out.s0.__outermost.loop_min, Out.s0.__outermost.loop_extent) {
                                                         let Out.s0.n.loop_max = ((0 + (P.extent.1/3600)) - 1)
                                                         let Out.s0.n.loop_min = 0
                                                         let Out.s0.n.loop_extent = ((((0 + (P.extent.1/3600)) - 1) + 1) - 0)
                                                         let Out.s0.fused.n.loop_extent = 1
                                                         let Out.s0.fused.n.loop_max = C.s0.fused.n
                                                         let Out.s0.fused.n.loop_min = C.s0.fused.n
                                                         for (Out.s0.fused.n, Out.s0.fused.n.loop_min, Out.s0.fused.n.loop_extent) {
                                                          let Out.s0.nn.loop_max = ((0 + 16) - 1)
                                                          let Out.s0.nn.loop_min = 0
                                                          let Out.s0.nn.loop_extent = ((((0 + 16) - 1) + 1) - 0)
                                                          let Out.s0.fused.nn.loop_extent = 1
                                                          let Out.s0.fused.nn.loop_max = C.s0.fused.nn
                                                          let Out.s0.fused.nn.loop_min = C.s0.fused.nn
                                                          for (Out.s0.fused.nn, Out.s0.fused.nn.loop_min, Out.s0.fused.nn.loop_extent) {
                                                           let Out.s0.co.loop_max = ((0 + 4) - 1)
                                                           let Out.s0.co.loop_min = 0
                                                           let Out.s0.co.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                                                           let Out.s0.fused.co.loop_extent = 1
                                                           let Out.s0.fused.co.loop_max = C.s0.fused.co
                                                           let Out.s0.fused.co.loop_min = C.s0.fused.co
                                                           for (Out.s0.fused.co, Out.s0.fused.co.loop_min, Out.s0.fused.co.loop_extent) {
                                                            let Out.s0.mx.loop_max = ((0 + 4) - 1)
                                                            let Out.s0.mx.loop_min = 0
                                                            let Out.s0.mx.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                                                            let Out.s0.fused.mx.loop_extent = 1
                                                            let Out.s0.fused.mx.loop_max = C.s0.fused.mx
                                                            let Out.s0.fused.mx.loop_min = C.s0.fused.mx
                                                            for (Out.s0.fused.mx, Out.s0.fused.mx.loop_min, Out.s0.fused.mx.loop_extent) {
                                                             let Out.s0.my.loop_max = ((0 + 4) - 1)
                                                             let Out.s0.my.loop_min = 0
                                                             let Out.s0.my.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                                                             let Out.s0.fused.my.loop_extent = 1
                                                             let Out.s0.fused.my.loop_max = C.s0.fused.my
                                                             let Out.s0.fused.my.loop_min = C.s0.fused.my
                                                             for (Out.s0.fused.my, Out.s0.fused.my.loop_min, Out.s0.fused.my.loop_extent) {
                                                              let Out.s0.yy_xx.loop_max = ((0 + 7) - 1)
                                                              let Out.s0.yy_xx.loop_min = 0
                                                              let Out.s0.yy_xx.loop_extent = ((((0 + 7) - 1) + 1) - 0)
                                                              let Out.s0.fused.yy_xx.loop_extent = 1
                                                              let Out.s0.fused.yy_xx.loop_max = C.s0.fused.yy_xx
                                                              let Out.s0.fused.yy_xx.loop_min = C.s0.fused.yy_xx
                                                              for (Out.s0.fused.yy_xx, Out.s0.fused.yy_xx.loop_min, Out.s0.fused.yy_xx.loop_extent) {
                                                               let Out.s0.yyy_xxx.loop_max = ((0 + 7) - 1)
                                                               let Out.s0.yyy_xxx.loop_min = 0
                                                               let Out.s0.yyy_xxx.loop_extent = ((((0 + 7) - 1) + 1) - 0)
                                                               let Out.s0.fused.yyy_xxx.loop_extent = 1
                                                               let Out.s0.fused.yyy_xxx.loop_max = C.s0.fused.yyy_xxx
                                                               let Out.s0.fused.yyy_xxx.loop_min = C.s0.fused.yyy_xxx
                                                               for (Out.s0.fused.yyy_xxx, Out.s0.fused.yyy_xxx.loop_min, Out.s0.fused.yyy_xxx.loop_extent) {
                                                                let Out.s0.coo.loop_max = ((0 + 1) - 1)
                                                                let Out.s0.coo.loop_min = 0
                                                                let Out.s0.coo.loop_extent = ((((0 + 1) - 1) + 1) - 0)
                                                                let Out.s0.fused.coo.loop_extent = 1
                                                                let Out.s0.fused.coo.loop_max = C.s0.fused.coo
                                                                let Out.s0.fused.coo.loop_min = C.s0.fused.coo
                                                                for (Out.s0.fused.coo, Out.s0.fused.coo.loop_min, Out.s0.fused.coo.loop_extent) {
                                                                 let Out.s0.y_x.loop_max = ((0 + 1) - 1)
                                                                 let Out.s0.y_x.loop_min = 0
                                                                 let Out.s0.y_x.loop_extent = ((((0 + 1) - 1) + 1) - 0)
                                                                 let Out.s0.fused.y_x.loop_extent = 1
                                                                 let Out.s0.fused.y_x.loop_max = C.s0.fused.y_x
                                                                 let Out.s0.fused.y_x.loop_min = C.s0.fused.y_x
                                                                 for (Out.s0.fused.y_x, Out.s0.fused.y_x.loop_min, Out.s0.fused.y_x.loop_extent) {
                                                                  let Out.s0.cooo.loop_max = ((0 + 8) - 1)
                                                                  let Out.s0.cooo.loop_min = 0
                                                                  let Out.s0.cooo.loop_extent = ((((0 + 8) - 1) + 1) - 0)
                                                                  let Out.s0.fused.cooo.loop_extent = 1
                                                                  let Out.s0.fused.cooo.loop_max = C.s0.fused.cooo
                                                                  let Out.s0.fused.cooo.loop_min = C.s0.fused.cooo
                                                                  for (Out.s0.fused.cooo, Out.s0.fused.cooo.loop_min, Out.s0.fused.cooo.loop_extent) {
                                                                   Out(Out.s0.fused.cooo, Out.s0.fused.yyy_xxx, Out.s0.fused.yy_xx, Out.s0.fused.y_x, Out.s0.fused.my, Out.s0.fused.mx, Out.s0.fused.coo, Out.s0.fused.nn, Out.s0.fused.co, Out.s0.fused.n) = select((((((C.s0.fused.cii == 3) && (C.s0.fused.ci == 7)) && (C.s0.fused.mk == 3)) && (C.s0.fused.ky == 2)) && (C.s0.fused.kx == 2)), C(C.s0.fused.cii, C.s0.fused.cooo, C.s0.fused.yyy_xxx, C.s0.fused.yy_xx, C.s0.fused.y_x, C.s0.fused.my, C.s0.fused.mx, C.s0.fused.coo, C.s0.fused.nn, C.s0.fused.ky, C.s0.fused.kx, C.s0.fused.ci, C.s0.fused.mk, C.s0.fused.co, C.s0.fused.n))
                                                                  }
                                                                 }
                                                                }
                                                               }
                                                              }
                                                             }
                                                            }
                                                           }
                                                          }
                                                         }
                                                        }
                                                       }
                                                      }
                                                     }
                                                    }
                                                   }
                                                  }
                                                 }
                                                }
                                               }
                                              }
                                             }
                                            }
                                           }
                                          }
                                         }
                                        }
                                       }
                                      }
                                     }
                                    }
                                   }
                                  }
                                 }
                                }
                               }
                              }
                             }
                            }
                           }
                          }
                         }
                        }
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
    consume C {
     consume B {
      consume A {
       0
      }
     }
    }
   }
  }
 }
}

Lowering after creating initial loop nests:
realize C[C.cii.min_realized, C.cii.extent_realized], [C.cooo.min_realized, C.cooo.extent_realized], [C.yyy_xxx.min_realized, C.yyy_xxx.extent_realized], [C.yy_xx.min_realized, C.yy_xx.extent_realized], [C.y_x.min_realized, C.y_x.extent_realized], [C.my.min_realized, C.my.extent_realized], [C.mx.min_realized, C.mx.extent_realized], [C.coo.min_realized, C.coo.extent_realized], [C.nn.min_realized, C.nn.extent_realized], [C.ky.min_realized, C.ky.extent_realized], [C.kx.min_realized, C.kx.extent_realized], [C.ci.min_realized, C.ci.extent_realized], [C.mk.min_realized, C.mk.extent_realized], [C.co.min_realized, C.co.extent_realized], [C.n.min_realized, C.n.extent_realized] of type `float32' {
 realize B[B.cii.min_realized, B.cii.extent_realized], [B.cooo.min_realized, B.cooo.extent_realized], [B.yyy_xxx.min_realized, B.yyy_xxx.extent_realized], [B.yy_xx.min_realized, B.yy_xx.extent_realized], [B.y_x.min_realized, B.y_x.extent_realized], [B.my.min_realized, B.my.extent_realized], [B.mx.min_realized, B.mx.extent_realized], [B.coo.min_realized, B.coo.extent_realized], [B.nn.min_realized, B.nn.extent_realized], [B.ky.min_realized, B.ky.extent_realized], [B.kx.min_realized, B.kx.extent_realized], [B.ci.min_realized, B.ci.extent_realized], [B.mk.min_realized, B.mk.extent_realized], [B.co.min_realized, B.co.extent_realized], [B.n.min_realized, B.n.extent_realized] of type `float32' {
  realize A[A.cii.min_realized, A.cii.extent_realized], [A.cooo.min_realized, A.cooo.extent_realized], [A.yyy_xxx.min_realized, A.yyy_xxx.extent_realized], [A.yy_xx.min_realized, A.yy_xx.extent_realized], [A.y_x.min_realized, A.y_x.extent_realized], [A.my.min_realized, A.my.extent_realized], [A.mx.min_realized, A.mx.extent_realized], [A.coo.min_realized, A.coo.extent_realized], [A.nn.min_realized, A.nn.extent_realized], [A.ky.min_realized, A.ky.extent_realized], [A.kx.min_realized, A.kx.extent_realized], [A.ci.min_realized, A.ci.extent_realized], [A.mk.min_realized, A.mk.extent_realized], [A.co.min_realized, A.co.extent_realized], [A.n.min_realized, A.n.extent_realized] of type `float32' {
   produce Out {
    produce C {
     produce B {
      produce A {
       let A.s0.n.loop_max = ((0 + (P.extent.1/3600)) - 1)
       let A.s0.n.loop_min = 0
       let A.s0.n.loop_extent = ((((0 + (P.extent.1/3600)) - 1) + 1) - 0)
       gpu_block<Default_GPU> (A.s0.n, A.s0.n.loop_min, A.s0.n.loop_extent) {
        let A.s0.nn.loop_max = ((0 + 16) - 1)
        let A.s0.nn.loop_min = 0
        let A.s0.nn.loop_extent = ((((0 + 16) - 1) + 1) - 0)
        gpu_block<Default_GPU> (A.s0.nn, A.s0.nn.loop_min, A.s0.nn.loop_extent) {
         let A.s0.co.loop_max = ((0 + 4) - 1)
         let A.s0.co.loop_min = 0
         let A.s0.co.loop_extent = ((((0 + 4) - 1) + 1) - 0)
         gpu_block<Default_GPU> (A.s0.co, A.s0.co.loop_min, A.s0.co.loop_extent) {
          let A.s0.mx.loop_max = ((0 + 4) - 1)
          let A.s0.mx.loop_min = 0
          let A.s0.mx.loop_extent = ((((0 + 4) - 1) + 1) - 0)
          gpu_thread<Default_GPU> (A.s0.mx, A.s0.mx.loop_min, A.s0.mx.loop_extent) {
           let A.s0.my.loop_max = ((0 + 4) - 1)
           let A.s0.my.loop_min = 0
           let A.s0.my.loop_extent = ((((0 + 4) - 1) + 1) - 0)
           gpu_thread<Default_GPU> (A.s0.my, A.s0.my.loop_min, A.s0.my.loop_extent) {
            let A.s0.mk.loop_max = ((0 + 4) - 1)
            let A.s0.mk.loop_min = 0
            let A.s0.mk.loop_extent = ((((0 + 4) - 1) + 1) - 0)
            for (A.s0.mk, A.s0.mk.loop_min, A.s0.mk.loop_extent) {
             let A.s0.ci.loop_max = ((0 + 8) - 1)
             let A.s0.ci.loop_min = 0
             let A.s0.ci.loop_extent = ((((0 + 8) - 1) + 1) - 0)
             for (A.s0.ci, A.s0.ci.loop_min, A.s0.ci.loop_extent) {
              let A.s0.yy_xx.loop_max = ((0 + 7) - 1)
              let A.s0.yy_xx.loop_min = 0
              let A.s0.yy_xx.loop_extent = ((((0 + 7) - 1) + 1) - 0)
              for (A.s0.yy_xx, A.s0.yy_xx.loop_min, A.s0.yy_xx.loop_extent) {
               let A.s0.yyy_xxx.loop_max = ((0 + 7) - 1)
               let A.s0.yyy_xxx.loop_min = 0
               let A.s0.yyy_xxx.loop_extent = ((((0 + 7) - 1) + 1) - 0)
               for (A.s0.yyy_xxx, A.s0.yyy_xxx.loop_min, A.s0.yyy_xxx.loop_extent) {
                let A.s0.kx.loop_max = ((0 + 3) - 1)
                let A.s0.kx.loop_min = 0
                let A.s0.kx.loop_extent = ((((0 + 3) - 1) + 1) - 0)
                for (A.s0.kx, A.s0.kx.loop_min, A.s0.kx.loop_extent) {
                 let A.s0.ky.loop_max = ((0 + 3) - 1)
                 let A.s0.ky.loop_min = 0
                 let A.s0.ky.loop_extent = ((((0 + 3) - 1) + 1) - 0)
                 for (A.s0.ky, A.s0.ky.loop_min, A.s0.ky.loop_extent) {
                  let A.s0.coo.loop_max = ((0 + 1) - 1)
                  let A.s0.coo.loop_min = 0
                  let A.s0.coo.loop_extent = ((((0 + 1) - 1) + 1) - 0)
                  for (A.s0.coo, A.s0.coo.loop_min, A.s0.coo.loop_extent) {
                   let A.s0.y_x.loop_max = ((0 + 1) - 1)
                   let A.s0.y_x.loop_min = 0
                   let A.s0.y_x.loop_extent = ((((0 + 1) - 1) + 1) - 0)
                   for (A.s0.y_x, A.s0.y_x.loop_min, A.s0.y_x.loop_extent) {
                    let A.s0.cooo.loop_max = ((0 + 8) - 1)
                    let A.s0.cooo.loop_min = 0
                    let A.s0.cooo.loop_extent = ((((0 + 8) - 1) + 1) - 0)
                    vectorized (A.s0.cooo, A.s0.cooo.loop_min, A.s0.cooo.loop_extent) {
                     let A.s0.cii.loop_max = ((0 + 4) - 1)
                     let A.s0.cii.loop_min = 0
                     let A.s0.cii.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                     for (A.s0.cii, A.s0.cii.loop_min, A.s0.cii.loop_extent) {
                      A(A.s0.cii, A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, A.s0.y_x, A.s0.my, A.s0.mx, A.s0.coo, A.s0.nn, A.s0.ky, A.s0.kx, A.s0.ci, A.s0.mk, A.s0.co, A.s0.n) = (let t0 = ((A.s0.yyy_xxx + (7*A.s0.yy_xx)) + (49*A.s0.y_x)) in select((A.s0.cooo == 0), (float32)P(((((A.s0.cii + (4*A.s0.ci)) + (32*A.s0.mk)) + (128*A.s0.mx)) + (512*A.s0.nn)), (((((t0 % 7)*2) + A.s0.ky) + (15*(((t0/7)*2) + A.s0.kx))) + (225*A.s0.n))), A(A.s0.cii, (A.s0.cooo - 1), A.s0.yyy_xxx, A.s0.yy_xx, A.s0.y_x, A.s0.my, A.s0.mx, A.s0.coo, A.s0.nn, A.s0.ky, A.s0.kx, A.s0.ci, A.s0.mk, A.s0.co, A.s0.n)))
                      let B.s0.n.loop_max = ((0 + (P.extent.1/3600)) - 1)
                      let B.s0.n.loop_min = 0
                      let B.s0.n.loop_extent = ((((0 + (P.extent.1/3600)) - 1) + 1) - 0)
                      let B.s0.fused.n.loop_extent = 1
                      let B.s0.fused.n.loop_max = A.s0.n
                      let B.s0.fused.n.loop_min = A.s0.n
                      for (B.s0.fused.n, B.s0.fused.n.loop_min, B.s0.fused.n.loop_extent) {
                       let B.s0.nn.loop_max = ((0 + 16) - 1)
                       let B.s0.nn.loop_min = 0
                       let B.s0.nn.loop_extent = ((((0 + 16) - 1) + 1) - 0)
                       let B.s0.fused.nn.loop_extent = 1
                       let B.s0.fused.nn.loop_max = A.s0.nn
                       let B.s0.fused.nn.loop_min = A.s0.nn
                       for (B.s0.fused.nn, B.s0.fused.nn.loop_min, B.s0.fused.nn.loop_extent) {
                        let B.s0.co.loop_max = ((0 + 4) - 1)
                        let B.s0.co.loop_min = 0
                        let B.s0.co.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                        let B.s0.fused.co.loop_extent = 1
                        let B.s0.fused.co.loop_max = A.s0.co
                        let B.s0.fused.co.loop_min = A.s0.co
                        for (B.s0.fused.co, B.s0.fused.co.loop_min, B.s0.fused.co.loop_extent) {
                         let B.s0.mx.loop_max = ((0 + 4) - 1)
                         let B.s0.mx.loop_min = 0
                         let B.s0.mx.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                         let B.s0.fused.mx.loop_extent = 1
                         let B.s0.fused.mx.loop_max = A.s0.mx
                         let B.s0.fused.mx.loop_min = A.s0.mx
                         for (B.s0.fused.mx, B.s0.fused.mx.loop_min, B.s0.fused.mx.loop_extent) {
                          let B.s0.my.loop_max = ((0 + 4) - 1)
                          let B.s0.my.loop_min = 0
                          let B.s0.my.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                          let B.s0.fused.my.loop_extent = 1
                          let B.s0.fused.my.loop_max = A.s0.my
                          let B.s0.fused.my.loop_min = A.s0.my
                          for (B.s0.fused.my, B.s0.fused.my.loop_min, B.s0.fused.my.loop_extent) {
                           let B.s0.mk.loop_max = ((0 + 4) - 1)
                           let B.s0.mk.loop_min = 0
                           let B.s0.mk.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                           let B.s0.fused.mk.loop_extent = 1
                           let B.s0.fused.mk.loop_max = A.s0.mk
                           let B.s0.fused.mk.loop_min = A.s0.mk
                           for (B.s0.fused.mk, B.s0.fused.mk.loop_min, B.s0.fused.mk.loop_extent) {
                            let B.s0.ci.loop_max = ((0 + 8) - 1)
                            let B.s0.ci.loop_min = 0
                            let B.s0.ci.loop_extent = ((((0 + 8) - 1) + 1) - 0)
                            let B.s0.fused.ci.loop_extent = 1
                            let B.s0.fused.ci.loop_max = A.s0.ci
                            let B.s0.fused.ci.loop_min = A.s0.ci
                            for (B.s0.fused.ci, B.s0.fused.ci.loop_min, B.s0.fused.ci.loop_extent) {
                             let B.s0.yy_xx.loop_max = ((0 + 7) - 1)
                             let B.s0.yy_xx.loop_min = 0
                             let B.s0.yy_xx.loop_extent = ((((0 + 7) - 1) + 1) - 0)
                             let B.s0.fused.yy_xx.loop_extent = 1
                             let B.s0.fused.yy_xx.loop_max = A.s0.yy_xx
                             let B.s0.fused.yy_xx.loop_min = A.s0.yy_xx
                             for (B.s0.fused.yy_xx, B.s0.fused.yy_xx.loop_min, B.s0.fused.yy_xx.loop_extent) {
                              let B.s0.yyy_xxx.loop_max = ((0 + 7) - 1)
                              let B.s0.yyy_xxx.loop_min = 0
                              let B.s0.yyy_xxx.loop_extent = ((((0 + 7) - 1) + 1) - 0)
                              let B.s0.fused.yyy_xxx.loop_extent = 1
                              let B.s0.fused.yyy_xxx.loop_max = A.s0.yyy_xxx
                              let B.s0.fused.yyy_xxx.loop_min = A.s0.yyy_xxx
                              for (B.s0.fused.yyy_xxx, B.s0.fused.yyy_xxx.loop_min, B.s0.fused.yyy_xxx.loop_extent) {
                               let B.s0.kx.loop_max = ((0 + 3) - 1)
                               let B.s0.kx.loop_min = 0
                               let B.s0.kx.loop_extent = ((((0 + 3) - 1) + 1) - 0)
                               let B.s0.fused.kx.loop_extent = 1
                               let B.s0.fused.kx.loop_max = A.s0.kx
                               let B.s0.fused.kx.loop_min = A.s0.kx
                               for (B.s0.fused.kx, B.s0.fused.kx.loop_min, B.s0.fused.kx.loop_extent) {
                                let B.s0.ky.loop_max = ((0 + 3) - 1)
                                let B.s0.ky.loop_min = 0
                                let B.s0.ky.loop_extent = ((((0 + 3) - 1) + 1) - 0)
                                let B.s0.fused.ky.loop_extent = 1
                                let B.s0.fused.ky.loop_max = A.s0.ky
                                let B.s0.fused.ky.loop_min = A.s0.ky
                                for (B.s0.fused.ky, B.s0.fused.ky.loop_min, B.s0.fused.ky.loop_extent) {
                                 let B.s0.coo.loop_max = ((0 + 1) - 1)
                                 let B.s0.coo.loop_min = 0
                                 let B.s0.coo.loop_extent = ((((0 + 1) - 1) + 1) - 0)
                                 let B.s0.fused.coo.loop_extent = 1
                                 let B.s0.fused.coo.loop_max = A.s0.coo
                                 let B.s0.fused.coo.loop_min = A.s0.coo
                                 for (B.s0.fused.coo, B.s0.fused.coo.loop_min, B.s0.fused.coo.loop_extent) {
                                  let B.s0.y_x.loop_max = ((0 + 1) - 1)
                                  let B.s0.y_x.loop_min = 0
                                  let B.s0.y_x.loop_extent = ((((0 + 1) - 1) + 1) - 0)
                                  let B.s0.fused.y_x.loop_extent = 1
                                  let B.s0.fused.y_x.loop_max = A.s0.y_x
                                  let B.s0.fused.y_x.loop_min = A.s0.y_x
                                  for (B.s0.fused.y_x, B.s0.fused.y_x.loop_min, B.s0.fused.y_x.loop_extent) {
                                   let B.s0.cooo.loop_max = ((0 + 8) - 1)
                                   let B.s0.cooo.loop_min = 0
                                   let B.s0.cooo.loop_extent = ((((0 + 8) - 1) + 1) - 0)
                                   let B.s0.fused.cooo.loop_extent = 1
                                   let B.s0.fused.cooo.loop_max = A.s0.cooo
                                   let B.s0.fused.cooo.loop_min = A.s0.cooo
                                   for (B.s0.fused.cooo, B.s0.fused.cooo.loop_min, B.s0.fused.cooo.loop_extent) {
                                    let B.s0.cii.loop_max = ((0 + 4) - 1)
                                    let B.s0.cii.loop_min = 0
                                    let B.s0.cii.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                                    let B.s0.fused.cii.loop_extent = 1
                                    let B.s0.fused.cii.loop_max = A.s0.cii
                                    let B.s0.fused.cii.loop_min = A.s0.cii
                                    for (B.s0.fused.cii, B.s0.fused.cii.loop_min, B.s0.fused.cii.loop_extent) {
                                     B(B.s0.fused.cii, B.s0.fused.cooo, B.s0.fused.yyy_xxx, B.s0.fused.yy_xx, B.s0.fused.y_x, B.s0.fused.my, B.s0.fused.mx, B.s0.fused.coo, B.s0.fused.nn, B.s0.fused.ky, B.s0.fused.kx, B.s0.fused.ci, B.s0.fused.mk, B.s0.fused.co, B.s0.fused.n) = select((B.s0.fused.yyy_xxx == 0), (float32)W((((B.s0.fused.cooo + (8*B.s0.fused.coo)) + (8*B.s0.fused.co)) + (32*B.s0.fused.my)), ((((B.s0.fused.cii + (4*B.s0.fused.ky)) + (12*B.s0.fused.kx)) + (36*B.s0.fused.ci)) + (288*B.s0.fused.mk))), B(B.s0.fused.cii, B.s0.fused.cooo, (B.s0.fused.yyy_xxx - 1), B.s0.fused.yy_xx, B.s0.fused.y_x, B.s0.fused.my, B.s0.fused.mx, B.s0.fused.coo, B.s0.fused.nn, B.s0.fused.ky, B.s0.fused.kx, B.s0.fused.ci, B.s0.fused.mk, B.s0.fused.co, B.s0.fused.n))
                                     let C.s0.n.loop_max = ((0 + (P.extent.1/3600)) - 1)
                                     let C.s0.n.loop_min = 0
                                     let C.s0.n.loop_extent = ((((0 + (P.extent.1/3600)) - 1) + 1) - 0)
                                     let C.s0.fused.n.loop_extent = 1
                                     let C.s0.fused.n.loop_max = B.s0.fused.n
                                     let C.s0.fused.n.loop_min = B.s0.fused.n
                                     for (C.s0.fused.n, C.s0.fused.n.loop_min, C.s0.fused.n.loop_extent) {
                                      let C.s0.nn.loop_max = ((0 + 16) - 1)
                                      let C.s0.nn.loop_min = 0
                                      let C.s0.nn.loop_extent = ((((0 + 16) - 1) + 1) - 0)
                                      let C.s0.fused.nn.loop_extent = 1
                                      let C.s0.fused.nn.loop_max = B.s0.fused.nn
                                      let C.s0.fused.nn.loop_min = B.s0.fused.nn
                                      for (C.s0.fused.nn, C.s0.fused.nn.loop_min, C.s0.fused.nn.loop_extent) {
                                       let C.s0.co.loop_max = ((0 + 4) - 1)
                                       let C.s0.co.loop_min = 0
                                       let C.s0.co.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                                       let C.s0.fused.co.loop_extent = 1
                                       let C.s0.fused.co.loop_max = B.s0.fused.co
                                       let C.s0.fused.co.loop_min = B.s0.fused.co
                                       for (C.s0.fused.co, C.s0.fused.co.loop_min, C.s0.fused.co.loop_extent) {
                                        let C.s0.mx.loop_max = ((0 + 4) - 1)
                                        let C.s0.mx.loop_min = 0
                                        let C.s0.mx.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                                        let C.s0.fused.mx.loop_extent = 1
                                        let C.s0.fused.mx.loop_max = B.s0.fused.mx
                                        let C.s0.fused.mx.loop_min = B.s0.fused.mx
                                        for (C.s0.fused.mx, C.s0.fused.mx.loop_min, C.s0.fused.mx.loop_extent) {
                                         let C.s0.my.loop_max = ((0 + 4) - 1)
                                         let C.s0.my.loop_min = 0
                                         let C.s0.my.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                                         let C.s0.fused.my.loop_extent = 1
                                         let C.s0.fused.my.loop_max = B.s0.fused.my
                                         let C.s0.fused.my.loop_min = B.s0.fused.my
                                         for (C.s0.fused.my, C.s0.fused.my.loop_min, C.s0.fused.my.loop_extent) {
                                          let C.s0.mk.loop_max = ((0 + 4) - 1)
                                          let C.s0.mk.loop_min = 0
                                          let C.s0.mk.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                                          let C.s0.fused.mk.loop_extent = 1
                                          let C.s0.fused.mk.loop_max = B.s0.fused.mk
                                          let C.s0.fused.mk.loop_min = B.s0.fused.mk
                                          for (C.s0.fused.mk, C.s0.fused.mk.loop_min, C.s0.fused.mk.loop_extent) {
                                           let C.s0.ci.loop_max = ((0 + 8) - 1)
                                           let C.s0.ci.loop_min = 0
                                           let C.s0.ci.loop_extent = ((((0 + 8) - 1) + 1) - 0)
                                           let C.s0.fused.ci.loop_extent = 1
                                           let C.s0.fused.ci.loop_max = B.s0.fused.ci
                                           let C.s0.fused.ci.loop_min = B.s0.fused.ci
                                           for (C.s0.fused.ci, C.s0.fused.ci.loop_min, C.s0.fused.ci.loop_extent) {
                                            let C.s0.yy_xx.loop_max = ((0 + 7) - 1)
                                            let C.s0.yy_xx.loop_min = 0
                                            let C.s0.yy_xx.loop_extent = ((((0 + 7) - 1) + 1) - 0)
                                            let C.s0.fused.yy_xx.loop_extent = 1
                                            let C.s0.fused.yy_xx.loop_max = B.s0.fused.yy_xx
                                            let C.s0.fused.yy_xx.loop_min = B.s0.fused.yy_xx
                                            for (C.s0.fused.yy_xx, C.s0.fused.yy_xx.loop_min, C.s0.fused.yy_xx.loop_extent) {
                                             let C.s0.yyy_xxx.loop_max = ((0 + 7) - 1)
                                             let C.s0.yyy_xxx.loop_min = 0
                                             let C.s0.yyy_xxx.loop_extent = ((((0 + 7) - 1) + 1) - 0)
                                             let C.s0.fused.yyy_xxx.loop_extent = 1
                                             let C.s0.fused.yyy_xxx.loop_max = B.s0.fused.yyy_xxx
                                             let C.s0.fused.yyy_xxx.loop_min = B.s0.fused.yyy_xxx
                                             for (C.s0.fused.yyy_xxx, C.s0.fused.yyy_xxx.loop_min, C.s0.fused.yyy_xxx.loop_extent) {
                                              let C.s0.kx.loop_max = ((0 + 3) - 1)
                                              let C.s0.kx.loop_min = 0
                                              let C.s0.kx.loop_extent = ((((0 + 3) - 1) + 1) - 0)
                                              let C.s0.fused.kx.loop_extent = 1
                                              let C.s0.fused.kx.loop_max = B.s0.fused.kx
                                              let C.s0.fused.kx.loop_min = B.s0.fused.kx
                                              for (C.s0.fused.kx, C.s0.fused.kx.loop_min, C.s0.fused.kx.loop_extent) {
                                               let C.s0.ky.loop_max = ((0 + 3) - 1)
                                               let C.s0.ky.loop_min = 0
                                               let C.s0.ky.loop_extent = ((((0 + 3) - 1) + 1) - 0)
                                               let C.s0.fused.ky.loop_extent = 1
                                               let C.s0.fused.ky.loop_max = B.s0.fused.ky
                                               let C.s0.fused.ky.loop_min = B.s0.fused.ky
                                               for (C.s0.fused.ky, C.s0.fused.ky.loop_min, C.s0.fused.ky.loop_extent) {
                                                let C.s0.coo.loop_max = ((0 + 1) - 1)
                                                let C.s0.coo.loop_min = 0
                                                let C.s0.coo.loop_extent = ((((0 + 1) - 1) + 1) - 0)
                                                let C.s0.fused.coo.loop_extent = 1
                                                let C.s0.fused.coo.loop_max = B.s0.fused.coo
                                                let C.s0.fused.coo.loop_min = B.s0.fused.coo
                                                for (C.s0.fused.coo, C.s0.fused.coo.loop_min, C.s0.fused.coo.loop_extent) {
                                                 let C.s0.y_x.loop_max = ((0 + 1) - 1)
                                                 let C.s0.y_x.loop_min = 0
                                                 let C.s0.y_x.loop_extent = ((((0 + 1) - 1) + 1) - 0)
                                                 let C.s0.fused.y_x.loop_extent = 1
                                                 let C.s0.fused.y_x.loop_max = B.s0.fused.y_x
                                                 let C.s0.fused.y_x.loop_min = B.s0.fused.y_x
                                                 for (C.s0.fused.y_x, C.s0.fused.y_x.loop_min, C.s0.fused.y_x.loop_extent) {
                                                  let C.s0.cooo.loop_max = ((0 + 8) - 1)
                                                  let C.s0.cooo.loop_min = 0
                                                  let C.s0.cooo.loop_extent = ((((0 + 8) - 1) + 1) - 0)
                                                  let C.s0.fused.cooo.loop_extent = 1
                                                  let C.s0.fused.cooo.loop_max = B.s0.fused.cooo
                                                  let C.s0.fused.cooo.loop_min = B.s0.fused.cooo
                                                  for (C.s0.fused.cooo, C.s0.fused.cooo.loop_min, C.s0.fused.cooo.loop_extent) {
                                                   let C.s0.cii.loop_max = ((0 + 4) - 1)
                                                   let C.s0.cii.loop_min = 0
                                                   let C.s0.cii.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                                                   let C.s0.fused.cii.loop_extent = 1
                                                   let C.s0.fused.cii.loop_max = B.s0.fused.cii
                                                   let C.s0.fused.cii.loop_min = B.s0.fused.cii
                                                   for (C.s0.fused.cii, C.s0.fused.cii.loop_min, C.s0.fused.cii.loop_extent) {
                                                    C(C.s0.fused.cii, C.s0.fused.cooo, C.s0.fused.yyy_xxx, C.s0.fused.yy_xx, C.s0.fused.y_x, C.s0.fused.my, C.s0.fused.mx, C.s0.fused.coo, C.s0.fused.nn, C.s0.fused.ky, C.s0.fused.kx, C.s0.fused.ci, C.s0.fused.mk, C.s0.fused.co, C.s0.fused.n) = (select((((((C.s0.fused.cii == 0) && (C.s0.fused.ci == 0)) && (C.s0.fused.mk == 0)) && (C.s0.fused.ky == 0)) && (C.s0.fused.kx == 0)), 0.000000f, select((C.s0.fused.cii == 0), select((C.s0.fused.ky == 0), select((C.s0.fused.kx == 0), select((C.s0.fused.ci == 0), C(((C.s0.fused.cii + 4) - 1), C.s0.fused.cooo, C.s0.fused.yyy_xxx, C.s0.fused.yy_xx, C.s0.fused.y_x, C.s0.fused.my, C.s0.fused.mx, C.s0.fused.coo, C.s0.fused.nn, ((C.s0.fused.ky + 3) - 1), ((C.s0.fused.kx + 3) - 1), ((C.s0.fused.ci + 8) - 1), (C.s0.fused.mk - 1), C.s0.fused.co, C.s0.fused.n), C(((C.s0.fused.cii + 4) - 1), C.s0.fused.cooo, C.s0.fused.yyy_xxx, C.s0.fused.yy_xx, C.s0.fused.y_x, C.s0.fused.my, C.s0.fused.mx, C.s0.fused.coo, C.s0.fused.nn, ((C.s0.fused.ky + 3) - 1), ((C.s0.fused.kx + 3) - 1), (C.s0.fused.ci - 1), C.s0.fused.mk, C.s0.fused.co, C.s0.fused.n)), C(((C.s0.fused.cii + 4) - 1), C.s0.fused.cooo, C.s0.fused.yyy_xxx, C.s0.fused.yy_xx, C.s0.fused.y_x, C.s0.fused.my, C.s0.fused.mx, C.s0.fused.coo, C.s0.fused.nn, ((C.s0.fused.ky + 3) - 1), (C.s0.fused.kx - 1), C.s0.fused.ci, C.s0.fused.mk, C.s0.fused.co, C.s0.fused.n)), C(((C.s0.fused.cii + 4) - 1), C.s0.fused.cooo, C.s0.fused.yyy_xxx, C.s0.fused.yy_xx, C.s0.fused.y_x, C.s0.fused.my, C.s0.fused.mx, C.s0.fused.coo, C.s0.fused.nn, (C.s0.fused.ky - 1), C.s0.fused.kx, C.s0.fused.ci, C.s0.fused.mk, C.s0.fused.co, C.s0.fused.n)), C((C.s0.fused.cii - 1), C.s0.fused.cooo, C.s0.fused.yyy_xxx, C.s0.fused.yy_xx, C.s0.fused.y_x, C.s0.fused.my, C.s0.fused.mx, C.s0.fused.coo, C.s0.fused.nn, C.s0.fused.ky, C.s0.fused.kx, C.s0.fused.ci, C.s0.fused.mk, C.s0.fused.co, C.s0.fused.n))) + (A(C.s0.fused.cii, C.s0.fused.cooo, C.s0.fused.yyy_xxx, C.s0.fused.yy_xx, C.s0.fused.y_x, C.s0.fused.my, C.s0.fused.mx, C.s0.fused.coo, C.s0.fused.nn, C.s0.fused.ky, C.s0.fused.kx, C.s0.fused.ci, C.s0.fused.mk, C.s0.fused.co, C.s0.fused.n)*B(C.s0.fused.cii, C.s0.fused.cooo, C.s0.fused.yyy_xxx, C.s0.fused.yy_xx, C.s0.fused.y_x, C.s0.fused.my, C.s0.fused.mx, C.s0.fused.coo, C.s0.fused.nn, C.s0.fused.ky, C.s0.fused.kx, C.s0.fused.ci, C.s0.fused.mk, C.s0.fused.co, C.s0.fused.n)))
                                                    let Out.s0.n.loop_max = ((0 + (P.extent.1/3600)) - 1)
                                                    let Out.s0.n.loop_min = 0
                                                    let Out.s0.n.loop_extent = ((((0 + (P.extent.1/3600)) - 1) + 1) - 0)
                                                    let Out.s0.fused.n.loop_extent = 1
                                                    let Out.s0.fused.n.loop_max = C.s0.fused.n
                                                    let Out.s0.fused.n.loop_min = C.s0.fused.n
                                                    for (Out.s0.fused.n, Out.s0.fused.n.loop_min, Out.s0.fused.n.loop_extent) {
                                                     let Out.s0.nn.loop_max = ((0 + 16) - 1)
                                                     let Out.s0.nn.loop_min = 0
                                                     let Out.s0.nn.loop_extent = ((((0 + 16) - 1) + 1) - 0)
                                                     let Out.s0.fused.nn.loop_extent = 1
                                                     let Out.s0.fused.nn.loop_max = C.s0.fused.nn
                                                     let Out.s0.fused.nn.loop_min = C.s0.fused.nn
                                                     for (Out.s0.fused.nn, Out.s0.fused.nn.loop_min, Out.s0.fused.nn.loop_extent) {
                                                      let Out.s0.co.loop_max = ((0 + 4) - 1)
                                                      let Out.s0.co.loop_min = 0
                                                      let Out.s0.co.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                                                      let Out.s0.fused.co.loop_extent = 1
                                                      let Out.s0.fused.co.loop_max = C.s0.fused.co
                                                      let Out.s0.fused.co.loop_min = C.s0.fused.co
                                                      for (Out.s0.fused.co, Out.s0.fused.co.loop_min, Out.s0.fused.co.loop_extent) {
                                                       let Out.s0.mx.loop_max = ((0 + 4) - 1)
                                                       let Out.s0.mx.loop_min = 0
                                                       let Out.s0.mx.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                                                       let Out.s0.fused.mx.loop_extent = 1
                                                       let Out.s0.fused.mx.loop_max = C.s0.fused.mx
                                                       let Out.s0.fused.mx.loop_min = C.s0.fused.mx
                                                       for (Out.s0.fused.mx, Out.s0.fused.mx.loop_min, Out.s0.fused.mx.loop_extent) {
                                                        let Out.s0.my.loop_max = ((0 + 4) - 1)
                                                        let Out.s0.my.loop_min = 0
                                                        let Out.s0.my.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                                                        let Out.s0.fused.my.loop_extent = 1
                                                        let Out.s0.fused.my.loop_max = C.s0.fused.my
                                                        let Out.s0.fused.my.loop_min = C.s0.fused.my
                                                        for (Out.s0.fused.my, Out.s0.fused.my.loop_min, Out.s0.fused.my.loop_extent) {
                                                         let Out.s0.yy_xx.loop_max = ((0 + 7) - 1)
                                                         let Out.s0.yy_xx.loop_min = 0
                                                         let Out.s0.yy_xx.loop_extent = ((((0 + 7) - 1) + 1) - 0)
                                                         let Out.s0.fused.yy_xx.loop_extent = 1
                                                         let Out.s0.fused.yy_xx.loop_max = C.s0.fused.yy_xx
                                                         let Out.s0.fused.yy_xx.loop_min = C.s0.fused.yy_xx
                                                         for (Out.s0.fused.yy_xx, Out.s0.fused.yy_xx.loop_min, Out.s0.fused.yy_xx.loop_extent) {
                                                          let Out.s0.yyy_xxx.loop_max = ((0 + 7) - 1)
                                                          let Out.s0.yyy_xxx.loop_min = 0
                                                          let Out.s0.yyy_xxx.loop_extent = ((((0 + 7) - 1) + 1) - 0)
                                                          let Out.s0.fused.yyy_xxx.loop_extent = 1
                                                          let Out.s0.fused.yyy_xxx.loop_max = C.s0.fused.yyy_xxx
                                                          let Out.s0.fused.yyy_xxx.loop_min = C.s0.fused.yyy_xxx
                                                          for (Out.s0.fused.yyy_xxx, Out.s0.fused.yyy_xxx.loop_min, Out.s0.fused.yyy_xxx.loop_extent) {
                                                           let Out.s0.coo.loop_max = ((0 + 1) - 1)
                                                           let Out.s0.coo.loop_min = 0
                                                           let Out.s0.coo.loop_extent = ((((0 + 1) - 1) + 1) - 0)
                                                           let Out.s0.fused.coo.loop_extent = 1
                                                           let Out.s0.fused.coo.loop_max = C.s0.fused.coo
                                                           let Out.s0.fused.coo.loop_min = C.s0.fused.coo
                                                           for (Out.s0.fused.coo, Out.s0.fused.coo.loop_min, Out.s0.fused.coo.loop_extent) {
                                                            let Out.s0.y_x.loop_max = ((0 + 1) - 1)
                                                            let Out.s0.y_x.loop_min = 0
                                                            let Out.s0.y_x.loop_extent = ((((0 + 1) - 1) + 1) - 0)
                                                            let Out.s0.fused.y_x.loop_extent = 1
                                                            let Out.s0.fused.y_x.loop_max = C.s0.fused.y_x
                                                            let Out.s0.fused.y_x.loop_min = C.s0.fused.y_x
                                                            for (Out.s0.fused.y_x, Out.s0.fused.y_x.loop_min, Out.s0.fused.y_x.loop_extent) {
                                                             let Out.s0.cooo.loop_max = ((0 + 8) - 1)
                                                             let Out.s0.cooo.loop_min = 0
                                                             let Out.s0.cooo.loop_extent = ((((0 + 8) - 1) + 1) - 0)
                                                             let Out.s0.fused.cooo.loop_extent = 1
                                                             let Out.s0.fused.cooo.loop_max = C.s0.fused.cooo
                                                             let Out.s0.fused.cooo.loop_min = C.s0.fused.cooo
                                                             for (Out.s0.fused.cooo, Out.s0.fused.cooo.loop_min, Out.s0.fused.cooo.loop_extent) {
                                                              Out(Out.s0.fused.cooo, Out.s0.fused.yyy_xxx, Out.s0.fused.yy_xx, Out.s0.fused.y_x, Out.s0.fused.my, Out.s0.fused.mx, Out.s0.fused.coo, Out.s0.fused.nn, Out.s0.fused.co, Out.s0.fused.n) = select((((((C.s0.fused.cii == 3) && (C.s0.fused.ci == 7)) && (C.s0.fused.mk == 3)) && (C.s0.fused.ky == 2)) && (C.s0.fused.kx == 2)), C(C.s0.fused.cii, C.s0.fused.cooo, C.s0.fused.yyy_xxx, C.s0.fused.yy_xx, C.s0.fused.y_x, C.s0.fused.my, C.s0.fused.mx, C.s0.fused.coo, C.s0.fused.nn, C.s0.fused.ky, C.s0.fused.kx, C.s0.fused.ci, C.s0.fused.mk, C.s0.fused.co, C.s0.fused.n))
                                                             }
                                                            }
                                                           }
                                                          }
                                                         }
                                                        }
                                                       }
                                                      }
                                                     }
                                                    }
                                                   }
                                                  }
                                                 }
                                                }
                                               }
                                              }
                                             }
                                            }
                                           }
                                          }
                                         }
                                        }
                                       }
                                      }
                                     }
                                    }
                                   }
                                  }
                                 }
                                }
                               }
                              }
                             }
                            }
                           }
                          }
                         }
                        }
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
   consume C {
    consume B {
     consume A {
      0
     }
    }
   }
  }
 }
}

Applying space time transformation...
realize C[C.cii.min_realized, C.cii.extent_realized], [C.cooo.min_realized, C.cooo.extent_realized], [C.yyy_xxx.min_realized, C.yyy_xxx.extent_realized], [C.yy_xx.min_realized, C.yy_xx.extent_realized], [C.y_x.min_realized, C.y_x.extent_realized], [C.my.min_realized, C.my.extent_realized], [C.mx.min_realized, C.mx.extent_realized], [C.coo.min_realized, C.coo.extent_realized], [C.nn.min_realized, C.nn.extent_realized], [C.ky.min_realized, C.ky.extent_realized], [C.kx.min_realized, C.kx.extent_realized], [C.ci.min_realized, C.ci.extent_realized], [C.mk.min_realized, C.mk.extent_realized], [C.co.min_realized, C.co.extent_realized], [C.n.min_realized, C.n.extent_realized] of type `float32' {
 realize B[B.cii.min_realized, B.cii.extent_realized], [B.cooo.min_realized, B.cooo.extent_realized], [B.yyy_xxx.min_realized, B.yyy_xxx.extent_realized], [B.yy_xx.min_realized, B.yy_xx.extent_realized], [B.y_x.min_realized, B.y_x.extent_realized], [B.my.min_realized, B.my.extent_realized], [B.mx.min_realized, B.mx.extent_realized], [B.coo.min_realized, B.coo.extent_realized], [B.nn.min_realized, B.nn.extent_realized], [B.ky.min_realized, B.ky.extent_realized], [B.kx.min_realized, B.kx.extent_realized], [B.ci.min_realized, B.ci.extent_realized], [B.mk.min_realized, B.mk.extent_realized], [B.co.min_realized, B.co.extent_realized], [B.n.min_realized, B.n.extent_realized] of type `float32' {
  realize A[A.cii.min_realized, A.cii.extent_realized], [A.cooo.min_realized, A.cooo.extent_realized], [A.yyy_xxx.min_realized, A.yyy_xxx.extent_realized], [A.yy_xx.min_realized, A.yy_xx.extent_realized], [A.y_x.min_realized, A.y_x.extent_realized], [A.my.min_realized, A.my.extent_realized], [A.mx.min_realized, A.mx.extent_realized], [A.coo.min_realized, A.coo.extent_realized], [A.nn.min_realized, A.nn.extent_realized], [A.ky.min_realized, A.ky.extent_realized], [A.kx.min_realized, A.kx.extent_realized], [A.ci.min_realized, A.ci.extent_realized], [A.mk.min_realized, A.mk.extent_realized], [A.co.min_realized, A.co.extent_realized], [A.n.min_realized, A.n.extent_realized] of type `float32' {
   produce Out {
    produce C {
     produce B {
      produce A {
       let A.s0.n.loop_max = ((0 + (P.extent.1/3600)) - 1)
       let A.s0.n.loop_min = 0
       let A.s0.n.loop_extent = ((((0 + (P.extent.1/3600)) - 1) + 1) - 0)
       gpu_block<Default_GPU> (A.s0.n, A.s0.n.loop_min, A.s0.n.loop_extent) {
        let A.s0.nn.loop_max = ((0 + 16) - 1)
        let A.s0.nn.loop_min = 0
        let A.s0.nn.loop_extent = ((((0 + 16) - 1) + 1) - 0)
        gpu_block<Default_GPU> (A.s0.nn, A.s0.nn.loop_min, A.s0.nn.loop_extent) {
         let A.s0.co.loop_max = ((0 + 4) - 1)
         let A.s0.co.loop_min = 0
         let A.s0.co.loop_extent = ((((0 + 4) - 1) + 1) - 0)
         gpu_block<Default_GPU> (A.s0.co, A.s0.co.loop_min, A.s0.co.loop_extent) {
          let A.s0.mx.loop_max = ((0 + 4) - 1)
          let A.s0.mx.loop_min = 0
          let A.s0.mx.loop_extent = ((((0 + 4) - 1) + 1) - 0)
          gpu_thread<Default_GPU> (A.s0.mx, A.s0.mx.loop_min, A.s0.mx.loop_extent) {
           let A.s0.my.loop_max = ((0 + 4) - 1)
           let A.s0.my.loop_min = 0
           let A.s0.my.loop_extent = ((((0 + 4) - 1) + 1) - 0)
           gpu_thread<Default_GPU> (A.s0.my, A.s0.my.loop_min, A.s0.my.loop_extent) {
            let A.s0.mk.loop_max = ((0 + 4) - 1)
            let A.s0.mk.loop_min = 0
            let A.s0.mk.loop_extent = ((((0 + 4) - 1) + 1) - 0)
            for (A.s0.mk, A.s0.mk.loop_min, A.s0.mk.loop_extent) {
             let A.s0.ci.loop_max = ((0 + 8) - 1)
             let A.s0.ci.loop_min = 0
             let A.s0.ci.loop_extent = ((((0 + 8) - 1) + 1) - 0)
             for (A.s0.ci, A.s0.ci.loop_min, A.s0.ci.loop_extent) {
              let A.s0.yy_xx.loop_max = ((0 + 7) - 1)
              let A.s0.yy_xx.loop_min = 0
              let A.s0.yy_xx.loop_extent = ((((0 + 7) - 1) + 1) - 0)
              for (A.s0.yy_xx, A.s0.yy_xx.loop_min, A.s0.yy_xx.loop_extent) {
               let A.s0.yyy_xxx.loop_max = ((0 + 7) - 1)
               let A.s0.yyy_xxx.loop_min = 0
               let A.s0.yyy_xxx.loop_extent = ((((0 + 7) - 1) + 1) - 0)
               for (A.s0.yyy_xxx, A.s0.yyy_xxx.loop_min, A.s0.yyy_xxx.loop_extent) {
                let A.s0.kx.loop_max = ((0 + 3) - 1)
                let A.s0.kx.loop_min = 0
                let A.s0.kx.loop_extent = ((((0 + 3) - 1) + 1) - 0)
                for (A.s0.kx, A.s0.kx.loop_min, A.s0.kx.loop_extent) {
                 let A.s0.ky.loop_max = ((0 + 3) - 1)
                 let A.s0.ky.loop_min = 0
                 let A.s0.ky.loop_extent = ((((0 + 3) - 1) + 1) - 0)
                 for (A.s0.ky, A.s0.ky.loop_min, A.s0.ky.loop_extent) {
                  let A.s0.coo.loop_max = ((0 + 1) - 1)
                  let A.s0.coo.loop_min = 0
                  let A.s0.coo.loop_extent = ((((0 + 1) - 1) + 1) - 0)
                  for (A.s0.coo, A.s0.coo.loop_min, A.s0.coo.loop_extent) {
                   let A.s0.y_x.loop_max = ((0 + 1) - 1)
                   let A.s0.y_x.loop_min = 0
                   let A.s0.y_x.loop_extent = ((((0 + 1) - 1) + 1) - 0)
                   for (A.s0.y_x, A.s0.y_x.loop_min, A.s0.y_x.loop_extent) {
                    let A.s0.cooo.loop_max = ((0 + 8) - 1)
                    let A.s0.cooo.loop_min = 0
                    let A.s0.cooo.loop_extent = ((((0 + 8) - 1) + 1) - 0)
                    vectorized (A.s0.cooo, A.s0.cooo.loop_min, A.s0.cooo.loop_extent) {
                     let A.s0.cii.loop_max = ((0 + 4) - 1)
                     let A.s0.cii.loop_min = 0
                     let A.s0.cii.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                     for (A.s0.cii, A.s0.cii.loop_min, A.s0.cii.loop_extent) {
                      A(A.s0.cii, A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, A.s0.y_x, A.s0.my, A.s0.mx, A.s0.coo, A.s0.nn, A.s0.ky, A.s0.kx, A.s0.ci, A.s0.mk, A.s0.co, A.s0.n) = (let t0 = ((A.s0.yyy_xxx + (7*A.s0.yy_xx)) + (49*A.s0.y_x)) in select((A.s0.cooo == 0), (float32)P(((((A.s0.cii + (4*A.s0.ci)) + (32*A.s0.mk)) + (128*A.s0.mx)) + (512*A.s0.nn)), (((((t0 % 7)*2) + A.s0.ky) + (15*(((t0/7)*2) + A.s0.kx))) + (225*A.s0.n))), A(A.s0.cii, (A.s0.cooo - 1), A.s0.yyy_xxx, A.s0.yy_xx, A.s0.y_x, A.s0.my, A.s0.mx, A.s0.coo, A.s0.nn, A.s0.ky, A.s0.kx, A.s0.ci, A.s0.mk, A.s0.co, A.s0.n)))
                      let B.s0.n.loop_max = ((0 + (P.extent.1/3600)) - 1)
                      let B.s0.n.loop_min = 0
                      let B.s0.n.loop_extent = ((((0 + (P.extent.1/3600)) - 1) + 1) - 0)
                      let B.s0.fused.n.loop_extent = 1
                      let B.s0.fused.n.loop_max = A.s0.n
                      let B.s0.fused.n.loop_min = A.s0.n
                      for (B.s0.fused.n, B.s0.fused.n.loop_min, B.s0.fused.n.loop_extent) {
                       let B.s0.nn.loop_max = ((0 + 16) - 1)
                       let B.s0.nn.loop_min = 0
                       let B.s0.nn.loop_extent = ((((0 + 16) - 1) + 1) - 0)
                       let B.s0.fused.nn.loop_extent = 1
                       let B.s0.fused.nn.loop_max = A.s0.nn
                       let B.s0.fused.nn.loop_min = A.s0.nn
                       for (B.s0.fused.nn, B.s0.fused.nn.loop_min, B.s0.fused.nn.loop_extent) {
                        let B.s0.co.loop_max = ((0 + 4) - 1)
                        let B.s0.co.loop_min = 0
                        let B.s0.co.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                        let B.s0.fused.co.loop_extent = 1
                        let B.s0.fused.co.loop_max = A.s0.co
                        let B.s0.fused.co.loop_min = A.s0.co
                        for (B.s0.fused.co, B.s0.fused.co.loop_min, B.s0.fused.co.loop_extent) {
                         let B.s0.mx.loop_max = ((0 + 4) - 1)
                         let B.s0.mx.loop_min = 0
                         let B.s0.mx.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                         let B.s0.fused.mx.loop_extent = 1
                         let B.s0.fused.mx.loop_max = A.s0.mx
                         let B.s0.fused.mx.loop_min = A.s0.mx
                         for (B.s0.fused.mx, B.s0.fused.mx.loop_min, B.s0.fused.mx.loop_extent) {
                          let B.s0.my.loop_max = ((0 + 4) - 1)
                          let B.s0.my.loop_min = 0
                          let B.s0.my.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                          let B.s0.fused.my.loop_extent = 1
                          let B.s0.fused.my.loop_max = A.s0.my
                          let B.s0.fused.my.loop_min = A.s0.my
                          for (B.s0.fused.my, B.s0.fused.my.loop_min, B.s0.fused.my.loop_extent) {
                           let B.s0.mk.loop_max = ((0 + 4) - 1)
                           let B.s0.mk.loop_min = 0
                           let B.s0.mk.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                           let B.s0.fused.mk.loop_extent = 1
                           let B.s0.fused.mk.loop_max = A.s0.mk
                           let B.s0.fused.mk.loop_min = A.s0.mk
                           for (B.s0.fused.mk, B.s0.fused.mk.loop_min, B.s0.fused.mk.loop_extent) {
                            let B.s0.ci.loop_max = ((0 + 8) - 1)
                            let B.s0.ci.loop_min = 0
                            let B.s0.ci.loop_extent = ((((0 + 8) - 1) + 1) - 0)
                            let B.s0.fused.ci.loop_extent = 1
                            let B.s0.fused.ci.loop_max = A.s0.ci
                            let B.s0.fused.ci.loop_min = A.s0.ci
                            for (B.s0.fused.ci, B.s0.fused.ci.loop_min, B.s0.fused.ci.loop_extent) {
                             let B.s0.yy_xx.loop_max = ((0 + 7) - 1)
                             let B.s0.yy_xx.loop_min = 0
                             let B.s0.yy_xx.loop_extent = ((((0 + 7) - 1) + 1) - 0)
                             let B.s0.fused.yy_xx.loop_extent = 1
                             let B.s0.fused.yy_xx.loop_max = A.s0.yy_xx
                             let B.s0.fused.yy_xx.loop_min = A.s0.yy_xx
                             for (B.s0.fused.yy_xx, B.s0.fused.yy_xx.loop_min, B.s0.fused.yy_xx.loop_extent) {
                              let B.s0.yyy_xxx.loop_max = ((0 + 7) - 1)
                              let B.s0.yyy_xxx.loop_min = 0
                              let B.s0.yyy_xxx.loop_extent = ((((0 + 7) - 1) + 1) - 0)
                              let B.s0.fused.yyy_xxx.loop_extent = 1
                              let B.s0.fused.yyy_xxx.loop_max = A.s0.yyy_xxx
                              let B.s0.fused.yyy_xxx.loop_min = A.s0.yyy_xxx
                              for (B.s0.fused.yyy_xxx, B.s0.fused.yyy_xxx.loop_min, B.s0.fused.yyy_xxx.loop_extent) {
                               let B.s0.kx.loop_max = ((0 + 3) - 1)
                               let B.s0.kx.loop_min = 0
                               let B.s0.kx.loop_extent = ((((0 + 3) - 1) + 1) - 0)
                               let B.s0.fused.kx.loop_extent = 1
                               let B.s0.fused.kx.loop_max = A.s0.kx
                               let B.s0.fused.kx.loop_min = A.s0.kx
                               for (B.s0.fused.kx, B.s0.fused.kx.loop_min, B.s0.fused.kx.loop_extent) {
                                let B.s0.ky.loop_max = ((0 + 3) - 1)
                                let B.s0.ky.loop_min = 0
                                let B.s0.ky.loop_extent = ((((0 + 3) - 1) + 1) - 0)
                                let B.s0.fused.ky.loop_extent = 1
                                let B.s0.fused.ky.loop_max = A.s0.ky
                                let B.s0.fused.ky.loop_min = A.s0.ky
                                for (B.s0.fused.ky, B.s0.fused.ky.loop_min, B.s0.fused.ky.loop_extent) {
                                 let B.s0.coo.loop_max = ((0 + 1) - 1)
                                 let B.s0.coo.loop_min = 0
                                 let B.s0.coo.loop_extent = ((((0 + 1) - 1) + 1) - 0)
                                 let B.s0.fused.coo.loop_extent = 1
                                 let B.s0.fused.coo.loop_max = A.s0.coo
                                 let B.s0.fused.coo.loop_min = A.s0.coo
                                 for (B.s0.fused.coo, B.s0.fused.coo.loop_min, B.s0.fused.coo.loop_extent) {
                                  let B.s0.y_x.loop_max = ((0 + 1) - 1)
                                  let B.s0.y_x.loop_min = 0
                                  let B.s0.y_x.loop_extent = ((((0 + 1) - 1) + 1) - 0)
                                  let B.s0.fused.y_x.loop_extent = 1
                                  let B.s0.fused.y_x.loop_max = A.s0.y_x
                                  let B.s0.fused.y_x.loop_min = A.s0.y_x
                                  for (B.s0.fused.y_x, B.s0.fused.y_x.loop_min, B.s0.fused.y_x.loop_extent) {
                                   let B.s0.cooo.loop_max = ((0 + 8) - 1)
                                   let B.s0.cooo.loop_min = 0
                                   let B.s0.cooo.loop_extent = ((((0 + 8) - 1) + 1) - 0)
                                   let B.s0.fused.cooo.loop_extent = 1
                                   let B.s0.fused.cooo.loop_max = A.s0.cooo
                                   let B.s0.fused.cooo.loop_min = A.s0.cooo
                                   for (B.s0.fused.cooo, B.s0.fused.cooo.loop_min, B.s0.fused.cooo.loop_extent) {
                                    let B.s0.cii.loop_max = ((0 + 4) - 1)
                                    let B.s0.cii.loop_min = 0
                                    let B.s0.cii.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                                    let B.s0.fused.cii.loop_extent = 1
                                    let B.s0.fused.cii.loop_max = A.s0.cii
                                    let B.s0.fused.cii.loop_min = A.s0.cii
                                    for (B.s0.fused.cii, B.s0.fused.cii.loop_min, B.s0.fused.cii.loop_extent) {
                                     B(B.s0.fused.cii, B.s0.fused.cooo, B.s0.fused.yyy_xxx, B.s0.fused.yy_xx, B.s0.fused.y_x, B.s0.fused.my, B.s0.fused.mx, B.s0.fused.coo, B.s0.fused.nn, B.s0.fused.ky, B.s0.fused.kx, B.s0.fused.ci, B.s0.fused.mk, B.s0.fused.co, B.s0.fused.n) = select((B.s0.fused.yyy_xxx == 0), (float32)W((((B.s0.fused.cooo + (8*B.s0.fused.coo)) + (8*B.s0.fused.co)) + (32*B.s0.fused.my)), ((((B.s0.fused.cii + (4*B.s0.fused.ky)) + (12*B.s0.fused.kx)) + (36*B.s0.fused.ci)) + (288*B.s0.fused.mk))), B(B.s0.fused.cii, B.s0.fused.cooo, (B.s0.fused.yyy_xxx - 1), B.s0.fused.yy_xx, B.s0.fused.y_x, B.s0.fused.my, B.s0.fused.mx, B.s0.fused.coo, B.s0.fused.nn, B.s0.fused.ky, B.s0.fused.kx, B.s0.fused.ci, B.s0.fused.mk, B.s0.fused.co, B.s0.fused.n))
                                     let C.s0.n.loop_max = ((0 + (P.extent.1/3600)) - 1)
                                     let C.s0.n.loop_min = 0
                                     let C.s0.n.loop_extent = ((((0 + (P.extent.1/3600)) - 1) + 1) - 0)
                                     let C.s0.fused.n.loop_extent = 1
                                     let C.s0.fused.n.loop_max = B.s0.fused.n
                                     let C.s0.fused.n.loop_min = B.s0.fused.n
                                     for (C.s0.fused.n, C.s0.fused.n.loop_min, C.s0.fused.n.loop_extent) {
                                      let C.s0.nn.loop_max = ((0 + 16) - 1)
                                      let C.s0.nn.loop_min = 0
                                      let C.s0.nn.loop_extent = ((((0 + 16) - 1) + 1) - 0)
                                      let C.s0.fused.nn.loop_extent = 1
                                      let C.s0.fused.nn.loop_max = B.s0.fused.nn
                                      let C.s0.fused.nn.loop_min = B.s0.fused.nn
                                      for (C.s0.fused.nn, C.s0.fused.nn.loop_min, C.s0.fused.nn.loop_extent) {
                                       let C.s0.co.loop_max = ((0 + 4) - 1)
                                       let C.s0.co.loop_min = 0
                                       let C.s0.co.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                                       let C.s0.fused.co.loop_extent = 1
                                       let C.s0.fused.co.loop_max = B.s0.fused.co
                                       let C.s0.fused.co.loop_min = B.s0.fused.co
                                       for (C.s0.fused.co, C.s0.fused.co.loop_min, C.s0.fused.co.loop_extent) {
                                        let C.s0.mx.loop_max = ((0 + 4) - 1)
                                        let C.s0.mx.loop_min = 0
                                        let C.s0.mx.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                                        let C.s0.fused.mx.loop_extent = 1
                                        let C.s0.fused.mx.loop_max = B.s0.fused.mx
                                        let C.s0.fused.mx.loop_min = B.s0.fused.mx
                                        for (C.s0.fused.mx, C.s0.fused.mx.loop_min, C.s0.fused.mx.loop_extent) {
                                         let C.s0.my.loop_max = ((0 + 4) - 1)
                                         let C.s0.my.loop_min = 0
                                         let C.s0.my.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                                         let C.s0.fused.my.loop_extent = 1
                                         let C.s0.fused.my.loop_max = B.s0.fused.my
                                         let C.s0.fused.my.loop_min = B.s0.fused.my
                                         for (C.s0.fused.my, C.s0.fused.my.loop_min, C.s0.fused.my.loop_extent) {
                                          let C.s0.mk.loop_max = ((0 + 4) - 1)
                                          let C.s0.mk.loop_min = 0
                                          let C.s0.mk.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                                          let C.s0.fused.mk.loop_extent = 1
                                          let C.s0.fused.mk.loop_max = B.s0.fused.mk
                                          let C.s0.fused.mk.loop_min = B.s0.fused.mk
                                          for (C.s0.fused.mk, C.s0.fused.mk.loop_min, C.s0.fused.mk.loop_extent) {
                                           let C.s0.ci.loop_max = ((0 + 8) - 1)
                                           let C.s0.ci.loop_min = 0
                                           let C.s0.ci.loop_extent = ((((0 + 8) - 1) + 1) - 0)
                                           let C.s0.fused.ci.loop_extent = 1
                                           let C.s0.fused.ci.loop_max = B.s0.fused.ci
                                           let C.s0.fused.ci.loop_min = B.s0.fused.ci
                                           for (C.s0.fused.ci, C.s0.fused.ci.loop_min, C.s0.fused.ci.loop_extent) {
                                            let C.s0.yy_xx.loop_max = ((0 + 7) - 1)
                                            let C.s0.yy_xx.loop_min = 0
                                            let C.s0.yy_xx.loop_extent = ((((0 + 7) - 1) + 1) - 0)
                                            let C.s0.fused.yy_xx.loop_extent = 1
                                            let C.s0.fused.yy_xx.loop_max = B.s0.fused.yy_xx
                                            let C.s0.fused.yy_xx.loop_min = B.s0.fused.yy_xx
                                            for (C.s0.fused.yy_xx, C.s0.fused.yy_xx.loop_min, C.s0.fused.yy_xx.loop_extent) {
                                             let C.s0.yyy_xxx.loop_max = ((0 + 7) - 1)
                                             let C.s0.yyy_xxx.loop_min = 0
                                             let C.s0.yyy_xxx.loop_extent = ((((0 + 7) - 1) + 1) - 0)
                                             let C.s0.fused.yyy_xxx.loop_extent = 1
                                             let C.s0.fused.yyy_xxx.loop_max = B.s0.fused.yyy_xxx
                                             let C.s0.fused.yyy_xxx.loop_min = B.s0.fused.yyy_xxx
                                             for (C.s0.fused.yyy_xxx, C.s0.fused.yyy_xxx.loop_min, C.s0.fused.yyy_xxx.loop_extent) {
                                              let C.s0.kx.loop_max = ((0 + 3) - 1)
                                              let C.s0.kx.loop_min = 0
                                              let C.s0.kx.loop_extent = ((((0 + 3) - 1) + 1) - 0)
                                              let C.s0.fused.kx.loop_extent = 1
                                              let C.s0.fused.kx.loop_max = B.s0.fused.kx
                                              let C.s0.fused.kx.loop_min = B.s0.fused.kx
                                              for (C.s0.fused.kx, C.s0.fused.kx.loop_min, C.s0.fused.kx.loop_extent) {
                                               let C.s0.ky.loop_max = ((0 + 3) - 1)
                                               let C.s0.ky.loop_min = 0
                                               let C.s0.ky.loop_extent = ((((0 + 3) - 1) + 1) - 0)
                                               let C.s0.fused.ky.loop_extent = 1
                                               let C.s0.fused.ky.loop_max = B.s0.fused.ky
                                               let C.s0.fused.ky.loop_min = B.s0.fused.ky
                                               for (C.s0.fused.ky, C.s0.fused.ky.loop_min, C.s0.fused.ky.loop_extent) {
                                                let C.s0.coo.loop_max = ((0 + 1) - 1)
                                                let C.s0.coo.loop_min = 0
                                                let C.s0.coo.loop_extent = ((((0 + 1) - 1) + 1) - 0)
                                                let C.s0.fused.coo.loop_extent = 1
                                                let C.s0.fused.coo.loop_max = B.s0.fused.coo
                                                let C.s0.fused.coo.loop_min = B.s0.fused.coo
                                                for (C.s0.fused.coo, C.s0.fused.coo.loop_min, C.s0.fused.coo.loop_extent) {
                                                 let C.s0.y_x.loop_max = ((0 + 1) - 1)
                                                 let C.s0.y_x.loop_min = 0
                                                 let C.s0.y_x.loop_extent = ((((0 + 1) - 1) + 1) - 0)
                                                 let C.s0.fused.y_x.loop_extent = 1
                                                 let C.s0.fused.y_x.loop_max = B.s0.fused.y_x
                                                 let C.s0.fused.y_x.loop_min = B.s0.fused.y_x
                                                 for (C.s0.fused.y_x, C.s0.fused.y_x.loop_min, C.s0.fused.y_x.loop_extent) {
                                                  let C.s0.cooo.loop_max = ((0 + 8) - 1)
                                                  let C.s0.cooo.loop_min = 0
                                                  let C.s0.cooo.loop_extent = ((((0 + 8) - 1) + 1) - 0)
                                                  let C.s0.fused.cooo.loop_extent = 1
                                                  let C.s0.fused.cooo.loop_max = B.s0.fused.cooo
                                                  let C.s0.fused.cooo.loop_min = B.s0.fused.cooo
                                                  for (C.s0.fused.cooo, C.s0.fused.cooo.loop_min, C.s0.fused.cooo.loop_extent) {
                                                   let C.s0.cii.loop_max = ((0 + 4) - 1)
                                                   let C.s0.cii.loop_min = 0
                                                   let C.s0.cii.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                                                   let C.s0.fused.cii.loop_extent = 1
                                                   let C.s0.fused.cii.loop_max = B.s0.fused.cii
                                                   let C.s0.fused.cii.loop_min = B.s0.fused.cii
                                                   for (C.s0.fused.cii, C.s0.fused.cii.loop_min, C.s0.fused.cii.loop_extent) {
                                                    C(C.s0.fused.cii, C.s0.fused.cooo, C.s0.fused.yyy_xxx, C.s0.fused.yy_xx, C.s0.fused.y_x, C.s0.fused.my, C.s0.fused.mx, C.s0.fused.coo, C.s0.fused.nn, C.s0.fused.ky, C.s0.fused.kx, C.s0.fused.ci, C.s0.fused.mk, C.s0.fused.co, C.s0.fused.n) = (select((((((C.s0.fused.cii == 0) && (C.s0.fused.ci == 0)) && (C.s0.fused.mk == 0)) && (C.s0.fused.ky == 0)) && (C.s0.fused.kx == 0)), 0.000000f, select((C.s0.fused.cii == 0), select((C.s0.fused.ky == 0), select((C.s0.fused.kx == 0), select((C.s0.fused.ci == 0), C(((C.s0.fused.cii + 4) - 1), C.s0.fused.cooo, C.s0.fused.yyy_xxx, C.s0.fused.yy_xx, C.s0.fused.y_x, C.s0.fused.my, C.s0.fused.mx, C.s0.fused.coo, C.s0.fused.nn, ((C.s0.fused.ky + 3) - 1), ((C.s0.fused.kx + 3) - 1), ((C.s0.fused.ci + 8) - 1), (C.s0.fused.mk - 1), C.s0.fused.co, C.s0.fused.n), C(((C.s0.fused.cii + 4) - 1), C.s0.fused.cooo, C.s0.fused.yyy_xxx, C.s0.fused.yy_xx, C.s0.fused.y_x, C.s0.fused.my, C.s0.fused.mx, C.s0.fused.coo, C.s0.fused.nn, ((C.s0.fused.ky + 3) - 1), ((C.s0.fused.kx + 3) - 1), (C.s0.fused.ci - 1), C.s0.fused.mk, C.s0.fused.co, C.s0.fused.n)), C(((C.s0.fused.cii + 4) - 1), C.s0.fused.cooo, C.s0.fused.yyy_xxx, C.s0.fused.yy_xx, C.s0.fused.y_x, C.s0.fused.my, C.s0.fused.mx, C.s0.fused.coo, C.s0.fused.nn, ((C.s0.fused.ky + 3) - 1), (C.s0.fused.kx - 1), C.s0.fused.ci, C.s0.fused.mk, C.s0.fused.co, C.s0.fused.n)), C(((C.s0.fused.cii + 4) - 1), C.s0.fused.cooo, C.s0.fused.yyy_xxx, C.s0.fused.yy_xx, C.s0.fused.y_x, C.s0.fused.my, C.s0.fused.mx, C.s0.fused.coo, C.s0.fused.nn, (C.s0.fused.ky - 1), C.s0.fused.kx, C.s0.fused.ci, C.s0.fused.mk, C.s0.fused.co, C.s0.fused.n)), C((C.s0.fused.cii - 1), C.s0.fused.cooo, C.s0.fused.yyy_xxx, C.s0.fused.yy_xx, C.s0.fused.y_x, C.s0.fused.my, C.s0.fused.mx, C.s0.fused.coo, C.s0.fused.nn, C.s0.fused.ky, C.s0.fused.kx, C.s0.fused.ci, C.s0.fused.mk, C.s0.fused.co, C.s0.fused.n))) + (A(C.s0.fused.cii, C.s0.fused.cooo, C.s0.fused.yyy_xxx, C.s0.fused.yy_xx, C.s0.fused.y_x, C.s0.fused.my, C.s0.fused.mx, C.s0.fused.coo, C.s0.fused.nn, C.s0.fused.ky, C.s0.fused.kx, C.s0.fused.ci, C.s0.fused.mk, C.s0.fused.co, C.s0.fused.n)*B(C.s0.fused.cii, C.s0.fused.cooo, C.s0.fused.yyy_xxx, C.s0.fused.yy_xx, C.s0.fused.y_x, C.s0.fused.my, C.s0.fused.mx, C.s0.fused.coo, C.s0.fused.nn, C.s0.fused.ky, C.s0.fused.kx, C.s0.fused.ci, C.s0.fused.mk, C.s0.fused.co, C.s0.fused.n)))
                                                    let Out.s0.n.loop_max = ((0 + (P.extent.1/3600)) - 1)
                                                    let Out.s0.n.loop_min = 0
                                                    let Out.s0.n.loop_extent = ((((0 + (P.extent.1/3600)) - 1) + 1) - 0)
                                                    let Out.s0.fused.n.loop_extent = 1
                                                    let Out.s0.fused.n.loop_max = C.s0.fused.n
                                                    let Out.s0.fused.n.loop_min = C.s0.fused.n
                                                    for (Out.s0.fused.n, Out.s0.fused.n.loop_min, Out.s0.fused.n.loop_extent) {
                                                     let Out.s0.nn.loop_max = ((0 + 16) - 1)
                                                     let Out.s0.nn.loop_min = 0
                                                     let Out.s0.nn.loop_extent = ((((0 + 16) - 1) + 1) - 0)
                                                     let Out.s0.fused.nn.loop_extent = 1
                                                     let Out.s0.fused.nn.loop_max = C.s0.fused.nn
                                                     let Out.s0.fused.nn.loop_min = C.s0.fused.nn
                                                     for (Out.s0.fused.nn, Out.s0.fused.nn.loop_min, Out.s0.fused.nn.loop_extent) {
                                                      let Out.s0.co.loop_max = ((0 + 4) - 1)
                                                      let Out.s0.co.loop_min = 0
                                                      let Out.s0.co.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                                                      let Out.s0.fused.co.loop_extent = 1
                                                      let Out.s0.fused.co.loop_max = C.s0.fused.co
                                                      let Out.s0.fused.co.loop_min = C.s0.fused.co
                                                      for (Out.s0.fused.co, Out.s0.fused.co.loop_min, Out.s0.fused.co.loop_extent) {
                                                       let Out.s0.mx.loop_max = ((0 + 4) - 1)
                                                       let Out.s0.mx.loop_min = 0
                                                       let Out.s0.mx.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                                                       let Out.s0.fused.mx.loop_extent = 1
                                                       let Out.s0.fused.mx.loop_max = C.s0.fused.mx
                                                       let Out.s0.fused.mx.loop_min = C.s0.fused.mx
                                                       for (Out.s0.fused.mx, Out.s0.fused.mx.loop_min, Out.s0.fused.mx.loop_extent) {
                                                        let Out.s0.my.loop_max = ((0 + 4) - 1)
                                                        let Out.s0.my.loop_min = 0
                                                        let Out.s0.my.loop_extent = ((((0 + 4) - 1) + 1) - 0)
                                                        let Out.s0.fused.my.loop_extent = 1
                                                        let Out.s0.fused.my.loop_max = C.s0.fused.my
                                                        let Out.s0.fused.my.loop_min = C.s0.fused.my
                                                        for (Out.s0.fused.my, Out.s0.fused.my.loop_min, Out.s0.fused.my.loop_extent) {
                                                         let Out.s0.yy_xx.loop_max = ((0 + 7) - 1)
                                                         let Out.s0.yy_xx.loop_min = 0
                                                         let Out.s0.yy_xx.loop_extent = ((((0 + 7) - 1) + 1) - 0)
                                                         let Out.s0.fused.yy_xx.loop_extent = 1
                                                         let Out.s0.fused.yy_xx.loop_max = C.s0.fused.yy_xx
                                                         let Out.s0.fused.yy_xx.loop_min = C.s0.fused.yy_xx
                                                         for (Out.s0.fused.yy_xx, Out.s0.fused.yy_xx.loop_min, Out.s0.fused.yy_xx.loop_extent) {
                                                          let Out.s0.yyy_xxx.loop_max = ((0 + 7) - 1)
                                                          let Out.s0.yyy_xxx.loop_min = 0
                                                          let Out.s0.yyy_xxx.loop_extent = ((((0 + 7) - 1) + 1) - 0)
                                                          let Out.s0.fused.yyy_xxx.loop_extent = 1
                                                          let Out.s0.fused.yyy_xxx.loop_max = C.s0.fused.yyy_xxx
                                                          let Out.s0.fused.yyy_xxx.loop_min = C.s0.fused.yyy_xxx
                                                          for (Out.s0.fused.yyy_xxx, Out.s0.fused.yyy_xxx.loop_min, Out.s0.fused.yyy_xxx.loop_extent) {
                                                           let Out.s0.coo.loop_max = ((0 + 1) - 1)
                                                           let Out.s0.coo.loop_min = 0
                                                           let Out.s0.coo.loop_extent = ((((0 + 1) - 1) + 1) - 0)
                                                           let Out.s0.fused.coo.loop_extent = 1
                                                           let Out.s0.fused.coo.loop_max = C.s0.fused.coo
                                                           let Out.s0.fused.coo.loop_min = C.s0.fused.coo
                                                           for (Out.s0.fused.coo, Out.s0.fused.coo.loop_min, Out.s0.fused.coo.loop_extent) {
                                                            let Out.s0.y_x.loop_max = ((0 + 1) - 1)
                                                            let Out.s0.y_x.loop_min = 0
                                                            let Out.s0.y_x.loop_extent = ((((0 + 1) - 1) + 1) - 0)
                                                            let Out.s0.fused.y_x.loop_extent = 1
                                                            let Out.s0.fused.y_x.loop_max = C.s0.fused.y_x
                                                            let Out.s0.fused.y_x.loop_min = C.s0.fused.y_x
                                                            for (Out.s0.fused.y_x, Out.s0.fused.y_x.loop_min, Out.s0.fused.y_x.loop_extent) {
                                                             let Out.s0.cooo.loop_max = ((0 + 8) - 1)
                                                             let Out.s0.cooo.loop_min = 0
                                                             let Out.s0.cooo.loop_extent = ((((0 + 8) - 1) + 1) - 0)
                                                             let Out.s0.fused.cooo.loop_extent = 1
                                                             let Out.s0.fused.cooo.loop_max = C.s0.fused.cooo
                                                             let Out.s0.fused.cooo.loop_min = C.s0.fused.cooo
                                                             for (Out.s0.fused.cooo, Out.s0.fused.cooo.loop_min, Out.s0.fused.cooo.loop_extent) {
                                                              if ((((((C.s0.fused.cii == 3) && (C.s0.fused.ci == 7)) && (C.s0.fused.mk == 3)) && (C.s0.fused.ky == 2)) && (C.s0.fused.kx == 2))) {
                                                               Out(Out.s0.fused.cooo, Out.s0.fused.yyy_xxx, Out.s0.fused.yy_xx, Out.s0.fused.y_x, Out.s0.fused.my, Out.s0.fused.mx, Out.s0.fused.coo, Out.s0.fused.nn, Out.s0.fused.co, Out.s0.fused.n) = C(C.s0.fused.cii, C.s0.fused.cooo, C.s0.fused.yyy_xxx, C.s0.fused.yy_xx, C.s0.fused.y_x, C.s0.fused.my, C.s0.fused.mx, C.s0.fused.coo, C.s0.fused.nn, C.s0.fused.ky, C.s0.fused.kx, C.s0.fused.ci, C.s0.fused.mk, C.s0.fused.co, C.s0.fused.n)
                                                              }
                                                             }
                                                            }
                                                           }
                                                          }
                                                         }
                                                        }
                                                       }
                                                      }
                                                     }
                                                    }
                                                   }
                                                  }
                                                 }
                                                }
                                               }
                                              }
                                             }
                                            }
                                           }
                                          }
                                         }
                                        }
                                       }
                                      }
                                     }
                                    }
                                   }
                                  }
                                 }
                                }
                               }
                              }
                             }
                            }
                           }
                          }
                         }
                        }
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
   consume C {
    consume B {
     consume A {
      0
     }
    }
   }
  }
 }
}
simplify let A.s0.n.loop_max = ((P.extent.1/3600) + -1) in...
new let A.s0.n.loop_max.s = (undefined) in ... ((P.extent.1/3600) + -1) ...
simplify let A.s0.n.loop_min = 0 in...
new let A.s0.n.loop_min.s = (undefined) in ... 0 ...
simplify let A.s0.n.loop_extent = (P.extent.1/3600) in...
new let A.s0.n.loop_extent.s = (undefined) in ... (P.extent.1/3600) ...
simplify let A.s0.nn.loop_max = 15 in...
new let A.s0.nn.loop_max.s = (undefined) in ... 15 ...
simplify let A.s0.nn.loop_min = 0 in...
new let A.s0.nn.loop_min.s = (undefined) in ... 0 ...
simplify let A.s0.nn.loop_extent = 16 in...
new let A.s0.nn.loop_extent.s = (undefined) in ... 16 ...
simplify let A.s0.co.loop_max = 3 in...
new let A.s0.co.loop_max.s = (undefined) in ... 3 ...
simplify let A.s0.co.loop_min = 0 in...
new let A.s0.co.loop_min.s = (undefined) in ... 0 ...
simplify let A.s0.co.loop_extent = 4 in...
new let A.s0.co.loop_extent.s = (undefined) in ... 4 ...
simplify let A.s0.mx.loop_max = 3 in...
new let A.s0.mx.loop_max.s = (undefined) in ... 3 ...
simplify let A.s0.mx.loop_min = 0 in...
new let A.s0.mx.loop_min.s = (undefined) in ... 0 ...
simplify let A.s0.mx.loop_extent = 4 in...
new let A.s0.mx.loop_extent.s = (undefined) in ... 4 ...
simplify let A.s0.my.loop_max = 3 in...
new let A.s0.my.loop_max.s = (undefined) in ... 3 ...
simplify let A.s0.my.loop_min = 0 in...
new let A.s0.my.loop_min.s = (undefined) in ... 0 ...
simplify let A.s0.my.loop_extent = 4 in...
new let A.s0.my.loop_extent.s = (undefined) in ... 4 ...
simplify let A.s0.mk.loop_max = 3 in...
new let A.s0.mk.loop_max.s = (undefined) in ... 3 ...
simplify let A.s0.mk.loop_min = 0 in...
new let A.s0.mk.loop_min.s = (undefined) in ... 0 ...
simplify let A.s0.mk.loop_extent = 4 in...
new let A.s0.mk.loop_extent.s = (undefined) in ... 4 ...
simplify let A.s0.ci.loop_max = 7 in...
new let A.s0.ci.loop_max.s = (undefined) in ... 7 ...
simplify let A.s0.ci.loop_min = 0 in...
new let A.s0.ci.loop_min.s = (undefined) in ... 0 ...
simplify let A.s0.ci.loop_extent = 8 in...
new let A.s0.ci.loop_extent.s = (undefined) in ... 8 ...
simplify let A.s0.yy_xx.loop_max = 6 in...
new let A.s0.yy_xx.loop_max.s = (undefined) in ... 6 ...
simplify let A.s0.yy_xx.loop_min = 0 in...
new let A.s0.yy_xx.loop_min.s = (undefined) in ... 0 ...
simplify let A.s0.yy_xx.loop_extent = 7 in...
new let A.s0.yy_xx.loop_extent.s = (undefined) in ... 7 ...
simplify let A.s0.yyy_xxx.loop_max = 6 in...
new let A.s0.yyy_xxx.loop_max.s = (undefined) in ... 6 ...
simplify let A.s0.yyy_xxx.loop_min = 0 in...
new let A.s0.yyy_xxx.loop_min.s = (undefined) in ... 0 ...
simplify let A.s0.yyy_xxx.loop_extent = 7 in...
new let A.s0.yyy_xxx.loop_extent.s = (undefined) in ... 7 ...
simplify let A.s0.kx.loop_max = 2 in...
new let A.s0.kx.loop_max.s = (undefined) in ... 2 ...
simplify let A.s0.kx.loop_min = 0 in...
new let A.s0.kx.loop_min.s = (undefined) in ... 0 ...
simplify let A.s0.kx.loop_extent = 3 in...
new let A.s0.kx.loop_extent.s = (undefined) in ... 3 ...
simplify let A.s0.ky.loop_max = 2 in...
new let A.s0.ky.loop_max.s = (undefined) in ... 2 ...
simplify let A.s0.ky.loop_min = 0 in...
new let A.s0.ky.loop_min.s = (undefined) in ... 0 ...
simplify let A.s0.ky.loop_extent = 3 in...
new let A.s0.ky.loop_extent.s = (undefined) in ... 3 ...
simplify let A.s0.coo.loop_max = 0 in...
new let A.s0.coo.loop_max.s = (undefined) in ... 0 ...
simplify let A.s0.coo.loop_min = 0 in...
new let A.s0.coo.loop_min.s = (undefined) in ... 0 ...
simplify let A.s0.coo.loop_extent = 1 in...
new let A.s0.coo.loop_extent.s = (undefined) in ... 1 ...
simplify let A.s0.y_x.loop_max = 0 in...
new let A.s0.y_x.loop_max.s = (undefined) in ... 0 ...
simplify let A.s0.y_x.loop_min = 0 in...
new let A.s0.y_x.loop_min.s = (undefined) in ... 0 ...
simplify let A.s0.y_x.loop_extent = 1 in...
new let A.s0.y_x.loop_extent.s = (undefined) in ... 1 ...
simplify let A.s0.cooo.loop_max = 7 in...
new let A.s0.cooo.loop_max.s = (undefined) in ... 7 ...
simplify let A.s0.cooo.loop_min = 0 in...
new let A.s0.cooo.loop_min.s = (undefined) in ... 0 ...
simplify let A.s0.cooo.loop_extent = 8 in...
new let A.s0.cooo.loop_extent.s = (undefined) in ... 8 ...
simplify let A.s0.cii.loop_max = 3 in...
new let A.s0.cii.loop_max.s = (undefined) in ... 3 ...
simplify let A.s0.cii.loop_min = 0 in...
new let A.s0.cii.loop_min.s = (undefined) in ... 0 ...
simplify let A.s0.cii.loop_extent = 4 in...
new let A.s0.cii.loop_extent.s = (undefined) in ... 4 ...
simplify let t0 = ((A.s0.y_x*49) + ((A.s0.yy_xx*7) + A.s0.yyy_xxx)) in...
simplify let B.s0.n.loop_max = ((P.extent.1/3600) + -1) in...
new let B.s0.n.loop_max.s = (undefined) in ... ((P.extent.1/3600) + -1) ...
simplify let B.s0.n.loop_min = 0 in...
new let B.s0.n.loop_min.s = (undefined) in ... 0 ...
simplify let B.s0.n.loop_extent = (P.extent.1/3600) in...
new let B.s0.n.loop_extent.s = (undefined) in ... (P.extent.1/3600) ...
simplify let B.s0.fused.n.loop_extent = 1 in...
new let B.s0.fused.n.loop_extent.s = (undefined) in ... 1 ...
simplify let B.s0.fused.n.loop_max = A.s0.n in...
new let B.s0.fused.n.loop_max.s = (undefined) in ... A.s0.n ...
simplify let B.s0.fused.n.loop_min = A.s0.n in...
new let B.s0.fused.n.loop_min.s = (undefined) in ... A.s0.n ...
simplify let B.s0.nn.loop_max = 15 in...
new let B.s0.nn.loop_max.s = (undefined) in ... 15 ...
simplify let B.s0.nn.loop_min = 0 in...
new let B.s0.nn.loop_min.s = (undefined) in ... 0 ...
simplify let B.s0.nn.loop_extent = 16 in...
new let B.s0.nn.loop_extent.s = (undefined) in ... 16 ...
simplify let B.s0.fused.nn.loop_extent = 1 in...
new let B.s0.fused.nn.loop_extent.s = (undefined) in ... 1 ...
simplify let B.s0.fused.nn.loop_max = A.s0.nn in...
new let B.s0.fused.nn.loop_max.s = (undefined) in ... A.s0.nn ...
simplify let B.s0.fused.nn.loop_min = A.s0.nn in...
new let B.s0.fused.nn.loop_min.s = (undefined) in ... A.s0.nn ...
simplify let B.s0.co.loop_max = 3 in...
new let B.s0.co.loop_max.s = (undefined) in ... 3 ...
simplify let B.s0.co.loop_min = 0 in...
new let B.s0.co.loop_min.s = (undefined) in ... 0 ...
simplify let B.s0.co.loop_extent = 4 in...
new let B.s0.co.loop_extent.s = (undefined) in ... 4 ...
simplify let B.s0.fused.co.loop_extent = 1 in...
new let B.s0.fused.co.loop_extent.s = (undefined) in ... 1 ...
simplify let B.s0.fused.co.loop_max = A.s0.co in...
new let B.s0.fused.co.loop_max.s = (undefined) in ... A.s0.co ...
simplify let B.s0.fused.co.loop_min = A.s0.co in...
new let B.s0.fused.co.loop_min.s = (undefined) in ... A.s0.co ...
simplify let B.s0.mx.loop_max = 3 in...
new let B.s0.mx.loop_max.s = (undefined) in ... 3 ...
simplify let B.s0.mx.loop_min = 0 in...
new let B.s0.mx.loop_min.s = (undefined) in ... 0 ...
simplify let B.s0.mx.loop_extent = 4 in...
new let B.s0.mx.loop_extent.s = (undefined) in ... 4 ...
simplify let B.s0.fused.mx.loop_extent = 1 in...
new let B.s0.fused.mx.loop_extent.s = (undefined) in ... 1 ...
simplify let B.s0.fused.mx.loop_max = A.s0.mx in...
new let B.s0.fused.mx.loop_max.s = (undefined) in ... A.s0.mx ...
simplify let B.s0.fused.mx.loop_min = A.s0.mx in...
new let B.s0.fused.mx.loop_min.s = (undefined) in ... A.s0.mx ...
simplify let B.s0.my.loop_max = 3 in...
new let B.s0.my.loop_max.s = (undefined) in ... 3 ...
simplify let B.s0.my.loop_min = 0 in...
new let B.s0.my.loop_min.s = (undefined) in ... 0 ...
simplify let B.s0.my.loop_extent = 4 in...
new let B.s0.my.loop_extent.s = (undefined) in ... 4 ...
simplify let B.s0.fused.my.loop_extent = 1 in...
new let B.s0.fused.my.loop_extent.s = (undefined) in ... 1 ...
simplify let B.s0.fused.my.loop_max = A.s0.my in...
new let B.s0.fused.my.loop_max.s = (undefined) in ... A.s0.my ...
simplify let B.s0.fused.my.loop_min = A.s0.my in...
new let B.s0.fused.my.loop_min.s = (undefined) in ... A.s0.my ...
simplify let B.s0.mk.loop_max = 3 in...
new let B.s0.mk.loop_max.s = (undefined) in ... 3 ...
simplify let B.s0.mk.loop_min = 0 in...
new let B.s0.mk.loop_min.s = (undefined) in ... 0 ...
simplify let B.s0.mk.loop_extent = 4 in...
new let B.s0.mk.loop_extent.s = (undefined) in ... 4 ...
simplify let B.s0.fused.mk.loop_extent = 1 in...
new let B.s0.fused.mk.loop_extent.s = (undefined) in ... 1 ...
simplify let B.s0.fused.mk.loop_max = A.s0.mk in...
new let B.s0.fused.mk.loop_max.s = (undefined) in ... A.s0.mk ...
simplify let B.s0.fused.mk.loop_min = A.s0.mk in...
new let B.s0.fused.mk.loop_min.s = (undefined) in ... A.s0.mk ...
simplify let B.s0.ci.loop_max = 7 in...
new let B.s0.ci.loop_max.s = (undefined) in ... 7 ...
simplify let B.s0.ci.loop_min = 0 in...
new let B.s0.ci.loop_min.s = (undefined) in ... 0 ...
simplify let B.s0.ci.loop_extent = 8 in...
new let B.s0.ci.loop_extent.s = (undefined) in ... 8 ...
simplify let B.s0.fused.ci.loop_extent = 1 in...
new let B.s0.fused.ci.loop_extent.s = (undefined) in ... 1 ...
simplify let B.s0.fused.ci.loop_max = A.s0.ci in...
new let B.s0.fused.ci.loop_max.s = (undefined) in ... A.s0.ci ...
simplify let B.s0.fused.ci.loop_min = A.s0.ci in...
new let B.s0.fused.ci.loop_min.s = (undefined) in ... A.s0.ci ...
simplify let B.s0.yy_xx.loop_max = 6 in...
new let B.s0.yy_xx.loop_max.s = (undefined) in ... 6 ...
simplify let B.s0.yy_xx.loop_min = 0 in...
new let B.s0.yy_xx.loop_min.s = (undefined) in ... 0 ...
simplify let B.s0.yy_xx.loop_extent = 7 in...
new let B.s0.yy_xx.loop_extent.s = (undefined) in ... 7 ...
simplify let B.s0.fused.yy_xx.loop_extent = 1 in...
new let B.s0.fused.yy_xx.loop_extent.s = (undefined) in ... 1 ...
simplify let B.s0.fused.yy_xx.loop_max = A.s0.yy_xx in...
new let B.s0.fused.yy_xx.loop_max.s = (undefined) in ... A.s0.yy_xx ...
simplify let B.s0.fused.yy_xx.loop_min = A.s0.yy_xx in...
new let B.s0.fused.yy_xx.loop_min.s = (undefined) in ... A.s0.yy_xx ...
simplify let B.s0.yyy_xxx.loop_max = 6 in...
new let B.s0.yyy_xxx.loop_max.s = (undefined) in ... 6 ...
simplify let B.s0.yyy_xxx.loop_min = 0 in...
new let B.s0.yyy_xxx.loop_min.s = (undefined) in ... 0 ...
simplify let B.s0.yyy_xxx.loop_extent = 7 in...
new let B.s0.yyy_xxx.loop_extent.s = (undefined) in ... 7 ...
simplify let B.s0.fused.yyy_xxx.loop_extent = 1 in...
new let B.s0.fused.yyy_xxx.loop_extent.s = (undefined) in ... 1 ...
simplify let B.s0.fused.yyy_xxx.loop_max = A.s0.yyy_xxx in...
new let B.s0.fused.yyy_xxx.loop_max.s = (undefined) in ... A.s0.yyy_xxx ...
simplify let B.s0.fused.yyy_xxx.loop_min = A.s0.yyy_xxx in...
new let B.s0.fused.yyy_xxx.loop_min.s = (undefined) in ... A.s0.yyy_xxx ...
simplify let B.s0.kx.loop_max = 2 in...
new let B.s0.kx.loop_max.s = (undefined) in ... 2 ...
simplify let B.s0.kx.loop_min = 0 in...
new let B.s0.kx.loop_min.s = (undefined) in ... 0 ...
simplify let B.s0.kx.loop_extent = 3 in...
new let B.s0.kx.loop_extent.s = (undefined) in ... 3 ...
simplify let B.s0.fused.kx.loop_extent = 1 in...
new let B.s0.fused.kx.loop_extent.s = (undefined) in ... 1 ...
simplify let B.s0.fused.kx.loop_max = A.s0.kx in...
new let B.s0.fused.kx.loop_max.s = (undefined) in ... A.s0.kx ...
simplify let B.s0.fused.kx.loop_min = A.s0.kx in...
new let B.s0.fused.kx.loop_min.s = (undefined) in ... A.s0.kx ...
simplify let B.s0.ky.loop_max = 2 in...
new let B.s0.ky.loop_max.s = (undefined) in ... 2 ...
simplify let B.s0.ky.loop_min = 0 in...
new let B.s0.ky.loop_min.s = (undefined) in ... 0 ...
simplify let B.s0.ky.loop_extent = 3 in...
new let B.s0.ky.loop_extent.s = (undefined) in ... 3 ...
simplify let B.s0.fused.ky.loop_extent = 1 in...
new let B.s0.fused.ky.loop_extent.s = (undefined) in ... 1 ...
simplify let B.s0.fused.ky.loop_max = A.s0.ky in...
new let B.s0.fused.ky.loop_max.s = (undefined) in ... A.s0.ky ...
simplify let B.s0.fused.ky.loop_min = A.s0.ky in...
new let B.s0.fused.ky.loop_min.s = (undefined) in ... A.s0.ky ...
simplify let B.s0.coo.loop_max = 0 in...
new let B.s0.coo.loop_max.s = (undefined) in ... 0 ...
simplify let B.s0.coo.loop_min = 0 in...
new let B.s0.coo.loop_min.s = (undefined) in ... 0 ...
simplify let B.s0.coo.loop_extent = 1 in...
new let B.s0.coo.loop_extent.s = (undefined) in ... 1 ...
simplify let B.s0.fused.coo.loop_extent = 1 in...
new let B.s0.fused.coo.loop_extent.s = (undefined) in ... 1 ...
simplify let B.s0.fused.coo.loop_max = A.s0.coo in...
new let B.s0.fused.coo.loop_max.s = (undefined) in ... A.s0.coo ...
simplify let B.s0.fused.coo.loop_min = A.s0.coo in...
new let B.s0.fused.coo.loop_min.s = (undefined) in ... A.s0.coo ...
simplify let B.s0.y_x.loop_max = 0 in...
new let B.s0.y_x.loop_max.s = (undefined) in ... 0 ...
simplify let B.s0.y_x.loop_min = 0 in...
new let B.s0.y_x.loop_min.s = (undefined) in ... 0 ...
simplify let B.s0.y_x.loop_extent = 1 in...
new let B.s0.y_x.loop_extent.s = (undefined) in ... 1 ...
simplify let B.s0.fused.y_x.loop_extent = 1 in...
new let B.s0.fused.y_x.loop_extent.s = (undefined) in ... 1 ...
simplify let B.s0.fused.y_x.loop_max = A.s0.y_x in...
new let B.s0.fused.y_x.loop_max.s = (undefined) in ... A.s0.y_x ...
simplify let B.s0.fused.y_x.loop_min = A.s0.y_x in...
new let B.s0.fused.y_x.loop_min.s = (undefined) in ... A.s0.y_x ...
simplify let B.s0.cooo.loop_max = 7 in...
new let B.s0.cooo.loop_max.s = (undefined) in ... 7 ...
simplify let B.s0.cooo.loop_min = 0 in...
new let B.s0.cooo.loop_min.s = (undefined) in ... 0 ...
simplify let B.s0.cooo.loop_extent = 8 in...
new let B.s0.cooo.loop_extent.s = (undefined) in ... 8 ...
simplify let B.s0.fused.cooo.loop_extent = 1 in...
new let B.s0.fused.cooo.loop_extent.s = (undefined) in ... 1 ...
simplify let B.s0.fused.cooo.loop_max = A.s0.cooo in...
new let B.s0.fused.cooo.loop_max.s = (undefined) in ... A.s0.cooo ...
simplify let B.s0.fused.cooo.loop_min = A.s0.cooo in...
new let B.s0.fused.cooo.loop_min.s = (undefined) in ... A.s0.cooo ...
simplify let B.s0.cii.loop_max = 3 in...
new let B.s0.cii.loop_max.s = (undefined) in ... 3 ...
simplify let B.s0.cii.loop_min = 0 in...
new let B.s0.cii.loop_min.s = (undefined) in ... 0 ...
simplify let B.s0.cii.loop_extent = 4 in...
new let B.s0.cii.loop_extent.s = (undefined) in ... 4 ...
simplify let B.s0.fused.cii.loop_extent = 1 in...
new let B.s0.fused.cii.loop_extent.s = (undefined) in ... 1 ...
simplify let B.s0.fused.cii.loop_max = A.s0.cii in...
new let B.s0.fused.cii.loop_max.s = (undefined) in ... A.s0.cii ...
simplify let B.s0.fused.cii.loop_min = A.s0.cii in...
new let B.s0.fused.cii.loop_min.s = (undefined) in ... A.s0.cii ...
simplify let C.s0.n.loop_max = ((P.extent.1/3600) + -1) in...
new let C.s0.n.loop_max.s = (undefined) in ... ((P.extent.1/3600) + -1) ...
simplify let C.s0.n.loop_min = 0 in...
new let C.s0.n.loop_min.s = (undefined) in ... 0 ...
simplify let C.s0.n.loop_extent = (P.extent.1/3600) in...
new let C.s0.n.loop_extent.s = (undefined) in ... (P.extent.1/3600) ...
simplify let C.s0.fused.n.loop_extent = 1 in...
new let C.s0.fused.n.loop_extent.s = (undefined) in ... 1 ...
simplify let C.s0.fused.n.loop_max = B.s0.fused.n in...
new let C.s0.fused.n.loop_max.s = (undefined) in ... B.s0.fused.n ...
simplify let C.s0.fused.n.loop_min = B.s0.fused.n in...
new let C.s0.fused.n.loop_min.s = (undefined) in ... B.s0.fused.n ...
simplify let C.s0.nn.loop_max = 15 in...
new let C.s0.nn.loop_max.s = (undefined) in ... 15 ...
simplify let C.s0.nn.loop_min = 0 in...
new let C.s0.nn.loop_min.s = (undefined) in ... 0 ...
simplify let C.s0.nn.loop_extent = 16 in...
new let C.s0.nn.loop_extent.s = (undefined) in ... 16 ...
simplify let C.s0.fused.nn.loop_extent = 1 in...
new let C.s0.fused.nn.loop_extent.s = (undefined) in ... 1 ...
simplify let C.s0.fused.nn.loop_max = B.s0.fused.nn in...
new let C.s0.fused.nn.loop_max.s = (undefined) in ... B.s0.fused.nn ...
simplify let C.s0.fused.nn.loop_min = B.s0.fused.nn in...
new let C.s0.fused.nn.loop_min.s = (undefined) in ... B.s0.fused.nn ...
simplify let C.s0.co.loop_max = 3 in...
new let C.s0.co.loop_max.s = (undefined) in ... 3 ...
simplify let C.s0.co.loop_min = 0 in...
new let C.s0.co.loop_min.s = (undefined) in ... 0 ...
simplify let C.s0.co.loop_extent = 4 in...
new let C.s0.co.loop_extent.s = (undefined) in ... 4 ...
simplify let C.s0.fused.co.loop_extent = 1 in...
new let C.s0.fused.co.loop_extent.s = (undefined) in ... 1 ...
simplify let C.s0.fused.co.loop_max = B.s0.fused.co in...
new let C.s0.fused.co.loop_max.s = (undefined) in ... B.s0.fused.co ...
simplify let C.s0.fused.co.loop_min = B.s0.fused.co in...
new let C.s0.fused.co.loop_min.s = (undefined) in ... B.s0.fused.co ...
simplify let C.s0.mx.loop_max = 3 in...
new let C.s0.mx.loop_max.s = (undefined) in ... 3 ...
simplify let C.s0.mx.loop_min = 0 in...
new let C.s0.mx.loop_min.s = (undefined) in ... 0 ...
simplify let C.s0.mx.loop_extent = 4 in...
new let C.s0.mx.loop_extent.s = (undefined) in ... 4 ...
simplify let C.s0.fused.mx.loop_extent = 1 in...
new let C.s0.fused.mx.loop_extent.s = (undefined) in ... 1 ...
simplify let C.s0.fused.mx.loop_max = B.s0.fused.mx in...
new let C.s0.fused.mx.loop_max.s = (undefined) in ... B.s0.fused.mx ...
simplify let C.s0.fused.mx.loop_min = B.s0.fused.mx in...
new let C.s0.fused.mx.loop_min.s = (undefined) in ... B.s0.fused.mx ...
simplify let C.s0.my.loop_max = 3 in...
new let C.s0.my.loop_max.s = (undefined) in ... 3 ...
simplify let C.s0.my.loop_min = 0 in...
new let C.s0.my.loop_min.s = (undefined) in ... 0 ...
simplify let C.s0.my.loop_extent = 4 in...
new let C.s0.my.loop_extent.s = (undefined) in ... 4 ...
simplify let C.s0.fused.my.loop_extent = 1 in...
new let C.s0.fused.my.loop_extent.s = (undefined) in ... 1 ...
simplify let C.s0.fused.my.loop_max = B.s0.fused.my in...
new let C.s0.fused.my.loop_max.s = (undefined) in ... B.s0.fused.my ...
simplify let C.s0.fused.my.loop_min = B.s0.fused.my in...
new let C.s0.fused.my.loop_min.s = (undefined) in ... B.s0.fused.my ...
simplify let C.s0.mk.loop_max = 3 in...
new let C.s0.mk.loop_max.s = (undefined) in ... 3 ...
simplify let C.s0.mk.loop_min = 0 in...
new let C.s0.mk.loop_min.s = (undefined) in ... 0 ...
simplify let C.s0.mk.loop_extent = 4 in...
new let C.s0.mk.loop_extent.s = (undefined) in ... 4 ...
simplify let C.s0.fused.mk.loop_extent = 1 in...
new let C.s0.fused.mk.loop_extent.s = (undefined) in ... 1 ...
simplify let C.s0.fused.mk.loop_max = B.s0.fused.mk in...
new let C.s0.fused.mk.loop_max.s = (undefined) in ... B.s0.fused.mk ...
simplify let C.s0.fused.mk.loop_min = B.s0.fused.mk in...
new let C.s0.fused.mk.loop_min.s = (undefined) in ... B.s0.fused.mk ...
simplify let C.s0.ci.loop_max = 7 in...
new let C.s0.ci.loop_max.s = (undefined) in ... 7 ...
simplify let C.s0.ci.loop_min = 0 in...
new let C.s0.ci.loop_min.s = (undefined) in ... 0 ...
simplify let C.s0.ci.loop_extent = 8 in...
new let C.s0.ci.loop_extent.s = (undefined) in ... 8 ...
simplify let C.s0.fused.ci.loop_extent = 1 in...
new let C.s0.fused.ci.loop_extent.s = (undefined) in ... 1 ...
simplify let C.s0.fused.ci.loop_max = B.s0.fused.ci in...
new let C.s0.fused.ci.loop_max.s = (undefined) in ... B.s0.fused.ci ...
simplify let C.s0.fused.ci.loop_min = B.s0.fused.ci in...
new let C.s0.fused.ci.loop_min.s = (undefined) in ... B.s0.fused.ci ...
simplify let C.s0.yy_xx.loop_max = 6 in...
new let C.s0.yy_xx.loop_max.s = (undefined) in ... 6 ...
simplify let C.s0.yy_xx.loop_min = 0 in...
new let C.s0.yy_xx.loop_min.s = (undefined) in ... 0 ...
simplify let C.s0.yy_xx.loop_extent = 7 in...
new let C.s0.yy_xx.loop_extent.s = (undefined) in ... 7 ...
simplify let C.s0.fused.yy_xx.loop_extent = 1 in...
new let C.s0.fused.yy_xx.loop_extent.s = (undefined) in ... 1 ...
simplify let C.s0.fused.yy_xx.loop_max = B.s0.fused.yy_xx in...
new let C.s0.fused.yy_xx.loop_max.s = (undefined) in ... B.s0.fused.yy_xx ...
simplify let C.s0.fused.yy_xx.loop_min = B.s0.fused.yy_xx in...
new let C.s0.fused.yy_xx.loop_min.s = (undefined) in ... B.s0.fused.yy_xx ...
simplify let C.s0.yyy_xxx.loop_max = 6 in...
new let C.s0.yyy_xxx.loop_max.s = (undefined) in ... 6 ...
simplify let C.s0.yyy_xxx.loop_min = 0 in...
new let C.s0.yyy_xxx.loop_min.s = (undefined) in ... 0 ...
simplify let C.s0.yyy_xxx.loop_extent = 7 in...
new let C.s0.yyy_xxx.loop_extent.s = (undefined) in ... 7 ...
simplify let C.s0.fused.yyy_xxx.loop_extent = 1 in...
new let C.s0.fused.yyy_xxx.loop_extent.s = (undefined) in ... 1 ...
simplify let C.s0.fused.yyy_xxx.loop_max = B.s0.fused.yyy_xxx in...
new let C.s0.fused.yyy_xxx.loop_max.s = (undefined) in ... B.s0.fused.yyy_xxx ...
simplify let C.s0.fused.yyy_xxx.loop_min = B.s0.fused.yyy_xxx in...
new let C.s0.fused.yyy_xxx.loop_min.s = (undefined) in ... B.s0.fused.yyy_xxx ...
simplify let C.s0.kx.loop_max = 2 in...
new let C.s0.kx.loop_max.s = (undefined) in ... 2 ...
simplify let C.s0.kx.loop_min = 0 in...
new let C.s0.kx.loop_min.s = (undefined) in ... 0 ...
simplify let C.s0.kx.loop_extent = 3 in...
new let C.s0.kx.loop_extent.s = (undefined) in ... 3 ...
simplify let C.s0.fused.kx.loop_extent = 1 in...
new let C.s0.fused.kx.loop_extent.s = (undefined) in ... 1 ...
simplify let C.s0.fused.kx.loop_max = B.s0.fused.kx in...
new let C.s0.fused.kx.loop_max.s = (undefined) in ... B.s0.fused.kx ...
simplify let C.s0.fused.kx.loop_min = B.s0.fused.kx in...
new let C.s0.fused.kx.loop_min.s = (undefined) in ... B.s0.fused.kx ...
simplify let C.s0.ky.loop_max = 2 in...
new let C.s0.ky.loop_max.s = (undefined) in ... 2 ...
simplify let C.s0.ky.loop_min = 0 in...
new let C.s0.ky.loop_min.s = (undefined) in ... 0 ...
simplify let C.s0.ky.loop_extent = 3 in...
new let C.s0.ky.loop_extent.s = (undefined) in ... 3 ...
simplify let C.s0.fused.ky.loop_extent = 1 in...
new let C.s0.fused.ky.loop_extent.s = (undefined) in ... 1 ...
simplify let C.s0.fused.ky.loop_max = B.s0.fused.ky in...
new let C.s0.fused.ky.loop_max.s = (undefined) in ... B.s0.fused.ky ...
simplify let C.s0.fused.ky.loop_min = B.s0.fused.ky in...
new let C.s0.fused.ky.loop_min.s = (undefined) in ... B.s0.fused.ky ...
simplify let C.s0.coo.loop_max = 0 in...
new let C.s0.coo.loop_max.s = (undefined) in ... 0 ...
simplify let C.s0.coo.loop_min = 0 in...
new let C.s0.coo.loop_min.s = (undefined) in ... 0 ...
simplify let C.s0.coo.loop_extent = 1 in...
new let C.s0.coo.loop_extent.s = (undefined) in ... 1 ...
simplify let C.s0.fused.coo.loop_extent = 1 in...
new let C.s0.fused.coo.loop_extent.s = (undefined) in ... 1 ...
simplify let C.s0.fused.coo.loop_max = B.s0.fused.coo in...
new let C.s0.fused.coo.loop_max.s = (undefined) in ... B.s0.fused.coo ...
simplify let C.s0.fused.coo.loop_min = B.s0.fused.coo in...
new let C.s0.fused.coo.loop_min.s = (undefined) in ... B.s0.fused.coo ...
simplify let C.s0.y_x.loop_max = 0 in...
new let C.s0.y_x.loop_max.s = (undefined) in ... 0 ...
simplify let C.s0.y_x.loop_min = 0 in...
new let C.s0.y_x.loop_min.s = (undefined) in ... 0 ...
simplify let C.s0.y_x.loop_extent = 1 in...
new let C.s0.y_x.loop_extent.s = (undefined) in ... 1 ...
simplify let C.s0.fused.y_x.loop_extent = 1 in...
new let C.s0.fused.y_x.loop_extent.s = (undefined) in ... 1 ...
simplify let C.s0.fused.y_x.loop_max = B.s0.fused.y_x in...
new let C.s0.fused.y_x.loop_max.s = (undefined) in ... B.s0.fused.y_x ...
simplify let C.s0.fused.y_x.loop_min = B.s0.fused.y_x in...
new let C.s0.fused.y_x.loop_min.s = (undefined) in ... B.s0.fused.y_x ...
simplify let C.s0.cooo.loop_max = 7 in...
new let C.s0.cooo.loop_max.s = (undefined) in ... 7 ...
simplify let C.s0.cooo.loop_min = 0 in...
new let C.s0.cooo.loop_min.s = (undefined) in ... 0 ...
simplify let C.s0.cooo.loop_extent = 8 in...
new let C.s0.cooo.loop_extent.s = (undefined) in ... 8 ...
simplify let C.s0.fused.cooo.loop_extent = 1 in...
new let C.s0.fused.cooo.loop_extent.s = (undefined) in ... 1 ...
simplify let C.s0.fused.cooo.loop_max = B.s0.fused.cooo in...
new let C.s0.fused.cooo.loop_max.s = (undefined) in ... B.s0.fused.cooo ...
simplify let C.s0.fused.cooo.loop_min = B.s0.fused.cooo in...
new let C.s0.fused.cooo.loop_min.s = (undefined) in ... B.s0.fused.cooo ...
simplify let C.s0.cii.loop_max = 3 in...
new let C.s0.cii.loop_max.s = (undefined) in ... 3 ...
simplify let C.s0.cii.loop_min = 0 in...
new let C.s0.cii.loop_min.s = (undefined) in ... 0 ...
simplify let C.s0.cii.loop_extent = 4 in...
new let C.s0.cii.loop_extent.s = (undefined) in ... 4 ...
simplify let C.s0.fused.cii.loop_extent = 1 in...
new let C.s0.fused.cii.loop_extent.s = (undefined) in ... 1 ...
simplify let C.s0.fused.cii.loop_max = B.s0.fused.cii in...
new let C.s0.fused.cii.loop_max.s = (undefined) in ... B.s0.fused.cii ...
simplify let C.s0.fused.cii.loop_min = B.s0.fused.cii in...
new let C.s0.fused.cii.loop_min.s = (undefined) in ... B.s0.fused.cii ...
simplify let Out.s0.n.loop_max = ((P.extent.1/3600) + -1) in...
new let Out.s0.n.loop_max.s = (undefined) in ... ((P.extent.1/3600) + -1) ...
simplify let Out.s0.n.loop_min = 0 in...
new let Out.s0.n.loop_min.s = (undefined) in ... 0 ...
simplify let Out.s0.n.loop_extent = (P.extent.1/3600) in...
new let Out.s0.n.loop_extent.s = (undefined) in ... (P.extent.1/3600) ...
simplify let Out.s0.fused.n.loop_extent = 1 in...
new let Out.s0.fused.n.loop_extent.s = (undefined) in ... 1 ...
simplify let Out.s0.fused.n.loop_max = C.s0.fused.n in...
new let Out.s0.fused.n.loop_max.s = (undefined) in ... C.s0.fused.n ...
simplify let Out.s0.fused.n.loop_min = C.s0.fused.n in...
new let Out.s0.fused.n.loop_min.s = (undefined) in ... C.s0.fused.n ...
simplify let Out.s0.nn.loop_max = 15 in...
new let Out.s0.nn.loop_max.s = (undefined) in ... 15 ...
simplify let Out.s0.nn.loop_min = 0 in...
new let Out.s0.nn.loop_min.s = (undefined) in ... 0 ...
simplify let Out.s0.nn.loop_extent = 16 in...
new let Out.s0.nn.loop_extent.s = (undefined) in ... 16 ...
simplify let Out.s0.fused.nn.loop_extent = 1 in...
new let Out.s0.fused.nn.loop_extent.s = (undefined) in ... 1 ...
simplify let Out.s0.fused.nn.loop_max = C.s0.fused.nn in...
new let Out.s0.fused.nn.loop_max.s = (undefined) in ... C.s0.fused.nn ...
simplify let Out.s0.fused.nn.loop_min = C.s0.fused.nn in...
new let Out.s0.fused.nn.loop_min.s = (undefined) in ... C.s0.fused.nn ...
simplify let Out.s0.co.loop_max = 3 in...
new let Out.s0.co.loop_max.s = (undefined) in ... 3 ...
simplify let Out.s0.co.loop_min = 0 in...
new let Out.s0.co.loop_min.s = (undefined) in ... 0 ...
simplify let Out.s0.co.loop_extent = 4 in...
new let Out.s0.co.loop_extent.s = (undefined) in ... 4 ...
simplify let Out.s0.fused.co.loop_extent = 1 in...
new let Out.s0.fused.co.loop_extent.s = (undefined) in ... 1 ...
simplify let Out.s0.fused.co.loop_max = C.s0.fused.co in...
new let Out.s0.fused.co.loop_max.s = (undefined) in ... C.s0.fused.co ...
simplify let Out.s0.fused.co.loop_min = C.s0.fused.co in...
new let Out.s0.fused.co.loop_min.s = (undefined) in ... C.s0.fused.co ...
simplify let Out.s0.mx.loop_max = 3 in...
new let Out.s0.mx.loop_max.s = (undefined) in ... 3 ...
simplify let Out.s0.mx.loop_min = 0 in...
new let Out.s0.mx.loop_min.s = (undefined) in ... 0 ...
simplify let Out.s0.mx.loop_extent = 4 in...
new let Out.s0.mx.loop_extent.s = (undefined) in ... 4 ...
simplify let Out.s0.fused.mx.loop_extent = 1 in...
new let Out.s0.fused.mx.loop_extent.s = (undefined) in ... 1 ...
simplify let Out.s0.fused.mx.loop_max = C.s0.fused.mx in...
new let Out.s0.fused.mx.loop_max.s = (undefined) in ... C.s0.fused.mx ...
simplify let Out.s0.fused.mx.loop_min = C.s0.fused.mx in...
new let Out.s0.fused.mx.loop_min.s = (undefined) in ... C.s0.fused.mx ...
simplify let Out.s0.my.loop_max = 3 in...
new let Out.s0.my.loop_max.s = (undefined) in ... 3 ...
simplify let Out.s0.my.loop_min = 0 in...
new let Out.s0.my.loop_min.s = (undefined) in ... 0 ...
simplify let Out.s0.my.loop_extent = 4 in...
new let Out.s0.my.loop_extent.s = (undefined) in ... 4 ...
simplify let Out.s0.fused.my.loop_extent = 1 in...
new let Out.s0.fused.my.loop_extent.s = (undefined) in ... 1 ...
simplify let Out.s0.fused.my.loop_max = C.s0.fused.my in...
new let Out.s0.fused.my.loop_max.s = (undefined) in ... C.s0.fused.my ...
simplify let Out.s0.fused.my.loop_min = C.s0.fused.my in...
new let Out.s0.fused.my.loop_min.s = (undefined) in ... C.s0.fused.my ...
simplify let Out.s0.yy_xx.loop_max = 6 in...
new let Out.s0.yy_xx.loop_max.s = (undefined) in ... 6 ...
simplify let Out.s0.yy_xx.loop_min = 0 in...
new let Out.s0.yy_xx.loop_min.s = (undefined) in ... 0 ...
simplify let Out.s0.yy_xx.loop_extent = 7 in...
new let Out.s0.yy_xx.loop_extent.s = (undefined) in ... 7 ...
simplify let Out.s0.fused.yy_xx.loop_extent = 1 in...
new let Out.s0.fused.yy_xx.loop_extent.s = (undefined) in ... 1 ...
simplify let Out.s0.fused.yy_xx.loop_max = C.s0.fused.yy_xx in...
new let Out.s0.fused.yy_xx.loop_max.s = (undefined) in ... C.s0.fused.yy_xx ...
simplify let Out.s0.fused.yy_xx.loop_min = C.s0.fused.yy_xx in...
new let Out.s0.fused.yy_xx.loop_min.s = (undefined) in ... C.s0.fused.yy_xx ...
simplify let Out.s0.yyy_xxx.loop_max = 6 in...
new let Out.s0.yyy_xxx.loop_max.s = (undefined) in ... 6 ...
simplify let Out.s0.yyy_xxx.loop_min = 0 in...
new let Out.s0.yyy_xxx.loop_min.s = (undefined) in ... 0 ...
simplify let Out.s0.yyy_xxx.loop_extent = 7 in...
new let Out.s0.yyy_xxx.loop_extent.s = (undefined) in ... 7 ...
simplify let Out.s0.fused.yyy_xxx.loop_extent = 1 in...
new let Out.s0.fused.yyy_xxx.loop_extent.s = (undefined) in ... 1 ...
simplify let Out.s0.fused.yyy_xxx.loop_max = C.s0.fused.yyy_xxx in...
new let Out.s0.fused.yyy_xxx.loop_max.s = (undefined) in ... C.s0.fused.yyy_xxx ...
simplify let Out.s0.fused.yyy_xxx.loop_min = C.s0.fused.yyy_xxx in...
new let Out.s0.fused.yyy_xxx.loop_min.s = (undefined) in ... C.s0.fused.yyy_xxx ...
simplify let Out.s0.coo.loop_max = 0 in...
new let Out.s0.coo.loop_max.s = (undefined) in ... 0 ...
simplify let Out.s0.coo.loop_min = 0 in...
new let Out.s0.coo.loop_min.s = (undefined) in ... 0 ...
simplify let Out.s0.coo.loop_extent = 1 in...
new let Out.s0.coo.loop_extent.s = (undefined) in ... 1 ...
simplify let Out.s0.fused.coo.loop_extent = 1 in...
new let Out.s0.fused.coo.loop_extent.s = (undefined) in ... 1 ...
simplify let Out.s0.fused.coo.loop_max = C.s0.fused.coo in...
new let Out.s0.fused.coo.loop_max.s = (undefined) in ... C.s0.fused.coo ...
simplify let Out.s0.fused.coo.loop_min = C.s0.fused.coo in...
new let Out.s0.fused.coo.loop_min.s = (undefined) in ... C.s0.fused.coo ...
simplify let Out.s0.y_x.loop_max = 0 in...
new let Out.s0.y_x.loop_max.s = (undefined) in ... 0 ...
simplify let Out.s0.y_x.loop_min = 0 in...
new let Out.s0.y_x.loop_min.s = (undefined) in ... 0 ...
simplify let Out.s0.y_x.loop_extent = 1 in...
new let Out.s0.y_x.loop_extent.s = (undefined) in ... 1 ...
simplify let Out.s0.fused.y_x.loop_extent = 1 in...
new let Out.s0.fused.y_x.loop_extent.s = (undefined) in ... 1 ...
simplify let Out.s0.fused.y_x.loop_max = C.s0.fused.y_x in...
new let Out.s0.fused.y_x.loop_max.s = (undefined) in ... C.s0.fused.y_x ...
simplify let Out.s0.fused.y_x.loop_min = C.s0.fused.y_x in...
new let Out.s0.fused.y_x.loop_min.s = (undefined) in ... C.s0.fused.y_x ...
simplify let Out.s0.cooo.loop_max = 7 in...
new let Out.s0.cooo.loop_max.s = (undefined) in ... 7 ...
simplify let Out.s0.cooo.loop_min = 0 in...
new let Out.s0.cooo.loop_min.s = (undefined) in ... 0 ...
simplify let Out.s0.cooo.loop_extent = 8 in...
new let Out.s0.cooo.loop_extent.s = (undefined) in ... 8 ...
simplify let Out.s0.fused.cooo.loop_extent = 1 in...
new let Out.s0.fused.cooo.loop_extent.s = (undefined) in ... 1 ...
simplify let Out.s0.fused.cooo.loop_max = C.s0.fused.cooo in...
new let Out.s0.fused.cooo.loop_max.s = (undefined) in ... C.s0.fused.cooo ...
simplify let Out.s0.fused.cooo.loop_min = C.s0.fused.cooo in...
new let Out.s0.fused.cooo.loop_min.s = (undefined) in ... C.s0.fused.cooo ...
simplify let Out.s0.fused.cooo = C.s0.fused.cooo in...
new let Out.s0.fused.cooo.s = (undefined) in ... C.s0.fused.cooo ...
simplify let Out.s0.fused.y_x = C.s0.fused.y_x in...
new let Out.s0.fused.y_x.s = (undefined) in ... C.s0.fused.y_x ...
simplify let Out.s0.fused.coo = C.s0.fused.coo in...
new let Out.s0.fused.coo.s = (undefined) in ... C.s0.fused.coo ...
simplify let Out.s0.fused.yyy_xxx = C.s0.fused.yyy_xxx in...
new let Out.s0.fused.yyy_xxx.s = (undefined) in ... C.s0.fused.yyy_xxx ...
simplify let Out.s0.fused.yy_xx = C.s0.fused.yy_xx in...
new let Out.s0.fused.yy_xx.s = (undefined) in ... C.s0.fused.yy_xx ...
simplify let Out.s0.fused.my = C.s0.fused.my in...
new let Out.s0.fused.my.s = (undefined) in ... C.s0.fused.my ...
simplify let Out.s0.fused.mx = C.s0.fused.mx in...
new let Out.s0.fused.mx.s = (undefined) in ... C.s0.fused.mx ...
simplify let Out.s0.fused.co = C.s0.fused.co in...
new let Out.s0.fused.co.s = (undefined) in ... C.s0.fused.co ...
simplify let Out.s0.fused.nn = C.s0.fused.nn in...
new let Out.s0.fused.nn.s = (undefined) in ... C.s0.fused.nn ...
simplify let Out.s0.fused.n = C.s0.fused.n in...
new let Out.s0.fused.n.s = (undefined) in ... C.s0.fused.n ...
simplify let C.s0.fused.cii = B.s0.fused.cii in...
new let C.s0.fused.cii.s = (undefined) in ... B.s0.fused.cii ...
simplify let C.s0.fused.cooo = B.s0.fused.cooo in...
new let C.s0.fused.cooo.s = (undefined) in ... B.s0.fused.cooo ...
simplify let C.s0.fused.y_x = B.s0.fused.y_x in...
new let C.s0.fused.y_x.s = (undefined) in ... B.s0.fused.y_x ...
simplify let C.s0.fused.coo = B.s0.fused.coo in...
new let C.s0.fused.coo.s = (undefined) in ... B.s0.fused.coo ...
simplify let C.s0.fused.ky = B.s0.fused.ky in...
new let C.s0.fused.ky.s = (undefined) in ... B.s0.fused.ky ...
simplify let C.s0.fused.kx = B.s0.fused.kx in...
new let C.s0.fused.kx.s = (undefined) in ... B.s0.fused.kx ...
simplify let C.s0.fused.yyy_xxx = B.s0.fused.yyy_xxx in...
new let C.s0.fused.yyy_xxx.s = (undefined) in ... B.s0.fused.yyy_xxx ...
simplify let C.s0.fused.yy_xx = B.s0.fused.yy_xx in...
new let C.s0.fused.yy_xx.s = (undefined) in ... B.s0.fused.yy_xx ...
simplify let C.s0.fused.ci = B.s0.fused.ci in...
new let C.s0.fused.ci.s = (undefined) in ... B.s0.fused.ci ...
simplify let C.s0.fused.mk = B.s0.fused.mk in...
new let C.s0.fused.mk.s = (undefined) in ... B.s0.fused.mk ...
simplify let C.s0.fused.my = B.s0.fused.my in...
new let C.s0.fused.my.s = (undefined) in ... B.s0.fused.my ...
simplify let C.s0.fused.mx = B.s0.fused.mx in...
new let C.s0.fused.mx.s = (undefined) in ... B.s0.fused.mx ...
simplify let C.s0.fused.co = B.s0.fused.co in...
new let C.s0.fused.co.s = (undefined) in ... B.s0.fused.co ...
simplify let C.s0.fused.nn = B.s0.fused.nn in...
new let C.s0.fused.nn.s = (undefined) in ... B.s0.fused.nn ...
simplify let C.s0.fused.n = B.s0.fused.n in...
new let C.s0.fused.n.s = (undefined) in ... B.s0.fused.n ...
simplify let B.s0.fused.cii = A.s0.cii in...
new let B.s0.fused.cii.s = (undefined) in ... A.s0.cii ...
simplify let B.s0.fused.cooo = A.s0.cooo in...
new let B.s0.fused.cooo.s = (undefined) in ... A.s0.cooo ...
simplify let B.s0.fused.y_x = A.s0.y_x in...
new let B.s0.fused.y_x.s = (undefined) in ... A.s0.y_x ...
simplify let B.s0.fused.coo = A.s0.coo in...
new let B.s0.fused.coo.s = (undefined) in ... A.s0.coo ...
simplify let B.s0.fused.ky = A.s0.ky in...
new let B.s0.fused.ky.s = (undefined) in ... A.s0.ky ...
simplify let B.s0.fused.kx = A.s0.kx in...
new let B.s0.fused.kx.s = (undefined) in ... A.s0.kx ...
simplify let B.s0.fused.yyy_xxx = A.s0.yyy_xxx in...
new let B.s0.fused.yyy_xxx.s = (undefined) in ... A.s0.yyy_xxx ...
simplify let B.s0.fused.yy_xx = A.s0.yy_xx in...
new let B.s0.fused.yy_xx.s = (undefined) in ... A.s0.yy_xx ...
simplify let B.s0.fused.ci = A.s0.ci in...
new let B.s0.fused.ci.s = (undefined) in ... A.s0.ci ...
simplify let B.s0.fused.mk = A.s0.mk in...
new let B.s0.fused.mk.s = (undefined) in ... A.s0.mk ...
simplify let B.s0.fused.my = A.s0.my in...
new let B.s0.fused.my.s = (undefined) in ... A.s0.my ...
simplify let B.s0.fused.mx = A.s0.mx in...
new let B.s0.fused.mx.s = (undefined) in ... A.s0.mx ...
simplify let B.s0.fused.co = A.s0.co in...
new let B.s0.fused.co.s = (undefined) in ... A.s0.co ...
simplify let B.s0.fused.nn = A.s0.nn in...
new let B.s0.fused.nn.s = (undefined) in ... A.s0.nn ...
simplify let B.s0.fused.n = A.s0.n in...
new let B.s0.fused.n.s = (undefined) in ... A.s0.n ...
Convert systolic into broadcast on GPUs:
realize C[C.cii.min_realized, C.cii.extent_realized], [C.cooo.min_realized, C.cooo.extent_realized], [C.yyy_xxx.min_realized, C.yyy_xxx.extent_realized], [C.yy_xx.min_realized, C.yy_xx.extent_realized], [C.y_x.min_realized, C.y_x.extent_realized], [C.my.min_realized, C.my.extent_realized], [C.mx.min_realized, C.mx.extent_realized], [C.coo.min_realized, C.coo.extent_realized], [C.nn.min_realized, C.nn.extent_realized], [C.ky.min_realized, C.ky.extent_realized], [C.kx.min_realized, C.kx.extent_realized], [C.ci.min_realized, C.ci.extent_realized], [C.mk.min_realized, C.mk.extent_realized], [C.co.min_realized, C.co.extent_realized], [C.n.min_realized, C.n.extent_realized] of type `float32' {
 realize B[B.cii.min_realized, B.cii.extent_realized], [B.cooo.min_realized, B.cooo.extent_realized], [B.yyy_xxx.min_realized, B.yyy_xxx.extent_realized], [B.yy_xx.min_realized, B.yy_xx.extent_realized], [B.y_x.min_realized, B.y_x.extent_realized], [B.my.min_realized, B.my.extent_realized], [B.mx.min_realized, B.mx.extent_realized], [B.coo.min_realized, B.coo.extent_realized], [B.nn.min_realized, B.nn.extent_realized], [B.ky.min_realized, B.ky.extent_realized], [B.kx.min_realized, B.kx.extent_realized], [B.ci.min_realized, B.ci.extent_realized], [B.mk.min_realized, B.mk.extent_realized], [B.co.min_realized, B.co.extent_realized], [B.n.min_realized, B.n.extent_realized] of type `float32' {
  realize A[A.cii.min_realized, A.cii.extent_realized], [A.cooo.min_realized, A.cooo.extent_realized], [A.yyy_xxx.min_realized, A.yyy_xxx.extent_realized], [A.yy_xx.min_realized, A.yy_xx.extent_realized], [A.y_x.min_realized, A.y_x.extent_realized], [A.my.min_realized, A.my.extent_realized], [A.mx.min_realized, A.mx.extent_realized], [A.coo.min_realized, A.coo.extent_realized], [A.nn.min_realized, A.nn.extent_realized], [A.ky.min_realized, A.ky.extent_realized], [A.kx.min_realized, A.kx.extent_realized], [A.ci.min_realized, A.ci.extent_realized], [A.mk.min_realized, A.mk.extent_realized], [A.co.min_realized, A.co.extent_realized], [A.n.min_realized, A.n.extent_realized] of type `float32' {
   produce Out {
    produce C {
     produce B {
      produce A {
       gpu_block<Default_GPU> (A.s0.n, 0, (P.extent.1/3600)) {
        gpu_block<Default_GPU> (A.s0.nn, 0, 16) {
         gpu_block<Default_GPU> (A.s0.co, 0, 4) {
          gpu_thread<Default_GPU> (A.s0.mx, 0, 4) {
           gpu_thread<Default_GPU> (A.s0.my, 0, 4) {
            for (A.s0.mk, 0, 4) {
             for (A.s0.ci, 0, 8) {
              for (A.s0.yy_xx, 0, 7) {
               for (A.s0.yyy_xxx, 0, 7) {
                for (A.s0.kx, 0, 3) {
                 for (A.s0.ky, 0, 3) {
                  for (A.s0.coo, 0, 1) {
                   for (A.s0.y_x, 0, 1) {
                    vectorized (A.s0.cooo, 0, 8) {
                     for (A.s0.cii, 0, 4) {
                      A(A.s0.cii, A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, A.s0.y_x, A.s0.my, A.s0.mx, A.s0.coo, A.s0.nn, A.s0.ky, A.s0.kx, A.s0.ci, A.s0.mk, A.s0.co, A.s0.n) = (float32)P(((A.s0.nn*512) + ((A.s0.mx*128) + ((A.s0.mk*32) + ((A.s0.ci*4) + A.s0.cii)))), ((A.s0.n*225) + (((((((A.s0.y_x*49) + ((A.s0.yy_xx*7) + A.s0.yyy_xxx))/7)*2) + A.s0.kx)*15) + (((((A.s0.y_x*49) + ((A.s0.yy_xx*7) + A.s0.yyy_xxx)) % 7)*2) + A.s0.ky))))
                      B(A.s0.cii, A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, A.s0.y_x, A.s0.my, A.s0.mx, A.s0.coo, A.s0.nn, A.s0.ky, A.s0.kx, A.s0.ci, A.s0.mk, A.s0.co, A.s0.n) = (float32)W(((A.s0.my*32) + ((A.s0.co*8) + ((A.s0.coo*8) + A.s0.cooo))), ((A.s0.mk*288) + ((A.s0.ci*36) + ((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii)))))
                      C(A.s0.cii, A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, A.s0.y_x, A.s0.my, A.s0.mx, A.s0.coo, A.s0.nn, A.s0.ky, A.s0.kx, A.s0.ci, A.s0.mk, A.s0.co, A.s0.n) = (select((((((A.s0.cii == 0) && (A.s0.ci == 0)) && (A.s0.mk == 0)) && (A.s0.ky == 0)) && (A.s0.kx == 0)), 0.000000f, select((A.s0.cii == 0), select((A.s0.ky == 0), select((A.s0.kx == 0), select((A.s0.ci == 0), C((A.s0.cii + 3), A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, A.s0.y_x, A.s0.my, A.s0.mx, A.s0.coo, A.s0.nn, (A.s0.ky + 2), (A.s0.kx + 2), (A.s0.ci + 7), (A.s0.mk + -1), A.s0.co, A.s0.n), C((A.s0.cii + 3), A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, A.s0.y_x, A.s0.my, A.s0.mx, A.s0.coo, A.s0.nn, (A.s0.ky + 2), (A.s0.kx + 2), (A.s0.ci + -1), A.s0.mk, A.s0.co, A.s0.n)), C((A.s0.cii + 3), A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, A.s0.y_x, A.s0.my, A.s0.mx, A.s0.coo, A.s0.nn, (A.s0.ky + 2), (A.s0.kx + -1), A.s0.ci, A.s0.mk, A.s0.co, A.s0.n)), C((A.s0.cii + 3), A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, A.s0.y_x, A.s0.my, A.s0.mx, A.s0.coo, A.s0.nn, (A.s0.ky + -1), A.s0.kx, A.s0.ci, A.s0.mk, A.s0.co, A.s0.n)), C((A.s0.cii + -1), A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, A.s0.y_x, A.s0.my, A.s0.mx, A.s0.coo, A.s0.nn, A.s0.ky, A.s0.kx, A.s0.ci, A.s0.mk, A.s0.co, A.s0.n))) + (A(A.s0.cii, A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, A.s0.y_x, A.s0.my, A.s0.mx, A.s0.coo, A.s0.nn, A.s0.ky, A.s0.kx, A.s0.ci, A.s0.mk, A.s0.co, A.s0.n)*B(A.s0.cii, A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, A.s0.y_x, A.s0.my, A.s0.mx, A.s0.coo, A.s0.nn, A.s0.ky, A.s0.kx, A.s0.ci, A.s0.mk, A.s0.co, A.s0.n)))
                      if ((((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) {
                       Out(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, A.s0.y_x, A.s0.my, A.s0.mx, A.s0.coo, A.s0.nn, A.s0.co, A.s0.n) = C(A.s0.cii, A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, A.s0.y_x, A.s0.my, A.s0.mx, A.s0.coo, A.s0.nn, A.s0.ky, A.s0.kx, A.s0.ci, A.s0.mk, A.s0.co, A.s0.n)
                      }
                     }
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
}

loop A.s0.cooo is vectorized. 
loop: A.s0.cooo(0..8)
loop: A.s0.yyy_xxx(0..7)
loop: A.s0.yy_xx(0..7)
loop: A.s0.cii(0..4)
A(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 


Input to CSE (0 >= 8)
After removing lets: (0 >= 8)
Include: (0 >= 8); should extract: 1
Include: 0; should extract: 0
Include: 8; should extract: 0
Canonical form without lets (0 >= 8)
0: 0, 0
1: 8, 0
2: (0 >= 8), 1
With variables (0 >= 8)
With lets: (0 >= 8)
time expr: (0 + (0*0))


Input to CSE (0 >= 7)
After removing lets: (0 >= 7)
Include: (0 >= 7); should extract: 1
Include: 0; should extract: 0
Include: 7; should extract: 0
Canonical form without lets (0 >= 7)
0: 0, 0
1: 7, 0
2: (0 >= 7), 1
With variables (0 >= 7)
With lets: (0 >= 7)
time expr: (0 + (0*0))


Input to CSE (0 >= 7)
After removing lets: (0 >= 7)
Include: (0 >= 7); should extract: 1
Include: 0; should extract: 0
Include: 7; should extract: 0
Canonical form without lets (0 >= 7)
0: 0, 0
1: 7, 0
2: (0 >= 7), 1
With variables (0 >= 7)
With lets: (0 >= 7)
time expr: (0 + (0*0))


Input to CSE (0 >= 4)
After removing lets: (0 >= 4)
Include: (0 >= 4); should extract: 1
Include: 0; should extract: 0
Include: 4; should extract: 0
Canonical form without lets (0 >= 4)
0: 0, 0
1: 4, 0
2: (0 >= 4), 1
With variables (0 >= 4)
With lets: (0 >= 4)
time expr: (0 + (0*1))


Input to CSE (0 >= 3)
After removing lets: (0 >= 3)
Include: (0 >= 3); should extract: 1
Include: 0; should extract: 0
Include: 3; should extract: 0
Canonical form without lets (0 >= 3)
0: 0, 0
1: 3, 0
2: (0 >= 3), 1
With variables (0 >= 3)
With lets: (0 >= 3)
time expr: (0 + (0*4))


Input to CSE (0 >= 3)
After removing lets: (0 >= 3)
Include: (0 >= 3); should extract: 1
Include: 0; should extract: 0
Include: 3; should extract: 0
Canonical form without lets (0 >= 3)
0: 0, 0
1: 3, 0
2: (0 >= 3), 1
With variables (0 >= 3)
With lets: (0 >= 3)
time expr: (0 + (0*12))


Input to CSE (0 >= 8)
After removing lets: (0 >= 8)
Include: (0 >= 8); should extract: 1
Include: 0; should extract: 0
Include: 8; should extract: 0
Canonical form without lets (0 >= 8)
0: 0, 0
1: 8, 0
2: (0 >= 8), 1
With variables (0 >= 8)
With lets: (0 >= 8)
time expr: (0 + (0*36))


Input to CSE (0 >= 4)
After removing lets: (0 >= 4)
Include: (0 >= 4); should extract: 1
Include: 0; should extract: 0
Include: 4; should extract: 0
Canonical form without lets (0 >= 4)
0: 0, 0
1: 4, 0
2: (0 >= 4), 1
With variables (0 >= 4)
With lets: (0 >= 4)
time expr: (0 + (0*288))0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, )
the time size: (0..0)
B(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 


Input to CSE (0 >= 8)
After removing lets: (0 >= 8)
Include: (0 >= 8); should extract: 1
Include: 0; should extract: 0
Include: 8; should extract: 0
Canonical form without lets (0 >= 8)
0: 0, 0
1: 8, 0
2: (0 >= 8), 1
With variables (0 >= 8)
With lets: (0 >= 8)
time expr: (0 + (0*0))


Input to CSE (0 >= 7)
After removing lets: (0 >= 7)
Include: (0 >= 7); should extract: 1
Include: 0; should extract: 0
Include: 7; should extract: 0
Canonical form without lets (0 >= 7)
0: 0, 0
1: 7, 0
2: (0 >= 7), 1
With variables (0 >= 7)
With lets: (0 >= 7)
time expr: (0 + (0*0))


Input to CSE (0 >= 7)
After removing lets: (0 >= 7)
Include: (0 >= 7); should extract: 1
Include: 0; should extract: 0
Include: 7; should extract: 0
Canonical form without lets (0 >= 7)
0: 0, 0
1: 7, 0
2: (0 >= 7), 1
With variables (0 >= 7)
With lets: (0 >= 7)
time expr: (0 + (0*0))


Input to CSE (0 >= 4)
After removing lets: (0 >= 4)
Include: (0 >= 4); should extract: 1
Include: 0; should extract: 0
Include: 4; should extract: 0
Canonical form without lets (0 >= 4)
0: 0, 0
1: 4, 0
2: (0 >= 4), 1
With variables (0 >= 4)
With lets: (0 >= 4)
time expr: (0 + (0*1))


Input to CSE (0 >= 3)
After removing lets: (0 >= 3)
Include: (0 >= 3); should extract: 1
Include: 0; should extract: 0
Include: 3; should extract: 0
Canonical form without lets (0 >= 3)
0: 0, 0
1: 3, 0
2: (0 >= 3), 1
With variables (0 >= 3)
With lets: (0 >= 3)
time expr: (0 + (0*4))


Input to CSE (0 >= 3)
After removing lets: (0 >= 3)
Include: (0 >= 3); should extract: 1
Include: 0; should extract: 0
Include: 3; should extract: 0
Canonical form without lets (0 >= 3)
0: 0, 0
1: 3, 0
2: (0 >= 3), 1
With variables (0 >= 3)
With lets: (0 >= 3)
time expr: (0 + (0*12))


Input to CSE (0 >= 8)
After removing lets: (0 >= 8)
Include: (0 >= 8); should extract: 1
Include: 0; should extract: 0
Include: 8; should extract: 0
Canonical form without lets (0 >= 8)
0: 0, 0
1: 8, 0
2: (0 >= 8), 1
With variables (0 >= 8)
With lets: (0 >= 8)
time expr: (0 + (0*36))


Input to CSE (0 >= 4)
After removing lets: (0 >= 4)
Include: (0 >= 4); should extract: 1
Include: 0; should extract: 0
Include: 4; should extract: 0
Canonical form without lets (0 >= 4)
0: 0, 0
1: 4, 0
2: (0 >= 4), 1
With variables (0 >= 4)
With lets: (0 >= 4)
time expr: (0 + (0*288))0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, )
the time size: (0..0)
C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 


Input to CSE (0 >= 8)
After removing lets: (0 >= 8)
Include: (0 >= 8); should extract: 1
Include: 0; should extract: 0
Include: 8; should extract: 0
Canonical form without lets (0 >= 8)
0: 0, 0
1: 8, 0
2: (0 >= 8), 1
With variables (0 >= 8)
With lets: (0 >= 8)
time expr: (0 + (0*0))


Input to CSE (0 >= 7)
After removing lets: (0 >= 7)
Include: (0 >= 7); should extract: 1
Include: 0; should extract: 0
Include: 7; should extract: 0
Canonical form without lets (0 >= 7)
0: 0, 0
1: 7, 0
2: (0 >= 7), 1
With variables (0 >= 7)
With lets: (0 >= 7)
time expr: (0 + (0*0))


Input to CSE (0 >= 7)
After removing lets: (0 >= 7)
Include: (0 >= 7); should extract: 1
Include: 0; should extract: 0
Include: 7; should extract: 0
Canonical form without lets (0 >= 7)
0: 0, 0
1: 7, 0
2: (0 >= 7), 1
With variables (0 >= 7)
With lets: (0 >= 7)
time expr: (0 + (0*0))


Input to CSE (-3 >= 4)
After removing lets: (-3 >= 4)
Include: (-3 >= 4); should extract: 1
Include: -3; should extract: 0
Include: 4; should extract: 0
Canonical form without lets (-3 >= 4)
0: -3, 0
1: 4, 0
2: (-3 >= 4), 1
With variables (-3 >= 4)
With lets: (-3 >= 4)
time expr: (0 + (-3*1))


Input to CSE (-2 >= 3)
After removing lets: (-2 >= 3)
Include: (-2 >= 3); should extract: 1
Include: -2; should extract: 0
Include: 3; should extract: 0
Canonical form without lets (-2 >= 3)
0: -2, 0
1: 3, 0
2: (-2 >= 3), 1
With variables (-2 >= 3)
With lets: (-2 >= 3)
time expr: (-3 + (-2*4))


Input to CSE (-2 >= 3)
After removing lets: (-2 >= 3)
Include: (-2 >= 3); should extract: 1
Include: -2; should extract: 0
Include: 3; should extract: 0
Canonical form without lets (-2 >= 3)
0: -2, 0
1: 3, 0
2: (-2 >= 3), 1
With variables (-2 >= 3)
With lets: (-2 >= 3)
time expr: (-11 + (-2*12))


Input to CSE (-7 >= 8)
After removing lets: (-7 >= 8)
Include: (-7 >= 8); should extract: 1
Include: -7; should extract: 0
Include: 8; should extract: 0
Canonical form without lets (-7 >= 8)
0: -7, 0
1: 8, 0
2: (-7 >= 8), 1
With variables (-7 >= 8)
With lets: (-7 >= 8)
time expr: (-35 + (-7*36))


Input to CSE (1 >= 4)
After removing lets: (1 >= 4)
Include: (1 >= 4); should extract: 1
Include: 1; should extract: 0
Include: 4; should extract: 0
Canonical form without lets (1 >= 4)
0: 1, 0
1: 4, 0
2: (1 >= 4), 1
With variables (1 >= 4)
With lets: (1 >= 4)
time expr: (-287 + (1*288))0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, )
the time size: (0..0)
C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 


Input to CSE (0 >= 8)
After removing lets: (0 >= 8)
Include: (0 >= 8); should extract: 1
Include: 0; should extract: 0
Include: 8; should extract: 0
Canonical form without lets (0 >= 8)
0: 0, 0
1: 8, 0
2: (0 >= 8), 1
With variables (0 >= 8)
With lets: (0 >= 8)
time expr: (0 + (0*0))


Input to CSE (0 >= 7)
After removing lets: (0 >= 7)
Include: (0 >= 7); should extract: 1
Include: 0; should extract: 0
Include: 7; should extract: 0
Canonical form without lets (0 >= 7)
0: 0, 0
1: 7, 0
2: (0 >= 7), 1
With variables (0 >= 7)
With lets: (0 >= 7)
time expr: (0 + (0*0))


Input to CSE (0 >= 7)
After removing lets: (0 >= 7)
Include: (0 >= 7); should extract: 1
Include: 0; should extract: 0
Include: 7; should extract: 0
Canonical form without lets (0 >= 7)
0: 0, 0
1: 7, 0
2: (0 >= 7), 1
With variables (0 >= 7)
With lets: (0 >= 7)
time expr: (0 + (0*0))


Input to CSE (-3 >= 4)
After removing lets: (-3 >= 4)
Include: (-3 >= 4); should extract: 1
Include: -3; should extract: 0
Include: 4; should extract: 0
Canonical form without lets (-3 >= 4)
0: -3, 0
1: 4, 0
2: (-3 >= 4), 1
With variables (-3 >= 4)
With lets: (-3 >= 4)
time expr: (0 + (-3*1))


Input to CSE (-2 >= 3)
After removing lets: (-2 >= 3)
Include: (-2 >= 3); should extract: 1
Include: -2; should extract: 0
Include: 3; should extract: 0
Canonical form without lets (-2 >= 3)
0: -2, 0
1: 3, 0
2: (-2 >= 3), 1
With variables (-2 >= 3)
With lets: (-2 >= 3)
time expr: (-3 + (-2*4))


Input to CSE (-2 >= 3)
After removing lets: (-2 >= 3)
Include: (-2 >= 3); should extract: 1
Include: -2; should extract: 0
Include: 3; should extract: 0
Canonical form without lets (-2 >= 3)
0: -2, 0
1: 3, 0
2: (-2 >= 3), 1
With variables (-2 >= 3)
With lets: (-2 >= 3)
time expr: (-11 + (-2*12))


Input to CSE (1 >= 8)
After removing lets: (1 >= 8)
Include: (1 >= 8); should extract: 1
Include: 1; should extract: 0
Include: 8; should extract: 0
Canonical form without lets (1 >= 8)
0: 1, 0
1: 8, 0
2: (1 >= 8), 1
With variables (1 >= 8)
With lets: (1 >= 8)
time expr: (-35 + (1*36))


Input to CSE (0 >= 4)
After removing lets: (0 >= 4)
Include: (0 >= 4); should extract: 1
Include: 0; should extract: 0
Include: 4; should extract: 0
Canonical form without lets (0 >= 4)
0: 0, 0
1: 4, 0
2: (0 >= 4), 1
With variables (0 >= 4)
With lets: (0 >= 4)
time expr: (1 + (0*288))0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, )
the time size: (0..0)
C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 


Input to CSE (0 >= 8)
After removing lets: (0 >= 8)
Include: (0 >= 8); should extract: 1
Include: 0; should extract: 0
Include: 8; should extract: 0
Canonical form without lets (0 >= 8)
0: 0, 0
1: 8, 0
2: (0 >= 8), 1
With variables (0 >= 8)
With lets: (0 >= 8)
time expr: (0 + (0*0))


Input to CSE (0 >= 7)
After removing lets: (0 >= 7)
Include: (0 >= 7); should extract: 1
Include: 0; should extract: 0
Include: 7; should extract: 0
Canonical form without lets (0 >= 7)
0: 0, 0
1: 7, 0
2: (0 >= 7), 1
With variables (0 >= 7)
With lets: (0 >= 7)
time expr: (0 + (0*0))


Input to CSE (0 >= 7)
After removing lets: (0 >= 7)
Include: (0 >= 7); should extract: 1
Include: 0; should extract: 0
Include: 7; should extract: 0
Canonical form without lets (0 >= 7)
0: 0, 0
1: 7, 0
2: (0 >= 7), 1
With variables (0 >= 7)
With lets: (0 >= 7)
time expr: (0 + (0*0))


Input to CSE (-3 >= 4)
After removing lets: (-3 >= 4)
Include: (-3 >= 4); should extract: 1
Include: -3; should extract: 0
Include: 4; should extract: 0
Canonical form without lets (-3 >= 4)
0: -3, 0
1: 4, 0
2: (-3 >= 4), 1
With variables (-3 >= 4)
With lets: (-3 >= 4)
time expr: (0 + (-3*1))


Input to CSE (-2 >= 3)
After removing lets: (-2 >= 3)
Include: (-2 >= 3); should extract: 1
Include: -2; should extract: 0
Include: 3; should extract: 0
Canonical form without lets (-2 >= 3)
0: -2, 0
1: 3, 0
2: (-2 >= 3), 1
With variables (-2 >= 3)
With lets: (-2 >= 3)
time expr: (-3 + (-2*4))


Input to CSE (1 >= 3)
After removing lets: (1 >= 3)
Include: (1 >= 3); should extract: 1
Include: 1; should extract: 0
Include: 3; should extract: 0
Canonical form without lets (1 >= 3)
0: 1, 0
1: 3, 0
2: (1 >= 3), 1
With variables (1 >= 3)
With lets: (1 >= 3)
time expr: (-11 + (1*12))


Input to CSE (0 >= 8)
After removing lets: (0 >= 8)
Include: (0 >= 8); should extract: 1
Include: 0; should extract: 0
Include: 8; should extract: 0
Canonical form without lets (0 >= 8)
0: 0, 0
1: 8, 0
2: (0 >= 8), 1
With variables (0 >= 8)
With lets: (0 >= 8)
time expr: (1 + (0*36))


Input to CSE (0 >= 4)
After removing lets: (0 >= 4)
Include: (0 >= 4); should extract: 1
Include: 0; should extract: 0
Include: 4; should extract: 0
Canonical form without lets (0 >= 4)
0: 0, 0
1: 4, 0
2: (0 >= 4), 1
With variables (0 >= 4)
With lets: (0 >= 4)
time expr: (1 + (0*288))0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, )
the time size: (0..0)
C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 


Input to CSE (0 >= 8)
After removing lets: (0 >= 8)
Include: (0 >= 8); should extract: 1
Include: 0; should extract: 0
Include: 8; should extract: 0
Canonical form without lets (0 >= 8)
0: 0, 0
1: 8, 0
2: (0 >= 8), 1
With variables (0 >= 8)
With lets: (0 >= 8)
time expr: (0 + (0*0))


Input to CSE (0 >= 7)
After removing lets: (0 >= 7)
Include: (0 >= 7); should extract: 1
Include: 0; should extract: 0
Include: 7; should extract: 0
Canonical form without lets (0 >= 7)
0: 0, 0
1: 7, 0
2: (0 >= 7), 1
With variables (0 >= 7)
With lets: (0 >= 7)
time expr: (0 + (0*0))


Input to CSE (0 >= 7)
After removing lets: (0 >= 7)
Include: (0 >= 7); should extract: 1
Include: 0; should extract: 0
Include: 7; should extract: 0
Canonical form without lets (0 >= 7)
0: 0, 0
1: 7, 0
2: (0 >= 7), 1
With variables (0 >= 7)
With lets: (0 >= 7)
time expr: (0 + (0*0))


Input to CSE (-3 >= 4)
After removing lets: (-3 >= 4)
Include: (-3 >= 4); should extract: 1
Include: -3; should extract: 0
Include: 4; should extract: 0
Canonical form without lets (-3 >= 4)
0: -3, 0
1: 4, 0
2: (-3 >= 4), 1
With variables (-3 >= 4)
With lets: (-3 >= 4)
time expr: (0 + (-3*1))


Input to CSE (1 >= 3)
After removing lets: (1 >= 3)
Include: (1 >= 3); should extract: 1
Include: 1; should extract: 0
Include: 3; should extract: 0
Canonical form without lets (1 >= 3)
0: 1, 0
1: 3, 0
2: (1 >= 3), 1
With variables (1 >= 3)
With lets: (1 >= 3)
time expr: (-3 + (1*4))


Input to CSE (0 >= 3)
After removing lets: (0 >= 3)
Include: (0 >= 3); should extract: 1
Include: 0; should extract: 0
Include: 3; should extract: 0
Canonical form without lets (0 >= 3)
0: 0, 0
1: 3, 0
2: (0 >= 3), 1
With variables (0 >= 3)
With lets: (0 >= 3)
time expr: (1 + (0*12))


Input to CSE (0 >= 8)
After removing lets: (0 >= 8)
Include: (0 >= 8); should extract: 1
Include: 0; should extract: 0
Include: 8; should extract: 0
Canonical form without lets (0 >= 8)
0: 0, 0
1: 8, 0
2: (0 >= 8), 1
With variables (0 >= 8)
With lets: (0 >= 8)
time expr: (1 + (0*36))


Input to CSE (0 >= 4)
After removing lets: (0 >= 4)
Include: (0 >= 4); should extract: 1
Include: 0; should extract: 0
Include: 4; should extract: 0
Canonical form without lets (0 >= 4)
0: 0, 0
1: 4, 0
2: (0 >= 4), 1
With variables (0 >= 4)
With lets: (0 >= 4)
time expr: (1 + (0*288))0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, )
the time size: (0..0)
C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 


Input to CSE (0 >= 8)
After removing lets: (0 >= 8)
Include: (0 >= 8); should extract: 1
Include: 0; should extract: 0
Include: 8; should extract: 0
Canonical form without lets (0 >= 8)
0: 0, 0
1: 8, 0
2: (0 >= 8), 1
With variables (0 >= 8)
With lets: (0 >= 8)
time expr: (0 + (0*0))


Input to CSE (0 >= 7)
After removing lets: (0 >= 7)
Include: (0 >= 7); should extract: 1
Include: 0; should extract: 0
Include: 7; should extract: 0
Canonical form without lets (0 >= 7)
0: 0, 0
1: 7, 0
2: (0 >= 7), 1
With variables (0 >= 7)
With lets: (0 >= 7)
time expr: (0 + (0*0))


Input to CSE (0 >= 7)
After removing lets: (0 >= 7)
Include: (0 >= 7); should extract: 1
Include: 0; should extract: 0
Include: 7; should extract: 0
Canonical form without lets (0 >= 7)
0: 0, 0
1: 7, 0
2: (0 >= 7), 1
With variables (0 >= 7)
With lets: (0 >= 7)
time expr: (0 + (0*0))


Input to CSE (1 >= 4)
After removing lets: (1 >= 4)
Include: (1 >= 4); should extract: 1
Include: 1; should extract: 0
Include: 4; should extract: 0
Canonical form without lets (1 >= 4)
0: 1, 0
1: 4, 0
2: (1 >= 4), 1
With variables (1 >= 4)
With lets: (1 >= 4)
time expr: (0 + (1*1))


Input to CSE (0 >= 3)
After removing lets: (0 >= 3)
Include: (0 >= 3); should extract: 1
Include: 0; should extract: 0
Include: 3; should extract: 0
Canonical form without lets (0 >= 3)
0: 0, 0
1: 3, 0
2: (0 >= 3), 1
With variables (0 >= 3)
With lets: (0 >= 3)
time expr: (1 + (0*4))


Input to CSE (0 >= 3)
After removing lets: (0 >= 3)
Include: (0 >= 3); should extract: 1
Include: 0; should extract: 0
Include: 3; should extract: 0
Canonical form without lets (0 >= 3)
0: 0, 0
1: 3, 0
2: (0 >= 3), 1
With variables (0 >= 3)
With lets: (0 >= 3)
time expr: (1 + (0*12))


Input to CSE (0 >= 8)
After removing lets: (0 >= 8)
Include: (0 >= 8); should extract: 1
Include: 0; should extract: 0
Include: 8; should extract: 0
Canonical form without lets (0 >= 8)
0: 0, 0
1: 8, 0
2: (0 >= 8), 1
With variables (0 >= 8)
With lets: (0 >= 8)
time expr: (1 + (0*36))


Input to CSE (0 >= 4)
After removing lets: (0 >= 4)
Include: (0 >= 4); should extract: 1
Include: 0; should extract: 0
Include: 4; should extract: 0
Canonical form without lets (0 >= 4)
0: 0, 0
1: 4, 0
2: (0 >= 4), 1
With variables (0 >= 4)
With lets: (0 >= 4)
time expr: (1 + (0*288))0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, )
the time size: (0..0)
A(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 


Input to CSE (0 >= 8)
After removing lets: (0 >= 8)
Include: (0 >= 8); should extract: 1
Include: 0; should extract: 0
Include: 8; should extract: 0
Canonical form without lets (0 >= 8)
0: 0, 0
1: 8, 0
2: (0 >= 8), 1
With variables (0 >= 8)
With lets: (0 >= 8)
time expr: (0 + (0*0))


Input to CSE (0 >= 7)
After removing lets: (0 >= 7)
Include: (0 >= 7); should extract: 1
Include: 0; should extract: 0
Include: 7; should extract: 0
Canonical form without lets (0 >= 7)
0: 0, 0
1: 7, 0
2: (0 >= 7), 1
With variables (0 >= 7)
With lets: (0 >= 7)
time expr: (0 + (0*0))


Input to CSE (0 >= 7)
After removing lets: (0 >= 7)
Include: (0 >= 7); should extract: 1
Include: 0; should extract: 0
Include: 7; should extract: 0
Canonical form without lets (0 >= 7)
0: 0, 0
1: 7, 0
2: (0 >= 7), 1
With variables (0 >= 7)
With lets: (0 >= 7)
time expr: (0 + (0*0))


Input to CSE (0 >= 4)
After removing lets: (0 >= 4)
Include: (0 >= 4); should extract: 1
Include: 0; should extract: 0
Include: 4; should extract: 0
Canonical form without lets (0 >= 4)
0: 0, 0
1: 4, 0
2: (0 >= 4), 1
With variables (0 >= 4)
With lets: (0 >= 4)
time expr: (0 + (0*1))


Input to CSE (0 >= 3)
After removing lets: (0 >= 3)
Include: (0 >= 3); should extract: 1
Include: 0; should extract: 0
Include: 3; should extract: 0
Canonical form without lets (0 >= 3)
0: 0, 0
1: 3, 0
2: (0 >= 3), 1
With variables (0 >= 3)
With lets: (0 >= 3)
time expr: (0 + (0*4))


Input to CSE (0 >= 3)
After removing lets: (0 >= 3)
Include: (0 >= 3); should extract: 1
Include: 0; should extract: 0
Include: 3; should extract: 0
Canonical form without lets (0 >= 3)
0: 0, 0
1: 3, 0
2: (0 >= 3), 1
With variables (0 >= 3)
With lets: (0 >= 3)
time expr: (0 + (0*12))


Input to CSE (0 >= 8)
After removing lets: (0 >= 8)
Include: (0 >= 8); should extract: 1
Include: 0; should extract: 0
Include: 8; should extract: 0
Canonical form without lets (0 >= 8)
0: 0, 0
1: 8, 0
2: (0 >= 8), 1
With variables (0 >= 8)
With lets: (0 >= 8)
time expr: (0 + (0*36))


Input to CSE (0 >= 4)
After removing lets: (0 >= 4)
Include: (0 >= 4); should extract: 1
Include: 0; should extract: 0
Include: 4; should extract: 0
Canonical form without lets (0 >= 4)
0: 0, 0
1: 4, 0
2: (0 >= 4), 1
With variables (0 >= 4)
With lets: (0 >= 4)
time expr: (0 + (0*288))0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, )
the time size: (0..0)
B(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 


Input to CSE (0 >= 8)
After removing lets: (0 >= 8)
Include: (0 >= 8); should extract: 1
Include: 0; should extract: 0
Include: 8; should extract: 0
Canonical form without lets (0 >= 8)
0: 0, 0
1: 8, 0
2: (0 >= 8), 1
With variables (0 >= 8)
With lets: (0 >= 8)
time expr: (0 + (0*0))


Input to CSE (0 >= 7)
After removing lets: (0 >= 7)
Include: (0 >= 7); should extract: 1
Include: 0; should extract: 0
Include: 7; should extract: 0
Canonical form without lets (0 >= 7)
0: 0, 0
1: 7, 0
2: (0 >= 7), 1
With variables (0 >= 7)
With lets: (0 >= 7)
time expr: (0 + (0*0))


Input to CSE (0 >= 7)
After removing lets: (0 >= 7)
Include: (0 >= 7); should extract: 1
Include: 0; should extract: 0
Include: 7; should extract: 0
Canonical form without lets (0 >= 7)
0: 0, 0
1: 7, 0
2: (0 >= 7), 1
With variables (0 >= 7)
With lets: (0 >= 7)
time expr: (0 + (0*0))


Input to CSE (0 >= 4)
After removing lets: (0 >= 4)
Include: (0 >= 4); should extract: 1
Include: 0; should extract: 0
Include: 4; should extract: 0
Canonical form without lets (0 >= 4)
0: 0, 0
1: 4, 0
2: (0 >= 4), 1
With variables (0 >= 4)
With lets: (0 >= 4)
time expr: (0 + (0*1))


Input to CSE (0 >= 3)
After removing lets: (0 >= 3)
Include: (0 >= 3); should extract: 1
Include: 0; should extract: 0
Include: 3; should extract: 0
Canonical form without lets (0 >= 3)
0: 0, 0
1: 3, 0
2: (0 >= 3), 1
With variables (0 >= 3)
With lets: (0 >= 3)
time expr: (0 + (0*4))


Input to CSE (0 >= 3)
After removing lets: (0 >= 3)
Include: (0 >= 3); should extract: 1
Include: 0; should extract: 0
Include: 3; should extract: 0
Canonical form without lets (0 >= 3)
0: 0, 0
1: 3, 0
2: (0 >= 3), 1
With variables (0 >= 3)
With lets: (0 >= 3)
time expr: (0 + (0*12))


Input to CSE (0 >= 8)
After removing lets: (0 >= 8)
Include: (0 >= 8); should extract: 1
Include: 0; should extract: 0
Include: 8; should extract: 0
Canonical form without lets (0 >= 8)
0: 0, 0
1: 8, 0
2: (0 >= 8), 1
With variables (0 >= 8)
With lets: (0 >= 8)
time expr: (0 + (0*36))


Input to CSE (0 >= 4)
After removing lets: (0 >= 4)
Include: (0 >= 4); should extract: 1
Include: 0; should extract: 0
Include: 4; should extract: 0
Canonical form without lets (0 >= 4)
0: 0, 0
1: 4, 0
2: (0 >= 4), 1
With variables (0 >= 4)
With lets: (0 >= 4)
time expr: (0 + (0*288))0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, )
the time size: (0..0)
C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 


Input to CSE (0 >= 8)
After removing lets: (0 >= 8)
Include: (0 >= 8); should extract: 1
Include: 0; should extract: 0
Include: 8; should extract: 0
Canonical form without lets (0 >= 8)
0: 0, 0
1: 8, 0
2: (0 >= 8), 1
With variables (0 >= 8)
With lets: (0 >= 8)
time expr: (0 + (0*0))


Input to CSE (0 >= 7)
After removing lets: (0 >= 7)
Include: (0 >= 7); should extract: 1
Include: 0; should extract: 0
Include: 7; should extract: 0
Canonical form without lets (0 >= 7)
0: 0, 0
1: 7, 0
2: (0 >= 7), 1
With variables (0 >= 7)
With lets: (0 >= 7)
time expr: (0 + (0*0))


Input to CSE (0 >= 7)
After removing lets: (0 >= 7)
Include: (0 >= 7); should extract: 1
Include: 0; should extract: 0
Include: 7; should extract: 0
Canonical form without lets (0 >= 7)
0: 0, 0
1: 7, 0
2: (0 >= 7), 1
With variables (0 >= 7)
With lets: (0 >= 7)
time expr: (0 + (0*0))


Input to CSE (0 >= 4)
After removing lets: (0 >= 4)
Include: (0 >= 4); should extract: 1
Include: 0; should extract: 0
Include: 4; should extract: 0
Canonical form without lets (0 >= 4)
0: 0, 0
1: 4, 0
2: (0 >= 4), 1
With variables (0 >= 4)
With lets: (0 >= 4)
time expr: (0 + (0*1))


Input to CSE (0 >= 3)
After removing lets: (0 >= 3)
Include: (0 >= 3); should extract: 1
Include: 0; should extract: 0
Include: 3; should extract: 0
Canonical form without lets (0 >= 3)
0: 0, 0
1: 3, 0
2: (0 >= 3), 1
With variables (0 >= 3)
With lets: (0 >= 3)
time expr: (0 + (0*4))


Input to CSE (0 >= 3)
After removing lets: (0 >= 3)
Include: (0 >= 3); should extract: 1
Include: 0; should extract: 0
Include: 3; should extract: 0
Canonical form without lets (0 >= 3)
0: 0, 0
1: 3, 0
2: (0 >= 3), 1
With variables (0 >= 3)
With lets: (0 >= 3)
time expr: (0 + (0*12))


Input to CSE (0 >= 8)
After removing lets: (0 >= 8)
Include: (0 >= 8); should extract: 1
Include: 0; should extract: 0
Include: 8; should extract: 0
Canonical form without lets (0 >= 8)
0: 0, 0
1: 8, 0
2: (0 >= 8), 1
With variables (0 >= 8)
With lets: (0 >= 8)
time expr: (0 + (0*36))


Input to CSE (0 >= 4)
After removing lets: (0 >= 4)
Include: (0 >= 4); should extract: 1
Include: 0; should extract: 0
Include: 4; should extract: 0
Canonical form without lets (0 >= 4)
0: 0, 0
1: 4, 0
2: (0 >= 4), 1
With variables (0 >= 4)
With lets: (0 >= 4)
time expr: (0 + (0*288))0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, )
the time size: (0..0)
C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 


Input to CSE (0 >= 8)
After removing lets: (0 >= 8)
Include: (0 >= 8); should extract: 1
Include: 0; should extract: 0
Include: 8; should extract: 0
Canonical form without lets (0 >= 8)
0: 0, 0
1: 8, 0
2: (0 >= 8), 1
With variables (0 >= 8)
With lets: (0 >= 8)
time expr: (0 + (0*0))


Input to CSE (0 >= 7)
After removing lets: (0 >= 7)
Include: (0 >= 7); should extract: 1
Include: 0; should extract: 0
Include: 7; should extract: 0
Canonical form without lets (0 >= 7)
0: 0, 0
1: 7, 0
2: (0 >= 7), 1
With variables (0 >= 7)
With lets: (0 >= 7)
time expr: (0 + (0*0))


Input to CSE (0 >= 7)
After removing lets: (0 >= 7)
Include: (0 >= 7); should extract: 1
Include: 0; should extract: 0
Include: 7; should extract: 0
Canonical form without lets (0 >= 7)
0: 0, 0
1: 7, 0
2: (0 >= 7), 1
With variables (0 >= 7)
With lets: (0 >= 7)
time expr: (0 + (0*0))


Input to CSE (0 >= 4)
After removing lets: (0 >= 4)
Include: (0 >= 4); should extract: 1
Include: 0; should extract: 0
Include: 4; should extract: 0
Canonical form without lets (0 >= 4)
0: 0, 0
1: 4, 0
2: (0 >= 4), 1
With variables (0 >= 4)
With lets: (0 >= 4)
time expr: (0 + (0*1))


Input to CSE (0 >= 3)
After removing lets: (0 >= 3)
Include: (0 >= 3); should extract: 1
Include: 0; should extract: 0
Include: 3; should extract: 0
Canonical form without lets (0 >= 3)
0: 0, 0
1: 3, 0
2: (0 >= 3), 1
With variables (0 >= 3)
With lets: (0 >= 3)
time expr: (0 + (0*4))


Input to CSE (0 >= 3)
After removing lets: (0 >= 3)
Include: (0 >= 3); should extract: 1
Include: 0; should extract: 0
Include: 3; should extract: 0
Canonical form without lets (0 >= 3)
0: 0, 0
1: 3, 0
2: (0 >= 3), 1
With variables (0 >= 3)
With lets: (0 >= 3)
time expr: (0 + (0*12))


Input to CSE (0 >= 8)
After removing lets: (0 >= 8)
Include: (0 >= 8); should extract: 1
Include: 0; should extract: 0
Include: 8; should extract: 0
Canonical form without lets (0 >= 8)
0: 0, 0
1: 8, 0
2: (0 >= 8), 1
With variables (0 >= 8)
With lets: (0 >= 8)
time expr: (0 + (0*36))


Input to CSE (0 >= 4)
After removing lets: (0 >= 4)
Include: (0 >= 4); should extract: 1
Include: 0; should extract: 0
Include: 4; should extract: 0
Canonical form without lets (0 >= 4)
0: 0, 0
1: 4, 0
2: (0 >= 4), 1
With variables (0 >= 4)
With lets: (0 >= 4)
time expr: (0 + (0*288))0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, )
the time size: (0..0)
Load matrix P_im that starts at (0, 0), and with extents (4, 45)
Load matrix W_im that starts at (0, 0), and with extents (8, 36)
Lowering after applying space time transformation:
gpu_block<Default_GPU> (A.s0.n, 0, (P.extent.1/3600)) {
 gpu_block<Default_GPU> (A.s0.nn, 0, 16) {
  gpu_block<Default_GPU> (A.s0.co, 0, 4) {
   gpu_thread<Default_GPU> (A.s0.mx, 0, 4) {
    gpu_thread<Default_GPU> (A.s0.my, 0, 4) {
     realize A[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
      realize B[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
       realize C[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
        for (A.s0.mk, 0, 4) {
         for (A.s0.ci, 0, 8) {
          for (A.s0.yy_xx, 0, 7) {
           for (A.s0.yyy_xxx, 0, 7) {
            for (A.s0.kx, 0, 3) {
             for (A.s0.ky, 0, 3) {
              for (A.s0.coo, 0, 1) {
               for (A.s0.y_x, 0, 1) {
                vectorized (A.s0.cooo, 0, 8) {
                 for (A.s0.cii, 0, 4) {
                  let A.s0.yyy_xxx = A.s0.yyy_xxx
                  let A.s0.yy_xx = A.s0.yy_xx
                  let A.s0.cooo = A.s0.cooo
                  let A.s0.cii = A.s0.cii
                  A(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = (float32)P(((A.s0.nn*512) + ((A.s0.mx*128) + ((A.s0.mk*32) + ((A.s0.ci*4) + A.s0.cii)))), ((A.s0.n*225) + (((((((A.s0.y_x*49) + ((A.s0.yy_xx*7) + A.s0.yyy_xxx))/7)*2) + A.s0.kx)*15) + (((((A.s0.y_x*49) + ((A.s0.yy_xx*7) + A.s0.yyy_xxx)) % 7)*2) + A.s0.ky))))
                  B(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = (float32)W(((A.s0.my*32) + ((A.s0.co*8) + ((A.s0.coo*8) + A.s0.cooo))), ((A.s0.mk*288) + ((A.s0.ci*36) + ((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii)))))
                  C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = (select((((((A.s0.cii == 0) && (A.s0.ci == 0)) && (A.s0.mk == 0)) && (A.s0.ky == 0)) && (A.s0.kx == 0)), 0.000000f, select((A.s0.cii == 0), select((A.s0.ky == 0), select((A.s0.kx == 0), select((A.s0.ci == 0), C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)), C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)), C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)), C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))) + (A(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)*B(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)))
                  if ((((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) {
                   Out(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, A.s0.y_x, A.s0.my, A.s0.mx, A.s0.coo, A.s0.nn, A.s0.co, A.s0.n) = C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
}


Fixing calls' args that correspond to loops marked as removed ...
Lowering after fixing calls' args that correspond to loops marked as removed:
gpu_block<Default_GPU> (A.s0.n, 0, (P.extent.1/3600)) {
 gpu_block<Default_GPU> (A.s0.nn, 0, 16) {
  gpu_block<Default_GPU> (A.s0.co, 0, 4) {
   gpu_thread<Default_GPU> (A.s0.mx, 0, 4) {
    gpu_thread<Default_GPU> (A.s0.my, 0, 4) {
     realize A[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
      realize B[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
       realize C[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
        for (A.s0.mk, 0, 4) {
         for (A.s0.ci, 0, 8) {
          for (A.s0.yy_xx, 0, 7) {
           for (A.s0.yyy_xxx, 0, 7) {
            for (A.s0.kx, 0, 3) {
             for (A.s0.ky, 0, 3) {
              for (A.s0.coo, 0, 1) {
               for (A.s0.y_x, 0, 1) {
                vectorized (A.s0.cooo, 0, 8) {
                 for (A.s0.cii, 0, 4) {
                  let A.s0.yyy_xxx = A.s0.yyy_xxx
                  let A.s0.yy_xx = A.s0.yy_xx
                  let A.s0.cooo = A.s0.cooo
                  let A.s0.cii = A.s0.cii
                  A(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = (float32)P(((A.s0.nn*512) + ((A.s0.mx*128) + ((A.s0.mk*32) + ((A.s0.ci*4) + A.s0.cii)))), ((A.s0.n*225) + (((((((A.s0.y_x*49) + ((A.s0.yy_xx*7) + A.s0.yyy_xxx))/7)*2) + A.s0.kx)*15) + (((((A.s0.y_x*49) + ((A.s0.yy_xx*7) + A.s0.yyy_xxx)) % 7)*2) + A.s0.ky))))
                  B(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = (float32)W(((A.s0.my*32) + ((A.s0.co*8) + ((A.s0.coo*8) + A.s0.cooo))), ((A.s0.mk*288) + ((A.s0.ci*36) + ((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii)))))
                  C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = (select((((((A.s0.cii == 0) && (A.s0.ci == 0)) && (A.s0.mk == 0)) && (A.s0.ky == 0)) && (A.s0.kx == 0)), 0.000000f, select((A.s0.cii == 0), select((A.s0.ky == 0), select((A.s0.kx == 0), select((A.s0.ci == 0), C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)), C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)), C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)), C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))) + (A(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)*B(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)))
                  if ((((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) {
                   Out(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, A.s0.y_x, A.s0.my, A.s0.mx, A.s0.coo, A.s0.nn, A.s0.co, A.s0.n) = C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
}


Skipping injecting memoization...
Injecting tracing...
Lowering after injecting tracing:
gpu_block<Default_GPU> (A.s0.n, 0, (P.extent.1/3600)) {
 gpu_block<Default_GPU> (A.s0.nn, 0, 16) {
  gpu_block<Default_GPU> (A.s0.co, 0, 4) {
   gpu_thread<Default_GPU> (A.s0.mx, 0, 4) {
    gpu_thread<Default_GPU> (A.s0.my, 0, 4) {
     realize A[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
      realize B[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
       realize C[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
        for (A.s0.mk, 0, 4) {
         for (A.s0.ci, 0, 8) {
          for (A.s0.yy_xx, 0, 7) {
           for (A.s0.yyy_xxx, 0, 7) {
            for (A.s0.kx, 0, 3) {
             for (A.s0.ky, 0, 3) {
              for (A.s0.coo, 0, 1) {
               for (A.s0.y_x, 0, 1) {
                vectorized (A.s0.cooo, 0, 8) {
                 for (A.s0.cii, 0, 4) {
                  let A.s0.yyy_xxx = A.s0.yyy_xxx
                  let A.s0.yy_xx = A.s0.yy_xx
                  let A.s0.cooo = A.s0.cooo
                  let A.s0.cii = A.s0.cii
                  A(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = (float32)P(((A.s0.nn*512) + ((A.s0.mx*128) + ((A.s0.mk*32) + ((A.s0.ci*4) + A.s0.cii)))), ((A.s0.n*225) + (((((((A.s0.y_x*49) + ((A.s0.yy_xx*7) + A.s0.yyy_xxx))/7)*2) + A.s0.kx)*15) + (((((A.s0.y_x*49) + ((A.s0.yy_xx*7) + A.s0.yyy_xxx)) % 7)*2) + A.s0.ky))))
                  B(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = (float32)W(((A.s0.my*32) + ((A.s0.co*8) + ((A.s0.coo*8) + A.s0.cooo))), ((A.s0.mk*288) + ((A.s0.ci*36) + ((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii)))))
                  C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = (select((((((A.s0.cii == 0) && (A.s0.ci == 0)) && (A.s0.mk == 0)) && (A.s0.ky == 0)) && (A.s0.kx == 0)), 0.000000f, select((A.s0.cii == 0), select((A.s0.ky == 0), select((A.s0.kx == 0), select((A.s0.ci == 0), C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)), C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)), C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)), C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))) + (A(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)*B(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)))
                  if ((((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) {
                   Out(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, A.s0.y_x, A.s0.my, A.s0.mx, A.s0.coo, A.s0.nn, A.s0.co, A.s0.n) = C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
}

Adding checks for recursice calls
Adding checks for parameters
Lowering after injecting parameter checks:
gpu_block<Default_GPU> (A.s0.n, 0, (P.extent.1/3600)) {
 gpu_block<Default_GPU> (A.s0.nn, 0, 16) {
  gpu_block<Default_GPU> (A.s0.co, 0, 4) {
   gpu_thread<Default_GPU> (A.s0.mx, 0, 4) {
    gpu_thread<Default_GPU> (A.s0.my, 0, 4) {
     realize A[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
      realize B[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
       realize C[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
        for (A.s0.mk, 0, 4) {
         for (A.s0.ci, 0, 8) {
          for (A.s0.yy_xx, 0, 7) {
           for (A.s0.yyy_xxx, 0, 7) {
            for (A.s0.kx, 0, 3) {
             for (A.s0.ky, 0, 3) {
              for (A.s0.coo, 0, 1) {
               for (A.s0.y_x, 0, 1) {
                vectorized (A.s0.cooo, 0, 8) {
                 for (A.s0.cii, 0, 4) {
                  let A.s0.yyy_xxx = A.s0.yyy_xxx
                  let A.s0.yy_xx = A.s0.yy_xx
                  let A.s0.cooo = A.s0.cooo
                  let A.s0.cii = A.s0.cii
                  A(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = (float32)P(((A.s0.nn*512) + ((A.s0.mx*128) + ((A.s0.mk*32) + ((A.s0.ci*4) + A.s0.cii)))), ((A.s0.n*225) + (((((((A.s0.y_x*49) + ((A.s0.yy_xx*7) + A.s0.yyy_xxx))/7)*2) + A.s0.kx)*15) + (((((A.s0.y_x*49) + ((A.s0.yy_xx*7) + A.s0.yyy_xxx)) % 7)*2) + A.s0.ky))))
                  B(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = (float32)W(((A.s0.my*32) + ((A.s0.co*8) + ((A.s0.coo*8) + A.s0.cooo))), ((A.s0.mk*288) + ((A.s0.ci*36) + ((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii)))))
                  C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = (select((((((A.s0.cii == 0) && (A.s0.ci == 0)) && (A.s0.mk == 0)) && (A.s0.ky == 0)) && (A.s0.kx == 0)), 0.000000f, select((A.s0.cii == 0), select((A.s0.ky == 0), select((A.s0.kx == 0), select((A.s0.ci == 0), C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)), C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)), C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)), C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))) + (A(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)*B(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)))
                  if ((((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) {
                   Out(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, A.s0.y_x, A.s0.my, A.s0.mx, A.s0.coo, A.s0.nn, A.s0.co, A.s0.n) = C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
}

Computing bounds of each function's value
bounds_of_expr_in_scope (float32)P(_0, _1) = ((void *))neg_inf, ((void *))pos_inf
Bounds on value 0 for func P_im are: ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope (float32)W(_0, _1) = ((void *))neg_inf, ((void *))pos_inf
Bounds on value 0 for func W_im are: ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope select((cooo == 0), (float32)P_im(((((cii + (4*ci)) + (32*mk)) + (128*mx)) + (512*nn)), (((((((yyy_xxx + (7*yy_xx)) + (49*y_x)) % 7)*2) + ky) + (15*(((((yyy_xxx + (7*yy_xx)) + (49*y_x))/7)*2) + kx))) + (225*n))), (float32)A(cii, (cooo - 1), yyy_xxx, yy_xx, y_x, my, mx, coo, nn, ky, kx, ci, mk, co, n)) = ((void *))neg_inf, ((void *))pos_inf
Bounds on value 0 for func A are: ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope select((yyy_xxx == 0), (float32)W_im((((cooo + (8*coo)) + (8*co)) + (32*my)), ((((cii + (4*ky)) + (12*kx)) + (36*ci)) + (288*mk))), (float32)B(cii, cooo, (yyy_xxx - 1), yy_xx, y_x, my, mx, coo, nn, ky, kx, ci, mk, co, n)) = ((void *))neg_inf, ((void *))pos_inf
Bounds on value 0 for func B are: ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope (select((((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) && (kx == 0)), 0.000000f, select((cii == 0), select((ky == 0), select((kx == 0), select((ci == 0), (float32)C(((cii + 4) - 1), cooo, yyy_xxx, yy_xx, y_x, my, mx, coo, nn, ((ky + 3) - 1), ((kx + 3) - 1), ((ci + 8) - 1), (mk - 1), co, n), (float32)C(((cii + 4) - 1), cooo, yyy_xxx, yy_xx, y_x, my, mx, coo, nn, ((ky + 3) - 1), ((kx + 3) - 1), (ci - 1), mk, co, n)), (float32)C(((cii + 4) - 1), cooo, yyy_xxx, yy_xx, y_x, my, mx, coo, nn, ((ky + 3) - 1), (kx - 1), ci, mk, co, n)), (float32)C(((cii + 4) - 1), cooo, yyy_xxx, yy_xx, y_x, my, mx, coo, nn, (ky - 1), kx, ci, mk, co, n)), (float32)C((cii - 1), cooo, yyy_xxx, yy_xx, y_x, my, mx, coo, nn, ky, kx, ci, mk, co, n))) + ((float32)A(cii, cooo, yyy_xxx, yy_xx, y_x, my, mx, coo, nn, ky, kx, ci, mk, co, n)*(float32)B(cii, cooo, yyy_xxx, yy_xx, y_x, my, mx, coo, nn, ky, kx, ci, mk, co, n))) = ((void *))neg_inf, ((void *))pos_inf
Bounds on value 0 for func C are: ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope select((((((cii == 3) && (ci == 7)) && (mk == 3)) && (ky == 2)) && (kx == 2)), (float32)C(cii, cooo, yyy_xxx, yy_xx, y_x, my, mx, coo, nn, ky, kx, ci, mk, co, n)) = ((void *))neg_inf, ((void *))pos_inf
Bounds on value 0 for func Out are: ((void *))neg_inf, ((void *))pos_inf
Adding checks for images
Mutating (((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating ((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating (((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) (0)
Mutating ((A.s0.cii == 3) && (A.s0.ci == 7)) (0)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (1)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
(Miss) Rewrote ((A.s0.cii == 3) && (A.s0.ci == 7)) -> ((A.s0.cii == 3) && (A.s0.ci == 7)) (1)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
Mutating ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Hit) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
(Hit) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Miss) Rewrote ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) -> ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
(Miss) Rewrote (((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) -> ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
Mutating ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Hit) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Hit) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Miss) Rewrote ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) -> ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
(Miss) Rewrote ((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
Mutating ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Hit) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Miss) Rewrote ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) -> ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
(Miss) Rewrote (((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)



Input to CSE ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
After removing lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Include: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))); should extract: 1
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Canonical form without lets ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
0: A.s0.cii, 0
1: 3, 0
2: (A.s0.cii == 3), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: (A.s0.mk == 3), 1
8: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
9: A.s0.ky, 0
10: 2, 0
11: (A.s0.ky == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)), 1
13: A.s0.kx, 0
14: (A.s0.kx == 2), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)), 1
16: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))), 1
With variables ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
With lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Solved expr for A.s0.cii :
  (((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))
  ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope (P.extent.1/3600) = (P.extent.1/3600), (P.extent.1/3600)
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 16 = 16, 16
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 7 = 7, 7
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 7 = 7, 7
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 1 = 1, 1
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 1 = 1, 1
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope A.s0.yyy_xxx = 0, 6
bounds_of_expr_in_scope A.s0.yy_xx = 0, 6
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.cii = 0, 3
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = 0, 6
bounds_of_expr_in_scope A.s0.yy_xx = 0, 6
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = 0, 6
bounds_of_expr_in_scope A.s0.yy_xx = 0, 6
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
Mutating (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (1)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
(Miss) Rewrote (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)



Input to CSE ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
After removing lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Include: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))); should extract: 1
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Canonical form without lets ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
0: A.s0.cii, 0
1: 3, 0
2: (A.s0.cii == 3), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: (A.s0.mk == 3), 1
8: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
9: A.s0.ky, 0
10: 2, 0
11: (A.s0.ky == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)), 1
13: A.s0.kx, 0
14: (A.s0.kx == 2), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)), 1
16: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))), 1
With variables ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
With lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Solved expr for A.s0.cii :
  (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))
  ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Mutating (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (1)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (1)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (1)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
Mutating ((A.s0.ci == 7) && ((A.s0.mk == 3) && (A.s0.ky == 2))) (1)
(Hit) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (1)
Mutating ((A.s0.mk == 3) && (A.s0.ky == 2)) (0)
(Hit) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Hit) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
(Miss) Rewrote ((A.s0.mk == 3) && (A.s0.ky == 2)) -> ((A.s0.mk == 3) && (A.s0.ky == 2)) (0)
(Miss) Rewrote ((A.s0.ci == 7) && ((A.s0.mk == 3) && (A.s0.ky == 2))) -> ((A.s0.ci == 7) && ((A.s0.mk == 3) && (A.s0.ky == 2))) (1)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> ((A.s0.ci == 7) && ((A.s0.mk == 3) && (A.s0.ky == 2))) (1)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
Mutating ((A.s0.ci == 7) && (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
(Hit) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (1)
Mutating (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote ((A.s0.mk == 3) && (A.s0.ky == 2)) -> ((A.s0.mk == 3) && (A.s0.ky == 2)) (0)
(Hit) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2))) -> ((A.s0.ci == 7) && (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((A.s0.ci == 7) && (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
Mutating ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)
(Hit) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (1)
Mutating ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
(Hit) Rewrote (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
(Miss) Rewrote ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
(Miss) Rewrote ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) -> ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)
(Miss) Rewrote (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)



Input to CSE ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
After removing lets: ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Include: ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)); should extract: 1
Include: (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)); should extract: 1
Include: ((A.s0.mk == 3) && (A.s0.ky == 2)); should extract: 1
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Canonical form without lets ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
0: A.s0.ci, 0
1: 7, 0
2: (A.s0.ci == 7), 1
3: A.s0.mk, 0
4: 3, 0
5: (A.s0.mk == 3), 1
6: A.s0.ky, 0
7: 2, 0
8: (A.s0.ky == 2), 1
9: ((A.s0.mk == 3) && (A.s0.ky == 2)), 1
10: A.s0.kx, 0
11: (A.s0.kx == 2), 1
12: (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)), 1
13: A.s0.cii, 0
14: (A.s0.cii == 3), 1
15: ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)), 1
16: ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))), 1
With variables ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
With lets: ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Solved expr for A.s0.ci :
  (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))
  ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Mutating (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (1)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (1)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.mk == 3) && (A.s0.ci == 7)) (1)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
Mutating ((A.s0.mk == 3) && ((A.s0.ci == 7) && (A.s0.ky == 2))) (1)
(Hit) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (1)
Mutating ((A.s0.ci == 7) && (A.s0.ky == 2)) (0)
(Hit) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
(Hit) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.ky == 2)) -> ((A.s0.ci == 7) && (A.s0.ky == 2)) (0)
(Miss) Rewrote ((A.s0.mk == 3) && ((A.s0.ci == 7) && (A.s0.ky == 2))) -> ((A.s0.mk == 3) && ((A.s0.ci == 7) && (A.s0.ky == 2))) (1)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> ((A.s0.mk == 3) && ((A.s0.ci == 7) && (A.s0.ky == 2))) (1)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
Mutating ((A.s0.mk == 3) && (((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
(Hit) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (1)
Mutating (((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote ((A.s0.ci == 7) && (A.s0.ky == 2)) -> ((A.s0.ci == 7) && (A.s0.ky == 2)) (0)
(Hit) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> (((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Miss) Rewrote ((A.s0.mk == 3) && (((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2))) -> ((A.s0.mk == 3) && (((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((A.s0.mk == 3) && (((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
Mutating ((A.s0.mk == 3) && ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)
(Hit) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (1)
Mutating ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
(Hit) Rewrote (((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> (((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
(Miss) Rewrote ((A.s0.mk == 3) && ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) -> ((A.s0.mk == 3) && ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)
(Miss) Rewrote (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((A.s0.mk == 3) && ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)



Input to CSE ((A.s0.mk == 3) && ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
After removing lets: ((A.s0.mk == 3) && ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Include: ((A.s0.mk == 3) && ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))); should extract: 1
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.ky == 2)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Canonical form without lets ((A.s0.mk == 3) && ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
0: A.s0.mk, 0
1: 3, 0
2: (A.s0.mk == 3), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.ky, 0
7: 2, 0
8: (A.s0.ky == 2), 1
9: ((A.s0.ci == 7) && (A.s0.ky == 2)), 1
10: A.s0.kx, 0
11: (A.s0.kx == 2), 1
12: (((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)), 1
13: A.s0.cii, 0
14: (A.s0.cii == 3), 1
15: ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)), 1
16: ((A.s0.mk == 3) && ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))), 1
With variables ((A.s0.mk == 3) && ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
With lets: ((A.s0.mk == 3) && ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Solved expr for A.s0.mk :
  (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))
  ((A.s0.mk == 3) && ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Mutating (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (1)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (1)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> ((A.s0.ky == 2) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
Mutating ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) (1)
(Hit) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (1)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Hit) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) (0)
(Miss) Rewrote ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) -> ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) (1)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) (1)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
Mutating ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)
(Hit) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (1)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
(Hit) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
(Miss) Rewrote ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) -> ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)
(Miss) Rewrote (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)



Input to CSE ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
After removing lets: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Include: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))); should extract: 1
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Canonical form without lets ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
0: A.s0.ky, 0
1: 2, 0
2: (A.s0.ky == 2), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: 3, 0
8: (A.s0.mk == 3), 1
9: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
10: A.s0.kx, 0
11: (A.s0.kx == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)), 1
13: A.s0.cii, 0
14: (A.s0.cii == 3), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)), 1
16: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))), 1
With variables ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
With lets: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Solved expr for A.s0.ky :
  (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))
  ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Mutating (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (1)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (1)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((A.s0.kx == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
Mutating ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))) (1)
(Hit) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (1)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)) (0)
(Hit) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)) (0)
(Miss) Rewrote ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))) -> ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))) (1)
(Miss) Rewrote (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))) (1)



Input to CSE ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
After removing lets: ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
Include: ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))); should extract: 1
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Canonical form without lets ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
0: A.s0.kx, 0
1: 2, 0
2: (A.s0.kx == 2), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: 3, 0
8: (A.s0.mk == 3), 1
9: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
10: A.s0.ky, 0
11: (A.s0.ky == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)), 1
13: A.s0.cii, 0
14: (A.s0.cii == 3), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)), 1
16: ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))), 1
With variables ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
With lets: ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
Solved expr for A.s0.kx :
  (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))
  ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = 0, 6
bounds_of_expr_in_scope A.s0.yy_xx = 0, 6
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope (P.extent.1/3600) = (P.extent.1/3600), (P.extent.1/3600)
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 16 = 16, 16
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 7 = 7, 7
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 7 = 7, 7
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 1 = 1, 1
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 1 = 1, 1
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope A.s0.yyy_xxx = 0, 6
bounds_of_expr_in_scope A.s0.yy_xx = 0, 6
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.cii = 0, 3
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = 0, 6
bounds_of_expr_in_scope A.s0.yy_xx = 0, 6
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
Box(by Provide) of A
  0 ... 7
  0 ... 6
  0 ... 6
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = 0, 6
bounds_of_expr_in_scope A.s0.yy_xx = 0, 6
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
Box(by Provide) of B
  0 ... 7
  0 ... 6
  0 ... 6
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = 0, 6
bounds_of_expr_in_scope A.s0.yy_xx = 0, 6
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
Box(by Provide) of C
  0 ... 7
  0 ... 6
  0 ... 6
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
Mutating (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (1)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
(Miss) Rewrote (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)



Input to CSE ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
After removing lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Include: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))); should extract: 1
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Canonical form without lets ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
0: A.s0.cii, 0
1: 3, 0
2: (A.s0.cii == 3), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: (A.s0.mk == 3), 1
8: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
9: A.s0.ky, 0
10: 2, 0
11: (A.s0.ky == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)), 1
13: A.s0.kx, 0
14: (A.s0.kx == 2), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)), 1
16: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))), 1
With variables ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
With lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Solved expr for A.s0.cii :
  (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))
  ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Mutating (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (1)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (1)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (1)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
Mutating ((A.s0.ci == 7) && ((A.s0.mk == 3) && (A.s0.ky == 2))) (1)
(Hit) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (1)
Mutating ((A.s0.mk == 3) && (A.s0.ky == 2)) (0)
(Hit) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Hit) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
(Miss) Rewrote ((A.s0.mk == 3) && (A.s0.ky == 2)) -> ((A.s0.mk == 3) && (A.s0.ky == 2)) (0)
(Miss) Rewrote ((A.s0.ci == 7) && ((A.s0.mk == 3) && (A.s0.ky == 2))) -> ((A.s0.ci == 7) && ((A.s0.mk == 3) && (A.s0.ky == 2))) (1)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> ((A.s0.ci == 7) && ((A.s0.mk == 3) && (A.s0.ky == 2))) (1)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
Mutating ((A.s0.ci == 7) && (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
(Hit) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (1)
Mutating (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote ((A.s0.mk == 3) && (A.s0.ky == 2)) -> ((A.s0.mk == 3) && (A.s0.ky == 2)) (0)
(Hit) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2))) -> ((A.s0.ci == 7) && (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((A.s0.ci == 7) && (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
Mutating ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)
(Hit) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (1)
Mutating ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
(Hit) Rewrote (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
(Miss) Rewrote ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
(Miss) Rewrote ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) -> ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)
(Miss) Rewrote (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)



Input to CSE ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
After removing lets: ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Include: ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)); should extract: 1
Include: (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)); should extract: 1
Include: ((A.s0.mk == 3) && (A.s0.ky == 2)); should extract: 1
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Canonical form without lets ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
0: A.s0.ci, 0
1: 7, 0
2: (A.s0.ci == 7), 1
3: A.s0.mk, 0
4: 3, 0
5: (A.s0.mk == 3), 1
6: A.s0.ky, 0
7: 2, 0
8: (A.s0.ky == 2), 1
9: ((A.s0.mk == 3) && (A.s0.ky == 2)), 1
10: A.s0.kx, 0
11: (A.s0.kx == 2), 1
12: (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)), 1
13: A.s0.cii, 0
14: (A.s0.cii == 3), 1
15: ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)), 1
16: ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))), 1
With variables ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
With lets: ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Solved expr for A.s0.ci :
  (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))
  ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Mutating (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (1)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (1)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.mk == 3) && (A.s0.ci == 7)) (1)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
Mutating ((A.s0.mk == 3) && ((A.s0.ci == 7) && (A.s0.ky == 2))) (1)
(Hit) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (1)
Mutating ((A.s0.ci == 7) && (A.s0.ky == 2)) (0)
(Hit) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
(Hit) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.ky == 2)) -> ((A.s0.ci == 7) && (A.s0.ky == 2)) (0)
(Miss) Rewrote ((A.s0.mk == 3) && ((A.s0.ci == 7) && (A.s0.ky == 2))) -> ((A.s0.mk == 3) && ((A.s0.ci == 7) && (A.s0.ky == 2))) (1)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> ((A.s0.mk == 3) && ((A.s0.ci == 7) && (A.s0.ky == 2))) (1)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
Mutating ((A.s0.mk == 3) && (((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
(Hit) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (1)
Mutating (((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote ((A.s0.ci == 7) && (A.s0.ky == 2)) -> ((A.s0.ci == 7) && (A.s0.ky == 2)) (0)
(Hit) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> (((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Miss) Rewrote ((A.s0.mk == 3) && (((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2))) -> ((A.s0.mk == 3) && (((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((A.s0.mk == 3) && (((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
Mutating ((A.s0.mk == 3) && ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)
(Hit) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (1)
Mutating ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
(Hit) Rewrote (((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> (((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
(Miss) Rewrote ((A.s0.mk == 3) && ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) -> ((A.s0.mk == 3) && ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)
(Miss) Rewrote (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((A.s0.mk == 3) && ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)



Input to CSE ((A.s0.mk == 3) && ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
After removing lets: ((A.s0.mk == 3) && ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Include: ((A.s0.mk == 3) && ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))); should extract: 1
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.ky == 2)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Canonical form without lets ((A.s0.mk == 3) && ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
0: A.s0.mk, 0
1: 3, 0
2: (A.s0.mk == 3), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.ky, 0
7: 2, 0
8: (A.s0.ky == 2), 1
9: ((A.s0.ci == 7) && (A.s0.ky == 2)), 1
10: A.s0.kx, 0
11: (A.s0.kx == 2), 1
12: (((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)), 1
13: A.s0.cii, 0
14: (A.s0.cii == 3), 1
15: ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)), 1
16: ((A.s0.mk == 3) && ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))), 1
With variables ((A.s0.mk == 3) && ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
With lets: ((A.s0.mk == 3) && ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Solved expr for A.s0.mk :
  (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))
  ((A.s0.mk == 3) && ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Mutating (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (1)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (1)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> ((A.s0.ky == 2) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
Mutating ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) (1)
(Hit) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (1)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Hit) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) (0)
(Miss) Rewrote ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) -> ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) (1)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) (1)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
Mutating ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)
(Hit) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (1)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
(Hit) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
(Miss) Rewrote ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) -> ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)
(Miss) Rewrote (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)



Input to CSE ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
After removing lets: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Include: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))); should extract: 1
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Canonical form without lets ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
0: A.s0.ky, 0
1: 2, 0
2: (A.s0.ky == 2), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: 3, 0
8: (A.s0.mk == 3), 1
9: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
10: A.s0.kx, 0
11: (A.s0.kx == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)), 1
13: A.s0.cii, 0
14: (A.s0.cii == 3), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)), 1
16: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))), 1
With variables ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
With lets: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Solved expr for A.s0.ky :
  (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))
  ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Mutating (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (1)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (1)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((A.s0.kx == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
Mutating ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))) (1)
(Hit) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (1)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)) (0)
(Hit) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)) (0)
(Miss) Rewrote ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))) -> ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))) (1)
(Miss) Rewrote (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))) (1)



Input to CSE ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
After removing lets: ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
Include: ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))); should extract: 1
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Canonical form without lets ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
0: A.s0.kx, 0
1: 2, 0
2: (A.s0.kx == 2), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: 3, 0
8: (A.s0.mk == 3), 1
9: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
10: A.s0.ky, 0
11: (A.s0.ky == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)), 1
13: A.s0.cii, 0
14: (A.s0.cii == 3), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)), 1
16: ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))), 1
With variables ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
With lets: ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
Solved expr for A.s0.kx :
  (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))
  ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = 0, 6
bounds_of_expr_in_scope A.s0.yy_xx = 0, 6
bounds_of_expr_in_scope A.s0.y_x = 0, 0
bounds_of_expr_in_scope A.s0.my = 0, 3
bounds_of_expr_in_scope A.s0.mx = 0, 3
bounds_of_expr_in_scope A.s0.coo = 0, 0
bounds_of_expr_in_scope A.s0.nn = 0, 15
bounds_of_expr_in_scope A.s0.co = 0, 3
bounds_of_expr_in_scope A.s0.n = 0, ((P.extent.1/3600) + -1)
Box(by Provide) of Out
  0 ... 7
  0 ... 6
  0 ... 6
  0 ... ((1 + 0) - 1)
  0 ... ((4 + 0) - 1)
  0 ... ((4 + 0) - 1)
  0 ... ((1 + 0) - 1)
  0 ... ((16 + 0) - 1)
  0 ... ((4 + 0) - 1)
  0 ... (((P.extent.1/3600) + 0) - 1)



Input to CSE (3600 != 0)
After removing lets: (3600 != 0)
Include: (3600 != 0); should extract: 1
Include: 3600; should extract: 0
Include: 0; should extract: 0
Canonical form without lets (3600 != 0)
0: 3600, 0
1: 0, 0
2: (3600 != 0), 1
With variables (3600 != 0)
With lets: (3600 != 0)
In image Out region touched is:
Injecting constraints for Out.0
Injecting constraints for Out.1
Injecting constraints for Out.2
Injecting constraints for Out.3
Injecting constraints for Out.4
Injecting constraints for Out.5
Injecting constraints for Out.6
Injecting constraints for Out.7
Injecting constraints for Out.8
Injecting constraints for Out.9
In image P region touched is:
Injecting constraints for P.0
Injecting constraints for P.1
In image W region touched is:
Injecting constraints for W.0
Injecting constraints for W.1
Lowering after injecting image checks:
let Out.extent.0.required = ((7 + 1) - 0)
let Out.min.0.required = 0
let Out.stride.0.required = 1
let Out.extent.1.required = ((6 + 1) - 0)
let Out.min.1.required = 0
let Out.stride.1.required = (Out.stride.0.required*Out.extent.0.required)
let Out.extent.2.required = ((6 + 1) - 0)
let Out.min.2.required = 0
let Out.stride.2.required = (Out.stride.1.required*Out.extent.1.required)
let Out.extent.3.required = ((((1 + 0) - 1) + 1) - 0)
let Out.min.3.required = 0
let Out.stride.3.required = (Out.stride.2.required*Out.extent.2.required)
let Out.extent.4.required = ((((4 + 0) - 1) + 1) - 0)
let Out.min.4.required = 0
let Out.stride.4.required = (Out.stride.3.required*Out.extent.3.required)
let Out.extent.5.required = ((((4 + 0) - 1) + 1) - 0)
let Out.min.5.required = 0
let Out.stride.5.required = (Out.stride.4.required*Out.extent.4.required)
let Out.extent.6.required = ((((1 + 0) - 1) + 1) - 0)
let Out.min.6.required = 0
let Out.stride.6.required = (Out.stride.5.required*Out.extent.5.required)
let Out.extent.7.required = ((((16 + 0) - 1) + 1) - 0)
let Out.min.7.required = 0
let Out.stride.7.required = (Out.stride.6.required*Out.extent.6.required)
let Out.extent.8.required = ((((4 + 0) - 1) + 1) - 0)
let Out.min.8.required = 0
let Out.stride.8.required = (Out.stride.7.required*Out.extent.7.required)
let Out.extent.9.required = (((((P.extent.1/3600) + 0) - 1) + 1) - 0)
let Out.min.9.required = 0
let Out.stride.9.required = (Out.stride.8.required*Out.extent.8.required)
let P.extent.0.required = P.extent.0
let P.min.0.required = P.min.0
let P.stride.0.required = 1
let P.extent.1.required = P.extent.1
let P.min.1.required = P.min.1
let P.stride.1.required = (P.stride.0.required*P.extent.0.required)
let W.extent.0.required = W.extent.0
let W.min.0.required = W.min.0
let W.stride.0.required = 1
let W.extent.1.required = W.extent.1
let W.min.1.required = W.min.1
let W.stride.1.required = (W.stride.0.required*W.extent.0.required)
let Out.stride.0.constrained = 1
let P.stride.0.constrained = 1
let W.stride.0.constrained = 1
let Out.stride.0.proposed = 1
let Out.min.0.proposed = Out.min.0.required
let Out.extent.0.proposed = Out.extent.0.required
let Out.stride.1.proposed = Out.stride.1.required
let Out.min.1.proposed = Out.min.1.required
let Out.extent.1.proposed = Out.extent.1.required
let Out.stride.2.proposed = Out.stride.2.required
let Out.min.2.proposed = Out.min.2.required
let Out.extent.2.proposed = Out.extent.2.required
let Out.stride.3.proposed = Out.stride.3.required
let Out.min.3.proposed = Out.min.3.required
let Out.extent.3.proposed = Out.extent.3.required
let Out.stride.4.proposed = Out.stride.4.required
let Out.min.4.proposed = Out.min.4.required
let Out.extent.4.proposed = Out.extent.4.required
let Out.stride.5.proposed = Out.stride.5.required
let Out.min.5.proposed = Out.min.5.required
let Out.extent.5.proposed = Out.extent.5.required
let Out.stride.6.proposed = Out.stride.6.required
let Out.min.6.proposed = Out.min.6.required
let Out.extent.6.proposed = Out.extent.6.required
let Out.stride.7.proposed = Out.stride.7.required
let Out.min.7.proposed = Out.min.7.required
let Out.extent.7.proposed = Out.extent.7.required
let Out.stride.8.proposed = Out.stride.8.required
let Out.min.8.proposed = Out.min.8.required
let Out.extent.8.proposed = Out.extent.8.required
let Out.stride.9.proposed = Out.stride.9.required
let Out.min.9.proposed = Out.min.9.required
let Out.extent.9.proposed = Out.extent.9.required
let P.stride.0.proposed = 1
let P.min.0.proposed = P.min.0.required
let P.extent.0.proposed = P.extent.0.required
let P.stride.1.proposed = P.stride.1.required
let P.min.1.proposed = P.min.1.required
let P.extent.1.proposed = P.extent.1.required
let W.stride.0.proposed = 1
let W.min.0.proposed = W.min.0.required
let W.extent.0.proposed = W.extent.0.required
let W.stride.1.proposed = W.stride.1.required
let W.min.1.proposed = W.min.1.required
let W.extent.1.proposed = W.extent.1.required
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || ((Out.min.0.proposed <= Out.min.0.required) && (((Out.min.0.proposed + Out.extent.0.proposed) - 1) >= ((Out.min.0.required + Out.extent.0.required) - 1)))), halide_error_constraints_make_required_region_smaller("Output buffer Out", 0, Out.min.0.proposed, ((Out.min.0.proposed + Out.extent.0.proposed) - 1), Out.min.0.required, ((Out.min.0.required + Out.extent.0.required) - 1)))
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || ((Out.min.1.proposed <= Out.min.1.required) && (((Out.min.1.proposed + Out.extent.1.proposed) - 1) >= ((Out.min.1.required + Out.extent.1.required) - 1)))), halide_error_constraints_make_required_region_smaller("Output buffer Out", 1, Out.min.1.proposed, ((Out.min.1.proposed + Out.extent.1.proposed) - 1), Out.min.1.required, ((Out.min.1.required + Out.extent.1.required) - 1)))
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || ((Out.min.2.proposed <= Out.min.2.required) && (((Out.min.2.proposed + Out.extent.2.proposed) - 1) >= ((Out.min.2.required + Out.extent.2.required) - 1)))), halide_error_constraints_make_required_region_smaller("Output buffer Out", 2, Out.min.2.proposed, ((Out.min.2.proposed + Out.extent.2.proposed) - 1), Out.min.2.required, ((Out.min.2.required + Out.extent.2.required) - 1)))
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || ((Out.min.3.proposed <= Out.min.3.required) && (((Out.min.3.proposed + Out.extent.3.proposed) - 1) >= ((Out.min.3.required + Out.extent.3.required) - 1)))), halide_error_constraints_make_required_region_smaller("Output buffer Out", 3, Out.min.3.proposed, ((Out.min.3.proposed + Out.extent.3.proposed) - 1), Out.min.3.required, ((Out.min.3.required + Out.extent.3.required) - 1)))
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || ((Out.min.4.proposed <= Out.min.4.required) && (((Out.min.4.proposed + Out.extent.4.proposed) - 1) >= ((Out.min.4.required + Out.extent.4.required) - 1)))), halide_error_constraints_make_required_region_smaller("Output buffer Out", 4, Out.min.4.proposed, ((Out.min.4.proposed + Out.extent.4.proposed) - 1), Out.min.4.required, ((Out.min.4.required + Out.extent.4.required) - 1)))
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || ((Out.min.5.proposed <= Out.min.5.required) && (((Out.min.5.proposed + Out.extent.5.proposed) - 1) >= ((Out.min.5.required + Out.extent.5.required) - 1)))), halide_error_constraints_make_required_region_smaller("Output buffer Out", 5, Out.min.5.proposed, ((Out.min.5.proposed + Out.extent.5.proposed) - 1), Out.min.5.required, ((Out.min.5.required + Out.extent.5.required) - 1)))
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || ((Out.min.6.proposed <= Out.min.6.required) && (((Out.min.6.proposed + Out.extent.6.proposed) - 1) >= ((Out.min.6.required + Out.extent.6.required) - 1)))), halide_error_constraints_make_required_region_smaller("Output buffer Out", 6, Out.min.6.proposed, ((Out.min.6.proposed + Out.extent.6.proposed) - 1), Out.min.6.required, ((Out.min.6.required + Out.extent.6.required) - 1)))
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || ((Out.min.7.proposed <= Out.min.7.required) && (((Out.min.7.proposed + Out.extent.7.proposed) - 1) >= ((Out.min.7.required + Out.extent.7.required) - 1)))), halide_error_constraints_make_required_region_smaller("Output buffer Out", 7, Out.min.7.proposed, ((Out.min.7.proposed + Out.extent.7.proposed) - 1), Out.min.7.required, ((Out.min.7.required + Out.extent.7.required) - 1)))
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || ((Out.min.8.proposed <= Out.min.8.required) && (((Out.min.8.proposed + Out.extent.8.proposed) - 1) >= ((Out.min.8.required + Out.extent.8.required) - 1)))), halide_error_constraints_make_required_region_smaller("Output buffer Out", 8, Out.min.8.proposed, ((Out.min.8.proposed + Out.extent.8.proposed) - 1), Out.min.8.required, ((Out.min.8.required + Out.extent.8.required) - 1)))
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || ((Out.min.9.proposed <= Out.min.9.required) && (((Out.min.9.proposed + Out.extent.9.proposed) - 1) >= ((Out.min.9.required + Out.extent.9.required) - 1)))), halide_error_constraints_make_required_region_smaller("Output buffer Out", 9, Out.min.9.proposed, ((Out.min.9.proposed + Out.extent.9.proposed) - 1), Out.min.9.required, ((Out.min.9.required + Out.extent.9.required) - 1)))
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer) || ((P.min.0.proposed <= P.min.0.required) && (((P.min.0.proposed + P.extent.0.proposed) - 1) >= ((P.min.0.required + P.extent.0.required) - 1)))), halide_error_constraints_make_required_region_smaller("Input buffer P", 0, P.min.0.proposed, ((P.min.0.proposed + P.extent.0.proposed) - 1), P.min.0.required, ((P.min.0.required + P.extent.0.required) - 1)))
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer) || ((P.min.1.proposed <= P.min.1.required) && (((P.min.1.proposed + P.extent.1.proposed) - 1) >= ((P.min.1.required + P.extent.1.required) - 1)))), halide_error_constraints_make_required_region_smaller("Input buffer P", 1, P.min.1.proposed, ((P.min.1.proposed + P.extent.1.proposed) - 1), P.min.1.required, ((P.min.1.required + P.extent.1.required) - 1)))
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer) || ((W.min.0.proposed <= W.min.0.required) && (((W.min.0.proposed + W.extent.0.proposed) - 1) >= ((W.min.0.required + W.extent.0.required) - 1)))), halide_error_constraints_make_required_region_smaller("Input buffer W", 0, W.min.0.proposed, ((W.min.0.proposed + W.extent.0.proposed) - 1), W.min.0.required, ((W.min.0.required + W.extent.0.required) - 1)))
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer) || ((W.min.1.proposed <= W.min.1.required) && (((W.min.1.proposed + W.extent.1.proposed) - 1) >= ((W.min.1.required + W.extent.1.required) - 1)))), halide_error_constraints_make_required_region_smaller("Input buffer W", 1, W.min.1.proposed, ((W.min.1.proposed + W.extent.1.proposed) - 1), W.min.1.required, ((W.min.1.required + W.extent.1.required) - 1)))
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(Out.min.0.proposed, Out.extent.0.proposed, Out.stride.0.proposed, 0, Out.min.1.proposed, Out.extent.1.proposed, Out.stride.1.proposed, 0, Out.min.2.proposed, Out.extent.2.proposed, Out.stride.2.proposed, 0, Out.min.3.proposed, Out.extent.3.proposed, Out.stride.3.proposed, 0, Out.min.4.proposed, Out.extent.4.proposed, Out.stride.4.proposed, 0, Out.min.5.proposed, Out.extent.5.proposed, Out.stride.5.proposed, 0, Out.min.6.proposed, Out.extent.6.proposed, Out.stride.6.proposed, 0, Out.min.7.proposed, Out.extent.7.proposed, Out.stride.7.proposed, 0, Out.min.8.proposed, Out.extent.8.proposed, Out.stride.8.proposed, 0, Out.min.9.proposed, Out.extent.9.proposed, Out.stride.9.proposed, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0.proposed, P.extent.0.proposed, P.stride.0.proposed, 0, P.min.1.proposed, P.extent.1.proposed, P.stride.1.proposed, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0.proposed, W.extent.0.proposed, W.stride.0.proposed, 0, W.min.1.proposed, W.extent.1.proposed, W.stride.1.proposed, 0), (uint64)0)
}
if (!((((uint1)0 || (uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) || (uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) || (uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer))) {
 assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
 assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
 assert(((uint32)P.type == (uint32)73730), halide_error_bad_type("Input buffer P", (uint32)P.type, (uint32)73730))
 assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
 assert(((uint32)W.type == (uint32)73730), halide_error_bad_type("Input buffer W", (uint32)W.type, (uint32)73730))
 assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
 assert(((Out.min.0 <= Out.min.0.required) && (((Out.min.0 + Out.extent.0) - 1) >= ((Out.min.0.required + Out.extent.0.required) - 1))), halide_error_access_out_of_bounds("Output buffer Out", 0, Out.min.0.required, ((Out.min.0.required + Out.extent.0.required) - 1), Out.min.0, ((Out.min.0 + Out.extent.0) - 1)))
 assert((Out.extent.0 >= 0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
 assert(((Out.min.1 <= Out.min.1.required) && (((Out.min.1 + Out.extent.1) - 1) >= ((Out.min.1.required + Out.extent.1.required) - 1))), halide_error_access_out_of_bounds("Output buffer Out", 1, Out.min.1.required, ((Out.min.1.required + Out.extent.1.required) - 1), Out.min.1, ((Out.min.1 + Out.extent.1) - 1)))
 assert((Out.extent.1 >= 0), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
 assert(((Out.min.2 <= Out.min.2.required) && (((Out.min.2 + Out.extent.2) - 1) >= ((Out.min.2.required + Out.extent.2.required) - 1))), halide_error_access_out_of_bounds("Output buffer Out", 2, Out.min.2.required, ((Out.min.2.required + Out.extent.2.required) - 1), Out.min.2, ((Out.min.2 + Out.extent.2) - 1)))
 assert((Out.extent.2 >= 0), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
 assert(((Out.min.3 <= Out.min.3.required) && (((Out.min.3 + Out.extent.3) - 1) >= ((Out.min.3.required + Out.extent.3.required) - 1))), halide_error_access_out_of_bounds("Output buffer Out", 3, Out.min.3.required, ((Out.min.3.required + Out.extent.3.required) - 1), Out.min.3, ((Out.min.3 + Out.extent.3) - 1)))
 assert((Out.extent.3 >= 0), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
 assert(((Out.min.4 <= Out.min.4.required) && (((Out.min.4 + Out.extent.4) - 1) >= ((Out.min.4.required + Out.extent.4.required) - 1))), halide_error_access_out_of_bounds("Output buffer Out", 4, Out.min.4.required, ((Out.min.4.required + Out.extent.4.required) - 1), Out.min.4, ((Out.min.4 + Out.extent.4) - 1)))
 assert((Out.extent.4 >= 0), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
 assert(((Out.min.5 <= Out.min.5.required) && (((Out.min.5 + Out.extent.5) - 1) >= ((Out.min.5.required + Out.extent.5.required) - 1))), halide_error_access_out_of_bounds("Output buffer Out", 5, Out.min.5.required, ((Out.min.5.required + Out.extent.5.required) - 1), Out.min.5, ((Out.min.5 + Out.extent.5) - 1)))
 assert((Out.extent.5 >= 0), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
 assert(((Out.min.6 <= Out.min.6.required) && (((Out.min.6 + Out.extent.6) - 1) >= ((Out.min.6.required + Out.extent.6.required) - 1))), halide_error_access_out_of_bounds("Output buffer Out", 6, Out.min.6.required, ((Out.min.6.required + Out.extent.6.required) - 1), Out.min.6, ((Out.min.6 + Out.extent.6) - 1)))
 assert((Out.extent.6 >= 0), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
 assert(((Out.min.7 <= Out.min.7.required) && (((Out.min.7 + Out.extent.7) - 1) >= ((Out.min.7.required + Out.extent.7.required) - 1))), halide_error_access_out_of_bounds("Output buffer Out", 7, Out.min.7.required, ((Out.min.7.required + Out.extent.7.required) - 1), Out.min.7, ((Out.min.7 + Out.extent.7) - 1)))
 assert((Out.extent.7 >= 0), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
 assert(((Out.min.8 <= Out.min.8.required) && (((Out.min.8 + Out.extent.8) - 1) >= ((Out.min.8.required + Out.extent.8.required) - 1))), halide_error_access_out_of_bounds("Output buffer Out", 8, Out.min.8.required, ((Out.min.8.required + Out.extent.8.required) - 1), Out.min.8, ((Out.min.8 + Out.extent.8) - 1)))
 assert((Out.extent.8 >= 0), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
 assert(((Out.min.9 <= Out.min.9.required) && (((Out.min.9 + Out.extent.9) - 1) >= ((Out.min.9.required + Out.extent.9.required) - 1))), halide_error_access_out_of_bounds("Output buffer Out", 9, Out.min.9.required, ((Out.min.9.required + Out.extent.9.required) - 1), Out.min.9, ((Out.min.9 + Out.extent.9) - 1)))
 assert((Out.extent.9 >= 0), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
 assert(((P.min.0 <= P.min.0.required) && (((P.min.0 + P.extent.0) - 1) >= ((P.min.0.required + P.extent.0.required) - 1))), halide_error_access_out_of_bounds("Input buffer P", 0, P.min.0.required, ((P.min.0.required + P.extent.0.required) - 1), P.min.0, ((P.min.0 + P.extent.0) - 1)))
 assert((P.extent.0 >= 0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
 assert(((P.min.1 <= P.min.1.required) && (((P.min.1 + P.extent.1) - 1) >= ((P.min.1.required + P.extent.1.required) - 1))), halide_error_access_out_of_bounds("Input buffer P", 1, P.min.1.required, ((P.min.1.required + P.extent.1.required) - 1), P.min.1, ((P.min.1 + P.extent.1) - 1)))
 assert((P.extent.1 >= 0), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
 assert(((W.min.0 <= W.min.0.required) && (((W.min.0 + W.extent.0) - 1) >= ((W.min.0.required + W.extent.0.required) - 1))), halide_error_access_out_of_bounds("Input buffer W", 0, W.min.0.required, ((W.min.0.required + W.extent.0.required) - 1), W.min.0, ((W.min.0 + W.extent.0) - 1)))
 assert((W.extent.0 >= 0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
 assert(((W.min.1 <= W.min.1.required) && (((W.min.1 + W.extent.1) - 1) >= ((W.min.1.required + W.extent.1.required) - 1))), halide_error_access_out_of_bounds("Input buffer W", 1, W.min.1.required, ((W.min.1.required + W.extent.1.required) - 1), W.min.1, ((W.min.1 + W.extent.1) - 1)))
 assert((W.extent.1 >= 0), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
 assert((Out.stride.0 == Out.stride.0.constrained), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", Out.stride.0.constrained))
 assert((P.stride.0 == P.stride.0.constrained), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", P.stride.0.constrained))
 assert((W.stride.0 == W.stride.0.constrained), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", W.stride.0.constrained))
 let Out.total_extent.0 = int64(Out.extent.0)
 let Out.total_extent.1 = (int64(Out.extent.1)*Out.total_extent.0)
 let Out.total_extent.2 = (int64(Out.extent.2)*Out.total_extent.1)
 let Out.total_extent.3 = (int64(Out.extent.3)*Out.total_extent.2)
 let Out.total_extent.4 = (int64(Out.extent.4)*Out.total_extent.3)
 let Out.total_extent.5 = (int64(Out.extent.5)*Out.total_extent.4)
 let Out.total_extent.6 = (int64(Out.extent.6)*Out.total_extent.5)
 let Out.total_extent.7 = (int64(Out.extent.7)*Out.total_extent.6)
 let Out.total_extent.8 = (int64(Out.extent.8)*Out.total_extent.7)
 let Out.total_extent.9 = (int64(Out.extent.9)*Out.total_extent.8)
 let P.total_extent.0 = int64(P.extent.0)
 let P.total_extent.1 = (int64(P.extent.1)*P.total_extent.0)
 let W.total_extent.0 = int64(W.extent.0)
 let W.total_extent.1 = (int64(W.extent.1)*W.total_extent.0)
 assert(((uint64)abs((int64(Out.extent.0)*int64(Out.stride.0.constrained))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.0)*int64(Out.stride.0.constrained))), (uint64)2147483647))
 assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
 assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
 assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
 assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
 assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
 assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
 assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
 assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
 assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
 assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
 assert(((uint64)abs((int64(P.extent.0)*int64(P.stride.0.constrained))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.0)*int64(P.stride.0.constrained))), (uint64)2147483647))
 assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
 assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
 assert(((uint64)abs((int64(W.extent.0)*int64(W.stride.0.constrained))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.0)*int64(W.stride.0.constrained))), (uint64)2147483647))
 assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
 assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
 gpu_block<Default_GPU> (A.s0.n, 0, (P.extent.1/3600)) {
  gpu_block<Default_GPU> (A.s0.nn, 0, 16) {
   gpu_block<Default_GPU> (A.s0.co, 0, 4) {
    gpu_thread<Default_GPU> (A.s0.mx, 0, 4) {
     gpu_thread<Default_GPU> (A.s0.my, 0, 4) {
      realize A[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
       realize B[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
        realize C[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
         for (A.s0.mk, 0, 4) {
          for (A.s0.ci, 0, 8) {
           for (A.s0.yy_xx, 0, 7) {
            for (A.s0.yyy_xxx, 0, 7) {
             for (A.s0.kx, 0, 3) {
              for (A.s0.ky, 0, 3) {
               for (A.s0.coo, 0, 1) {
                for (A.s0.y_x, 0, 1) {
                 vectorized (A.s0.cooo, 0, 8) {
                  for (A.s0.cii, 0, 4) {
                   let A.s0.yyy_xxx = A.s0.yyy_xxx
                   let A.s0.yy_xx = A.s0.yy_xx
                   let A.s0.cooo = A.s0.cooo
                   let A.s0.cii = A.s0.cii
                   A(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = (float32)P(((A.s0.nn*512) + ((A.s0.mx*128) + ((A.s0.mk*32) + ((A.s0.ci*4) + A.s0.cii)))), ((A.s0.n*225) + (((((((A.s0.y_x*49) + ((A.s0.yy_xx*7) + A.s0.yyy_xxx))/7)*2) + A.s0.kx)*15) + (((((A.s0.y_x*49) + ((A.s0.yy_xx*7) + A.s0.yyy_xxx)) % 7)*2) + A.s0.ky))))
                   B(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = (float32)W(((A.s0.my*32) + ((A.s0.co*8) + ((A.s0.coo*8) + A.s0.cooo))), ((A.s0.mk*288) + ((A.s0.ci*36) + ((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii)))))
                   C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = (select((((((A.s0.cii == 0) && (A.s0.ci == 0)) && (A.s0.mk == 0)) && (A.s0.ky == 0)) && (A.s0.kx == 0)), 0.000000f, select((A.s0.cii == 0), select((A.s0.ky == 0), select((A.s0.kx == 0), select((A.s0.ci == 0), C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)), C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)), C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)), C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))) + (A(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)*B(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)))
                   if ((((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) {
                    Out(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, A.s0.y_x, A.s0.my, A.s0.mx, A.s0.coo, A.s0.nn, A.s0.co, A.s0.n) = C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
}

Performing computation bounds inference...



Input to CSE (float32)if_then_else((yyy_xxx == 0), (let W_im._1 = ((((cii + (4*ky)) + (12*kx)) + (36*ci)) + (288*mk)) in (let W_im._0 = (((cooo + (8*coo)) + (8*co)) + (32*my)) in (float32)W(W_im._0, W_im._1))), (float32)B(cii, cooo, (yyy_xxx - 1), yy_xx, y_x, my, mx, coo, nn, ky, kx, ci, mk, co, n))
After removing lets: (float32)if_then_else((yyy_xxx == 0), (float32)W((((cooo + (8*coo)) + (8*co)) + (32*my)), ((((cii + (4*ky)) + (12*kx)) + (36*ci)) + (288*mk))), (float32)B(cii, cooo, (yyy_xxx - 1), yy_xx, y_x, my, mx, coo, nn, ky, kx, ci, mk, co, n))
Include: (float32)if_then_else((yyy_xxx == 0), (float32)W((((cooo + (8*coo)) + (8*co)) + (32*my)), ((((cii + (4*ky)) + (12*kx)) + (36*ci)) + (288*mk))), (float32)B(cii, cooo, (yyy_xxx - 1), yy_xx, y_x, my, mx, coo, nn, ky, kx, ci, mk, co, n)); should extract: 1
Include: (yyy_xxx == 0); should extract: 1
Include: yyy_xxx; should extract: 0
Include: 0; should extract: 0
Include: (float32)W((((cooo + (8*coo)) + (8*co)) + (32*my)), ((((cii + (4*ky)) + (12*kx)) + (36*ci)) + (288*mk))); should extract: 1
Include: (((cooo + (8*coo)) + (8*co)) + (32*my)); should extract: 1
Include: ((cooo + (8*coo)) + (8*co)); should extract: 1
Include: (cooo + (8*coo)); should extract: 1
Include: cooo; should extract: 0
Include: (8*coo); should extract: 0
Include: 8; should extract: 0
Include: coo; should extract: 0
Include: (8*co); should extract: 0
Include: 8; should extract: 0
Include: co; should extract: 0
Include: (32*my); should extract: 0
Include: 32; should extract: 0
Include: my; should extract: 0
Include: ((((cii + (4*ky)) + (12*kx)) + (36*ci)) + (288*mk)); should extract: 1
Include: (((cii + (4*ky)) + (12*kx)) + (36*ci)); should extract: 1
Include: ((cii + (4*ky)) + (12*kx)); should extract: 1
Include: (cii + (4*ky)); should extract: 1
Include: cii; should extract: 0
Include: (4*ky); should extract: 0
Include: 4; should extract: 0
Include: ky; should extract: 0
Include: (12*kx); should extract: 0
Include: 12; should extract: 0
Include: kx; should extract: 0
Include: (36*ci); should extract: 0
Include: 36; should extract: 0
Include: ci; should extract: 0
Include: (288*mk); should extract: 0
Include: 288; should extract: 0
Include: mk; should extract: 0
Include: (float32)B(cii, cooo, (yyy_xxx - 1), yy_xx, y_x, my, mx, coo, nn, ky, kx, ci, mk, co, n); should extract: 1
Include: cii; should extract: 0
Include: cooo; should extract: 0
Include: (yyy_xxx - 1); should extract: 0
Include: yyy_xxx; should extract: 0
Include: 1; should extract: 0
Include: yy_xx; should extract: 0
Include: y_x; should extract: 0
Include: my; should extract: 0
Include: mx; should extract: 0
Include: coo; should extract: 0
Include: nn; should extract: 0
Include: ky; should extract: 0
Include: kx; should extract: 0
Include: ci; should extract: 0
Include: mk; should extract: 0
Include: co; should extract: 0
Include: n; should extract: 0
Canonical form without lets (float32)if_then_else((yyy_xxx == 0), (float32)W((((cooo + (8*coo)) + (8*co)) + (32*my)), ((((cii + (4*ky)) + (12*kx)) + (36*ci)) + (288*mk))), (float32)B(cii, cooo, (yyy_xxx - 1), yy_xx, y_x, my, mx, coo, nn, ky, kx, ci, mk, co, n))
0: yyy_xxx, 0
1: 0, 0
2: (yyy_xxx == 0), 1
3: cooo, 0
4: 8, 0
5: coo, 0
6: (8*coo), 0
7: (cooo + (8*coo)), 1
8: co, 0
9: (8*co), 0
10: ((cooo + (8*coo)) + (8*co)), 1
11: 32, 0
12: my, 0
13: (32*my), 0
14: (((cooo + (8*coo)) + (8*co)) + (32*my)), 1
15: cii, 0
16: 4, 0
17: ky, 0
18: (4*ky), 0
19: (cii + (4*ky)), 1
20: 12, 0
21: kx, 0
22: (12*kx), 0
23: ((cii + (4*ky)) + (12*kx)), 1
24: 36, 0
25: ci, 0
26: (36*ci), 0
27: (((cii + (4*ky)) + (12*kx)) + (36*ci)), 1
28: 288, 0
29: mk, 0
30: (288*mk), 0
31: ((((cii + (4*ky)) + (12*kx)) + (36*ci)) + (288*mk)), 1
32: (float32)W((((cooo + (8*coo)) + (8*co)) + (32*my)), ((((cii + (4*ky)) + (12*kx)) + (36*ci)) + (288*mk))), 1
33: 1, 0
34: (yyy_xxx - 1), 0
35: yy_xx, 0
36: y_x, 0
37: mx, 0
38: nn, 0
39: n, 0
40: (float32)B(cii, cooo, (yyy_xxx - 1), yy_xx, y_x, my, mx, coo, nn, ky, kx, ci, mk, co, n), 1
41: (float32)if_then_else((yyy_xxx == 0), (float32)W((((cooo + (8*coo)) + (8*co)) + (32*my)), ((((cii + (4*ky)) + (12*kx)) + (36*ci)) + (288*mk))), (float32)B(cii, cooo, (yyy_xxx - 1), yy_xx, y_x, my, mx, coo, nn, ky, kx, ci, mk, co, n)), 1
With variables (float32)if_then_else((yyy_xxx == 0), (float32)W((((cooo + (8*coo)) + (8*co)) + (32*my)), ((((cii + (4*ky)) + (12*kx)) + (36*ci)) + (288*mk))), (float32)B(cii, cooo, (yyy_xxx - 1), yy_xx, y_x, my, mx, coo, nn, ky, kx, ci, mk, co, n))
With lets: (float32)if_then_else((yyy_xxx == 0), (float32)W((((cooo + (8*coo)) + (8*co)) + (32*my)), ((((cii + (4*ky)) + (12*kx)) + (36*ci)) + (288*mk))), (float32)B(cii, cooo, (yyy_xxx - 1), yy_xx, y_x, my, mx, coo, nn, ky, kx, ci, mk, co, n))



Input to CSE (float32)if_then_else((cooo == 0), (let P_im._1 = (((((((yyy_xxx + (7*yy_xx)) + (49*y_x)) % 7)*2) + ky) + (15*(((((yyy_xxx + (7*yy_xx)) + (49*y_x))/7)*2) + kx))) + (225*n)) in (let P_im._0 = ((((cii + (4*ci)) + (32*mk)) + (128*mx)) + (512*nn)) in (float32)P(P_im._0, P_im._1))), (float32)A(cii, (cooo - 1), yyy_xxx, yy_xx, y_x, my, mx, coo, nn, ky, kx, ci, mk, co, n))
After removing lets: (float32)if_then_else((cooo == 0), (float32)P(((((cii + (4*ci)) + (32*mk)) + (128*mx)) + (512*nn)), (((((((yyy_xxx + (7*yy_xx)) + (49*y_x)) % 7)*2) + ky) + (15*(((((yyy_xxx + (7*yy_xx)) + (49*y_x))/7)*2) + kx))) + (225*n))), (float32)A(cii, (cooo - 1), yyy_xxx, yy_xx, y_x, my, mx, coo, nn, ky, kx, ci, mk, co, n))
Include: (float32)if_then_else((cooo == 0), (float32)P(((((cii + (4*ci)) + (32*mk)) + (128*mx)) + (512*nn)), (((((((yyy_xxx + (7*yy_xx)) + (49*y_x)) % 7)*2) + ky) + (15*(((((yyy_xxx + (7*yy_xx)) + (49*y_x))/7)*2) + kx))) + (225*n))), (float32)A(cii, (cooo - 1), yyy_xxx, yy_xx, y_x, my, mx, coo, nn, ky, kx, ci, mk, co, n)); should extract: 1
Include: (cooo == 0); should extract: 1
Include: cooo; should extract: 0
Include: 0; should extract: 0
Include: (float32)P(((((cii + (4*ci)) + (32*mk)) + (128*mx)) + (512*nn)), (((((((yyy_xxx + (7*yy_xx)) + (49*y_x)) % 7)*2) + ky) + (15*(((((yyy_xxx + (7*yy_xx)) + (49*y_x))/7)*2) + kx))) + (225*n))); should extract: 1
Include: ((((cii + (4*ci)) + (32*mk)) + (128*mx)) + (512*nn)); should extract: 1
Include: (((cii + (4*ci)) + (32*mk)) + (128*mx)); should extract: 1
Include: ((cii + (4*ci)) + (32*mk)); should extract: 1
Include: (cii + (4*ci)); should extract: 1
Include: cii; should extract: 0
Include: (4*ci); should extract: 0
Include: 4; should extract: 0
Include: ci; should extract: 0
Include: (32*mk); should extract: 0
Include: 32; should extract: 0
Include: mk; should extract: 0
Include: (128*mx); should extract: 0
Include: 128; should extract: 0
Include: mx; should extract: 0
Include: (512*nn); should extract: 0
Include: 512; should extract: 0
Include: nn; should extract: 0
Include: (((((((yyy_xxx + (7*yy_xx)) + (49*y_x)) % 7)*2) + ky) + (15*(((((yyy_xxx + (7*yy_xx)) + (49*y_x))/7)*2) + kx))) + (225*n)); should extract: 1
Include: ((((((yyy_xxx + (7*yy_xx)) + (49*y_x)) % 7)*2) + ky) + (15*(((((yyy_xxx + (7*yy_xx)) + (49*y_x))/7)*2) + kx))); should extract: 1
Include: (((((yyy_xxx + (7*yy_xx)) + (49*y_x)) % 7)*2) + ky); should extract: 1
Include: ((((yyy_xxx + (7*yy_xx)) + (49*y_x)) % 7)*2); should extract: 0
Include: (((yyy_xxx + (7*yy_xx)) + (49*y_x)) % 7); should extract: 1
Include: ((yyy_xxx + (7*yy_xx)) + (49*y_x)); should extract: 1
Include: (yyy_xxx + (7*yy_xx)); should extract: 1
Include: yyy_xxx; should extract: 0
Include: (7*yy_xx); should extract: 0
Include: 7; should extract: 0
Include: yy_xx; should extract: 0
Include: (49*y_x); should extract: 0
Include: 49; should extract: 0
Include: y_x; should extract: 0
Include: 7; should extract: 0
Include: 2; should extract: 0
Include: ky; should extract: 0
Include: (15*(((((yyy_xxx + (7*yy_xx)) + (49*y_x))/7)*2) + kx)); should extract: 0
Include: 15; should extract: 0
Include: (((((yyy_xxx + (7*yy_xx)) + (49*y_x))/7)*2) + kx); should extract: 1
Include: ((((yyy_xxx + (7*yy_xx)) + (49*y_x))/7)*2); should extract: 0
Include: (((yyy_xxx + (7*yy_xx)) + (49*y_x))/7); should extract: 0
Include: ((yyy_xxx + (7*yy_xx)) + (49*y_x)); should extract: 1
Include: 7; should extract: 0
Include: 2; should extract: 0
Include: kx; should extract: 0
Include: (225*n); should extract: 0
Include: 225; should extract: 0
Include: n; should extract: 0
Include: (float32)A(cii, (cooo - 1), yyy_xxx, yy_xx, y_x, my, mx, coo, nn, ky, kx, ci, mk, co, n); should extract: 1
Include: cii; should extract: 0
Include: (cooo - 1); should extract: 0
Include: cooo; should extract: 0
Include: 1; should extract: 0
Include: yyy_xxx; should extract: 0
Include: yy_xx; should extract: 0
Include: y_x; should extract: 0
Include: my; should extract: 0
Include: mx; should extract: 0
Include: coo; should extract: 0
Include: nn; should extract: 0
Include: ky; should extract: 0
Include: kx; should extract: 0
Include: ci; should extract: 0
Include: mk; should extract: 0
Include: co; should extract: 0
Include: n; should extract: 0
Canonical form without lets (float32)if_then_else((cooo == 0), (float32)P(((((cii + (4*ci)) + (32*mk)) + (128*mx)) + (512*nn)), (((((((yyy_xxx + (7*yy_xx)) + (49*y_x)) % 7)*2) + ky) + (15*(((((yyy_xxx + (7*yy_xx)) + (49*y_x))/7)*2) + kx))) + (225*n))), (float32)A(cii, (cooo - 1), yyy_xxx, yy_xx, y_x, my, mx, coo, nn, ky, kx, ci, mk, co, n))
0: cooo, 0
1: 0, 0
2: (cooo == 0), 1
3: cii, 0
4: 4, 0
5: ci, 0
6: (4*ci), 0
7: (cii + (4*ci)), 1
8: 32, 0
9: mk, 0
10: (32*mk), 0
11: ((cii + (4*ci)) + (32*mk)), 1
12: 128, 0
13: mx, 0
14: (128*mx), 0
15: (((cii + (4*ci)) + (32*mk)) + (128*mx)), 1
16: 512, 0
17: nn, 0
18: (512*nn), 0
19: ((((cii + (4*ci)) + (32*mk)) + (128*mx)) + (512*nn)), 1
20: yyy_xxx, 0
21: 7, 0
22: yy_xx, 0
23: (7*yy_xx), 0
24: (yyy_xxx + (7*yy_xx)), 1
25: 49, 0
26: y_x, 0
27: (49*y_x), 0
28: ((yyy_xxx + (7*yy_xx)) + (49*y_x)), 2
29: (((yyy_xxx + (7*yy_xx)) + (49*y_x)) % 7), 1
30: 2, 0
31: ((((yyy_xxx + (7*yy_xx)) + (49*y_x)) % 7)*2), 0
32: ky, 0
33: (((((yyy_xxx + (7*yy_xx)) + (49*y_x)) % 7)*2) + ky), 1
34: 15, 0
35: (((yyy_xxx + (7*yy_xx)) + (49*y_x))/7), 0
36: ((((yyy_xxx + (7*yy_xx)) + (49*y_x))/7)*2), 0
37: kx, 0
38: (((((yyy_xxx + (7*yy_xx)) + (49*y_x))/7)*2) + kx), 1
39: (15*(((((yyy_xxx + (7*yy_xx)) + (49*y_x))/7)*2) + kx)), 0
40: ((((((yyy_xxx + (7*yy_xx)) + (49*y_x)) % 7)*2) + ky) + (15*(((((yyy_xxx + (7*yy_xx)) + (49*y_x))/7)*2) + kx))), 1
41: 225, 0
42: n, 0
43: (225*n), 0
44: (((((((yyy_xxx + (7*yy_xx)) + (49*y_x)) % 7)*2) + ky) + (15*(((((yyy_xxx + (7*yy_xx)) + (49*y_x))/7)*2) + kx))) + (225*n)), 1
45: (float32)P(((((cii + (4*ci)) + (32*mk)) + (128*mx)) + (512*nn)), (((((((yyy_xxx + (7*yy_xx)) + (49*y_x)) % 7)*2) + ky) + (15*(((((yyy_xxx + (7*yy_xx)) + (49*y_x))/7)*2) + kx))) + (225*n))), 1
46: 1, 0
47: (cooo - 1), 0
48: my, 0
49: coo, 0
50: co, 0
51: (float32)A(cii, (cooo - 1), yyy_xxx, yy_xx, y_x, my, mx, coo, nn, ky, kx, ci, mk, co, n), 1
52: (float32)if_then_else((cooo == 0), (float32)P(((((cii + (4*ci)) + (32*mk)) + (128*mx)) + (512*nn)), (((((((yyy_xxx + (7*yy_xx)) + (49*y_x)) % 7)*2) + ky) + (15*(((((yyy_xxx + (7*yy_xx)) + (49*y_x))/7)*2) + kx))) + (225*n))), (float32)A(cii, (cooo - 1), yyy_xxx, yy_xx, y_x, my, mx, coo, nn, ky, kx, ci, mk, co, n)), 1
With variables (float32)if_then_else((cooo == 0), (float32)P(((((cii + (4*ci)) + (32*mk)) + (128*mx)) + (512*nn)), (((((t4 % 7)*2) + ky) + (15*(((t4/7)*2) + kx))) + (225*n))), (float32)A(cii, (cooo - 1), yyy_xxx, yy_xx, y_x, my, mx, coo, nn, ky, kx, ci, mk, co, n))
With lets: (let t4 = ((yyy_xxx + (7*yy_xx)) + (49*y_x)) in (float32)if_then_else((cooo == 0), (float32)P(((((cii + (4*ci)) + (32*mk)) + (128*mx)) + (512*nn)), (((((t4 % 7)*2) + ky) + (15*(((t4/7)*2) + kx))) + (225*n))), (float32)A(cii, (cooo - 1), yyy_xxx, yy_xx, y_x, my, mx, coo, nn, ky, kx, ci, mk, co, n)))
bounds_of_expr_in_scope ((yyy_xxx + (7*yy_xx)) + (49*y_x)) = ((A.s0.y_x.min*49) + ((A.s0.yy_xx.min*7) + A.s0.yyy_xxx.min)), ((A.s0.y_x.max*49) + ((A.s0.yy_xx.max*7) + A.s0.yyy_xxx.max))
Mutating (cooo == 0) (0)
Mutating cooo (0)
(Miss) Rewrote cooo -> cooo (1)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (cooo == 0) -> (cooo == 0) (1)



Input to CSE (cooo == 0)
After removing lets: (cooo == 0)
Include: (cooo == 0); should extract: 1
Include: cooo; should extract: 0
Include: 0; should extract: 0
Canonical form without lets (cooo == 0)
0: cooo, 0
1: 0, 0
2: (cooo == 0), 1
With variables (cooo == 0)
With lets: (cooo == 0)
Solved expr for cooo :
  (cooo == 0)
  (cooo == 0)
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope ((((cii + (4*ci)) + (32*mk)) + (128*mx)) + (512*nn)) = ((A.s0.nn.min*512) + ((A.s0.mx.min*128) + ((A.s0.mk.min*32) + ((A.s0.ci.min*4) + A.s0.cii.min)))), ((A.s0.nn.max*512) + ((A.s0.mx.max*128) + ((A.s0.mk.max*32) + ((A.s0.ci.max*4) + A.s0.cii.max))))



Input to CSE (7 == 7)
After removing lets: (7 == 7)
Include: (7 == 7); should extract: 1
Include: 7; should extract: 0
Include: 7; should extract: 0
Canonical form without lets (7 == 7)
0: 7, 0
1: (7 == 7), 1
With variables (7 == 7)
With lets: (7 == 7)
bounds_of_expr_in_scope (((((t4 % 7)*2) + ky) + (15*(((t4/7)*2) + kx))) + (225*n)) = ((A.s0.n.min*225) + ((((((A.s0.y_x.min*7) + ((A.s0.yyy_xxx.min/7) + A.s0.yy_xx.min))*2) + A.s0.kx.min)*15) + A.s0.ky.min)), (((A.s0.n.max*225) + ((((((A.s0.y_x.max*7) + ((A.s0.yyy_xxx.max/7) + A.s0.yy_xx.max))*2) + A.s0.kx.max)*15) + A.s0.ky.max)) + 12)
Mutating (cooo != 0) (0)
Mutating cooo (0)
(Miss) Rewrote cooo -> cooo (1)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (cooo != 0) -> (cooo != 0) (1)



Input to CSE (cooo != 0)
After removing lets: (cooo != 0)
Include: (cooo != 0); should extract: 1
Include: cooo; should extract: 0
Include: 0; should extract: 0
Canonical form without lets (cooo != 0)
0: cooo, 0
1: 0, 0
2: (cooo != 0), 1
With variables (cooo != 0)
With lets: (cooo != 0)
Solved expr for cooo :
  (cooo != 0)
  (cooo != 0)
bounds_of_expr_in_scope cii = A.s0.cii.min, A.s0.cii.max
bounds_of_expr_in_scope (cooo - 1) = (A.s0.cooo.min + -1), (A.s0.cooo.max + -1)
bounds_of_expr_in_scope yyy_xxx = A.s0.yyy_xxx.min, A.s0.yyy_xxx.max
bounds_of_expr_in_scope yy_xx = A.s0.yy_xx.min, A.s0.yy_xx.max
bounds_of_expr_in_scope y_x = A.s0.y_x.min, A.s0.y_x.max
bounds_of_expr_in_scope my = A.s0.my.min, A.s0.my.max
bounds_of_expr_in_scope mx = A.s0.mx.min, A.s0.mx.max
bounds_of_expr_in_scope coo = A.s0.coo.min, A.s0.coo.max
bounds_of_expr_in_scope nn = A.s0.nn.min, A.s0.nn.max
bounds_of_expr_in_scope ky = A.s0.ky.min, A.s0.ky.max
bounds_of_expr_in_scope kx = A.s0.kx.min, A.s0.kx.max
bounds_of_expr_in_scope ci = A.s0.ci.min, A.s0.ci.max
bounds_of_expr_in_scope mk = A.s0.mk.min, A.s0.mk.max
bounds_of_expr_in_scope co = A.s0.co.min, A.s0.co.max
bounds_of_expr_in_scope n = A.s0.n.min, A.s0.n.max
Box of A computed by: A
  A.s0.cii.min ... A.s0.cii.max
  (A.s0.cooo.min - 1) ... (A.s0.cooo.max - 1)
  A.s0.yyy_xxx.min ... A.s0.yyy_xxx.max
  A.s0.yy_xx.min ... A.s0.yy_xx.max
  A.s0.y_x.min ... A.s0.y_x.max
  A.s0.my.min ... A.s0.my.max
  A.s0.mx.min ... A.s0.mx.max
  A.s0.coo.min ... A.s0.coo.max
  A.s0.nn.min ... A.s0.nn.max
  A.s0.ky.min ... A.s0.ky.max
  A.s0.kx.min ... A.s0.kx.max
  A.s0.ci.min ... A.s0.ci.max
  A.s0.mk.min ... A.s0.mk.max
  A.s0.co.min ... A.s0.co.max
  A.s0.n.min ... A.s0.n.max
Box of P computed by: A
  ((((A.s0.cii.min + (A.s0.ci.min*4)) + (A.s0.mk.min*32)) + (A.s0.mx.min*128)) + (A.s0.nn.min*512)) ... ((((A.s0.cii.max + (A.s0.ci.max*4)) + (A.s0.mk.max*32)) + (A.s0.mx.max*128)) + (A.s0.nn.max*512))
  ((((0*2) + A.s0.ky.min) + ((((((A.s0.y_x.min*49) + ((A.s0.yy_xx.min*7) + A.s0.yyy_xxx.min))/7)*2) + A.s0.kx.min)*15)) + (A.s0.n.min*225)) ... (((((7 - 1)*2) + A.s0.ky.max) + ((((((A.s0.y_x.max*49) + ((A.s0.yy_xx.max*7) + A.s0.yyy_xxx.max))/7)*2) + A.s0.kx.max)*15)) + (A.s0.n.max*225))
Mutating (yyy_xxx == 0) (0)
Mutating yyy_xxx (0)
(Miss) Rewrote yyy_xxx -> yyy_xxx (1)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (yyy_xxx == 0) -> (yyy_xxx == 0) (1)



Input to CSE (yyy_xxx == 0)
After removing lets: (yyy_xxx == 0)
Include: (yyy_xxx == 0); should extract: 1
Include: yyy_xxx; should extract: 0
Include: 0; should extract: 0
Canonical form without lets (yyy_xxx == 0)
0: yyy_xxx, 0
1: 0, 0
2: (yyy_xxx == 0), 1
With variables (yyy_xxx == 0)
With lets: (yyy_xxx == 0)
Solved expr for yyy_xxx :
  (yyy_xxx == 0)
  (yyy_xxx == 0)
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope (((cooo + (8*coo)) + (8*co)) + (32*my)) = ((B.s0.my.min*32) + ((B.s0.co.min*8) + ((B.s0.coo.min*8) + B.s0.cooo.min))), ((B.s0.my.max*32) + ((B.s0.co.max*8) + ((B.s0.coo.max*8) + B.s0.cooo.max)))
bounds_of_expr_in_scope ((((cii + (4*ky)) + (12*kx)) + (36*ci)) + (288*mk)) = ((B.s0.mk.min*288) + ((B.s0.ci.min*36) + ((B.s0.kx.min*12) + ((B.s0.ky.min*4) + B.s0.cii.min)))), ((B.s0.mk.max*288) + ((B.s0.ci.max*36) + ((B.s0.kx.max*12) + ((B.s0.ky.max*4) + B.s0.cii.max))))
Mutating (yyy_xxx != 0) (0)
Mutating yyy_xxx (0)
(Miss) Rewrote yyy_xxx -> yyy_xxx (1)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (yyy_xxx != 0) -> (yyy_xxx != 0) (1)



Input to CSE (yyy_xxx != 0)
After removing lets: (yyy_xxx != 0)
Include: (yyy_xxx != 0); should extract: 1
Include: yyy_xxx; should extract: 0
Include: 0; should extract: 0
Canonical form without lets (yyy_xxx != 0)
0: yyy_xxx, 0
1: 0, 0
2: (yyy_xxx != 0), 1
With variables (yyy_xxx != 0)
With lets: (yyy_xxx != 0)
Solved expr for yyy_xxx :
  (yyy_xxx != 0)
  (yyy_xxx != 0)
bounds_of_expr_in_scope cii = B.s0.cii.min, B.s0.cii.max
bounds_of_expr_in_scope cooo = B.s0.cooo.min, B.s0.cooo.max
bounds_of_expr_in_scope (yyy_xxx - 1) = (B.s0.yyy_xxx.min + -1), (B.s0.yyy_xxx.max + -1)
bounds_of_expr_in_scope yy_xx = B.s0.yy_xx.min, B.s0.yy_xx.max
bounds_of_expr_in_scope y_x = B.s0.y_x.min, B.s0.y_x.max
bounds_of_expr_in_scope my = B.s0.my.min, B.s0.my.max
bounds_of_expr_in_scope mx = B.s0.mx.min, B.s0.mx.max
bounds_of_expr_in_scope coo = B.s0.coo.min, B.s0.coo.max
bounds_of_expr_in_scope nn = B.s0.nn.min, B.s0.nn.max
bounds_of_expr_in_scope ky = B.s0.ky.min, B.s0.ky.max
bounds_of_expr_in_scope kx = B.s0.kx.min, B.s0.kx.max
bounds_of_expr_in_scope ci = B.s0.ci.min, B.s0.ci.max
bounds_of_expr_in_scope mk = B.s0.mk.min, B.s0.mk.max
bounds_of_expr_in_scope co = B.s0.co.min, B.s0.co.max
bounds_of_expr_in_scope n = B.s0.n.min, B.s0.n.max
Box of B computed by: B
  B.s0.cii.min ... B.s0.cii.max
  B.s0.cooo.min ... B.s0.cooo.max
  (B.s0.yyy_xxx.min - 1) ... (B.s0.yyy_xxx.max - 1)
  B.s0.yy_xx.min ... B.s0.yy_xx.max
  B.s0.y_x.min ... B.s0.y_x.max
  B.s0.my.min ... B.s0.my.max
  B.s0.mx.min ... B.s0.mx.max
  B.s0.coo.min ... B.s0.coo.max
  B.s0.nn.min ... B.s0.nn.max
  B.s0.ky.min ... B.s0.ky.max
  B.s0.kx.min ... B.s0.kx.max
  B.s0.ci.min ... B.s0.ci.max
  B.s0.mk.min ... B.s0.mk.max
  B.s0.co.min ... B.s0.co.max
  B.s0.n.min ... B.s0.n.max
Box of W computed by: B
  (((B.s0.cooo.min + (B.s0.coo.min*8)) + (B.s0.co.min*8)) + (B.s0.my.min*32)) ... (((B.s0.cooo.max + (B.s0.coo.max*8)) + (B.s0.co.max*8)) + (B.s0.my.max*32))
  ((((B.s0.cii.min + (B.s0.ky.min*4)) + (B.s0.kx.min*12)) + (B.s0.ci.min*36)) + (B.s0.mk.min*288)) ... ((((B.s0.cii.max + (B.s0.ky.max*4)) + (B.s0.kx.max*12)) + (B.s0.ci.max*36)) + (B.s0.mk.max*288))
Mutating (((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) && (kx == 0)) (0)
Mutating ((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) (0)
Mutating (((cii == 0) && (ci == 0)) && (mk == 0)) (0)
Mutating ((cii == 0) && (ci == 0)) (0)
Mutating (cii == 0) (0)
Mutating cii (0)
(Miss) Rewrote cii -> cii (1)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (cii == 0) -> (cii == 0) (1)
Mutating (ci == 0) (0)
Mutating ci (0)
(Miss) Rewrote ci -> ci (0)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (ci == 0) -> (ci == 0) (0)
(Miss) Rewrote ((cii == 0) && (ci == 0)) -> ((cii == 0) && (ci == 0)) (1)
Mutating (mk == 0) (0)
Mutating mk (0)
(Miss) Rewrote mk -> mk (0)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (mk == 0) -> (mk == 0) (0)
Mutating ((cii == 0) && ((ci == 0) && (mk == 0))) (1)
(Hit) Rewrote (cii == 0) -> (cii == 0) (1)
Mutating ((ci == 0) && (mk == 0)) (0)
(Hit) Rewrote (ci == 0) -> (ci == 0) (0)
(Hit) Rewrote (mk == 0) -> (mk == 0) (0)
(Miss) Rewrote ((ci == 0) && (mk == 0)) -> ((ci == 0) && (mk == 0)) (0)
(Miss) Rewrote ((cii == 0) && ((ci == 0) && (mk == 0))) -> ((cii == 0) && ((ci == 0) && (mk == 0))) (1)
(Miss) Rewrote (((cii == 0) && (ci == 0)) && (mk == 0)) -> ((cii == 0) && ((ci == 0) && (mk == 0))) (1)
Mutating (ky == 0) (0)
Mutating ky (0)
(Miss) Rewrote ky -> ky (0)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (ky == 0) -> (ky == 0) (0)
Mutating ((cii == 0) && (((ci == 0) && (mk == 0)) && (ky == 0))) (1)
(Hit) Rewrote (cii == 0) -> (cii == 0) (1)
Mutating (((ci == 0) && (mk == 0)) && (ky == 0)) (0)
(Hit) Rewrote ((ci == 0) && (mk == 0)) -> ((ci == 0) && (mk == 0)) (0)
(Hit) Rewrote (ky == 0) -> (ky == 0) (0)
(Miss) Rewrote (((ci == 0) && (mk == 0)) && (ky == 0)) -> (((ci == 0) && (mk == 0)) && (ky == 0)) (0)
(Miss) Rewrote ((cii == 0) && (((ci == 0) && (mk == 0)) && (ky == 0))) -> ((cii == 0) && (((ci == 0) && (mk == 0)) && (ky == 0))) (1)
(Miss) Rewrote ((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) -> ((cii == 0) && (((ci == 0) && (mk == 0)) && (ky == 0))) (1)
Mutating (kx == 0) (0)
Mutating kx (0)
(Miss) Rewrote kx -> kx (0)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (kx == 0) -> (kx == 0) (0)
Mutating ((cii == 0) && ((((ci == 0) && (mk == 0)) && (ky == 0)) && (kx == 0))) (1)
(Hit) Rewrote (cii == 0) -> (cii == 0) (1)
Mutating ((((ci == 0) && (mk == 0)) && (ky == 0)) && (kx == 0)) (0)
(Hit) Rewrote (((ci == 0) && (mk == 0)) && (ky == 0)) -> (((ci == 0) && (mk == 0)) && (ky == 0)) (0)
(Hit) Rewrote (kx == 0) -> (kx == 0) (0)
(Miss) Rewrote ((((ci == 0) && (mk == 0)) && (ky == 0)) && (kx == 0)) -> ((((ci == 0) && (mk == 0)) && (ky == 0)) && (kx == 0)) (0)
(Miss) Rewrote ((cii == 0) && ((((ci == 0) && (mk == 0)) && (ky == 0)) && (kx == 0))) -> ((cii == 0) && ((((ci == 0) && (mk == 0)) && (ky == 0)) && (kx == 0))) (1)
(Miss) Rewrote (((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) && (kx == 0)) -> ((cii == 0) && ((((ci == 0) && (mk == 0)) && (ky == 0)) && (kx == 0))) (1)



Input to CSE ((cii == 0) && ((((ci == 0) && (mk == 0)) && (ky == 0)) && (kx == 0)))
After removing lets: ((cii == 0) && ((((ci == 0) && (mk == 0)) && (ky == 0)) && (kx == 0)))
Include: ((cii == 0) && ((((ci == 0) && (mk == 0)) && (ky == 0)) && (kx == 0))); should extract: 1
Include: (cii == 0); should extract: 1
Include: cii; should extract: 0
Include: 0; should extract: 0
Include: ((((ci == 0) && (mk == 0)) && (ky == 0)) && (kx == 0)); should extract: 1
Include: (((ci == 0) && (mk == 0)) && (ky == 0)); should extract: 1
Include: ((ci == 0) && (mk == 0)); should extract: 1
Include: (ci == 0); should extract: 1
Include: ci; should extract: 0
Include: 0; should extract: 0
Include: (mk == 0); should extract: 1
Include: mk; should extract: 0
Include: 0; should extract: 0
Include: (ky == 0); should extract: 1
Include: ky; should extract: 0
Include: 0; should extract: 0
Include: (kx == 0); should extract: 1
Include: kx; should extract: 0
Include: 0; should extract: 0
Canonical form without lets ((cii == 0) && ((((ci == 0) && (mk == 0)) && (ky == 0)) && (kx == 0)))
0: cii, 0
1: 0, 0
2: (cii == 0), 1
3: ci, 0
4: (ci == 0), 1
5: mk, 0
6: (mk == 0), 1
7: ((ci == 0) && (mk == 0)), 1
8: ky, 0
9: (ky == 0), 1
10: (((ci == 0) && (mk == 0)) && (ky == 0)), 1
11: kx, 0
12: (kx == 0), 1
13: ((((ci == 0) && (mk == 0)) && (ky == 0)) && (kx == 0)), 1
14: ((cii == 0) && ((((ci == 0) && (mk == 0)) && (ky == 0)) && (kx == 0))), 1
With variables ((cii == 0) && ((((ci == 0) && (mk == 0)) && (ky == 0)) && (kx == 0)))
With lets: ((cii == 0) && ((((ci == 0) && (mk == 0)) && (ky == 0)) && (kx == 0)))
Solved expr for cii :
  (((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) && (kx == 0))
  ((cii == 0) && ((((ci == 0) && (mk == 0)) && (ky == 0)) && (kx == 0)))
Mutating (((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) && (kx == 0)) (0)
Mutating ((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) (0)
Mutating (((cii == 0) && (ci == 0)) && (mk == 0)) (0)
Mutating ((cii == 0) && (ci == 0)) (0)
Mutating (cii == 0) (0)
Mutating cii (0)
(Miss) Rewrote cii -> cii (0)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (cii == 0) -> (cii == 0) (0)
Mutating (ci == 0) (0)
Mutating ci (0)
(Miss) Rewrote ci -> ci (1)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (ci == 0) -> (ci == 0) (1)
(Miss) Rewrote ((cii == 0) && (ci == 0)) -> ((ci == 0) && (cii == 0)) (1)
Mutating (mk == 0) (0)
Mutating mk (0)
(Miss) Rewrote mk -> mk (0)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (mk == 0) -> (mk == 0) (0)
Mutating ((ci == 0) && ((cii == 0) && (mk == 0))) (1)
(Hit) Rewrote (ci == 0) -> (ci == 0) (1)
Mutating ((cii == 0) && (mk == 0)) (0)
(Hit) Rewrote (cii == 0) -> (cii == 0) (0)
(Hit) Rewrote (mk == 0) -> (mk == 0) (0)
(Miss) Rewrote ((cii == 0) && (mk == 0)) -> ((cii == 0) && (mk == 0)) (0)
(Miss) Rewrote ((ci == 0) && ((cii == 0) && (mk == 0))) -> ((ci == 0) && ((cii == 0) && (mk == 0))) (1)
(Miss) Rewrote (((cii == 0) && (ci == 0)) && (mk == 0)) -> ((ci == 0) && ((cii == 0) && (mk == 0))) (1)
Mutating (ky == 0) (0)
Mutating ky (0)
(Miss) Rewrote ky -> ky (0)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (ky == 0) -> (ky == 0) (0)
Mutating ((ci == 0) && (((cii == 0) && (mk == 0)) && (ky == 0))) (1)
(Hit) Rewrote (ci == 0) -> (ci == 0) (1)
Mutating (((cii == 0) && (mk == 0)) && (ky == 0)) (0)
(Hit) Rewrote ((cii == 0) && (mk == 0)) -> ((cii == 0) && (mk == 0)) (0)
(Hit) Rewrote (ky == 0) -> (ky == 0) (0)
(Miss) Rewrote (((cii == 0) && (mk == 0)) && (ky == 0)) -> (((cii == 0) && (mk == 0)) && (ky == 0)) (0)
(Miss) Rewrote ((ci == 0) && (((cii == 0) && (mk == 0)) && (ky == 0))) -> ((ci == 0) && (((cii == 0) && (mk == 0)) && (ky == 0))) (1)
(Miss) Rewrote ((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) -> ((ci == 0) && (((cii == 0) && (mk == 0)) && (ky == 0))) (1)
Mutating (kx == 0) (0)
Mutating kx (0)
(Miss) Rewrote kx -> kx (0)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (kx == 0) -> (kx == 0) (0)
Mutating ((ci == 0) && ((((cii == 0) && (mk == 0)) && (ky == 0)) && (kx == 0))) (1)
(Hit) Rewrote (ci == 0) -> (ci == 0) (1)
Mutating ((((cii == 0) && (mk == 0)) && (ky == 0)) && (kx == 0)) (0)
(Hit) Rewrote (((cii == 0) && (mk == 0)) && (ky == 0)) -> (((cii == 0) && (mk == 0)) && (ky == 0)) (0)
(Hit) Rewrote (kx == 0) -> (kx == 0) (0)
(Miss) Rewrote ((((cii == 0) && (mk == 0)) && (ky == 0)) && (kx == 0)) -> ((((cii == 0) && (mk == 0)) && (ky == 0)) && (kx == 0)) (0)
(Miss) Rewrote ((ci == 0) && ((((cii == 0) && (mk == 0)) && (ky == 0)) && (kx == 0))) -> ((ci == 0) && ((((cii == 0) && (mk == 0)) && (ky == 0)) && (kx == 0))) (1)
(Miss) Rewrote (((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) && (kx == 0)) -> ((ci == 0) && ((((cii == 0) && (mk == 0)) && (ky == 0)) && (kx == 0))) (1)



Input to CSE ((ci == 0) && ((((cii == 0) && (mk == 0)) && (ky == 0)) && (kx == 0)))
After removing lets: ((ci == 0) && ((((cii == 0) && (mk == 0)) && (ky == 0)) && (kx == 0)))
Include: ((ci == 0) && ((((cii == 0) && (mk == 0)) && (ky == 0)) && (kx == 0))); should extract: 1
Include: (ci == 0); should extract: 1
Include: ci; should extract: 0
Include: 0; should extract: 0
Include: ((((cii == 0) && (mk == 0)) && (ky == 0)) && (kx == 0)); should extract: 1
Include: (((cii == 0) && (mk == 0)) && (ky == 0)); should extract: 1
Include: ((cii == 0) && (mk == 0)); should extract: 1
Include: (cii == 0); should extract: 1
Include: cii; should extract: 0
Include: 0; should extract: 0
Include: (mk == 0); should extract: 1
Include: mk; should extract: 0
Include: 0; should extract: 0
Include: (ky == 0); should extract: 1
Include: ky; should extract: 0
Include: 0; should extract: 0
Include: (kx == 0); should extract: 1
Include: kx; should extract: 0
Include: 0; should extract: 0
Canonical form without lets ((ci == 0) && ((((cii == 0) && (mk == 0)) && (ky == 0)) && (kx == 0)))
0: ci, 0
1: 0, 0
2: (ci == 0), 1
3: cii, 0
4: (cii == 0), 1
5: mk, 0
6: (mk == 0), 1
7: ((cii == 0) && (mk == 0)), 1
8: ky, 0
9: (ky == 0), 1
10: (((cii == 0) && (mk == 0)) && (ky == 0)), 1
11: kx, 0
12: (kx == 0), 1
13: ((((cii == 0) && (mk == 0)) && (ky == 0)) && (kx == 0)), 1
14: ((ci == 0) && ((((cii == 0) && (mk == 0)) && (ky == 0)) && (kx == 0))), 1
With variables ((ci == 0) && ((((cii == 0) && (mk == 0)) && (ky == 0)) && (kx == 0)))
With lets: ((ci == 0) && ((((cii == 0) && (mk == 0)) && (ky == 0)) && (kx == 0)))
Solved expr for ci :
  (((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) && (kx == 0))
  ((ci == 0) && ((((cii == 0) && (mk == 0)) && (ky == 0)) && (kx == 0)))
Mutating (((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) && (kx == 0)) (0)
Mutating ((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) (0)
Mutating (((cii == 0) && (ci == 0)) && (mk == 0)) (0)
Mutating ((cii == 0) && (ci == 0)) (0)
Mutating (cii == 0) (0)
Mutating cii (0)
(Miss) Rewrote cii -> cii (0)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (cii == 0) -> (cii == 0) (0)
Mutating (ci == 0) (0)
Mutating ci (0)
(Miss) Rewrote ci -> ci (0)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (ci == 0) -> (ci == 0) (0)
(Miss) Rewrote ((cii == 0) && (ci == 0)) -> ((cii == 0) && (ci == 0)) (0)
Mutating (mk == 0) (0)
Mutating mk (0)
(Miss) Rewrote mk -> mk (1)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (mk == 0) -> (mk == 0) (1)
(Miss) Rewrote (((cii == 0) && (ci == 0)) && (mk == 0)) -> ((mk == 0) && ((cii == 0) && (ci == 0))) (1)
Mutating (ky == 0) (0)
Mutating ky (0)
(Miss) Rewrote ky -> ky (0)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (ky == 0) -> (ky == 0) (0)
Mutating ((mk == 0) && (((cii == 0) && (ci == 0)) && (ky == 0))) (1)
(Hit) Rewrote (mk == 0) -> (mk == 0) (1)
Mutating (((cii == 0) && (ci == 0)) && (ky == 0)) (0)
(Hit) Rewrote ((cii == 0) && (ci == 0)) -> ((cii == 0) && (ci == 0)) (0)
(Hit) Rewrote (ky == 0) -> (ky == 0) (0)
(Miss) Rewrote (((cii == 0) && (ci == 0)) && (ky == 0)) -> (((cii == 0) && (ci == 0)) && (ky == 0)) (0)
(Miss) Rewrote ((mk == 0) && (((cii == 0) && (ci == 0)) && (ky == 0))) -> ((mk == 0) && (((cii == 0) && (ci == 0)) && (ky == 0))) (1)
(Miss) Rewrote ((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) -> ((mk == 0) && (((cii == 0) && (ci == 0)) && (ky == 0))) (1)
Mutating (kx == 0) (0)
Mutating kx (0)
(Miss) Rewrote kx -> kx (0)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (kx == 0) -> (kx == 0) (0)
Mutating ((mk == 0) && ((((cii == 0) && (ci == 0)) && (ky == 0)) && (kx == 0))) (1)
(Hit) Rewrote (mk == 0) -> (mk == 0) (1)
Mutating ((((cii == 0) && (ci == 0)) && (ky == 0)) && (kx == 0)) (0)
(Hit) Rewrote (((cii == 0) && (ci == 0)) && (ky == 0)) -> (((cii == 0) && (ci == 0)) && (ky == 0)) (0)
(Hit) Rewrote (kx == 0) -> (kx == 0) (0)
(Miss) Rewrote ((((cii == 0) && (ci == 0)) && (ky == 0)) && (kx == 0)) -> ((((cii == 0) && (ci == 0)) && (ky == 0)) && (kx == 0)) (0)
(Miss) Rewrote ((mk == 0) && ((((cii == 0) && (ci == 0)) && (ky == 0)) && (kx == 0))) -> ((mk == 0) && ((((cii == 0) && (ci == 0)) && (ky == 0)) && (kx == 0))) (1)
(Miss) Rewrote (((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) && (kx == 0)) -> ((mk == 0) && ((((cii == 0) && (ci == 0)) && (ky == 0)) && (kx == 0))) (1)



Input to CSE ((mk == 0) && ((((cii == 0) && (ci == 0)) && (ky == 0)) && (kx == 0)))
After removing lets: ((mk == 0) && ((((cii == 0) && (ci == 0)) && (ky == 0)) && (kx == 0)))
Include: ((mk == 0) && ((((cii == 0) && (ci == 0)) && (ky == 0)) && (kx == 0))); should extract: 1
Include: (mk == 0); should extract: 1
Include: mk; should extract: 0
Include: 0; should extract: 0
Include: ((((cii == 0) && (ci == 0)) && (ky == 0)) && (kx == 0)); should extract: 1
Include: (((cii == 0) && (ci == 0)) && (ky == 0)); should extract: 1
Include: ((cii == 0) && (ci == 0)); should extract: 1
Include: (cii == 0); should extract: 1
Include: cii; should extract: 0
Include: 0; should extract: 0
Include: (ci == 0); should extract: 1
Include: ci; should extract: 0
Include: 0; should extract: 0
Include: (ky == 0); should extract: 1
Include: ky; should extract: 0
Include: 0; should extract: 0
Include: (kx == 0); should extract: 1
Include: kx; should extract: 0
Include: 0; should extract: 0
Canonical form without lets ((mk == 0) && ((((cii == 0) && (ci == 0)) && (ky == 0)) && (kx == 0)))
0: mk, 0
1: 0, 0
2: (mk == 0), 1
3: cii, 0
4: (cii == 0), 1
5: ci, 0
6: (ci == 0), 1
7: ((cii == 0) && (ci == 0)), 1
8: ky, 0
9: (ky == 0), 1
10: (((cii == 0) && (ci == 0)) && (ky == 0)), 1
11: kx, 0
12: (kx == 0), 1
13: ((((cii == 0) && (ci == 0)) && (ky == 0)) && (kx == 0)), 1
14: ((mk == 0) && ((((cii == 0) && (ci == 0)) && (ky == 0)) && (kx == 0))), 1
With variables ((mk == 0) && ((((cii == 0) && (ci == 0)) && (ky == 0)) && (kx == 0)))
With lets: ((mk == 0) && ((((cii == 0) && (ci == 0)) && (ky == 0)) && (kx == 0)))
Solved expr for mk :
  (((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) && (kx == 0))
  ((mk == 0) && ((((cii == 0) && (ci == 0)) && (ky == 0)) && (kx == 0)))
Mutating (((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) && (kx == 0)) (0)
Mutating ((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) (0)
Mutating (((cii == 0) && (ci == 0)) && (mk == 0)) (0)
Mutating ((cii == 0) && (ci == 0)) (0)
Mutating (cii == 0) (0)
Mutating cii (0)
(Miss) Rewrote cii -> cii (0)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (cii == 0) -> (cii == 0) (0)
Mutating (ci == 0) (0)
Mutating ci (0)
(Miss) Rewrote ci -> ci (0)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (ci == 0) -> (ci == 0) (0)
(Miss) Rewrote ((cii == 0) && (ci == 0)) -> ((cii == 0) && (ci == 0)) (0)
Mutating (mk == 0) (0)
Mutating mk (0)
(Miss) Rewrote mk -> mk (0)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (mk == 0) -> (mk == 0) (0)
(Miss) Rewrote (((cii == 0) && (ci == 0)) && (mk == 0)) -> (((cii == 0) && (ci == 0)) && (mk == 0)) (0)
Mutating (ky == 0) (0)
Mutating ky (0)
(Miss) Rewrote ky -> ky (1)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (ky == 0) -> (ky == 0) (1)
(Miss) Rewrote ((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) -> ((ky == 0) && (((cii == 0) && (ci == 0)) && (mk == 0))) (1)
Mutating (kx == 0) (0)
Mutating kx (0)
(Miss) Rewrote kx -> kx (0)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (kx == 0) -> (kx == 0) (0)
Mutating ((ky == 0) && ((((cii == 0) && (ci == 0)) && (mk == 0)) && (kx == 0))) (1)
(Hit) Rewrote (ky == 0) -> (ky == 0) (1)
Mutating ((((cii == 0) && (ci == 0)) && (mk == 0)) && (kx == 0)) (0)
(Hit) Rewrote (((cii == 0) && (ci == 0)) && (mk == 0)) -> (((cii == 0) && (ci == 0)) && (mk == 0)) (0)
(Hit) Rewrote (kx == 0) -> (kx == 0) (0)
(Miss) Rewrote ((((cii == 0) && (ci == 0)) && (mk == 0)) && (kx == 0)) -> ((((cii == 0) && (ci == 0)) && (mk == 0)) && (kx == 0)) (0)
(Miss) Rewrote ((ky == 0) && ((((cii == 0) && (ci == 0)) && (mk == 0)) && (kx == 0))) -> ((ky == 0) && ((((cii == 0) && (ci == 0)) && (mk == 0)) && (kx == 0))) (1)
(Miss) Rewrote (((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) && (kx == 0)) -> ((ky == 0) && ((((cii == 0) && (ci == 0)) && (mk == 0)) && (kx == 0))) (1)



Input to CSE ((ky == 0) && ((((cii == 0) && (ci == 0)) && (mk == 0)) && (kx == 0)))
After removing lets: ((ky == 0) && ((((cii == 0) && (ci == 0)) && (mk == 0)) && (kx == 0)))
Include: ((ky == 0) && ((((cii == 0) && (ci == 0)) && (mk == 0)) && (kx == 0))); should extract: 1
Include: (ky == 0); should extract: 1
Include: ky; should extract: 0
Include: 0; should extract: 0
Include: ((((cii == 0) && (ci == 0)) && (mk == 0)) && (kx == 0)); should extract: 1
Include: (((cii == 0) && (ci == 0)) && (mk == 0)); should extract: 1
Include: ((cii == 0) && (ci == 0)); should extract: 1
Include: (cii == 0); should extract: 1
Include: cii; should extract: 0
Include: 0; should extract: 0
Include: (ci == 0); should extract: 1
Include: ci; should extract: 0
Include: 0; should extract: 0
Include: (mk == 0); should extract: 1
Include: mk; should extract: 0
Include: 0; should extract: 0
Include: (kx == 0); should extract: 1
Include: kx; should extract: 0
Include: 0; should extract: 0
Canonical form without lets ((ky == 0) && ((((cii == 0) && (ci == 0)) && (mk == 0)) && (kx == 0)))
0: ky, 0
1: 0, 0
2: (ky == 0), 1
3: cii, 0
4: (cii == 0), 1
5: ci, 0
6: (ci == 0), 1
7: ((cii == 0) && (ci == 0)), 1
8: mk, 0
9: (mk == 0), 1
10: (((cii == 0) && (ci == 0)) && (mk == 0)), 1
11: kx, 0
12: (kx == 0), 1
13: ((((cii == 0) && (ci == 0)) && (mk == 0)) && (kx == 0)), 1
14: ((ky == 0) && ((((cii == 0) && (ci == 0)) && (mk == 0)) && (kx == 0))), 1
With variables ((ky == 0) && ((((cii == 0) && (ci == 0)) && (mk == 0)) && (kx == 0)))
With lets: ((ky == 0) && ((((cii == 0) && (ci == 0)) && (mk == 0)) && (kx == 0)))
Solved expr for ky :
  (((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) && (kx == 0))
  ((ky == 0) && ((((cii == 0) && (ci == 0)) && (mk == 0)) && (kx == 0)))
Mutating (((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) && (kx == 0)) (0)
Mutating ((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) (0)
Mutating (((cii == 0) && (ci == 0)) && (mk == 0)) (0)
Mutating ((cii == 0) && (ci == 0)) (0)
Mutating (cii == 0) (0)
Mutating cii (0)
(Miss) Rewrote cii -> cii (0)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (cii == 0) -> (cii == 0) (0)
Mutating (ci == 0) (0)
Mutating ci (0)
(Miss) Rewrote ci -> ci (0)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (ci == 0) -> (ci == 0) (0)
(Miss) Rewrote ((cii == 0) && (ci == 0)) -> ((cii == 0) && (ci == 0)) (0)
Mutating (mk == 0) (0)
Mutating mk (0)
(Miss) Rewrote mk -> mk (0)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (mk == 0) -> (mk == 0) (0)
(Miss) Rewrote (((cii == 0) && (ci == 0)) && (mk == 0)) -> (((cii == 0) && (ci == 0)) && (mk == 0)) (0)
Mutating (ky == 0) (0)
Mutating ky (0)
(Miss) Rewrote ky -> ky (0)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (ky == 0) -> (ky == 0) (0)
(Miss) Rewrote ((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) -> ((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) (0)
Mutating (kx == 0) (0)
Mutating kx (0)
(Miss) Rewrote kx -> kx (1)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (kx == 0) -> (kx == 0) (1)
(Miss) Rewrote (((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) && (kx == 0)) -> ((kx == 0) && ((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0))) (1)



Input to CSE ((kx == 0) && ((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)))
After removing lets: ((kx == 0) && ((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)))
Include: ((kx == 0) && ((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0))); should extract: 1
Include: (kx == 0); should extract: 1
Include: kx; should extract: 0
Include: 0; should extract: 0
Include: ((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)); should extract: 1
Include: (((cii == 0) && (ci == 0)) && (mk == 0)); should extract: 1
Include: ((cii == 0) && (ci == 0)); should extract: 1
Include: (cii == 0); should extract: 1
Include: cii; should extract: 0
Include: 0; should extract: 0
Include: (ci == 0); should extract: 1
Include: ci; should extract: 0
Include: 0; should extract: 0
Include: (mk == 0); should extract: 1
Include: mk; should extract: 0
Include: 0; should extract: 0
Include: (ky == 0); should extract: 1
Include: ky; should extract: 0
Include: 0; should extract: 0
Canonical form without lets ((kx == 0) && ((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)))
0: kx, 0
1: 0, 0
2: (kx == 0), 1
3: cii, 0
4: (cii == 0), 1
5: ci, 0
6: (ci == 0), 1
7: ((cii == 0) && (ci == 0)), 1
8: mk, 0
9: (mk == 0), 1
10: (((cii == 0) && (ci == 0)) && (mk == 0)), 1
11: ky, 0
12: (ky == 0), 1
13: ((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)), 1
14: ((kx == 0) && ((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0))), 1
With variables ((kx == 0) && ((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)))
With lets: ((kx == 0) && ((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)))
Solved expr for kx :
  (((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) && (kx == 0))
  ((kx == 0) && ((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)))
Mutating !(((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) && (kx == 0)) (0)
Mutating (((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) && (kx == 0)) (0)
Mutating ((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) (0)
Mutating (((cii == 0) && (ci == 0)) && (mk == 0)) (0)
Mutating ((cii == 0) && (ci == 0)) (0)
Mutating (cii == 0) (0)
Mutating cii (0)
(Miss) Rewrote cii -> cii (1)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (cii == 0) -> (cii == 0) (1)
Mutating (ci == 0) (0)
Mutating ci (0)
(Miss) Rewrote ci -> ci (0)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (ci == 0) -> (ci == 0) (0)
(Miss) Rewrote ((cii == 0) && (ci == 0)) -> ((cii == 0) && (ci == 0)) (1)
Mutating (mk == 0) (0)
Mutating mk (0)
(Miss) Rewrote mk -> mk (0)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (mk == 0) -> (mk == 0) (0)
Mutating ((cii == 0) && ((ci == 0) && (mk == 0))) (1)
(Hit) Rewrote (cii == 0) -> (cii == 0) (1)
Mutating ((ci == 0) && (mk == 0)) (0)
(Hit) Rewrote (ci == 0) -> (ci == 0) (0)
(Hit) Rewrote (mk == 0) -> (mk == 0) (0)
(Miss) Rewrote ((ci == 0) && (mk == 0)) -> ((ci == 0) && (mk == 0)) (0)
(Miss) Rewrote ((cii == 0) && ((ci == 0) && (mk == 0))) -> ((cii == 0) && ((ci == 0) && (mk == 0))) (1)
(Miss) Rewrote (((cii == 0) && (ci == 0)) && (mk == 0)) -> ((cii == 0) && ((ci == 0) && (mk == 0))) (1)
Mutating (ky == 0) (0)
Mutating ky (0)
(Miss) Rewrote ky -> ky (0)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (ky == 0) -> (ky == 0) (0)
Mutating ((cii == 0) && (((ci == 0) && (mk == 0)) && (ky == 0))) (1)
(Hit) Rewrote (cii == 0) -> (cii == 0) (1)
Mutating (((ci == 0) && (mk == 0)) && (ky == 0)) (0)
(Hit) Rewrote ((ci == 0) && (mk == 0)) -> ((ci == 0) && (mk == 0)) (0)
(Hit) Rewrote (ky == 0) -> (ky == 0) (0)
(Miss) Rewrote (((ci == 0) && (mk == 0)) && (ky == 0)) -> (((ci == 0) && (mk == 0)) && (ky == 0)) (0)
(Miss) Rewrote ((cii == 0) && (((ci == 0) && (mk == 0)) && (ky == 0))) -> ((cii == 0) && (((ci == 0) && (mk == 0)) && (ky == 0))) (1)
(Miss) Rewrote ((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) -> ((cii == 0) && (((ci == 0) && (mk == 0)) && (ky == 0))) (1)
Mutating (kx == 0) (0)
Mutating kx (0)
(Miss) Rewrote kx -> kx (0)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (kx == 0) -> (kx == 0) (0)
Mutating ((cii == 0) && ((((ci == 0) && (mk == 0)) && (ky == 0)) && (kx == 0))) (1)
(Hit) Rewrote (cii == 0) -> (cii == 0) (1)
Mutating ((((ci == 0) && (mk == 0)) && (ky == 0)) && (kx == 0)) (0)
(Hit) Rewrote (((ci == 0) && (mk == 0)) && (ky == 0)) -> (((ci == 0) && (mk == 0)) && (ky == 0)) (0)
(Hit) Rewrote (kx == 0) -> (kx == 0) (0)
(Miss) Rewrote ((((ci == 0) && (mk == 0)) && (ky == 0)) && (kx == 0)) -> ((((ci == 0) && (mk == 0)) && (ky == 0)) && (kx == 0)) (0)
(Miss) Rewrote ((cii == 0) && ((((ci == 0) && (mk == 0)) && (ky == 0)) && (kx == 0))) -> ((cii == 0) && ((((ci == 0) && (mk == 0)) && (ky == 0)) && (kx == 0))) (1)
(Miss) Rewrote (((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) && (kx == 0)) -> ((cii == 0) && ((((ci == 0) && (mk == 0)) && (ky == 0)) && (kx == 0))) (1)
(Miss) Rewrote !(((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) && (kx == 0)) -> !((cii == 0) && ((((ci == 0) && (mk == 0)) && (ky == 0)) && (kx == 0))) (1)



Input to CSE !((cii == 0) && ((((ci == 0) && (mk == 0)) && (ky == 0)) && (kx == 0)))
After removing lets: !((cii == 0) && ((((ci == 0) && (mk == 0)) && (ky == 0)) && (kx == 0)))
Include: !((cii == 0) && ((((ci == 0) && (mk == 0)) && (ky == 0)) && (kx == 0))); should extract: 1
Include: ((cii == 0) && ((((ci == 0) && (mk == 0)) && (ky == 0)) && (kx == 0))); should extract: 1
Include: (cii == 0); should extract: 1
Include: cii; should extract: 0
Include: 0; should extract: 0
Include: ((((ci == 0) && (mk == 0)) && (ky == 0)) && (kx == 0)); should extract: 1
Include: (((ci == 0) && (mk == 0)) && (ky == 0)); should extract: 1
Include: ((ci == 0) && (mk == 0)); should extract: 1
Include: (ci == 0); should extract: 1
Include: ci; should extract: 0
Include: 0; should extract: 0
Include: (mk == 0); should extract: 1
Include: mk; should extract: 0
Include: 0; should extract: 0
Include: (ky == 0); should extract: 1
Include: ky; should extract: 0
Include: 0; should extract: 0
Include: (kx == 0); should extract: 1
Include: kx; should extract: 0
Include: 0; should extract: 0
Canonical form without lets !((cii == 0) && ((((ci == 0) && (mk == 0)) && (ky == 0)) && (kx == 0)))
0: cii, 0
1: 0, 0
2: (cii == 0), 1
3: ci, 0
4: (ci == 0), 1
5: mk, 0
6: (mk == 0), 1
7: ((ci == 0) && (mk == 0)), 1
8: ky, 0
9: (ky == 0), 1
10: (((ci == 0) && (mk == 0)) && (ky == 0)), 1
11: kx, 0
12: (kx == 0), 1
13: ((((ci == 0) && (mk == 0)) && (ky == 0)) && (kx == 0)), 1
14: ((cii == 0) && ((((ci == 0) && (mk == 0)) && (ky == 0)) && (kx == 0))), 1
15: !((cii == 0) && ((((ci == 0) && (mk == 0)) && (ky == 0)) && (kx == 0))), 1
With variables !((cii == 0) && ((((ci == 0) && (mk == 0)) && (ky == 0)) && (kx == 0)))
With lets: !((cii == 0) && ((((ci == 0) && (mk == 0)) && (ky == 0)) && (kx == 0)))
Solved expr for cii :
  !(((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) && (kx == 0))
  !((cii == 0) && ((((ci == 0) && (mk == 0)) && (ky == 0)) && (kx == 0)))
Mutating !(((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) && (kx == 0)) (0)
Mutating (((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) && (kx == 0)) (0)
Mutating ((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) (0)
Mutating (((cii == 0) && (ci == 0)) && (mk == 0)) (0)
Mutating ((cii == 0) && (ci == 0)) (0)
Mutating (cii == 0) (0)
Mutating cii (0)
(Miss) Rewrote cii -> cii (0)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (cii == 0) -> (cii == 0) (0)
Mutating (ci == 0) (0)
Mutating ci (0)
(Miss) Rewrote ci -> ci (1)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (ci == 0) -> (ci == 0) (1)
(Miss) Rewrote ((cii == 0) && (ci == 0)) -> ((ci == 0) && (cii == 0)) (1)
Mutating (mk == 0) (0)
Mutating mk (0)
(Miss) Rewrote mk -> mk (0)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (mk == 0) -> (mk == 0) (0)
Mutating ((ci == 0) && ((cii == 0) && (mk == 0))) (1)
(Hit) Rewrote (ci == 0) -> (ci == 0) (1)
Mutating ((cii == 0) && (mk == 0)) (0)
(Hit) Rewrote (cii == 0) -> (cii == 0) (0)
(Hit) Rewrote (mk == 0) -> (mk == 0) (0)
(Miss) Rewrote ((cii == 0) && (mk == 0)) -> ((cii == 0) && (mk == 0)) (0)
(Miss) Rewrote ((ci == 0) && ((cii == 0) && (mk == 0))) -> ((ci == 0) && ((cii == 0) && (mk == 0))) (1)
(Miss) Rewrote (((cii == 0) && (ci == 0)) && (mk == 0)) -> ((ci == 0) && ((cii == 0) && (mk == 0))) (1)
Mutating (ky == 0) (0)
Mutating ky (0)
(Miss) Rewrote ky -> ky (0)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (ky == 0) -> (ky == 0) (0)
Mutating ((ci == 0) && (((cii == 0) && (mk == 0)) && (ky == 0))) (1)
(Hit) Rewrote (ci == 0) -> (ci == 0) (1)
Mutating (((cii == 0) && (mk == 0)) && (ky == 0)) (0)
(Hit) Rewrote ((cii == 0) && (mk == 0)) -> ((cii == 0) && (mk == 0)) (0)
(Hit) Rewrote (ky == 0) -> (ky == 0) (0)
(Miss) Rewrote (((cii == 0) && (mk == 0)) && (ky == 0)) -> (((cii == 0) && (mk == 0)) && (ky == 0)) (0)
(Miss) Rewrote ((ci == 0) && (((cii == 0) && (mk == 0)) && (ky == 0))) -> ((ci == 0) && (((cii == 0) && (mk == 0)) && (ky == 0))) (1)
(Miss) Rewrote ((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) -> ((ci == 0) && (((cii == 0) && (mk == 0)) && (ky == 0))) (1)
Mutating (kx == 0) (0)
Mutating kx (0)
(Miss) Rewrote kx -> kx (0)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (kx == 0) -> (kx == 0) (0)
Mutating ((ci == 0) && ((((cii == 0) && (mk == 0)) && (ky == 0)) && (kx == 0))) (1)
(Hit) Rewrote (ci == 0) -> (ci == 0) (1)
Mutating ((((cii == 0) && (mk == 0)) && (ky == 0)) && (kx == 0)) (0)
(Hit) Rewrote (((cii == 0) && (mk == 0)) && (ky == 0)) -> (((cii == 0) && (mk == 0)) && (ky == 0)) (0)
(Hit) Rewrote (kx == 0) -> (kx == 0) (0)
(Miss) Rewrote ((((cii == 0) && (mk == 0)) && (ky == 0)) && (kx == 0)) -> ((((cii == 0) && (mk == 0)) && (ky == 0)) && (kx == 0)) (0)
(Miss) Rewrote ((ci == 0) && ((((cii == 0) && (mk == 0)) && (ky == 0)) && (kx == 0))) -> ((ci == 0) && ((((cii == 0) && (mk == 0)) && (ky == 0)) && (kx == 0))) (1)
(Miss) Rewrote (((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) && (kx == 0)) -> ((ci == 0) && ((((cii == 0) && (mk == 0)) && (ky == 0)) && (kx == 0))) (1)
(Miss) Rewrote !(((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) && (kx == 0)) -> !((ci == 0) && ((((cii == 0) && (mk == 0)) && (ky == 0)) && (kx == 0))) (1)



Input to CSE !((ci == 0) && ((((cii == 0) && (mk == 0)) && (ky == 0)) && (kx == 0)))
After removing lets: !((ci == 0) && ((((cii == 0) && (mk == 0)) && (ky == 0)) && (kx == 0)))
Include: !((ci == 0) && ((((cii == 0) && (mk == 0)) && (ky == 0)) && (kx == 0))); should extract: 1
Include: ((ci == 0) && ((((cii == 0) && (mk == 0)) && (ky == 0)) && (kx == 0))); should extract: 1
Include: (ci == 0); should extract: 1
Include: ci; should extract: 0
Include: 0; should extract: 0
Include: ((((cii == 0) && (mk == 0)) && (ky == 0)) && (kx == 0)); should extract: 1
Include: (((cii == 0) && (mk == 0)) && (ky == 0)); should extract: 1
Include: ((cii == 0) && (mk == 0)); should extract: 1
Include: (cii == 0); should extract: 1
Include: cii; should extract: 0
Include: 0; should extract: 0
Include: (mk == 0); should extract: 1
Include: mk; should extract: 0
Include: 0; should extract: 0
Include: (ky == 0); should extract: 1
Include: ky; should extract: 0
Include: 0; should extract: 0
Include: (kx == 0); should extract: 1
Include: kx; should extract: 0
Include: 0; should extract: 0
Canonical form without lets !((ci == 0) && ((((cii == 0) && (mk == 0)) && (ky == 0)) && (kx == 0)))
0: ci, 0
1: 0, 0
2: (ci == 0), 1
3: cii, 0
4: (cii == 0), 1
5: mk, 0
6: (mk == 0), 1
7: ((cii == 0) && (mk == 0)), 1
8: ky, 0
9: (ky == 0), 1
10: (((cii == 0) && (mk == 0)) && (ky == 0)), 1
11: kx, 0
12: (kx == 0), 1
13: ((((cii == 0) && (mk == 0)) && (ky == 0)) && (kx == 0)), 1
14: ((ci == 0) && ((((cii == 0) && (mk == 0)) && (ky == 0)) && (kx == 0))), 1
15: !((ci == 0) && ((((cii == 0) && (mk == 0)) && (ky == 0)) && (kx == 0))), 1
With variables !((ci == 0) && ((((cii == 0) && (mk == 0)) && (ky == 0)) && (kx == 0)))
With lets: !((ci == 0) && ((((cii == 0) && (mk == 0)) && (ky == 0)) && (kx == 0)))
Solved expr for ci :
  !(((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) && (kx == 0))
  !((ci == 0) && ((((cii == 0) && (mk == 0)) && (ky == 0)) && (kx == 0)))
Mutating !(((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) && (kx == 0)) (0)
Mutating (((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) && (kx == 0)) (0)
Mutating ((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) (0)
Mutating (((cii == 0) && (ci == 0)) && (mk == 0)) (0)
Mutating ((cii == 0) && (ci == 0)) (0)
Mutating (cii == 0) (0)
Mutating cii (0)
(Miss) Rewrote cii -> cii (0)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (cii == 0) -> (cii == 0) (0)
Mutating (ci == 0) (0)
Mutating ci (0)
(Miss) Rewrote ci -> ci (0)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (ci == 0) -> (ci == 0) (0)
(Miss) Rewrote ((cii == 0) && (ci == 0)) -> ((cii == 0) && (ci == 0)) (0)
Mutating (mk == 0) (0)
Mutating mk (0)
(Miss) Rewrote mk -> mk (1)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (mk == 0) -> (mk == 0) (1)
(Miss) Rewrote (((cii == 0) && (ci == 0)) && (mk == 0)) -> ((mk == 0) && ((cii == 0) && (ci == 0))) (1)
Mutating (ky == 0) (0)
Mutating ky (0)
(Miss) Rewrote ky -> ky (0)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (ky == 0) -> (ky == 0) (0)
Mutating ((mk == 0) && (((cii == 0) && (ci == 0)) && (ky == 0))) (1)
(Hit) Rewrote (mk == 0) -> (mk == 0) (1)
Mutating (((cii == 0) && (ci == 0)) && (ky == 0)) (0)
(Hit) Rewrote ((cii == 0) && (ci == 0)) -> ((cii == 0) && (ci == 0)) (0)
(Hit) Rewrote (ky == 0) -> (ky == 0) (0)
(Miss) Rewrote (((cii == 0) && (ci == 0)) && (ky == 0)) -> (((cii == 0) && (ci == 0)) && (ky == 0)) (0)
(Miss) Rewrote ((mk == 0) && (((cii == 0) && (ci == 0)) && (ky == 0))) -> ((mk == 0) && (((cii == 0) && (ci == 0)) && (ky == 0))) (1)
(Miss) Rewrote ((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) -> ((mk == 0) && (((cii == 0) && (ci == 0)) && (ky == 0))) (1)
Mutating (kx == 0) (0)
Mutating kx (0)
(Miss) Rewrote kx -> kx (0)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (kx == 0) -> (kx == 0) (0)
Mutating ((mk == 0) && ((((cii == 0) && (ci == 0)) && (ky == 0)) && (kx == 0))) (1)
(Hit) Rewrote (mk == 0) -> (mk == 0) (1)
Mutating ((((cii == 0) && (ci == 0)) && (ky == 0)) && (kx == 0)) (0)
(Hit) Rewrote (((cii == 0) && (ci == 0)) && (ky == 0)) -> (((cii == 0) && (ci == 0)) && (ky == 0)) (0)
(Hit) Rewrote (kx == 0) -> (kx == 0) (0)
(Miss) Rewrote ((((cii == 0) && (ci == 0)) && (ky == 0)) && (kx == 0)) -> ((((cii == 0) && (ci == 0)) && (ky == 0)) && (kx == 0)) (0)
(Miss) Rewrote ((mk == 0) && ((((cii == 0) && (ci == 0)) && (ky == 0)) && (kx == 0))) -> ((mk == 0) && ((((cii == 0) && (ci == 0)) && (ky == 0)) && (kx == 0))) (1)
(Miss) Rewrote (((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) && (kx == 0)) -> ((mk == 0) && ((((cii == 0) && (ci == 0)) && (ky == 0)) && (kx == 0))) (1)
(Miss) Rewrote !(((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) && (kx == 0)) -> !((mk == 0) && ((((cii == 0) && (ci == 0)) && (ky == 0)) && (kx == 0))) (1)



Input to CSE !((mk == 0) && ((((cii == 0) && (ci == 0)) && (ky == 0)) && (kx == 0)))
After removing lets: !((mk == 0) && ((((cii == 0) && (ci == 0)) && (ky == 0)) && (kx == 0)))
Include: !((mk == 0) && ((((cii == 0) && (ci == 0)) && (ky == 0)) && (kx == 0))); should extract: 1
Include: ((mk == 0) && ((((cii == 0) && (ci == 0)) && (ky == 0)) && (kx == 0))); should extract: 1
Include: (mk == 0); should extract: 1
Include: mk; should extract: 0
Include: 0; should extract: 0
Include: ((((cii == 0) && (ci == 0)) && (ky == 0)) && (kx == 0)); should extract: 1
Include: (((cii == 0) && (ci == 0)) && (ky == 0)); should extract: 1
Include: ((cii == 0) && (ci == 0)); should extract: 1
Include: (cii == 0); should extract: 1
Include: cii; should extract: 0
Include: 0; should extract: 0
Include: (ci == 0); should extract: 1
Include: ci; should extract: 0
Include: 0; should extract: 0
Include: (ky == 0); should extract: 1
Include: ky; should extract: 0
Include: 0; should extract: 0
Include: (kx == 0); should extract: 1
Include: kx; should extract: 0
Include: 0; should extract: 0
Canonical form without lets !((mk == 0) && ((((cii == 0) && (ci == 0)) && (ky == 0)) && (kx == 0)))
0: mk, 0
1: 0, 0
2: (mk == 0), 1
3: cii, 0
4: (cii == 0), 1
5: ci, 0
6: (ci == 0), 1
7: ((cii == 0) && (ci == 0)), 1
8: ky, 0
9: (ky == 0), 1
10: (((cii == 0) && (ci == 0)) && (ky == 0)), 1
11: kx, 0
12: (kx == 0), 1
13: ((((cii == 0) && (ci == 0)) && (ky == 0)) && (kx == 0)), 1
14: ((mk == 0) && ((((cii == 0) && (ci == 0)) && (ky == 0)) && (kx == 0))), 1
15: !((mk == 0) && ((((cii == 0) && (ci == 0)) && (ky == 0)) && (kx == 0))), 1
With variables !((mk == 0) && ((((cii == 0) && (ci == 0)) && (ky == 0)) && (kx == 0)))
With lets: !((mk == 0) && ((((cii == 0) && (ci == 0)) && (ky == 0)) && (kx == 0)))
Solved expr for mk :
  !(((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) && (kx == 0))
  !((mk == 0) && ((((cii == 0) && (ci == 0)) && (ky == 0)) && (kx == 0)))
Mutating !(((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) && (kx == 0)) (0)
Mutating (((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) && (kx == 0)) (0)
Mutating ((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) (0)
Mutating (((cii == 0) && (ci == 0)) && (mk == 0)) (0)
Mutating ((cii == 0) && (ci == 0)) (0)
Mutating (cii == 0) (0)
Mutating cii (0)
(Miss) Rewrote cii -> cii (0)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (cii == 0) -> (cii == 0) (0)
Mutating (ci == 0) (0)
Mutating ci (0)
(Miss) Rewrote ci -> ci (0)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (ci == 0) -> (ci == 0) (0)
(Miss) Rewrote ((cii == 0) && (ci == 0)) -> ((cii == 0) && (ci == 0)) (0)
Mutating (mk == 0) (0)
Mutating mk (0)
(Miss) Rewrote mk -> mk (0)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (mk == 0) -> (mk == 0) (0)
(Miss) Rewrote (((cii == 0) && (ci == 0)) && (mk == 0)) -> (((cii == 0) && (ci == 0)) && (mk == 0)) (0)
Mutating (ky == 0) (0)
Mutating ky (0)
(Miss) Rewrote ky -> ky (1)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (ky == 0) -> (ky == 0) (1)
(Miss) Rewrote ((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) -> ((ky == 0) && (((cii == 0) && (ci == 0)) && (mk == 0))) (1)
Mutating (kx == 0) (0)
Mutating kx (0)
(Miss) Rewrote kx -> kx (0)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (kx == 0) -> (kx == 0) (0)
Mutating ((ky == 0) && ((((cii == 0) && (ci == 0)) && (mk == 0)) && (kx == 0))) (1)
(Hit) Rewrote (ky == 0) -> (ky == 0) (1)
Mutating ((((cii == 0) && (ci == 0)) && (mk == 0)) && (kx == 0)) (0)
(Hit) Rewrote (((cii == 0) && (ci == 0)) && (mk == 0)) -> (((cii == 0) && (ci == 0)) && (mk == 0)) (0)
(Hit) Rewrote (kx == 0) -> (kx == 0) (0)
(Miss) Rewrote ((((cii == 0) && (ci == 0)) && (mk == 0)) && (kx == 0)) -> ((((cii == 0) && (ci == 0)) && (mk == 0)) && (kx == 0)) (0)
(Miss) Rewrote ((ky == 0) && ((((cii == 0) && (ci == 0)) && (mk == 0)) && (kx == 0))) -> ((ky == 0) && ((((cii == 0) && (ci == 0)) && (mk == 0)) && (kx == 0))) (1)
(Miss) Rewrote (((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) && (kx == 0)) -> ((ky == 0) && ((((cii == 0) && (ci == 0)) && (mk == 0)) && (kx == 0))) (1)
(Miss) Rewrote !(((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) && (kx == 0)) -> !((ky == 0) && ((((cii == 0) && (ci == 0)) && (mk == 0)) && (kx == 0))) (1)



Input to CSE !((ky == 0) && ((((cii == 0) && (ci == 0)) && (mk == 0)) && (kx == 0)))
After removing lets: !((ky == 0) && ((((cii == 0) && (ci == 0)) && (mk == 0)) && (kx == 0)))
Include: !((ky == 0) && ((((cii == 0) && (ci == 0)) && (mk == 0)) && (kx == 0))); should extract: 1
Include: ((ky == 0) && ((((cii == 0) && (ci == 0)) && (mk == 0)) && (kx == 0))); should extract: 1
Include: (ky == 0); should extract: 1
Include: ky; should extract: 0
Include: 0; should extract: 0
Include: ((((cii == 0) && (ci == 0)) && (mk == 0)) && (kx == 0)); should extract: 1
Include: (((cii == 0) && (ci == 0)) && (mk == 0)); should extract: 1
Include: ((cii == 0) && (ci == 0)); should extract: 1
Include: (cii == 0); should extract: 1
Include: cii; should extract: 0
Include: 0; should extract: 0
Include: (ci == 0); should extract: 1
Include: ci; should extract: 0
Include: 0; should extract: 0
Include: (mk == 0); should extract: 1
Include: mk; should extract: 0
Include: 0; should extract: 0
Include: (kx == 0); should extract: 1
Include: kx; should extract: 0
Include: 0; should extract: 0
Canonical form without lets !((ky == 0) && ((((cii == 0) && (ci == 0)) && (mk == 0)) && (kx == 0)))
0: ky, 0
1: 0, 0
2: (ky == 0), 1
3: cii, 0
4: (cii == 0), 1
5: ci, 0
6: (ci == 0), 1
7: ((cii == 0) && (ci == 0)), 1
8: mk, 0
9: (mk == 0), 1
10: (((cii == 0) && (ci == 0)) && (mk == 0)), 1
11: kx, 0
12: (kx == 0), 1
13: ((((cii == 0) && (ci == 0)) && (mk == 0)) && (kx == 0)), 1
14: ((ky == 0) && ((((cii == 0) && (ci == 0)) && (mk == 0)) && (kx == 0))), 1
15: !((ky == 0) && ((((cii == 0) && (ci == 0)) && (mk == 0)) && (kx == 0))), 1
With variables !((ky == 0) && ((((cii == 0) && (ci == 0)) && (mk == 0)) && (kx == 0)))
With lets: !((ky == 0) && ((((cii == 0) && (ci == 0)) && (mk == 0)) && (kx == 0)))
Solved expr for ky :
  !(((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) && (kx == 0))
  !((ky == 0) && ((((cii == 0) && (ci == 0)) && (mk == 0)) && (kx == 0)))
Mutating !(((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) && (kx == 0)) (0)
Mutating (((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) && (kx == 0)) (0)
Mutating ((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) (0)
Mutating (((cii == 0) && (ci == 0)) && (mk == 0)) (0)
Mutating ((cii == 0) && (ci == 0)) (0)
Mutating (cii == 0) (0)
Mutating cii (0)
(Miss) Rewrote cii -> cii (0)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (cii == 0) -> (cii == 0) (0)
Mutating (ci == 0) (0)
Mutating ci (0)
(Miss) Rewrote ci -> ci (0)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (ci == 0) -> (ci == 0) (0)
(Miss) Rewrote ((cii == 0) && (ci == 0)) -> ((cii == 0) && (ci == 0)) (0)
Mutating (mk == 0) (0)
Mutating mk (0)
(Miss) Rewrote mk -> mk (0)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (mk == 0) -> (mk == 0) (0)
(Miss) Rewrote (((cii == 0) && (ci == 0)) && (mk == 0)) -> (((cii == 0) && (ci == 0)) && (mk == 0)) (0)
Mutating (ky == 0) (0)
Mutating ky (0)
(Miss) Rewrote ky -> ky (0)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (ky == 0) -> (ky == 0) (0)
(Miss) Rewrote ((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) -> ((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) (0)
Mutating (kx == 0) (0)
Mutating kx (0)
(Miss) Rewrote kx -> kx (1)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (kx == 0) -> (kx == 0) (1)
(Miss) Rewrote (((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) && (kx == 0)) -> ((kx == 0) && ((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0))) (1)
(Miss) Rewrote !(((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) && (kx == 0)) -> !((kx == 0) && ((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0))) (1)



Input to CSE !((kx == 0) && ((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)))
After removing lets: !((kx == 0) && ((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)))
Include: !((kx == 0) && ((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0))); should extract: 1
Include: ((kx == 0) && ((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0))); should extract: 1
Include: (kx == 0); should extract: 1
Include: kx; should extract: 0
Include: 0; should extract: 0
Include: ((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)); should extract: 1
Include: (((cii == 0) && (ci == 0)) && (mk == 0)); should extract: 1
Include: ((cii == 0) && (ci == 0)); should extract: 1
Include: (cii == 0); should extract: 1
Include: cii; should extract: 0
Include: 0; should extract: 0
Include: (ci == 0); should extract: 1
Include: ci; should extract: 0
Include: 0; should extract: 0
Include: (mk == 0); should extract: 1
Include: mk; should extract: 0
Include: 0; should extract: 0
Include: (ky == 0); should extract: 1
Include: ky; should extract: 0
Include: 0; should extract: 0
Canonical form without lets !((kx == 0) && ((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)))
0: kx, 0
1: 0, 0
2: (kx == 0), 1
3: cii, 0
4: (cii == 0), 1
5: ci, 0
6: (ci == 0), 1
7: ((cii == 0) && (ci == 0)), 1
8: mk, 0
9: (mk == 0), 1
10: (((cii == 0) && (ci == 0)) && (mk == 0)), 1
11: ky, 0
12: (ky == 0), 1
13: ((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)), 1
14: ((kx == 0) && ((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0))), 1
15: !((kx == 0) && ((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0))), 1
With variables !((kx == 0) && ((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)))
With lets: !((kx == 0) && ((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)))
Solved expr for kx :
  !(((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)) && (kx == 0))
  !((kx == 0) && ((((cii == 0) && (ci == 0)) && (mk == 0)) && (ky == 0)))
Mutating (cii == 0) (0)
Mutating cii (0)
(Miss) Rewrote cii -> cii (1)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (cii == 0) -> (cii == 0) (1)



Input to CSE (cii == 0)
After removing lets: (cii == 0)
Include: (cii == 0); should extract: 1
Include: cii; should extract: 0
Include: 0; should extract: 0
Canonical form without lets (cii == 0)
0: cii, 0
1: 0, 0
2: (cii == 0), 1
With variables (cii == 0)
With lets: (cii == 0)
Solved expr for cii :
  (cii == 0)
  (cii == 0)
bounds_of_expr_in_scope 0 = 0, 0
Mutating (ky == 0) (0)
Mutating ky (0)
(Miss) Rewrote ky -> ky (1)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (ky == 0) -> (ky == 0) (1)



Input to CSE (ky == 0)
After removing lets: (ky == 0)
Include: (ky == 0); should extract: 1
Include: ky; should extract: 0
Include: 0; should extract: 0
Canonical form without lets (ky == 0)
0: ky, 0
1: 0, 0
2: (ky == 0), 1
With variables (ky == 0)
With lets: (ky == 0)
Solved expr for ky :
  (ky == 0)
  (ky == 0)
bounds_of_expr_in_scope 0 = 0, 0
Mutating (kx == 0) (0)
Mutating kx (0)
(Miss) Rewrote kx -> kx (1)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (kx == 0) -> (kx == 0) (1)



Input to CSE (kx == 0)
After removing lets: (kx == 0)
Include: (kx == 0); should extract: 1
Include: kx; should extract: 0
Include: 0; should extract: 0
Canonical form without lets (kx == 0)
0: kx, 0
1: 0, 0
2: (kx == 0), 1
With variables (kx == 0)
With lets: (kx == 0)
Solved expr for kx :
  (kx == 0)
  (kx == 0)
bounds_of_expr_in_scope 0 = 0, 0
Mutating (ci == 0) (0)
Mutating ci (0)
(Miss) Rewrote ci -> ci (1)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (ci == 0) -> (ci == 0) (1)



Input to CSE (ci == 0)
After removing lets: (ci == 0)
Include: (ci == 0); should extract: 1
Include: ci; should extract: 0
Include: 0; should extract: 0
Canonical form without lets (ci == 0)
0: ci, 0
1: 0, 0
2: (ci == 0), 1
With variables (ci == 0)
With lets: (ci == 0)
Solved expr for ci :
  (ci == 0)
  (ci == 0)
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope ((cii + 4) - 1) = (max(C.s0.cii.min, 0) + 3), (min(C.s0.cii.max, 0) + 3)
bounds_of_expr_in_scope cooo = C.s0.cooo.min, C.s0.cooo.max
bounds_of_expr_in_scope yyy_xxx = C.s0.yyy_xxx.min, C.s0.yyy_xxx.max
bounds_of_expr_in_scope yy_xx = C.s0.yy_xx.min, C.s0.yy_xx.max
bounds_of_expr_in_scope y_x = C.s0.y_x.min, C.s0.y_x.max
bounds_of_expr_in_scope my = C.s0.my.min, C.s0.my.max
bounds_of_expr_in_scope mx = C.s0.mx.min, C.s0.mx.max
bounds_of_expr_in_scope coo = C.s0.coo.min, C.s0.coo.max
bounds_of_expr_in_scope nn = C.s0.nn.min, C.s0.nn.max
bounds_of_expr_in_scope ((ky + 3) - 1) = (max(C.s0.ky.min, 0) + 2), (min(C.s0.ky.max, 0) + 2)
bounds_of_expr_in_scope ((kx + 3) - 1) = (max(C.s0.kx.min, 0) + 2), (min(C.s0.kx.max, 0) + 2)
bounds_of_expr_in_scope ((ci + 8) - 1) = (max(C.s0.ci.min, 0) + 7), (min(C.s0.ci.max, 0) + 7)
bounds_of_expr_in_scope (mk - 1) = (C.s0.mk.min + -1), (C.s0.mk.max + -1)
bounds_of_expr_in_scope co = C.s0.co.min, C.s0.co.max
bounds_of_expr_in_scope n = C.s0.n.min, C.s0.n.max
Mutating (ci != 0) (0)
Mutating ci (0)
(Miss) Rewrote ci -> ci (1)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (ci != 0) -> (ci != 0) (1)



Input to CSE (ci != 0)
After removing lets: (ci != 0)
Include: (ci != 0); should extract: 1
Include: ci; should extract: 0
Include: 0; should extract: 0
Canonical form without lets (ci != 0)
0: ci, 0
1: 0, 0
2: (ci != 0), 1
With variables (ci != 0)
With lets: (ci != 0)
Solved expr for ci :
  (ci != 0)
  (ci != 0)
bounds_of_expr_in_scope ((cii + 4) - 1) = (max(C.s0.cii.min, 0) + 3), (min(C.s0.cii.max, 0) + 3)
bounds_of_expr_in_scope cooo = C.s0.cooo.min, C.s0.cooo.max
bounds_of_expr_in_scope yyy_xxx = C.s0.yyy_xxx.min, C.s0.yyy_xxx.max
bounds_of_expr_in_scope yy_xx = C.s0.yy_xx.min, C.s0.yy_xx.max
bounds_of_expr_in_scope y_x = C.s0.y_x.min, C.s0.y_x.max
bounds_of_expr_in_scope my = C.s0.my.min, C.s0.my.max
bounds_of_expr_in_scope mx = C.s0.mx.min, C.s0.mx.max
bounds_of_expr_in_scope coo = C.s0.coo.min, C.s0.coo.max
bounds_of_expr_in_scope nn = C.s0.nn.min, C.s0.nn.max
bounds_of_expr_in_scope ((ky + 3) - 1) = (max(C.s0.ky.min, 0) + 2), (min(C.s0.ky.max, 0) + 2)
bounds_of_expr_in_scope ((kx + 3) - 1) = (max(C.s0.kx.min, 0) + 2), (min(C.s0.kx.max, 0) + 2)
bounds_of_expr_in_scope (ci - 1) = (C.s0.ci.min + -1), (C.s0.ci.max + -1)
bounds_of_expr_in_scope mk = C.s0.mk.min, C.s0.mk.max
bounds_of_expr_in_scope co = C.s0.co.min, C.s0.co.max
bounds_of_expr_in_scope n = C.s0.n.min, C.s0.n.max
Mutating (kx != 0) (0)
Mutating kx (0)
(Miss) Rewrote kx -> kx (1)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (kx != 0) -> (kx != 0) (1)



Input to CSE (kx != 0)
After removing lets: (kx != 0)
Include: (kx != 0); should extract: 1
Include: kx; should extract: 0
Include: 0; should extract: 0
Canonical form without lets (kx != 0)
0: kx, 0
1: 0, 0
2: (kx != 0), 1
With variables (kx != 0)
With lets: (kx != 0)
Solved expr for kx :
  (kx != 0)
  (kx != 0)
bounds_of_expr_in_scope ((cii + 4) - 1) = (max(C.s0.cii.min, 0) + 3), (min(C.s0.cii.max, 0) + 3)
bounds_of_expr_in_scope cooo = C.s0.cooo.min, C.s0.cooo.max
bounds_of_expr_in_scope yyy_xxx = C.s0.yyy_xxx.min, C.s0.yyy_xxx.max
bounds_of_expr_in_scope yy_xx = C.s0.yy_xx.min, C.s0.yy_xx.max
bounds_of_expr_in_scope y_x = C.s0.y_x.min, C.s0.y_x.max
bounds_of_expr_in_scope my = C.s0.my.min, C.s0.my.max
bounds_of_expr_in_scope mx = C.s0.mx.min, C.s0.mx.max
bounds_of_expr_in_scope coo = C.s0.coo.min, C.s0.coo.max
bounds_of_expr_in_scope nn = C.s0.nn.min, C.s0.nn.max
bounds_of_expr_in_scope ((ky + 3) - 1) = (max(C.s0.ky.min, 0) + 2), (min(C.s0.ky.max, 0) + 2)
bounds_of_expr_in_scope (kx - 1) = (C.s0.kx.min + -1), (C.s0.kx.max + -1)
bounds_of_expr_in_scope ci = C.s0.ci.min, C.s0.ci.max
bounds_of_expr_in_scope mk = C.s0.mk.min, C.s0.mk.max
bounds_of_expr_in_scope co = C.s0.co.min, C.s0.co.max
bounds_of_expr_in_scope n = C.s0.n.min, C.s0.n.max
Mutating (ky != 0) (0)
Mutating ky (0)
(Miss) Rewrote ky -> ky (1)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (ky != 0) -> (ky != 0) (1)



Input to CSE (ky != 0)
After removing lets: (ky != 0)
Include: (ky != 0); should extract: 1
Include: ky; should extract: 0
Include: 0; should extract: 0
Canonical form without lets (ky != 0)
0: ky, 0
1: 0, 0
2: (ky != 0), 1
With variables (ky != 0)
With lets: (ky != 0)
Solved expr for ky :
  (ky != 0)
  (ky != 0)
bounds_of_expr_in_scope ((cii + 4) - 1) = (max(C.s0.cii.min, 0) + 3), (min(C.s0.cii.max, 0) + 3)
bounds_of_expr_in_scope cooo = C.s0.cooo.min, C.s0.cooo.max
bounds_of_expr_in_scope yyy_xxx = C.s0.yyy_xxx.min, C.s0.yyy_xxx.max
bounds_of_expr_in_scope yy_xx = C.s0.yy_xx.min, C.s0.yy_xx.max
bounds_of_expr_in_scope y_x = C.s0.y_x.min, C.s0.y_x.max
bounds_of_expr_in_scope my = C.s0.my.min, C.s0.my.max
bounds_of_expr_in_scope mx = C.s0.mx.min, C.s0.mx.max
bounds_of_expr_in_scope coo = C.s0.coo.min, C.s0.coo.max
bounds_of_expr_in_scope nn = C.s0.nn.min, C.s0.nn.max
bounds_of_expr_in_scope (ky - 1) = (C.s0.ky.min + -1), (C.s0.ky.max + -1)
bounds_of_expr_in_scope kx = C.s0.kx.min, C.s0.kx.max
bounds_of_expr_in_scope ci = C.s0.ci.min, C.s0.ci.max
bounds_of_expr_in_scope mk = C.s0.mk.min, C.s0.mk.max
bounds_of_expr_in_scope co = C.s0.co.min, C.s0.co.max
bounds_of_expr_in_scope n = C.s0.n.min, C.s0.n.max
Mutating (cii != 0) (0)
Mutating cii (0)
(Miss) Rewrote cii -> cii (1)
Mutating 0 (0)
(Miss) Rewrote 0 -> 0 (0)
(Miss) Rewrote (cii != 0) -> (cii != 0) (1)



Input to CSE (cii != 0)
After removing lets: (cii != 0)
Include: (cii != 0); should extract: 1
Include: cii; should extract: 0
Include: 0; should extract: 0
Canonical form without lets (cii != 0)
0: cii, 0
1: 0, 0
2: (cii != 0), 1
With variables (cii != 0)
With lets: (cii != 0)
Solved expr for cii :
  (cii != 0)
  (cii != 0)
bounds_of_expr_in_scope (cii - 1) = (C.s0.cii.min + -1), (C.s0.cii.max + -1)
bounds_of_expr_in_scope cooo = C.s0.cooo.min, C.s0.cooo.max
bounds_of_expr_in_scope yyy_xxx = C.s0.yyy_xxx.min, C.s0.yyy_xxx.max
bounds_of_expr_in_scope yy_xx = C.s0.yy_xx.min, C.s0.yy_xx.max
bounds_of_expr_in_scope y_x = C.s0.y_x.min, C.s0.y_x.max
bounds_of_expr_in_scope my = C.s0.my.min, C.s0.my.max
bounds_of_expr_in_scope mx = C.s0.mx.min, C.s0.mx.max
bounds_of_expr_in_scope coo = C.s0.coo.min, C.s0.coo.max
bounds_of_expr_in_scope nn = C.s0.nn.min, C.s0.nn.max
bounds_of_expr_in_scope ky = C.s0.ky.min, C.s0.ky.max
bounds_of_expr_in_scope kx = C.s0.kx.min, C.s0.kx.max
bounds_of_expr_in_scope ci = C.s0.ci.min, C.s0.ci.max
bounds_of_expr_in_scope mk = C.s0.mk.min, C.s0.mk.max
bounds_of_expr_in_scope co = C.s0.co.min, C.s0.co.max
bounds_of_expr_in_scope n = C.s0.n.min, C.s0.n.max
bounds_of_expr_in_scope cii = C.s0.cii.min, C.s0.cii.max
bounds_of_expr_in_scope cooo = C.s0.cooo.min, C.s0.cooo.max
bounds_of_expr_in_scope yyy_xxx = C.s0.yyy_xxx.min, C.s0.yyy_xxx.max
bounds_of_expr_in_scope yy_xx = C.s0.yy_xx.min, C.s0.yy_xx.max
bounds_of_expr_in_scope y_x = C.s0.y_x.min, C.s0.y_x.max
bounds_of_expr_in_scope my = C.s0.my.min, C.s0.my.max
bounds_of_expr_in_scope mx = C.s0.mx.min, C.s0.mx.max
bounds_of_expr_in_scope coo = C.s0.coo.min, C.s0.coo.max
bounds_of_expr_in_scope nn = C.s0.nn.min, C.s0.nn.max
bounds_of_expr_in_scope ky = C.s0.ky.min, C.s0.ky.max
bounds_of_expr_in_scope kx = C.s0.kx.min, C.s0.kx.max
bounds_of_expr_in_scope ci = C.s0.ci.min, C.s0.ci.max
bounds_of_expr_in_scope mk = C.s0.mk.min, C.s0.mk.max
bounds_of_expr_in_scope co = C.s0.co.min, C.s0.co.max
bounds_of_expr_in_scope n = C.s0.n.min, C.s0.n.max
bounds_of_expr_in_scope cii = C.s0.cii.min, C.s0.cii.max
bounds_of_expr_in_scope cooo = C.s0.cooo.min, C.s0.cooo.max
bounds_of_expr_in_scope yyy_xxx = C.s0.yyy_xxx.min, C.s0.yyy_xxx.max
bounds_of_expr_in_scope yy_xx = C.s0.yy_xx.min, C.s0.yy_xx.max
bounds_of_expr_in_scope y_x = C.s0.y_x.min, C.s0.y_x.max
bounds_of_expr_in_scope my = C.s0.my.min, C.s0.my.max
bounds_of_expr_in_scope mx = C.s0.mx.min, C.s0.mx.max
bounds_of_expr_in_scope coo = C.s0.coo.min, C.s0.coo.max
bounds_of_expr_in_scope nn = C.s0.nn.min, C.s0.nn.max
bounds_of_expr_in_scope ky = C.s0.ky.min, C.s0.ky.max
bounds_of_expr_in_scope kx = C.s0.kx.min, C.s0.kx.max
bounds_of_expr_in_scope ci = C.s0.ci.min, C.s0.ci.max
bounds_of_expr_in_scope mk = C.s0.mk.min, C.s0.mk.max
bounds_of_expr_in_scope co = C.s0.co.min, C.s0.co.max
bounds_of_expr_in_scope n = C.s0.n.min, C.s0.n.max
Box of A computed by: C
  C.s0.cii.min ... C.s0.cii.max
  C.s0.cooo.min ... C.s0.cooo.max
  C.s0.yyy_xxx.min ... C.s0.yyy_xxx.max
  C.s0.yy_xx.min ... C.s0.yy_xx.max
  C.s0.y_x.min ... C.s0.y_x.max
  C.s0.my.min ... C.s0.my.max
  C.s0.mx.min ... C.s0.mx.max
  C.s0.coo.min ... C.s0.coo.max
  C.s0.nn.min ... C.s0.nn.max
  C.s0.ky.min ... C.s0.ky.max
  C.s0.kx.min ... C.s0.kx.max
  C.s0.ci.min ... C.s0.ci.max
  C.s0.mk.min ... C.s0.mk.max
  C.s0.co.min ... C.s0.co.max
  C.s0.n.min ... C.s0.n.max
Box of B computed by: C
  C.s0.cii.min ... C.s0.cii.max
  C.s0.cooo.min ... C.s0.cooo.max
  C.s0.yyy_xxx.min ... C.s0.yyy_xxx.max
  C.s0.yy_xx.min ... C.s0.yy_xx.max
  C.s0.y_x.min ... C.s0.y_x.max
  C.s0.my.min ... C.s0.my.max
  C.s0.mx.min ... C.s0.mx.max
  C.s0.coo.min ... C.s0.coo.max
  C.s0.nn.min ... C.s0.nn.max
  C.s0.ky.min ... C.s0.ky.max
  C.s0.kx.min ... C.s0.kx.max
  C.s0.ci.min ... C.s0.ci.max
  C.s0.mk.min ... C.s0.mk.max
  C.s0.co.min ... C.s0.co.max
  C.s0.n.min ... C.s0.n.max
Box of C computed by: C
  (min((max(C.s0.cii.min, 0) + 4), C.s0.cii.min) + -1) ... (max((min(C.s0.cii.max, 0) + 4), C.s0.cii.max) + -1)
  C.s0.cooo.min ... C.s0.cooo.max
  C.s0.yyy_xxx.min ... C.s0.yyy_xxx.max
  C.s0.yy_xx.min ... C.s0.yy_xx.max
  C.s0.y_x.min ... C.s0.y_x.max
  C.s0.my.min ... C.s0.my.max
  C.s0.mx.min ... C.s0.mx.max
  C.s0.coo.min ... C.s0.coo.max
  C.s0.nn.min ... C.s0.nn.max
  (min((max(C.s0.ky.min, 0) + 3), C.s0.ky.min) + -1) ... max((min(C.s0.ky.max, 0) + 2), C.s0.ky.max)
  (min((max(C.s0.kx.min, 0) + 3), C.s0.kx.min) + -1) ... max((min(C.s0.kx.max, 0) + 2), C.s0.kx.max)
  (min((max(C.s0.ci.min, 0) + 8), C.s0.ci.min) + -1) ... max((min(C.s0.ci.max, 0) + 7), C.s0.ci.max)
  (C.s0.mk.min + -1) ... C.s0.mk.max
  C.s0.co.min ... C.s0.co.max
  C.s0.n.min ... C.s0.n.max
bounds_of_expr_in_scope cii = cii, cii
bounds_of_expr_in_scope cooo = Out.s0.cooo.min, Out.s0.cooo.max
bounds_of_expr_in_scope yyy_xxx = Out.s0.yyy_xxx.min, Out.s0.yyy_xxx.max
bounds_of_expr_in_scope yy_xx = Out.s0.yy_xx.min, Out.s0.yy_xx.max
bounds_of_expr_in_scope y_x = Out.s0.y_x.min, Out.s0.y_x.max
bounds_of_expr_in_scope my = Out.s0.my.min, Out.s0.my.max
bounds_of_expr_in_scope mx = Out.s0.mx.min, Out.s0.mx.max
bounds_of_expr_in_scope coo = Out.s0.coo.min, Out.s0.coo.max
bounds_of_expr_in_scope nn = Out.s0.nn.min, Out.s0.nn.max
bounds_of_expr_in_scope ky = ky, ky
bounds_of_expr_in_scope kx = kx, kx
bounds_of_expr_in_scope ci = ci, ci
bounds_of_expr_in_scope mk = mk, mk
bounds_of_expr_in_scope co = Out.s0.co.min, Out.s0.co.max
bounds_of_expr_in_scope n = Out.s0.n.min, Out.s0.n.max
Box of C computed by: Out
  cii ... cii
  Out.s0.cooo.min ... Out.s0.cooo.max
  Out.s0.yyy_xxx.min ... Out.s0.yyy_xxx.max
  Out.s0.yy_xx.min ... Out.s0.yy_xx.max
  Out.s0.y_x.min ... Out.s0.y_x.max
  Out.s0.my.min ... Out.s0.my.max
  Out.s0.mx.min ... Out.s0.mx.max
  Out.s0.coo.min ... Out.s0.coo.max
  Out.s0.nn.min ... Out.s0.nn.max
  ky ... ky
  kx ... kx
  ci ... ci
  mk ... mk
  Out.s0.co.min ... Out.s0.co.max
  Out.s0.n.min ... Out.s0.n.max
Box of Out:
  Out.min.0 ... Out.extent.0
  Out.min.1 ... Out.extent.1
  Out.min.2 ... Out.extent.2
  Out.min.3 ... Out.extent.3
  Out.min.4 ... Out.extent.4
  Out.min.5 ... Out.extent.5
  Out.min.6 ... Out.extent.6
  Out.min.7 ... Out.extent.7
  Out.min.8 ... Out.extent.8
  Out.min.9 ... Out.extent.9
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 7 = 7, 7
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 7 = 7, 7
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 1 = 1, 1
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 1 = 1, 1
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope A.s0.yyy_xxx = 0, 6
bounds_of_expr_in_scope A.s0.yy_xx = 0, 6
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.cii = 0, 3
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = 0, 6
bounds_of_expr_in_scope A.s0.yy_xx = 0, 6
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
Box(by Provide) of A
  0 ... 7
  0 ... 6
  0 ... 6
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
Box of Acomputed by: A.s0.my
  0 ... 7
  0 ... 6
  0 ... 6
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
bounds_of_expr_in_scope A.s0.cooo = A.s0.cooo, A.s0.cooo
bounds_of_expr_in_scope A.s0.yyy_xxx = A.s0.yyy_xxx, A.s0.yyy_xxx
bounds_of_expr_in_scope A.s0.yy_xx = A.s0.yy_xx, A.s0.yy_xx
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
Box(by Provide) of A
  A.s0.cooo ... A.s0.cooo
  A.s0.yyy_xxx ... A.s0.yyy_xxx
  A.s0.yy_xx ... A.s0.yy_xx
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
Box of Acomputed by: A.s0.cii
  A.s0.cooo ... A.s0.cooo
  A.s0.yyy_xxx ... A.s0.yyy_xxx
  A.s0.yy_xx ... A.s0.yy_xx
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
Lowering after computation bounds inference:
let Out.extent.0.required = ((7 + 1) - 0)
let Out.min.0.required = 0
let Out.stride.0.required = 1
let Out.extent.1.required = ((6 + 1) - 0)
let Out.min.1.required = 0
let Out.stride.1.required = (Out.stride.0.required*Out.extent.0.required)
let Out.extent.2.required = ((6 + 1) - 0)
let Out.min.2.required = 0
let Out.stride.2.required = (Out.stride.1.required*Out.extent.1.required)
let Out.extent.3.required = ((((1 + 0) - 1) + 1) - 0)
let Out.min.3.required = 0
let Out.stride.3.required = (Out.stride.2.required*Out.extent.2.required)
let Out.extent.4.required = ((((4 + 0) - 1) + 1) - 0)
let Out.min.4.required = 0
let Out.stride.4.required = (Out.stride.3.required*Out.extent.3.required)
let Out.extent.5.required = ((((4 + 0) - 1) + 1) - 0)
let Out.min.5.required = 0
let Out.stride.5.required = (Out.stride.4.required*Out.extent.4.required)
let Out.extent.6.required = ((((1 + 0) - 1) + 1) - 0)
let Out.min.6.required = 0
let Out.stride.6.required = (Out.stride.5.required*Out.extent.5.required)
let Out.extent.7.required = ((((16 + 0) - 1) + 1) - 0)
let Out.min.7.required = 0
let Out.stride.7.required = (Out.stride.6.required*Out.extent.6.required)
let Out.extent.8.required = ((((4 + 0) - 1) + 1) - 0)
let Out.min.8.required = 0
let Out.stride.8.required = (Out.stride.7.required*Out.extent.7.required)
let Out.extent.9.required = (((((P.extent.1/3600) + 0) - 1) + 1) - 0)
let Out.min.9.required = 0
let Out.stride.9.required = (Out.stride.8.required*Out.extent.8.required)
let P.extent.0.required = P.extent.0
let P.min.0.required = P.min.0
let P.stride.0.required = 1
let P.extent.1.required = P.extent.1
let P.min.1.required = P.min.1
let P.stride.1.required = (P.stride.0.required*P.extent.0.required)
let W.extent.0.required = W.extent.0
let W.min.0.required = W.min.0
let W.stride.0.required = 1
let W.extent.1.required = W.extent.1
let W.min.1.required = W.min.1
let W.stride.1.required = (W.stride.0.required*W.extent.0.required)
let Out.stride.0.constrained = 1
let P.stride.0.constrained = 1
let W.stride.0.constrained = 1
let Out.stride.0.proposed = 1
let Out.min.0.proposed = Out.min.0.required
let Out.extent.0.proposed = Out.extent.0.required
let Out.stride.1.proposed = Out.stride.1.required
let Out.min.1.proposed = Out.min.1.required
let Out.extent.1.proposed = Out.extent.1.required
let Out.stride.2.proposed = Out.stride.2.required
let Out.min.2.proposed = Out.min.2.required
let Out.extent.2.proposed = Out.extent.2.required
let Out.stride.3.proposed = Out.stride.3.required
let Out.min.3.proposed = Out.min.3.required
let Out.extent.3.proposed = Out.extent.3.required
let Out.stride.4.proposed = Out.stride.4.required
let Out.min.4.proposed = Out.min.4.required
let Out.extent.4.proposed = Out.extent.4.required
let Out.stride.5.proposed = Out.stride.5.required
let Out.min.5.proposed = Out.min.5.required
let Out.extent.5.proposed = Out.extent.5.required
let Out.stride.6.proposed = Out.stride.6.required
let Out.min.6.proposed = Out.min.6.required
let Out.extent.6.proposed = Out.extent.6.required
let Out.stride.7.proposed = Out.stride.7.required
let Out.min.7.proposed = Out.min.7.required
let Out.extent.7.proposed = Out.extent.7.required
let Out.stride.8.proposed = Out.stride.8.required
let Out.min.8.proposed = Out.min.8.required
let Out.extent.8.proposed = Out.extent.8.required
let Out.stride.9.proposed = Out.stride.9.required
let Out.min.9.proposed = Out.min.9.required
let Out.extent.9.proposed = Out.extent.9.required
let P.stride.0.proposed = 1
let P.min.0.proposed = P.min.0.required
let P.extent.0.proposed = P.extent.0.required
let P.stride.1.proposed = P.stride.1.required
let P.min.1.proposed = P.min.1.required
let P.extent.1.proposed = P.extent.1.required
let W.stride.0.proposed = 1
let W.min.0.proposed = W.min.0.required
let W.extent.0.proposed = W.extent.0.required
let W.stride.1.proposed = W.stride.1.required
let W.min.1.proposed = W.min.1.required
let W.extent.1.proposed = W.extent.1.required
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || ((Out.min.0.proposed <= Out.min.0.required) && (((Out.min.0.proposed + Out.extent.0.proposed) - 1) >= ((Out.min.0.required + Out.extent.0.required) - 1)))), halide_error_constraints_make_required_region_smaller("Output buffer Out", 0, Out.min.0.proposed, ((Out.min.0.proposed + Out.extent.0.proposed) - 1), Out.min.0.required, ((Out.min.0.required + Out.extent.0.required) - 1)))
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || ((Out.min.1.proposed <= Out.min.1.required) && (((Out.min.1.proposed + Out.extent.1.proposed) - 1) >= ((Out.min.1.required + Out.extent.1.required) - 1)))), halide_error_constraints_make_required_region_smaller("Output buffer Out", 1, Out.min.1.proposed, ((Out.min.1.proposed + Out.extent.1.proposed) - 1), Out.min.1.required, ((Out.min.1.required + Out.extent.1.required) - 1)))
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || ((Out.min.2.proposed <= Out.min.2.required) && (((Out.min.2.proposed + Out.extent.2.proposed) - 1) >= ((Out.min.2.required + Out.extent.2.required) - 1)))), halide_error_constraints_make_required_region_smaller("Output buffer Out", 2, Out.min.2.proposed, ((Out.min.2.proposed + Out.extent.2.proposed) - 1), Out.min.2.required, ((Out.min.2.required + Out.extent.2.required) - 1)))
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || ((Out.min.3.proposed <= Out.min.3.required) && (((Out.min.3.proposed + Out.extent.3.proposed) - 1) >= ((Out.min.3.required + Out.extent.3.required) - 1)))), halide_error_constraints_make_required_region_smaller("Output buffer Out", 3, Out.min.3.proposed, ((Out.min.3.proposed + Out.extent.3.proposed) - 1), Out.min.3.required, ((Out.min.3.required + Out.extent.3.required) - 1)))
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || ((Out.min.4.proposed <= Out.min.4.required) && (((Out.min.4.proposed + Out.extent.4.proposed) - 1) >= ((Out.min.4.required + Out.extent.4.required) - 1)))), halide_error_constraints_make_required_region_smaller("Output buffer Out", 4, Out.min.4.proposed, ((Out.min.4.proposed + Out.extent.4.proposed) - 1), Out.min.4.required, ((Out.min.4.required + Out.extent.4.required) - 1)))
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || ((Out.min.5.proposed <= Out.min.5.required) && (((Out.min.5.proposed + Out.extent.5.proposed) - 1) >= ((Out.min.5.required + Out.extent.5.required) - 1)))), halide_error_constraints_make_required_region_smaller("Output buffer Out", 5, Out.min.5.proposed, ((Out.min.5.proposed + Out.extent.5.proposed) - 1), Out.min.5.required, ((Out.min.5.required + Out.extent.5.required) - 1)))
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || ((Out.min.6.proposed <= Out.min.6.required) && (((Out.min.6.proposed + Out.extent.6.proposed) - 1) >= ((Out.min.6.required + Out.extent.6.required) - 1)))), halide_error_constraints_make_required_region_smaller("Output buffer Out", 6, Out.min.6.proposed, ((Out.min.6.proposed + Out.extent.6.proposed) - 1), Out.min.6.required, ((Out.min.6.required + Out.extent.6.required) - 1)))
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || ((Out.min.7.proposed <= Out.min.7.required) && (((Out.min.7.proposed + Out.extent.7.proposed) - 1) >= ((Out.min.7.required + Out.extent.7.required) - 1)))), halide_error_constraints_make_required_region_smaller("Output buffer Out", 7, Out.min.7.proposed, ((Out.min.7.proposed + Out.extent.7.proposed) - 1), Out.min.7.required, ((Out.min.7.required + Out.extent.7.required) - 1)))
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || ((Out.min.8.proposed <= Out.min.8.required) && (((Out.min.8.proposed + Out.extent.8.proposed) - 1) >= ((Out.min.8.required + Out.extent.8.required) - 1)))), halide_error_constraints_make_required_region_smaller("Output buffer Out", 8, Out.min.8.proposed, ((Out.min.8.proposed + Out.extent.8.proposed) - 1), Out.min.8.required, ((Out.min.8.required + Out.extent.8.required) - 1)))
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || ((Out.min.9.proposed <= Out.min.9.required) && (((Out.min.9.proposed + Out.extent.9.proposed) - 1) >= ((Out.min.9.required + Out.extent.9.required) - 1)))), halide_error_constraints_make_required_region_smaller("Output buffer Out", 9, Out.min.9.proposed, ((Out.min.9.proposed + Out.extent.9.proposed) - 1), Out.min.9.required, ((Out.min.9.required + Out.extent.9.required) - 1)))
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer) || ((P.min.0.proposed <= P.min.0.required) && (((P.min.0.proposed + P.extent.0.proposed) - 1) >= ((P.min.0.required + P.extent.0.required) - 1)))), halide_error_constraints_make_required_region_smaller("Input buffer P", 0, P.min.0.proposed, ((P.min.0.proposed + P.extent.0.proposed) - 1), P.min.0.required, ((P.min.0.required + P.extent.0.required) - 1)))
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer) || ((P.min.1.proposed <= P.min.1.required) && (((P.min.1.proposed + P.extent.1.proposed) - 1) >= ((P.min.1.required + P.extent.1.required) - 1)))), halide_error_constraints_make_required_region_smaller("Input buffer P", 1, P.min.1.proposed, ((P.min.1.proposed + P.extent.1.proposed) - 1), P.min.1.required, ((P.min.1.required + P.extent.1.required) - 1)))
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer) || ((W.min.0.proposed <= W.min.0.required) && (((W.min.0.proposed + W.extent.0.proposed) - 1) >= ((W.min.0.required + W.extent.0.required) - 1)))), halide_error_constraints_make_required_region_smaller("Input buffer W", 0, W.min.0.proposed, ((W.min.0.proposed + W.extent.0.proposed) - 1), W.min.0.required, ((W.min.0.required + W.extent.0.required) - 1)))
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer) || ((W.min.1.proposed <= W.min.1.required) && (((W.min.1.proposed + W.extent.1.proposed) - 1) >= ((W.min.1.required + W.extent.1.required) - 1)))), halide_error_constraints_make_required_region_smaller("Input buffer W", 1, W.min.1.proposed, ((W.min.1.proposed + W.extent.1.proposed) - 1), W.min.1.required, ((W.min.1.required + W.extent.1.required) - 1)))
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(Out.min.0.proposed, Out.extent.0.proposed, Out.stride.0.proposed, 0, Out.min.1.proposed, Out.extent.1.proposed, Out.stride.1.proposed, 0, Out.min.2.proposed, Out.extent.2.proposed, Out.stride.2.proposed, 0, Out.min.3.proposed, Out.extent.3.proposed, Out.stride.3.proposed, 0, Out.min.4.proposed, Out.extent.4.proposed, Out.stride.4.proposed, 0, Out.min.5.proposed, Out.extent.5.proposed, Out.stride.5.proposed, 0, Out.min.6.proposed, Out.extent.6.proposed, Out.stride.6.proposed, 0, Out.min.7.proposed, Out.extent.7.proposed, Out.stride.7.proposed, 0, Out.min.8.proposed, Out.extent.8.proposed, Out.stride.8.proposed, 0, Out.min.9.proposed, Out.extent.9.proposed, Out.stride.9.proposed, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0.proposed, P.extent.0.proposed, P.stride.0.proposed, 0, P.min.1.proposed, P.extent.1.proposed, P.stride.1.proposed, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0.proposed, W.extent.0.proposed, W.stride.0.proposed, 0, W.min.1.proposed, W.extent.1.proposed, W.stride.1.proposed, 0), (uint64)0)
}
if (!((((uint1)0 || (uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) || (uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) || (uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer))) {
 assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
 assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
 assert(((uint32)P.type == (uint32)73730), halide_error_bad_type("Input buffer P", (uint32)P.type, (uint32)73730))
 assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
 assert(((uint32)W.type == (uint32)73730), halide_error_bad_type("Input buffer W", (uint32)W.type, (uint32)73730))
 assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
 assert(((Out.min.0 <= Out.min.0.required) && (((Out.min.0 + Out.extent.0) - 1) >= ((Out.min.0.required + Out.extent.0.required) - 1))), halide_error_access_out_of_bounds("Output buffer Out", 0, Out.min.0.required, ((Out.min.0.required + Out.extent.0.required) - 1), Out.min.0, ((Out.min.0 + Out.extent.0) - 1)))
 assert((Out.extent.0 >= 0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
 assert(((Out.min.1 <= Out.min.1.required) && (((Out.min.1 + Out.extent.1) - 1) >= ((Out.min.1.required + Out.extent.1.required) - 1))), halide_error_access_out_of_bounds("Output buffer Out", 1, Out.min.1.required, ((Out.min.1.required + Out.extent.1.required) - 1), Out.min.1, ((Out.min.1 + Out.extent.1) - 1)))
 assert((Out.extent.1 >= 0), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
 assert(((Out.min.2 <= Out.min.2.required) && (((Out.min.2 + Out.extent.2) - 1) >= ((Out.min.2.required + Out.extent.2.required) - 1))), halide_error_access_out_of_bounds("Output buffer Out", 2, Out.min.2.required, ((Out.min.2.required + Out.extent.2.required) - 1), Out.min.2, ((Out.min.2 + Out.extent.2) - 1)))
 assert((Out.extent.2 >= 0), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
 assert(((Out.min.3 <= Out.min.3.required) && (((Out.min.3 + Out.extent.3) - 1) >= ((Out.min.3.required + Out.extent.3.required) - 1))), halide_error_access_out_of_bounds("Output buffer Out", 3, Out.min.3.required, ((Out.min.3.required + Out.extent.3.required) - 1), Out.min.3, ((Out.min.3 + Out.extent.3) - 1)))
 assert((Out.extent.3 >= 0), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
 assert(((Out.min.4 <= Out.min.4.required) && (((Out.min.4 + Out.extent.4) - 1) >= ((Out.min.4.required + Out.extent.4.required) - 1))), halide_error_access_out_of_bounds("Output buffer Out", 4, Out.min.4.required, ((Out.min.4.required + Out.extent.4.required) - 1), Out.min.4, ((Out.min.4 + Out.extent.4) - 1)))
 assert((Out.extent.4 >= 0), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
 assert(((Out.min.5 <= Out.min.5.required) && (((Out.min.5 + Out.extent.5) - 1) >= ((Out.min.5.required + Out.extent.5.required) - 1))), halide_error_access_out_of_bounds("Output buffer Out", 5, Out.min.5.required, ((Out.min.5.required + Out.extent.5.required) - 1), Out.min.5, ((Out.min.5 + Out.extent.5) - 1)))
 assert((Out.extent.5 >= 0), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
 assert(((Out.min.6 <= Out.min.6.required) && (((Out.min.6 + Out.extent.6) - 1) >= ((Out.min.6.required + Out.extent.6.required) - 1))), halide_error_access_out_of_bounds("Output buffer Out", 6, Out.min.6.required, ((Out.min.6.required + Out.extent.6.required) - 1), Out.min.6, ((Out.min.6 + Out.extent.6) - 1)))
 assert((Out.extent.6 >= 0), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
 assert(((Out.min.7 <= Out.min.7.required) && (((Out.min.7 + Out.extent.7) - 1) >= ((Out.min.7.required + Out.extent.7.required) - 1))), halide_error_access_out_of_bounds("Output buffer Out", 7, Out.min.7.required, ((Out.min.7.required + Out.extent.7.required) - 1), Out.min.7, ((Out.min.7 + Out.extent.7) - 1)))
 assert((Out.extent.7 >= 0), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
 assert(((Out.min.8 <= Out.min.8.required) && (((Out.min.8 + Out.extent.8) - 1) >= ((Out.min.8.required + Out.extent.8.required) - 1))), halide_error_access_out_of_bounds("Output buffer Out", 8, Out.min.8.required, ((Out.min.8.required + Out.extent.8.required) - 1), Out.min.8, ((Out.min.8 + Out.extent.8) - 1)))
 assert((Out.extent.8 >= 0), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
 assert(((Out.min.9 <= Out.min.9.required) && (((Out.min.9 + Out.extent.9) - 1) >= ((Out.min.9.required + Out.extent.9.required) - 1))), halide_error_access_out_of_bounds("Output buffer Out", 9, Out.min.9.required, ((Out.min.9.required + Out.extent.9.required) - 1), Out.min.9, ((Out.min.9 + Out.extent.9) - 1)))
 assert((Out.extent.9 >= 0), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
 assert(((P.min.0 <= P.min.0.required) && (((P.min.0 + P.extent.0) - 1) >= ((P.min.0.required + P.extent.0.required) - 1))), halide_error_access_out_of_bounds("Input buffer P", 0, P.min.0.required, ((P.min.0.required + P.extent.0.required) - 1), P.min.0, ((P.min.0 + P.extent.0) - 1)))
 assert((P.extent.0 >= 0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
 assert(((P.min.1 <= P.min.1.required) && (((P.min.1 + P.extent.1) - 1) >= ((P.min.1.required + P.extent.1.required) - 1))), halide_error_access_out_of_bounds("Input buffer P", 1, P.min.1.required, ((P.min.1.required + P.extent.1.required) - 1), P.min.1, ((P.min.1 + P.extent.1) - 1)))
 assert((P.extent.1 >= 0), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
 assert(((W.min.0 <= W.min.0.required) && (((W.min.0 + W.extent.0) - 1) >= ((W.min.0.required + W.extent.0.required) - 1))), halide_error_access_out_of_bounds("Input buffer W", 0, W.min.0.required, ((W.min.0.required + W.extent.0.required) - 1), W.min.0, ((W.min.0 + W.extent.0) - 1)))
 assert((W.extent.0 >= 0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
 assert(((W.min.1 <= W.min.1.required) && (((W.min.1 + W.extent.1) - 1) >= ((W.min.1.required + W.extent.1.required) - 1))), halide_error_access_out_of_bounds("Input buffer W", 1, W.min.1.required, ((W.min.1.required + W.extent.1.required) - 1), W.min.1, ((W.min.1 + W.extent.1) - 1)))
 assert((W.extent.1 >= 0), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
 assert((Out.stride.0 == Out.stride.0.constrained), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", Out.stride.0.constrained))
 assert((P.stride.0 == P.stride.0.constrained), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", P.stride.0.constrained))
 assert((W.stride.0 == W.stride.0.constrained), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", W.stride.0.constrained))
 let Out.total_extent.0 = int64(Out.extent.0)
 let Out.total_extent.1 = (int64(Out.extent.1)*Out.total_extent.0)
 let Out.total_extent.2 = (int64(Out.extent.2)*Out.total_extent.1)
 let Out.total_extent.3 = (int64(Out.extent.3)*Out.total_extent.2)
 let Out.total_extent.4 = (int64(Out.extent.4)*Out.total_extent.3)
 let Out.total_extent.5 = (int64(Out.extent.5)*Out.total_extent.4)
 let Out.total_extent.6 = (int64(Out.extent.6)*Out.total_extent.5)
 let Out.total_extent.7 = (int64(Out.extent.7)*Out.total_extent.6)
 let Out.total_extent.8 = (int64(Out.extent.8)*Out.total_extent.7)
 let Out.total_extent.9 = (int64(Out.extent.9)*Out.total_extent.8)
 let P.total_extent.0 = int64(P.extent.0)
 let P.total_extent.1 = (int64(P.extent.1)*P.total_extent.0)
 let W.total_extent.0 = int64(W.extent.0)
 let W.total_extent.1 = (int64(W.extent.1)*W.total_extent.0)
 assert(((uint64)abs((int64(Out.extent.0)*int64(Out.stride.0.constrained))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.0)*int64(Out.stride.0.constrained))), (uint64)2147483647))
 assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
 assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
 assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
 assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
 assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
 assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
 assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
 assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
 assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
 assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
 assert(((uint64)abs((int64(P.extent.0)*int64(P.stride.0.constrained))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.0)*int64(P.stride.0.constrained))), (uint64)2147483647))
 assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
 assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
 assert(((uint64)abs((int64(W.extent.0)*int64(W.stride.0.constrained))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.0)*int64(W.stride.0.constrained))), (uint64)2147483647))
 assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
 assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
 gpu_block<Default_GPU> (A.s0.n, 0, (P.extent.1/3600)) {
  gpu_block<Default_GPU> (A.s0.nn, 0, 16) {
   gpu_block<Default_GPU> (A.s0.co, 0, 4) {
    gpu_thread<Default_GPU> (A.s0.mx, 0, 4) {
     gpu_thread<Default_GPU> (A.s0.my, 0, 4) {
      realize A[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
       realize B[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
        realize C[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
         for (A.s0.mk, 0, 4) {
          for (A.s0.ci, 0, 8) {
           for (A.s0.yy_xx, 0, 7) {
            for (A.s0.yyy_xxx, 0, 7) {
             for (A.s0.kx, 0, 3) {
              for (A.s0.ky, 0, 3) {
               for (A.s0.coo, 0, 1) {
                for (A.s0.y_x, 0, 1) {
                 vectorized (A.s0.cooo, 0, 8) {
                  for (A.s0.cii, 0, 4) {
                   let A.s0.yyy_xxx = A.s0.yyy_xxx
                   let A.s0.yy_xx = A.s0.yy_xx
                   let A.s0.cooo = A.s0.cooo
                   let A.s0.cii = A.s0.cii
                   A(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = (float32)P(((A.s0.nn*512) + ((A.s0.mx*128) + ((A.s0.mk*32) + ((A.s0.ci*4) + A.s0.cii)))), ((A.s0.n*225) + (((((((A.s0.y_x*49) + ((A.s0.yy_xx*7) + A.s0.yyy_xxx))/7)*2) + A.s0.kx)*15) + (((((A.s0.y_x*49) + ((A.s0.yy_xx*7) + A.s0.yyy_xxx)) % 7)*2) + A.s0.ky))))
                   B(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = (float32)W(((A.s0.my*32) + ((A.s0.co*8) + ((A.s0.coo*8) + A.s0.cooo))), ((A.s0.mk*288) + ((A.s0.ci*36) + ((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii)))))
                   C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = (select((((((A.s0.cii == 0) && (A.s0.ci == 0)) && (A.s0.mk == 0)) && (A.s0.ky == 0)) && (A.s0.kx == 0)), 0.000000f, select((A.s0.cii == 0), select((A.s0.ky == 0), select((A.s0.kx == 0), select((A.s0.ci == 0), C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)), C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)), C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)), C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))) + (A(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)*B(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)))
                   if ((((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) {
                    Out(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, A.s0.y_x, A.s0.my, A.s0.mx, A.s0.coo, A.s0.nn, A.s0.co, A.s0.n) = C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
}

Uniquifying variable names...
Lowering after uniquifying variable names:
let Out.extent.0.required = ((7 + 1) - 0)
let Out.min.0.required = 0
let Out.stride.0.required = 1
let Out.extent.1.required = ((6 + 1) - 0)
let Out.min.1.required = 0
let Out.stride.1.required = (Out.stride.0.required*Out.extent.0.required)
let Out.extent.2.required = ((6 + 1) - 0)
let Out.min.2.required = 0
let Out.stride.2.required = (Out.stride.1.required*Out.extent.1.required)
let Out.extent.3.required = ((((1 + 0) - 1) + 1) - 0)
let Out.min.3.required = 0
let Out.stride.3.required = (Out.stride.2.required*Out.extent.2.required)
let Out.extent.4.required = ((((4 + 0) - 1) + 1) - 0)
let Out.min.4.required = 0
let Out.stride.4.required = (Out.stride.3.required*Out.extent.3.required)
let Out.extent.5.required = ((((4 + 0) - 1) + 1) - 0)
let Out.min.5.required = 0
let Out.stride.5.required = (Out.stride.4.required*Out.extent.4.required)
let Out.extent.6.required = ((((1 + 0) - 1) + 1) - 0)
let Out.min.6.required = 0
let Out.stride.6.required = (Out.stride.5.required*Out.extent.5.required)
let Out.extent.7.required = ((((16 + 0) - 1) + 1) - 0)
let Out.min.7.required = 0
let Out.stride.7.required = (Out.stride.6.required*Out.extent.6.required)
let Out.extent.8.required = ((((4 + 0) - 1) + 1) - 0)
let Out.min.8.required = 0
let Out.stride.8.required = (Out.stride.7.required*Out.extent.7.required)
let Out.extent.9.required = (((((P.extent.1/3600) + 0) - 1) + 1) - 0)
let Out.min.9.required = 0
let Out.stride.9.required = (Out.stride.8.required*Out.extent.8.required)
let P.extent.0.required = P.extent.0
let P.min.0.required = P.min.0
let P.stride.0.required = 1
let P.extent.1.required = P.extent.1
let P.min.1.required = P.min.1
let P.stride.1.required = (P.stride.0.required*P.extent.0.required)
let W.extent.0.required = W.extent.0
let W.min.0.required = W.min.0
let W.stride.0.required = 1
let W.extent.1.required = W.extent.1
let W.min.1.required = W.min.1
let W.stride.1.required = (W.stride.0.required*W.extent.0.required)
let Out.stride.0.constrained = 1
let P.stride.0.constrained = 1
let W.stride.0.constrained = 1
let Out.stride.0.proposed = 1
let Out.min.0.proposed = Out.min.0.required
let Out.extent.0.proposed = Out.extent.0.required
let Out.stride.1.proposed = Out.stride.1.required
let Out.min.1.proposed = Out.min.1.required
let Out.extent.1.proposed = Out.extent.1.required
let Out.stride.2.proposed = Out.stride.2.required
let Out.min.2.proposed = Out.min.2.required
let Out.extent.2.proposed = Out.extent.2.required
let Out.stride.3.proposed = Out.stride.3.required
let Out.min.3.proposed = Out.min.3.required
let Out.extent.3.proposed = Out.extent.3.required
let Out.stride.4.proposed = Out.stride.4.required
let Out.min.4.proposed = Out.min.4.required
let Out.extent.4.proposed = Out.extent.4.required
let Out.stride.5.proposed = Out.stride.5.required
let Out.min.5.proposed = Out.min.5.required
let Out.extent.5.proposed = Out.extent.5.required
let Out.stride.6.proposed = Out.stride.6.required
let Out.min.6.proposed = Out.min.6.required
let Out.extent.6.proposed = Out.extent.6.required
let Out.stride.7.proposed = Out.stride.7.required
let Out.min.7.proposed = Out.min.7.required
let Out.extent.7.proposed = Out.extent.7.required
let Out.stride.8.proposed = Out.stride.8.required
let Out.min.8.proposed = Out.min.8.required
let Out.extent.8.proposed = Out.extent.8.required
let Out.stride.9.proposed = Out.stride.9.required
let Out.min.9.proposed = Out.min.9.required
let Out.extent.9.proposed = Out.extent.9.required
let P.stride.0.proposed = 1
let P.min.0.proposed = P.min.0.required
let P.extent.0.proposed = P.extent.0.required
let P.stride.1.proposed = P.stride.1.required
let P.min.1.proposed = P.min.1.required
let P.extent.1.proposed = P.extent.1.required
let W.stride.0.proposed = 1
let W.min.0.proposed = W.min.0.required
let W.extent.0.proposed = W.extent.0.required
let W.stride.1.proposed = W.stride.1.required
let W.min.1.proposed = W.min.1.required
let W.extent.1.proposed = W.extent.1.required
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || ((Out.min.0.proposed <= Out.min.0.required) && (((Out.min.0.proposed + Out.extent.0.proposed) - 1) >= ((Out.min.0.required + Out.extent.0.required) - 1)))), halide_error_constraints_make_required_region_smaller("Output buffer Out", 0, Out.min.0.proposed, ((Out.min.0.proposed + Out.extent.0.proposed) - 1), Out.min.0.required, ((Out.min.0.required + Out.extent.0.required) - 1)))
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || ((Out.min.1.proposed <= Out.min.1.required) && (((Out.min.1.proposed + Out.extent.1.proposed) - 1) >= ((Out.min.1.required + Out.extent.1.required) - 1)))), halide_error_constraints_make_required_region_smaller("Output buffer Out", 1, Out.min.1.proposed, ((Out.min.1.proposed + Out.extent.1.proposed) - 1), Out.min.1.required, ((Out.min.1.required + Out.extent.1.required) - 1)))
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || ((Out.min.2.proposed <= Out.min.2.required) && (((Out.min.2.proposed + Out.extent.2.proposed) - 1) >= ((Out.min.2.required + Out.extent.2.required) - 1)))), halide_error_constraints_make_required_region_smaller("Output buffer Out", 2, Out.min.2.proposed, ((Out.min.2.proposed + Out.extent.2.proposed) - 1), Out.min.2.required, ((Out.min.2.required + Out.extent.2.required) - 1)))
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || ((Out.min.3.proposed <= Out.min.3.required) && (((Out.min.3.proposed + Out.extent.3.proposed) - 1) >= ((Out.min.3.required + Out.extent.3.required) - 1)))), halide_error_constraints_make_required_region_smaller("Output buffer Out", 3, Out.min.3.proposed, ((Out.min.3.proposed + Out.extent.3.proposed) - 1), Out.min.3.required, ((Out.min.3.required + Out.extent.3.required) - 1)))
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || ((Out.min.4.proposed <= Out.min.4.required) && (((Out.min.4.proposed + Out.extent.4.proposed) - 1) >= ((Out.min.4.required + Out.extent.4.required) - 1)))), halide_error_constraints_make_required_region_smaller("Output buffer Out", 4, Out.min.4.proposed, ((Out.min.4.proposed + Out.extent.4.proposed) - 1), Out.min.4.required, ((Out.min.4.required + Out.extent.4.required) - 1)))
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || ((Out.min.5.proposed <= Out.min.5.required) && (((Out.min.5.proposed + Out.extent.5.proposed) - 1) >= ((Out.min.5.required + Out.extent.5.required) - 1)))), halide_error_constraints_make_required_region_smaller("Output buffer Out", 5, Out.min.5.proposed, ((Out.min.5.proposed + Out.extent.5.proposed) - 1), Out.min.5.required, ((Out.min.5.required + Out.extent.5.required) - 1)))
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || ((Out.min.6.proposed <= Out.min.6.required) && (((Out.min.6.proposed + Out.extent.6.proposed) - 1) >= ((Out.min.6.required + Out.extent.6.required) - 1)))), halide_error_constraints_make_required_region_smaller("Output buffer Out", 6, Out.min.6.proposed, ((Out.min.6.proposed + Out.extent.6.proposed) - 1), Out.min.6.required, ((Out.min.6.required + Out.extent.6.required) - 1)))
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || ((Out.min.7.proposed <= Out.min.7.required) && (((Out.min.7.proposed + Out.extent.7.proposed) - 1) >= ((Out.min.7.required + Out.extent.7.required) - 1)))), halide_error_constraints_make_required_region_smaller("Output buffer Out", 7, Out.min.7.proposed, ((Out.min.7.proposed + Out.extent.7.proposed) - 1), Out.min.7.required, ((Out.min.7.required + Out.extent.7.required) - 1)))
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || ((Out.min.8.proposed <= Out.min.8.required) && (((Out.min.8.proposed + Out.extent.8.proposed) - 1) >= ((Out.min.8.required + Out.extent.8.required) - 1)))), halide_error_constraints_make_required_region_smaller("Output buffer Out", 8, Out.min.8.proposed, ((Out.min.8.proposed + Out.extent.8.proposed) - 1), Out.min.8.required, ((Out.min.8.required + Out.extent.8.required) - 1)))
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || ((Out.min.9.proposed <= Out.min.9.required) && (((Out.min.9.proposed + Out.extent.9.proposed) - 1) >= ((Out.min.9.required + Out.extent.9.required) - 1)))), halide_error_constraints_make_required_region_smaller("Output buffer Out", 9, Out.min.9.proposed, ((Out.min.9.proposed + Out.extent.9.proposed) - 1), Out.min.9.required, ((Out.min.9.required + Out.extent.9.required) - 1)))
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer) || ((P.min.0.proposed <= P.min.0.required) && (((P.min.0.proposed + P.extent.0.proposed) - 1) >= ((P.min.0.required + P.extent.0.required) - 1)))), halide_error_constraints_make_required_region_smaller("Input buffer P", 0, P.min.0.proposed, ((P.min.0.proposed + P.extent.0.proposed) - 1), P.min.0.required, ((P.min.0.required + P.extent.0.required) - 1)))
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer) || ((P.min.1.proposed <= P.min.1.required) && (((P.min.1.proposed + P.extent.1.proposed) - 1) >= ((P.min.1.required + P.extent.1.required) - 1)))), halide_error_constraints_make_required_region_smaller("Input buffer P", 1, P.min.1.proposed, ((P.min.1.proposed + P.extent.1.proposed) - 1), P.min.1.required, ((P.min.1.required + P.extent.1.required) - 1)))
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer) || ((W.min.0.proposed <= W.min.0.required) && (((W.min.0.proposed + W.extent.0.proposed) - 1) >= ((W.min.0.required + W.extent.0.required) - 1)))), halide_error_constraints_make_required_region_smaller("Input buffer W", 0, W.min.0.proposed, ((W.min.0.proposed + W.extent.0.proposed) - 1), W.min.0.required, ((W.min.0.required + W.extent.0.required) - 1)))
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer) || ((W.min.1.proposed <= W.min.1.required) && (((W.min.1.proposed + W.extent.1.proposed) - 1) >= ((W.min.1.required + W.extent.1.required) - 1)))), halide_error_constraints_make_required_region_smaller("Input buffer W", 1, W.min.1.proposed, ((W.min.1.proposed + W.extent.1.proposed) - 1), W.min.1.required, ((W.min.1.required + W.extent.1.required) - 1)))
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(Out.min.0.proposed, Out.extent.0.proposed, Out.stride.0.proposed, 0, Out.min.1.proposed, Out.extent.1.proposed, Out.stride.1.proposed, 0, Out.min.2.proposed, Out.extent.2.proposed, Out.stride.2.proposed, 0, Out.min.3.proposed, Out.extent.3.proposed, Out.stride.3.proposed, 0, Out.min.4.proposed, Out.extent.4.proposed, Out.stride.4.proposed, 0, Out.min.5.proposed, Out.extent.5.proposed, Out.stride.5.proposed, 0, Out.min.6.proposed, Out.extent.6.proposed, Out.stride.6.proposed, 0, Out.min.7.proposed, Out.extent.7.proposed, Out.stride.7.proposed, 0, Out.min.8.proposed, Out.extent.8.proposed, Out.stride.8.proposed, 0, Out.min.9.proposed, Out.extent.9.proposed, Out.stride.9.proposed, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0.proposed, P.extent.0.proposed, P.stride.0.proposed, 0, P.min.1.proposed, P.extent.1.proposed, P.stride.1.proposed, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0.proposed, W.extent.0.proposed, W.stride.0.proposed, 0, W.min.1.proposed, W.extent.1.proposed, W.stride.1.proposed, 0), (uint64)0)
}
if (!((((uint1)0 || (uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) || (uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) || (uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer))) {
 assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
 assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
 assert(((uint32)P.type == (uint32)73730), halide_error_bad_type("Input buffer P", (uint32)P.type, (uint32)73730))
 assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
 assert(((uint32)W.type == (uint32)73730), halide_error_bad_type("Input buffer W", (uint32)W.type, (uint32)73730))
 assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
 assert(((Out.min.0 <= Out.min.0.required) && (((Out.min.0 + Out.extent.0) - 1) >= ((Out.min.0.required + Out.extent.0.required) - 1))), halide_error_access_out_of_bounds("Output buffer Out", 0, Out.min.0.required, ((Out.min.0.required + Out.extent.0.required) - 1), Out.min.0, ((Out.min.0 + Out.extent.0) - 1)))
 assert((Out.extent.0 >= 0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
 assert(((Out.min.1 <= Out.min.1.required) && (((Out.min.1 + Out.extent.1) - 1) >= ((Out.min.1.required + Out.extent.1.required) - 1))), halide_error_access_out_of_bounds("Output buffer Out", 1, Out.min.1.required, ((Out.min.1.required + Out.extent.1.required) - 1), Out.min.1, ((Out.min.1 + Out.extent.1) - 1)))
 assert((Out.extent.1 >= 0), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
 assert(((Out.min.2 <= Out.min.2.required) && (((Out.min.2 + Out.extent.2) - 1) >= ((Out.min.2.required + Out.extent.2.required) - 1))), halide_error_access_out_of_bounds("Output buffer Out", 2, Out.min.2.required, ((Out.min.2.required + Out.extent.2.required) - 1), Out.min.2, ((Out.min.2 + Out.extent.2) - 1)))
 assert((Out.extent.2 >= 0), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
 assert(((Out.min.3 <= Out.min.3.required) && (((Out.min.3 + Out.extent.3) - 1) >= ((Out.min.3.required + Out.extent.3.required) - 1))), halide_error_access_out_of_bounds("Output buffer Out", 3, Out.min.3.required, ((Out.min.3.required + Out.extent.3.required) - 1), Out.min.3, ((Out.min.3 + Out.extent.3) - 1)))
 assert((Out.extent.3 >= 0), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
 assert(((Out.min.4 <= Out.min.4.required) && (((Out.min.4 + Out.extent.4) - 1) >= ((Out.min.4.required + Out.extent.4.required) - 1))), halide_error_access_out_of_bounds("Output buffer Out", 4, Out.min.4.required, ((Out.min.4.required + Out.extent.4.required) - 1), Out.min.4, ((Out.min.4 + Out.extent.4) - 1)))
 assert((Out.extent.4 >= 0), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
 assert(((Out.min.5 <= Out.min.5.required) && (((Out.min.5 + Out.extent.5) - 1) >= ((Out.min.5.required + Out.extent.5.required) - 1))), halide_error_access_out_of_bounds("Output buffer Out", 5, Out.min.5.required, ((Out.min.5.required + Out.extent.5.required) - 1), Out.min.5, ((Out.min.5 + Out.extent.5) - 1)))
 assert((Out.extent.5 >= 0), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
 assert(((Out.min.6 <= Out.min.6.required) && (((Out.min.6 + Out.extent.6) - 1) >= ((Out.min.6.required + Out.extent.6.required) - 1))), halide_error_access_out_of_bounds("Output buffer Out", 6, Out.min.6.required, ((Out.min.6.required + Out.extent.6.required) - 1), Out.min.6, ((Out.min.6 + Out.extent.6) - 1)))
 assert((Out.extent.6 >= 0), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
 assert(((Out.min.7 <= Out.min.7.required) && (((Out.min.7 + Out.extent.7) - 1) >= ((Out.min.7.required + Out.extent.7.required) - 1))), halide_error_access_out_of_bounds("Output buffer Out", 7, Out.min.7.required, ((Out.min.7.required + Out.extent.7.required) - 1), Out.min.7, ((Out.min.7 + Out.extent.7) - 1)))
 assert((Out.extent.7 >= 0), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
 assert(((Out.min.8 <= Out.min.8.required) && (((Out.min.8 + Out.extent.8) - 1) >= ((Out.min.8.required + Out.extent.8.required) - 1))), halide_error_access_out_of_bounds("Output buffer Out", 8, Out.min.8.required, ((Out.min.8.required + Out.extent.8.required) - 1), Out.min.8, ((Out.min.8 + Out.extent.8) - 1)))
 assert((Out.extent.8 >= 0), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
 assert(((Out.min.9 <= Out.min.9.required) && (((Out.min.9 + Out.extent.9) - 1) >= ((Out.min.9.required + Out.extent.9.required) - 1))), halide_error_access_out_of_bounds("Output buffer Out", 9, Out.min.9.required, ((Out.min.9.required + Out.extent.9.required) - 1), Out.min.9, ((Out.min.9 + Out.extent.9) - 1)))
 assert((Out.extent.9 >= 0), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
 assert(((P.min.0 <= P.min.0.required) && (((P.min.0 + P.extent.0) - 1) >= ((P.min.0.required + P.extent.0.required) - 1))), halide_error_access_out_of_bounds("Input buffer P", 0, P.min.0.required, ((P.min.0.required + P.extent.0.required) - 1), P.min.0, ((P.min.0 + P.extent.0) - 1)))
 assert((P.extent.0 >= 0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
 assert(((P.min.1 <= P.min.1.required) && (((P.min.1 + P.extent.1) - 1) >= ((P.min.1.required + P.extent.1.required) - 1))), halide_error_access_out_of_bounds("Input buffer P", 1, P.min.1.required, ((P.min.1.required + P.extent.1.required) - 1), P.min.1, ((P.min.1 + P.extent.1) - 1)))
 assert((P.extent.1 >= 0), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
 assert(((W.min.0 <= W.min.0.required) && (((W.min.0 + W.extent.0) - 1) >= ((W.min.0.required + W.extent.0.required) - 1))), halide_error_access_out_of_bounds("Input buffer W", 0, W.min.0.required, ((W.min.0.required + W.extent.0.required) - 1), W.min.0, ((W.min.0 + W.extent.0) - 1)))
 assert((W.extent.0 >= 0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
 assert(((W.min.1 <= W.min.1.required) && (((W.min.1 + W.extent.1) - 1) >= ((W.min.1.required + W.extent.1.required) - 1))), halide_error_access_out_of_bounds("Input buffer W", 1, W.min.1.required, ((W.min.1.required + W.extent.1.required) - 1), W.min.1, ((W.min.1 + W.extent.1) - 1)))
 assert((W.extent.1 >= 0), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
 assert((Out.stride.0 == Out.stride.0.constrained), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", Out.stride.0.constrained))
 assert((P.stride.0 == P.stride.0.constrained), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", P.stride.0.constrained))
 assert((W.stride.0 == W.stride.0.constrained), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", W.stride.0.constrained))
 let Out.total_extent.0 = int64(Out.extent.0)
 let Out.total_extent.1 = (int64(Out.extent.1)*Out.total_extent.0)
 let Out.total_extent.2 = (int64(Out.extent.2)*Out.total_extent.1)
 let Out.total_extent.3 = (int64(Out.extent.3)*Out.total_extent.2)
 let Out.total_extent.4 = (int64(Out.extent.4)*Out.total_extent.3)
 let Out.total_extent.5 = (int64(Out.extent.5)*Out.total_extent.4)
 let Out.total_extent.6 = (int64(Out.extent.6)*Out.total_extent.5)
 let Out.total_extent.7 = (int64(Out.extent.7)*Out.total_extent.6)
 let Out.total_extent.8 = (int64(Out.extent.8)*Out.total_extent.7)
 let Out.total_extent.9 = (int64(Out.extent.9)*Out.total_extent.8)
 let P.total_extent.0 = int64(P.extent.0)
 let P.total_extent.1 = (int64(P.extent.1)*P.total_extent.0)
 let W.total_extent.0 = int64(W.extent.0)
 let W.total_extent.1 = (int64(W.extent.1)*W.total_extent.0)
 assert(((uint64)abs((int64(Out.extent.0)*int64(Out.stride.0.constrained))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.0)*int64(Out.stride.0.constrained))), (uint64)2147483647))
 assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
 assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
 assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
 assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
 assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
 assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
 assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
 assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
 assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
 assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
 assert(((uint64)abs((int64(P.extent.0)*int64(P.stride.0.constrained))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.0)*int64(P.stride.0.constrained))), (uint64)2147483647))
 assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
 assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
 assert(((uint64)abs((int64(W.extent.0)*int64(W.stride.0.constrained))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.0)*int64(W.stride.0.constrained))), (uint64)2147483647))
 assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
 assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
 gpu_block<Default_GPU> (A.s0.n, 0, (P.extent.1/3600)) {
  gpu_block<Default_GPU> (A.s0.nn, 0, 16) {
   gpu_block<Default_GPU> (A.s0.co, 0, 4) {
    gpu_thread<Default_GPU> (A.s0.mx, 0, 4) {
     gpu_thread<Default_GPU> (A.s0.my, 0, 4) {
      realize A[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
       realize B[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
        realize C[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
         for (A.s0.mk, 0, 4) {
          for (A.s0.ci, 0, 8) {
           for (A.s0.yy_xx, 0, 7) {
            for (A.s0.yyy_xxx, 0, 7) {
             for (A.s0.kx, 0, 3) {
              for (A.s0.ky, 0, 3) {
               for (A.s0.coo, 0, 1) {
                for (A.s0.y_x, 0, 1) {
                 vectorized (A.s0.cooo, 0, 8) {
                  for (A.s0.cii, 0, 4) {
                   let A.s0.yyy_xxx_1 = A.s0.yyy_xxx
                   let A.s0.yy_xx_1 = A.s0.yy_xx
                   let A.s0.cooo_1 = A.s0.cooo
                   let A.s0.cii_1 = A.s0.cii
                   A(A.s0.cooo_1, A.s0.yyy_xxx_1, A.s0.yy_xx_1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = (float32)P(((A.s0.nn*512) + ((A.s0.mx*128) + ((A.s0.mk*32) + ((A.s0.ci*4) + A.s0.cii_1)))), ((A.s0.n*225) + (((((((A.s0.y_x*49) + ((A.s0.yy_xx_1*7) + A.s0.yyy_xxx_1))/7)*2) + A.s0.kx)*15) + (((((A.s0.y_x*49) + ((A.s0.yy_xx_1*7) + A.s0.yyy_xxx_1)) % 7)*2) + A.s0.ky))))
                   B(A.s0.cooo_1, A.s0.yyy_xxx_1, A.s0.yy_xx_1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = (float32)W(((A.s0.my*32) + ((A.s0.co*8) + ((A.s0.coo*8) + A.s0.cooo_1))), ((A.s0.mk*288) + ((A.s0.ci*36) + ((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii_1)))))
                   C(A.s0.cooo_1, A.s0.yyy_xxx_1, A.s0.yy_xx_1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = (select((((((A.s0.cii_1 == 0) && (A.s0.ci == 0)) && (A.s0.mk == 0)) && (A.s0.ky == 0)) && (A.s0.kx == 0)), 0.000000f, select((A.s0.cii_1 == 0), select((A.s0.ky == 0), select((A.s0.kx == 0), select((A.s0.ci == 0), C(A.s0.cooo_1, A.s0.yyy_xxx_1, A.s0.yy_xx_1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), C(A.s0.cooo_1, A.s0.yyy_xxx_1, A.s0.yy_xx_1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)), C(A.s0.cooo_1, A.s0.yyy_xxx_1, A.s0.yy_xx_1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)), C(A.s0.cooo_1, A.s0.yyy_xxx_1, A.s0.yy_xx_1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)), C(A.s0.cooo_1, A.s0.yyy_xxx_1, A.s0.yy_xx_1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))) + (A(A.s0.cooo_1, A.s0.yyy_xxx_1, A.s0.yy_xx_1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)*B(A.s0.cooo_1, A.s0.yyy_xxx_1, A.s0.yy_xx_1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)))
                   if ((((((A.s0.cii_1 == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) {
                    Out(A.s0.cooo_1, A.s0.yyy_xxx_1, A.s0.yy_xx_1, A.s0.y_x, A.s0.my, A.s0.mx, A.s0.coo, A.s0.nn, A.s0.co, A.s0.n) = C(A.s0.cooo_1, A.s0.yyy_xxx_1, A.s0.yy_xx_1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
}


Partitioning loops to simplify boundary conditions...
Lowering after partitioning loops :
let Out.extent.0.required = ((7 + 1) - 0)
let Out.min.0.required = 0
let Out.stride.0.required = 1
let Out.extent.1.required = ((6 + 1) - 0)
let Out.min.1.required = 0
let Out.stride.1.required = (Out.stride.0.required*Out.extent.0.required)
let Out.extent.2.required = ((6 + 1) - 0)
let Out.min.2.required = 0
let Out.stride.2.required = (Out.stride.1.required*Out.extent.1.required)
let Out.extent.3.required = ((((1 + 0) - 1) + 1) - 0)
let Out.min.3.required = 0
let Out.stride.3.required = (Out.stride.2.required*Out.extent.2.required)
let Out.extent.4.required = ((((4 + 0) - 1) + 1) - 0)
let Out.min.4.required = 0
let Out.stride.4.required = (Out.stride.3.required*Out.extent.3.required)
let Out.extent.5.required = ((((4 + 0) - 1) + 1) - 0)
let Out.min.5.required = 0
let Out.stride.5.required = (Out.stride.4.required*Out.extent.4.required)
let Out.extent.6.required = ((((1 + 0) - 1) + 1) - 0)
let Out.min.6.required = 0
let Out.stride.6.required = (Out.stride.5.required*Out.extent.5.required)
let Out.extent.7.required = ((((16 + 0) - 1) + 1) - 0)
let Out.min.7.required = 0
let Out.stride.7.required = (Out.stride.6.required*Out.extent.6.required)
let Out.extent.8.required = ((((4 + 0) - 1) + 1) - 0)
let Out.min.8.required = 0
let Out.stride.8.required = (Out.stride.7.required*Out.extent.7.required)
let Out.extent.9.required = (((((P.extent.1/3600) + 0) - 1) + 1) - 0)
let Out.min.9.required = 0
let Out.stride.9.required = (Out.stride.8.required*Out.extent.8.required)
let P.extent.0.required = P.extent.0
let P.min.0.required = P.min.0
let P.stride.0.required = 1
let P.extent.1.required = P.extent.1
let P.min.1.required = P.min.1
let P.stride.1.required = (P.stride.0.required*P.extent.0.required)
let W.extent.0.required = W.extent.0
let W.min.0.required = W.min.0
let W.stride.0.required = 1
let W.extent.1.required = W.extent.1
let W.min.1.required = W.min.1
let W.stride.1.required = (W.stride.0.required*W.extent.0.required)
let Out.stride.0.constrained = 1
let P.stride.0.constrained = 1
let W.stride.0.constrained = 1
let Out.stride.0.proposed = 1
let Out.min.0.proposed = Out.min.0.required
let Out.extent.0.proposed = Out.extent.0.required
let Out.stride.1.proposed = Out.stride.1.required
let Out.min.1.proposed = Out.min.1.required
let Out.extent.1.proposed = Out.extent.1.required
let Out.stride.2.proposed = Out.stride.2.required
let Out.min.2.proposed = Out.min.2.required
let Out.extent.2.proposed = Out.extent.2.required
let Out.stride.3.proposed = Out.stride.3.required
let Out.min.3.proposed = Out.min.3.required
let Out.extent.3.proposed = Out.extent.3.required
let Out.stride.4.proposed = Out.stride.4.required
let Out.min.4.proposed = Out.min.4.required
let Out.extent.4.proposed = Out.extent.4.required
let Out.stride.5.proposed = Out.stride.5.required
let Out.min.5.proposed = Out.min.5.required
let Out.extent.5.proposed = Out.extent.5.required
let Out.stride.6.proposed = Out.stride.6.required
let Out.min.6.proposed = Out.min.6.required
let Out.extent.6.proposed = Out.extent.6.required
let Out.stride.7.proposed = Out.stride.7.required
let Out.min.7.proposed = Out.min.7.required
let Out.extent.7.proposed = Out.extent.7.required
let Out.stride.8.proposed = Out.stride.8.required
let Out.min.8.proposed = Out.min.8.required
let Out.extent.8.proposed = Out.extent.8.required
let Out.stride.9.proposed = Out.stride.9.required
let Out.min.9.proposed = Out.min.9.required
let Out.extent.9.proposed = Out.extent.9.required
let P.stride.0.proposed = 1
let P.min.0.proposed = P.min.0.required
let P.extent.0.proposed = P.extent.0.required
let P.stride.1.proposed = P.stride.1.required
let P.min.1.proposed = P.min.1.required
let P.extent.1.proposed = P.extent.1.required
let W.stride.0.proposed = 1
let W.min.0.proposed = W.min.0.required
let W.extent.0.proposed = W.extent.0.required
let W.stride.1.proposed = W.stride.1.required
let W.min.1.proposed = W.min.1.required
let W.extent.1.proposed = W.extent.1.required
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || ((Out.min.0.proposed <= Out.min.0.required) && (((Out.min.0.proposed + Out.extent.0.proposed) - 1) >= ((Out.min.0.required + Out.extent.0.required) - 1)))), halide_error_constraints_make_required_region_smaller("Output buffer Out", 0, Out.min.0.proposed, ((Out.min.0.proposed + Out.extent.0.proposed) - 1), Out.min.0.required, ((Out.min.0.required + Out.extent.0.required) - 1)))
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || ((Out.min.1.proposed <= Out.min.1.required) && (((Out.min.1.proposed + Out.extent.1.proposed) - 1) >= ((Out.min.1.required + Out.extent.1.required) - 1)))), halide_error_constraints_make_required_region_smaller("Output buffer Out", 1, Out.min.1.proposed, ((Out.min.1.proposed + Out.extent.1.proposed) - 1), Out.min.1.required, ((Out.min.1.required + Out.extent.1.required) - 1)))
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || ((Out.min.2.proposed <= Out.min.2.required) && (((Out.min.2.proposed + Out.extent.2.proposed) - 1) >= ((Out.min.2.required + Out.extent.2.required) - 1)))), halide_error_constraints_make_required_region_smaller("Output buffer Out", 2, Out.min.2.proposed, ((Out.min.2.proposed + Out.extent.2.proposed) - 1), Out.min.2.required, ((Out.min.2.required + Out.extent.2.required) - 1)))
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || ((Out.min.3.proposed <= Out.min.3.required) && (((Out.min.3.proposed + Out.extent.3.proposed) - 1) >= ((Out.min.3.required + Out.extent.3.required) - 1)))), halide_error_constraints_make_required_region_smaller("Output buffer Out", 3, Out.min.3.proposed, ((Out.min.3.proposed + Out.extent.3.proposed) - 1), Out.min.3.required, ((Out.min.3.required + Out.extent.3.required) - 1)))
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || ((Out.min.4.proposed <= Out.min.4.required) && (((Out.min.4.proposed + Out.extent.4.proposed) - 1) >= ((Out.min.4.required + Out.extent.4.required) - 1)))), halide_error_constraints_make_required_region_smaller("Output buffer Out", 4, Out.min.4.proposed, ((Out.min.4.proposed + Out.extent.4.proposed) - 1), Out.min.4.required, ((Out.min.4.required + Out.extent.4.required) - 1)))
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || ((Out.min.5.proposed <= Out.min.5.required) && (((Out.min.5.proposed + Out.extent.5.proposed) - 1) >= ((Out.min.5.required + Out.extent.5.required) - 1)))), halide_error_constraints_make_required_region_smaller("Output buffer Out", 5, Out.min.5.proposed, ((Out.min.5.proposed + Out.extent.5.proposed) - 1), Out.min.5.required, ((Out.min.5.required + Out.extent.5.required) - 1)))
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || ((Out.min.6.proposed <= Out.min.6.required) && (((Out.min.6.proposed + Out.extent.6.proposed) - 1) >= ((Out.min.6.required + Out.extent.6.required) - 1)))), halide_error_constraints_make_required_region_smaller("Output buffer Out", 6, Out.min.6.proposed, ((Out.min.6.proposed + Out.extent.6.proposed) - 1), Out.min.6.required, ((Out.min.6.required + Out.extent.6.required) - 1)))
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || ((Out.min.7.proposed <= Out.min.7.required) && (((Out.min.7.proposed + Out.extent.7.proposed) - 1) >= ((Out.min.7.required + Out.extent.7.required) - 1)))), halide_error_constraints_make_required_region_smaller("Output buffer Out", 7, Out.min.7.proposed, ((Out.min.7.proposed + Out.extent.7.proposed) - 1), Out.min.7.required, ((Out.min.7.required + Out.extent.7.required) - 1)))
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || ((Out.min.8.proposed <= Out.min.8.required) && (((Out.min.8.proposed + Out.extent.8.proposed) - 1) >= ((Out.min.8.required + Out.extent.8.required) - 1)))), halide_error_constraints_make_required_region_smaller("Output buffer Out", 8, Out.min.8.proposed, ((Out.min.8.proposed + Out.extent.8.proposed) - 1), Out.min.8.required, ((Out.min.8.required + Out.extent.8.required) - 1)))
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || ((Out.min.9.proposed <= Out.min.9.required) && (((Out.min.9.proposed + Out.extent.9.proposed) - 1) >= ((Out.min.9.required + Out.extent.9.required) - 1)))), halide_error_constraints_make_required_region_smaller("Output buffer Out", 9, Out.min.9.proposed, ((Out.min.9.proposed + Out.extent.9.proposed) - 1), Out.min.9.required, ((Out.min.9.required + Out.extent.9.required) - 1)))
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer) || ((P.min.0.proposed <= P.min.0.required) && (((P.min.0.proposed + P.extent.0.proposed) - 1) >= ((P.min.0.required + P.extent.0.required) - 1)))), halide_error_constraints_make_required_region_smaller("Input buffer P", 0, P.min.0.proposed, ((P.min.0.proposed + P.extent.0.proposed) - 1), P.min.0.required, ((P.min.0.required + P.extent.0.required) - 1)))
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer) || ((P.min.1.proposed <= P.min.1.required) && (((P.min.1.proposed + P.extent.1.proposed) - 1) >= ((P.min.1.required + P.extent.1.required) - 1)))), halide_error_constraints_make_required_region_smaller("Input buffer P", 1, P.min.1.proposed, ((P.min.1.proposed + P.extent.1.proposed) - 1), P.min.1.required, ((P.min.1.required + P.extent.1.required) - 1)))
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer) || ((W.min.0.proposed <= W.min.0.required) && (((W.min.0.proposed + W.extent.0.proposed) - 1) >= ((W.min.0.required + W.extent.0.required) - 1)))), halide_error_constraints_make_required_region_smaller("Input buffer W", 0, W.min.0.proposed, ((W.min.0.proposed + W.extent.0.proposed) - 1), W.min.0.required, ((W.min.0.required + W.extent.0.required) - 1)))
assert((!(uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer) || ((W.min.1.proposed <= W.min.1.required) && (((W.min.1.proposed + W.extent.1.proposed) - 1) >= ((W.min.1.required + W.extent.1.required) - 1)))), halide_error_constraints_make_required_region_smaller("Input buffer W", 1, W.min.1.proposed, ((W.min.1.proposed + W.extent.1.proposed) - 1), W.min.1.required, ((W.min.1.required + W.extent.1.required) - 1)))
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(Out.min.0.proposed, Out.extent.0.proposed, Out.stride.0.proposed, 0, Out.min.1.proposed, Out.extent.1.proposed, Out.stride.1.proposed, 0, Out.min.2.proposed, Out.extent.2.proposed, Out.stride.2.proposed, 0, Out.min.3.proposed, Out.extent.3.proposed, Out.stride.3.proposed, 0, Out.min.4.proposed, Out.extent.4.proposed, Out.stride.4.proposed, 0, Out.min.5.proposed, Out.extent.5.proposed, Out.stride.5.proposed, 0, Out.min.6.proposed, Out.extent.6.proposed, Out.stride.6.proposed, 0, Out.min.7.proposed, Out.extent.7.proposed, Out.stride.7.proposed, 0, Out.min.8.proposed, Out.extent.8.proposed, Out.stride.8.proposed, 0, Out.min.9.proposed, Out.extent.9.proposed, Out.stride.9.proposed, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0.proposed, P.extent.0.proposed, P.stride.0.proposed, 0, P.min.1.proposed, P.extent.1.proposed, P.stride.1.proposed, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0.proposed, W.extent.0.proposed, W.stride.0.proposed, 0, W.min.1.proposed, W.extent.1.proposed, W.stride.1.proposed, 0), (uint64)0)
}
if (!((((uint1)0 || (uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) || (uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) || (uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer))) {
 assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
 assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
 assert(((uint32)P.type == (uint32)73730), halide_error_bad_type("Input buffer P", (uint32)P.type, (uint32)73730))
 assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
 assert(((uint32)W.type == (uint32)73730), halide_error_bad_type("Input buffer W", (uint32)W.type, (uint32)73730))
 assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
 assert(((Out.min.0 <= Out.min.0.required) && (((Out.min.0 + Out.extent.0) - 1) >= ((Out.min.0.required + Out.extent.0.required) - 1))), halide_error_access_out_of_bounds("Output buffer Out", 0, Out.min.0.required, ((Out.min.0.required + Out.extent.0.required) - 1), Out.min.0, ((Out.min.0 + Out.extent.0) - 1)))
 assert((Out.extent.0 >= 0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
 assert(((Out.min.1 <= Out.min.1.required) && (((Out.min.1 + Out.extent.1) - 1) >= ((Out.min.1.required + Out.extent.1.required) - 1))), halide_error_access_out_of_bounds("Output buffer Out", 1, Out.min.1.required, ((Out.min.1.required + Out.extent.1.required) - 1), Out.min.1, ((Out.min.1 + Out.extent.1) - 1)))
 assert((Out.extent.1 >= 0), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
 assert(((Out.min.2 <= Out.min.2.required) && (((Out.min.2 + Out.extent.2) - 1) >= ((Out.min.2.required + Out.extent.2.required) - 1))), halide_error_access_out_of_bounds("Output buffer Out", 2, Out.min.2.required, ((Out.min.2.required + Out.extent.2.required) - 1), Out.min.2, ((Out.min.2 + Out.extent.2) - 1)))
 assert((Out.extent.2 >= 0), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
 assert(((Out.min.3 <= Out.min.3.required) && (((Out.min.3 + Out.extent.3) - 1) >= ((Out.min.3.required + Out.extent.3.required) - 1))), halide_error_access_out_of_bounds("Output buffer Out", 3, Out.min.3.required, ((Out.min.3.required + Out.extent.3.required) - 1), Out.min.3, ((Out.min.3 + Out.extent.3) - 1)))
 assert((Out.extent.3 >= 0), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
 assert(((Out.min.4 <= Out.min.4.required) && (((Out.min.4 + Out.extent.4) - 1) >= ((Out.min.4.required + Out.extent.4.required) - 1))), halide_error_access_out_of_bounds("Output buffer Out", 4, Out.min.4.required, ((Out.min.4.required + Out.extent.4.required) - 1), Out.min.4, ((Out.min.4 + Out.extent.4) - 1)))
 assert((Out.extent.4 >= 0), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
 assert(((Out.min.5 <= Out.min.5.required) && (((Out.min.5 + Out.extent.5) - 1) >= ((Out.min.5.required + Out.extent.5.required) - 1))), halide_error_access_out_of_bounds("Output buffer Out", 5, Out.min.5.required, ((Out.min.5.required + Out.extent.5.required) - 1), Out.min.5, ((Out.min.5 + Out.extent.5) - 1)))
 assert((Out.extent.5 >= 0), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
 assert(((Out.min.6 <= Out.min.6.required) && (((Out.min.6 + Out.extent.6) - 1) >= ((Out.min.6.required + Out.extent.6.required) - 1))), halide_error_access_out_of_bounds("Output buffer Out", 6, Out.min.6.required, ((Out.min.6.required + Out.extent.6.required) - 1), Out.min.6, ((Out.min.6 + Out.extent.6) - 1)))
 assert((Out.extent.6 >= 0), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
 assert(((Out.min.7 <= Out.min.7.required) && (((Out.min.7 + Out.extent.7) - 1) >= ((Out.min.7.required + Out.extent.7.required) - 1))), halide_error_access_out_of_bounds("Output buffer Out", 7, Out.min.7.required, ((Out.min.7.required + Out.extent.7.required) - 1), Out.min.7, ((Out.min.7 + Out.extent.7) - 1)))
 assert((Out.extent.7 >= 0), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
 assert(((Out.min.8 <= Out.min.8.required) && (((Out.min.8 + Out.extent.8) - 1) >= ((Out.min.8.required + Out.extent.8.required) - 1))), halide_error_access_out_of_bounds("Output buffer Out", 8, Out.min.8.required, ((Out.min.8.required + Out.extent.8.required) - 1), Out.min.8, ((Out.min.8 + Out.extent.8) - 1)))
 assert((Out.extent.8 >= 0), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
 assert(((Out.min.9 <= Out.min.9.required) && (((Out.min.9 + Out.extent.9) - 1) >= ((Out.min.9.required + Out.extent.9.required) - 1))), halide_error_access_out_of_bounds("Output buffer Out", 9, Out.min.9.required, ((Out.min.9.required + Out.extent.9.required) - 1), Out.min.9, ((Out.min.9 + Out.extent.9) - 1)))
 assert((Out.extent.9 >= 0), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
 assert(((P.min.0 <= P.min.0.required) && (((P.min.0 + P.extent.0) - 1) >= ((P.min.0.required + P.extent.0.required) - 1))), halide_error_access_out_of_bounds("Input buffer P", 0, P.min.0.required, ((P.min.0.required + P.extent.0.required) - 1), P.min.0, ((P.min.0 + P.extent.0) - 1)))
 assert((P.extent.0 >= 0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
 assert(((P.min.1 <= P.min.1.required) && (((P.min.1 + P.extent.1) - 1) >= ((P.min.1.required + P.extent.1.required) - 1))), halide_error_access_out_of_bounds("Input buffer P", 1, P.min.1.required, ((P.min.1.required + P.extent.1.required) - 1), P.min.1, ((P.min.1 + P.extent.1) - 1)))
 assert((P.extent.1 >= 0), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
 assert(((W.min.0 <= W.min.0.required) && (((W.min.0 + W.extent.0) - 1) >= ((W.min.0.required + W.extent.0.required) - 1))), halide_error_access_out_of_bounds("Input buffer W", 0, W.min.0.required, ((W.min.0.required + W.extent.0.required) - 1), W.min.0, ((W.min.0 + W.extent.0) - 1)))
 assert((W.extent.0 >= 0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
 assert(((W.min.1 <= W.min.1.required) && (((W.min.1 + W.extent.1) - 1) >= ((W.min.1.required + W.extent.1.required) - 1))), halide_error_access_out_of_bounds("Input buffer W", 1, W.min.1.required, ((W.min.1.required + W.extent.1.required) - 1), W.min.1, ((W.min.1 + W.extent.1) - 1)))
 assert((W.extent.1 >= 0), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
 assert((Out.stride.0 == Out.stride.0.constrained), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", Out.stride.0.constrained))
 assert((P.stride.0 == P.stride.0.constrained), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", P.stride.0.constrained))
 assert((W.stride.0 == W.stride.0.constrained), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", W.stride.0.constrained))
 let Out.total_extent.0 = int64(Out.extent.0)
 let Out.total_extent.1 = (int64(Out.extent.1)*Out.total_extent.0)
 let Out.total_extent.2 = (int64(Out.extent.2)*Out.total_extent.1)
 let Out.total_extent.3 = (int64(Out.extent.3)*Out.total_extent.2)
 let Out.total_extent.4 = (int64(Out.extent.4)*Out.total_extent.3)
 let Out.total_extent.5 = (int64(Out.extent.5)*Out.total_extent.4)
 let Out.total_extent.6 = (int64(Out.extent.6)*Out.total_extent.5)
 let Out.total_extent.7 = (int64(Out.extent.7)*Out.total_extent.6)
 let Out.total_extent.8 = (int64(Out.extent.8)*Out.total_extent.7)
 let Out.total_extent.9 = (int64(Out.extent.9)*Out.total_extent.8)
 let P.total_extent.0 = int64(P.extent.0)
 let P.total_extent.1 = (int64(P.extent.1)*P.total_extent.0)
 let W.total_extent.0 = int64(W.extent.0)
 let W.total_extent.1 = (int64(W.extent.1)*W.total_extent.0)
 assert(((uint64)abs((int64(Out.extent.0)*int64(Out.stride.0.constrained))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.0)*int64(Out.stride.0.constrained))), (uint64)2147483647))
 assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
 assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
 assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
 assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
 assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
 assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
 assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
 assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
 assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
 assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
 assert(((uint64)abs((int64(P.extent.0)*int64(P.stride.0.constrained))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.0)*int64(P.stride.0.constrained))), (uint64)2147483647))
 assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
 assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
 assert(((uint64)abs((int64(W.extent.0)*int64(W.stride.0.constrained))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.0)*int64(W.stride.0.constrained))), (uint64)2147483647))
 assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
 assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
 gpu_block<Default_GPU> (A.s0.n, 0, (P.extent.1/3600)) {
  gpu_block<Default_GPU> (A.s0.nn, 0, 16) {
   gpu_block<Default_GPU> (A.s0.co, 0, 4) {
    gpu_thread<Default_GPU> (A.s0.mx, 0, 4) {
     gpu_thread<Default_GPU> (A.s0.my, 0, 4) {
      realize A[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
       realize B[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
        realize C[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
         for (A.s0.mk, 0, 4) {
          for (A.s0.ci, 0, 8) {
           for (A.s0.yy_xx, 0, 7) {
            for (A.s0.yyy_xxx, 0, 7) {
             for (A.s0.kx, 0, 3) {
              for (A.s0.ky, 0, 3) {
               for (A.s0.coo, 0, 1) {
                for (A.s0.y_x, 0, 1) {
                 vectorized (A.s0.cooo, 0, 8) {
                  for (A.s0.cii, 0, 4) {
                   let A.s0.yyy_xxx_1 = A.s0.yyy_xxx
                   let A.s0.yy_xx_1 = A.s0.yy_xx
                   let A.s0.cooo_1 = A.s0.cooo
                   let A.s0.cii_1 = A.s0.cii
                   A(A.s0.cooo_1, A.s0.yyy_xxx_1, A.s0.yy_xx_1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = (float32)P(((A.s0.nn*512) + ((A.s0.mx*128) + ((A.s0.mk*32) + ((A.s0.ci*4) + A.s0.cii_1)))), ((A.s0.n*225) + (((((((A.s0.y_x*49) + ((A.s0.yy_xx_1*7) + A.s0.yyy_xxx_1))/7)*2) + A.s0.kx)*15) + (((((A.s0.y_x*49) + ((A.s0.yy_xx_1*7) + A.s0.yyy_xxx_1)) % 7)*2) + A.s0.ky))))
                   B(A.s0.cooo_1, A.s0.yyy_xxx_1, A.s0.yy_xx_1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = (float32)W(((A.s0.my*32) + ((A.s0.co*8) + ((A.s0.coo*8) + A.s0.cooo_1))), ((A.s0.mk*288) + ((A.s0.ci*36) + ((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii_1)))))
                   C(A.s0.cooo_1, A.s0.yyy_xxx_1, A.s0.yy_xx_1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = ((let t5 = select(((((A.s0.cii_1 == 0) && (A.s0.ky == 0)) && (A.s0.kx == 0)) && (A.s0.ci == 0)), C(A.s0.cooo_1, A.s0.yyy_xxx_1, A.s0.yy_xx_1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), C(A.s0.cooo_1, A.s0.yyy_xxx_1, A.s0.yy_xx_1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)) in select((((((A.s0.cii_1 == 0) && (A.s0.ci == 0)) && (A.s0.mk == 0)) && (A.s0.ky == 0)) && (A.s0.kx == 0)), 0.000000f, t5)) + (A(A.s0.cooo_1, A.s0.yyy_xxx_1, A.s0.yy_xx_1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)*B(A.s0.cooo_1, A.s0.yyy_xxx_1, A.s0.yy_xx_1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)))
                   if ((((((A.s0.cii_1 == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) {
                    Out(A.s0.cooo_1, A.s0.yyy_xxx_1, A.s0.yy_xx_1, A.s0.y_x, A.s0.my, A.s0.mx, A.s0.coo, A.s0.nn, A.s0.co, A.s0.n) = C(A.s0.cooo_1, A.s0.yyy_xxx_1, A.s0.yy_xx_1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
}


Simplifying IfThenElse but keeping unit loops...
simplify let Out.extent.0.required = 8 in...
new let Out.extent.0.required.s = (undefined) in ... 8 ...
simplify let Out.min.0.required = 0 in...
new let Out.min.0.required.s = (undefined) in ... 0 ...
simplify let Out.stride.0.required = 1 in...
new let Out.stride.0.required.s = (undefined) in ... 1 ...
simplify let Out.extent.1.required = 7 in...
new let Out.extent.1.required.s = (undefined) in ... 7 ...
simplify let Out.min.1.required = 0 in...
new let Out.min.1.required.s = (undefined) in ... 0 ...
simplify let Out.stride.1.required = 8 in...
new let Out.stride.1.required.s = (undefined) in ... 8 ...
simplify let Out.extent.2.required = 7 in...
new let Out.extent.2.required.s = (undefined) in ... 7 ...
simplify let Out.min.2.required = 0 in...
new let Out.min.2.required.s = (undefined) in ... 0 ...
simplify let Out.stride.2.required = 56 in...
new let Out.stride.2.required.s = (undefined) in ... 56 ...
simplify let Out.extent.3.required = 1 in...
new let Out.extent.3.required.s = (undefined) in ... 1 ...
simplify let Out.min.3.required = 0 in...
new let Out.min.3.required.s = (undefined) in ... 0 ...
simplify let Out.stride.3.required = 392 in...
new let Out.stride.3.required.s = (undefined) in ... 392 ...
simplify let Out.extent.4.required = 4 in...
new let Out.extent.4.required.s = (undefined) in ... 4 ...
simplify let Out.min.4.required = 0 in...
new let Out.min.4.required.s = (undefined) in ... 0 ...
simplify let Out.stride.4.required = 392 in...
new let Out.stride.4.required.s = (undefined) in ... 392 ...
simplify let Out.extent.5.required = 4 in...
new let Out.extent.5.required.s = (undefined) in ... 4 ...
simplify let Out.min.5.required = 0 in...
new let Out.min.5.required.s = (undefined) in ... 0 ...
simplify let Out.stride.5.required = 1568 in...
new let Out.stride.5.required.s = (undefined) in ... 1568 ...
simplify let Out.extent.6.required = 1 in...
new let Out.extent.6.required.s = (undefined) in ... 1 ...
simplify let Out.min.6.required = 0 in...
new let Out.min.6.required.s = (undefined) in ... 0 ...
simplify let Out.stride.6.required = 6272 in...
new let Out.stride.6.required.s = (undefined) in ... 6272 ...
simplify let Out.extent.7.required = 16 in...
new let Out.extent.7.required.s = (undefined) in ... 16 ...
simplify let Out.min.7.required = 0 in...
new let Out.min.7.required.s = (undefined) in ... 0 ...
simplify let Out.stride.7.required = 6272 in...
new let Out.stride.7.required.s = (undefined) in ... 6272 ...
simplify let Out.extent.8.required = 4 in...
new let Out.extent.8.required.s = (undefined) in ... 4 ...
simplify let Out.min.8.required = 0 in...
new let Out.min.8.required.s = (undefined) in ... 0 ...
simplify let Out.stride.8.required = 100352 in...
new let Out.stride.8.required.s = (undefined) in ... 100352 ...
simplify let Out.extent.9.required = (P.extent.1/3600) in...
new let Out.extent.9.required.s = (undefined) in ... (P.extent.1/3600) ...
simplify let Out.min.9.required = 0 in...
new let Out.min.9.required.s = (undefined) in ... 0 ...
simplify let Out.stride.9.required = 401408 in...
new let Out.stride.9.required.s = (undefined) in ... 401408 ...
simplify let P.extent.0.required = P.extent.0 in...
new let P.extent.0.required.s = (undefined) in ... P.extent.0 ...
simplify let P.min.0.required = P.min.0 in...
new let P.min.0.required.s = (undefined) in ... P.min.0 ...
simplify let P.stride.0.required = 1 in...
new let P.stride.0.required.s = (undefined) in ... 1 ...
simplify let P.extent.1.required = P.extent.1 in...
new let P.extent.1.required.s = (undefined) in ... P.extent.1 ...
simplify let P.min.1.required = P.min.1 in...
new let P.min.1.required.s = (undefined) in ... P.min.1 ...
simplify let P.stride.1.required = P.extent.0 in...
new let P.stride.1.required.s = (undefined) in ... P.extent.0 ...
simplify let W.extent.0.required = W.extent.0 in...
new let W.extent.0.required.s = (undefined) in ... W.extent.0 ...
simplify let W.min.0.required = W.min.0 in...
new let W.min.0.required.s = (undefined) in ... W.min.0 ...
simplify let W.stride.0.required = 1 in...
new let W.stride.0.required.s = (undefined) in ... 1 ...
simplify let W.extent.1.required = W.extent.1 in...
new let W.extent.1.required.s = (undefined) in ... W.extent.1 ...
simplify let W.min.1.required = W.min.1 in...
new let W.min.1.required.s = (undefined) in ... W.min.1 ...
simplify let W.stride.1.required = W.extent.0 in...
new let W.stride.1.required.s = (undefined) in ... W.extent.0 ...
simplify let Out.stride.0.constrained = 1 in...
new let Out.stride.0.constrained.s = (undefined) in ... 1 ...
simplify let P.stride.0.constrained = 1 in...
new let P.stride.0.constrained.s = (undefined) in ... 1 ...
simplify let W.stride.0.constrained = 1 in...
new let W.stride.0.constrained.s = (undefined) in ... 1 ...
simplify let Out.stride.0.proposed = 1 in...
new let Out.stride.0.proposed.s = (undefined) in ... 1 ...
simplify let Out.min.0.proposed = 0 in...
new let Out.min.0.proposed.s = (undefined) in ... 0 ...
simplify let Out.extent.0.proposed = 8 in...
new let Out.extent.0.proposed.s = (undefined) in ... 8 ...
simplify let Out.stride.1.proposed = 8 in...
new let Out.stride.1.proposed.s = (undefined) in ... 8 ...
simplify let Out.min.1.proposed = 0 in...
new let Out.min.1.proposed.s = (undefined) in ... 0 ...
simplify let Out.extent.1.proposed = 7 in...
new let Out.extent.1.proposed.s = (undefined) in ... 7 ...
simplify let Out.stride.2.proposed = 56 in...
new let Out.stride.2.proposed.s = (undefined) in ... 56 ...
simplify let Out.min.2.proposed = 0 in...
new let Out.min.2.proposed.s = (undefined) in ... 0 ...
simplify let Out.extent.2.proposed = 7 in...
new let Out.extent.2.proposed.s = (undefined) in ... 7 ...
simplify let Out.stride.3.proposed = 392 in...
new let Out.stride.3.proposed.s = (undefined) in ... 392 ...
simplify let Out.min.3.proposed = 0 in...
new let Out.min.3.proposed.s = (undefined) in ... 0 ...
simplify let Out.extent.3.proposed = 1 in...
new let Out.extent.3.proposed.s = (undefined) in ... 1 ...
simplify let Out.stride.4.proposed = 392 in...
new let Out.stride.4.proposed.s = (undefined) in ... 392 ...
simplify let Out.min.4.proposed = 0 in...
new let Out.min.4.proposed.s = (undefined) in ... 0 ...
simplify let Out.extent.4.proposed = 4 in...
new let Out.extent.4.proposed.s = (undefined) in ... 4 ...
simplify let Out.stride.5.proposed = 1568 in...
new let Out.stride.5.proposed.s = (undefined) in ... 1568 ...
simplify let Out.min.5.proposed = 0 in...
new let Out.min.5.proposed.s = (undefined) in ... 0 ...
simplify let Out.extent.5.proposed = 4 in...
new let Out.extent.5.proposed.s = (undefined) in ... 4 ...
simplify let Out.stride.6.proposed = 6272 in...
new let Out.stride.6.proposed.s = (undefined) in ... 6272 ...
simplify let Out.min.6.proposed = 0 in...
new let Out.min.6.proposed.s = (undefined) in ... 0 ...
simplify let Out.extent.6.proposed = 1 in...
new let Out.extent.6.proposed.s = (undefined) in ... 1 ...
simplify let Out.stride.7.proposed = 6272 in...
new let Out.stride.7.proposed.s = (undefined) in ... 6272 ...
simplify let Out.min.7.proposed = 0 in...
new let Out.min.7.proposed.s = (undefined) in ... 0 ...
simplify let Out.extent.7.proposed = 16 in...
new let Out.extent.7.proposed.s = (undefined) in ... 16 ...
simplify let Out.stride.8.proposed = 100352 in...
new let Out.stride.8.proposed.s = (undefined) in ... 100352 ...
simplify let Out.min.8.proposed = 0 in...
new let Out.min.8.proposed.s = (undefined) in ... 0 ...
simplify let Out.extent.8.proposed = 4 in...
new let Out.extent.8.proposed.s = (undefined) in ... 4 ...
simplify let Out.stride.9.proposed = 401408 in...
new let Out.stride.9.proposed.s = (undefined) in ... 401408 ...
simplify let Out.min.9.proposed = 0 in...
new let Out.min.9.proposed.s = (undefined) in ... 0 ...
simplify let Out.extent.9.proposed = (P.extent.1/3600) in...
new let Out.extent.9.proposed.s = (undefined) in ... (P.extent.1/3600) ...
simplify let P.stride.0.proposed = 1 in...
new let P.stride.0.proposed.s = (undefined) in ... 1 ...
simplify let P.min.0.proposed = P.min.0 in...
new let P.min.0.proposed.s = (undefined) in ... P.min.0 ...
simplify let P.extent.0.proposed = P.extent.0 in...
new let P.extent.0.proposed.s = (undefined) in ... P.extent.0 ...
simplify let P.stride.1.proposed = P.extent.0 in...
new let P.stride.1.proposed.s = (undefined) in ... P.extent.0 ...
simplify let P.min.1.proposed = P.min.1 in...
new let P.min.1.proposed.s = (undefined) in ... P.min.1 ...
simplify let P.extent.1.proposed = P.extent.1 in...
new let P.extent.1.proposed.s = (undefined) in ... P.extent.1 ...
simplify let W.stride.0.proposed = 1 in...
new let W.stride.0.proposed.s = (undefined) in ... 1 ...
simplify let W.min.0.proposed = W.min.0 in...
new let W.min.0.proposed.s = (undefined) in ... W.min.0 ...
simplify let W.extent.0.proposed = W.extent.0 in...
new let W.extent.0.proposed.s = (undefined) in ... W.extent.0 ...
simplify let W.stride.1.proposed = W.extent.0 in...
new let W.stride.1.proposed.s = (undefined) in ... W.extent.0 ...
simplify let W.min.1.proposed = W.min.1 in...
new let W.min.1.proposed.s = (undefined) in ... W.min.1 ...
simplify let W.extent.1.proposed = W.extent.1 in...
new let W.extent.1.proposed.s = (undefined) in ... W.extent.1 ...
simplify let Out.total_extent.0 = int64(Out.extent.0) in...
new let Out.total_extent.0.s = (undefined) in ... int64(Out.extent.0) ...
simplify let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0)) in...
simplify let Out.total_extent.2 = ((int64)Out.total_extent.1*int64(Out.extent.2)) in...
simplify let Out.total_extent.3 = ((int64)Out.total_extent.2*int64(Out.extent.3)) in...
simplify let Out.total_extent.4 = ((int64)Out.total_extent.3*int64(Out.extent.4)) in...
simplify let Out.total_extent.5 = ((int64)Out.total_extent.4*int64(Out.extent.5)) in...
simplify let Out.total_extent.6 = ((int64)Out.total_extent.5*int64(Out.extent.6)) in...
simplify let Out.total_extent.7 = ((int64)Out.total_extent.6*int64(Out.extent.7)) in...
simplify let Out.total_extent.8 = ((int64)Out.total_extent.7*int64(Out.extent.8)) in...
simplify let Out.total_extent.9 = ((int64)Out.total_extent.8*int64(Out.extent.9)) in...
simplify let P.total_extent.0 = int64(P.extent.0) in...
new let P.total_extent.0.s = (undefined) in ... int64(P.extent.0) ...
simplify let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0)) in...
simplify let W.total_extent.0 = int64(W.extent.0) in...
new let W.total_extent.0.s = (undefined) in ... int64(W.extent.0) ...
simplify let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0)) in...
simplify let A.s0.yyy_xxx_1 = A.s0.yyy_xxx in...
new let A.s0.yyy_xxx_1.s = (undefined) in ... A.s0.yyy_xxx ...
simplify let A.s0.yy_xx_1 = A.s0.yy_xx in...
new let A.s0.yy_xx_1.s = (undefined) in ... A.s0.yy_xx ...
simplify let A.s0.cooo_1 = A.s0.cooo in...
new let A.s0.cooo_1.s = (undefined) in ... A.s0.cooo ...
simplify let A.s0.cii_1 = A.s0.cii in...
new let A.s0.cii_1.s = (undefined) in ... A.s0.cii ...
simplify let t5 = (float32)C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) in...
Lowering after simplifying IfThenElse but keeping unit loops:
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
if (!((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer) || ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || (uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)))) {
 assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
 assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
 assert(((uint32)P.type == (uint32)73730), halide_error_bad_type("Input buffer P", (uint32)P.type, (uint32)73730))
 assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
 assert(((uint32)W.type == (uint32)73730), halide_error_bad_type("Input buffer W", (uint32)W.type, (uint32)73730))
 assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
 assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
 assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
 assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
 assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
 assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
 assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
 assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
 assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
 assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
 assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
 assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
 assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
 assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
 assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
 assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
 assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
 assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
 assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
 assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
 assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
 0
 assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
 0
 assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
 0
 assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
 0
 assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
 assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
 assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
 assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
 let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
 let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
 let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
 let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
 let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
 let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
 let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
 let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
 let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
 let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
 let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
 assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
 assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
 assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
 assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
 assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
 assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
 assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
 assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
 assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
 assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
 assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
 assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
 assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
 assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
 assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
 assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
 assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
 gpu_block<Default_GPU> (A.s0.n, 0, (P.extent.1/3600)) {
  gpu_block<Default_GPU> (A.s0.nn, 0, 16) {
   gpu_block<Default_GPU> (A.s0.co, 0, 4) {
    gpu_thread<Default_GPU> (A.s0.mx, 0, 4) {
     gpu_thread<Default_GPU> (A.s0.my, 0, 4) {
      realize A[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
       realize B[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
        realize C[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
         for (A.s0.mk, 0, 4) {
          for (A.s0.ci, 0, 8) {
           for (A.s0.yy_xx, 0, 7) {
            for (A.s0.yyy_xxx, 0, 7) {
             for (A.s0.kx, 0, 3) {
              for (A.s0.ky, 0, 3) {
               for (A.s0.coo, 0, 1) {
                for (A.s0.y_x, 0, 1) {
                 vectorized (A.s0.cooo, 0, 8) {
                  for (A.s0.cii, 0, 4) {
                   A(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = (float32)P(((A.s0.nn*512) + ((A.s0.mx*128) + ((A.s0.mk*32) + ((A.s0.ci*4) + A.s0.cii)))), ((A.s0.n*225) + ((((((A.s0.y_x*7) + ((A.s0.yyy_xxx/7) + A.s0.yy_xx))*2) + A.s0.kx)*15) + (((A.s0.yyy_xxx % 7)*2) + A.s0.ky))))
                   B(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = (float32)W(((A.s0.my*32) + ((A.s0.co*8) + ((A.s0.coo*8) + A.s0.cooo))), ((A.s0.mk*288) + ((A.s0.ci*36) + ((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii)))))
                   C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = ((let t5 = C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) in select((((((A.s0.cii == 0) && (A.s0.ci == 0)) && (A.s0.mk == 0)) && (A.s0.ky == 0)) && (A.s0.kx == 0)), 0.000000f, t5)) + (A(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)*B(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)))
                   if ((((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) {
                    Out(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, A.s0.y_x, A.s0.my, A.s0.mx, A.s0.coo, A.s0.nn, A.s0.co, A.s0.n) = C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
}


Removing extern loops...
Lowering after removing extern loops:
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
if (!((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer) || ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || (uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)))) {
 assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
 assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
 assert(((uint32)P.type == (uint32)73730), halide_error_bad_type("Input buffer P", (uint32)P.type, (uint32)73730))
 assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
 assert(((uint32)W.type == (uint32)73730), halide_error_bad_type("Input buffer W", (uint32)W.type, (uint32)73730))
 assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
 assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
 assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
 assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
 assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
 assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
 assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
 assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
 assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
 assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
 assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
 assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
 assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
 assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
 assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
 assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
 assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
 assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
 assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
 assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
 assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
 0
 assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
 0
 assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
 0
 assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
 0
 assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
 assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
 assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
 assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
 let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
 let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
 let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
 let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
 let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
 let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
 let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
 let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
 let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
 let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
 let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
 assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
 assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
 assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
 assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
 assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
 assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
 assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
 assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
 assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
 assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
 assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
 assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
 assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
 assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
 assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
 assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
 assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
 gpu_block<Default_GPU> (A.s0.n, 0, (P.extent.1/3600)) {
  gpu_block<Default_GPU> (A.s0.nn, 0, 16) {
   gpu_block<Default_GPU> (A.s0.co, 0, 4) {
    gpu_thread<Default_GPU> (A.s0.mx, 0, 4) {
     gpu_thread<Default_GPU> (A.s0.my, 0, 4) {
      realize A[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
       realize B[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
        realize C[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
         for (A.s0.mk, 0, 4) {
          for (A.s0.ci, 0, 8) {
           for (A.s0.yy_xx, 0, 7) {
            for (A.s0.yyy_xxx, 0, 7) {
             for (A.s0.kx, 0, 3) {
              for (A.s0.ky, 0, 3) {
               for (A.s0.coo, 0, 1) {
                for (A.s0.y_x, 0, 1) {
                 vectorized (A.s0.cooo, 0, 8) {
                  for (A.s0.cii, 0, 4) {
                   A(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = (float32)P(((A.s0.nn*512) + ((A.s0.mx*128) + ((A.s0.mk*32) + ((A.s0.ci*4) + A.s0.cii)))), ((A.s0.n*225) + ((((((A.s0.y_x*7) + ((A.s0.yyy_xxx/7) + A.s0.yy_xx))*2) + A.s0.kx)*15) + (((A.s0.yyy_xxx % 7)*2) + A.s0.ky))))
                   B(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = (float32)W(((A.s0.my*32) + ((A.s0.co*8) + ((A.s0.coo*8) + A.s0.cooo))), ((A.s0.mk*288) + ((A.s0.ci*36) + ((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii)))))
                   C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = ((let t5 = C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) in select((((((A.s0.cii == 0) && (A.s0.ci == 0)) && (A.s0.mk == 0)) && (A.s0.ky == 0)) && (A.s0.kx == 0)), 0.000000f, t5)) + (A(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)*B(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)))
                   if ((((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) {
                    Out(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, A.s0.y_x, A.s0.my, A.s0.mx, A.s0.coo, A.s0.nn, A.s0.co, A.s0.n) = C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
}

Performing sliding window optimization...
Lowering after sliding window:
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
if (!((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer) || ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || (uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)))) {
 assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
 assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
 assert(((uint32)P.type == (uint32)73730), halide_error_bad_type("Input buffer P", (uint32)P.type, (uint32)73730))
 assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
 assert(((uint32)W.type == (uint32)73730), halide_error_bad_type("Input buffer W", (uint32)W.type, (uint32)73730))
 assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
 assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
 assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
 assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
 assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
 assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
 assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
 assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
 assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
 assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
 assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
 assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
 assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
 assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
 assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
 assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
 assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
 assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
 assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
 assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
 assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
 0
 assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
 0
 assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
 0
 assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
 0
 assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
 assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
 assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
 assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
 let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
 let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
 let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
 let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
 let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
 let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
 let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
 let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
 let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
 let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
 let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
 assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
 assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
 assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
 assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
 assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
 assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
 assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
 assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
 assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
 assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
 assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
 assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
 assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
 assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
 assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
 assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
 assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
 gpu_block<Default_GPU> (A.s0.n, 0, (P.extent.1/3600)) {
  gpu_block<Default_GPU> (A.s0.nn, 0, 16) {
   gpu_block<Default_GPU> (A.s0.co, 0, 4) {
    gpu_thread<Default_GPU> (A.s0.mx, 0, 4) {
     gpu_thread<Default_GPU> (A.s0.my, 0, 4) {
      realize A[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
       realize B[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
        realize C[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
         for (A.s0.mk, 0, 4) {
          for (A.s0.ci, 0, 8) {
           for (A.s0.yy_xx, 0, 7) {
            for (A.s0.yyy_xxx, 0, 7) {
             for (A.s0.kx, 0, 3) {
              for (A.s0.ky, 0, 3) {
               for (A.s0.coo, 0, 1) {
                for (A.s0.y_x, 0, 1) {
                 vectorized (A.s0.cooo, 0, 8) {
                  for (A.s0.cii, 0, 4) {
                   A(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = (float32)P(((A.s0.nn*512) + ((A.s0.mx*128) + ((A.s0.mk*32) + ((A.s0.ci*4) + A.s0.cii)))), ((A.s0.n*225) + ((((((A.s0.y_x*7) + ((A.s0.yyy_xxx/7) + A.s0.yy_xx))*2) + A.s0.kx)*15) + (((A.s0.yyy_xxx % 7)*2) + A.s0.ky))))
                   B(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = (float32)W(((A.s0.my*32) + ((A.s0.co*8) + ((A.s0.coo*8) + A.s0.cooo))), ((A.s0.mk*288) + ((A.s0.ci*36) + ((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii)))))
                   C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = ((let t5 = C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) in select((((((A.s0.cii == 0) && (A.s0.ci == 0)) && (A.s0.mk == 0)) && (A.s0.ky == 0)) && (A.s0.kx == 0)), 0.000000f, t5)) + (A(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)*B(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)))
                   if ((((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) {
                    Out(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, A.s0.y_x, A.s0.my, A.s0.mx, A.s0.coo, A.s0.nn, A.s0.co, A.s0.n) = C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
}

Simplifying correlated differences...
Lowering after simplifying correlated differences:
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
if (!((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer) || ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || (uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)))) {
 assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
 assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
 assert(((uint32)P.type == (uint32)73730), halide_error_bad_type("Input buffer P", (uint32)P.type, (uint32)73730))
 assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
 assert(((uint32)W.type == (uint32)73730), halide_error_bad_type("Input buffer W", (uint32)W.type, (uint32)73730))
 assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
 assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
 assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
 assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
 assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
 assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
 assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
 assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
 assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
 assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
 assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
 assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
 assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
 assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
 assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
 assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
 assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
 assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
 assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
 assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
 assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
 0
 assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
 0
 assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
 0
 assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
 0
 assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
 assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
 assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
 assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
 let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
 let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
 let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
 let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
 let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
 let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
 let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
 let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
 let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
 let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
 let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
 assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
 assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
 assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
 assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
 assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
 assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
 assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
 assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
 assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
 assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
 assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
 assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
 assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
 assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
 assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
 assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
 assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
 gpu_block<Default_GPU> (A.s0.n, 0, (P.extent.1/3600)) {
  gpu_block<Default_GPU> (A.s0.nn, 0, 16) {
   gpu_block<Default_GPU> (A.s0.co, 0, 4) {
    gpu_thread<Default_GPU> (A.s0.mx, 0, 4) {
     gpu_thread<Default_GPU> (A.s0.my, 0, 4) {
      realize A[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
       realize B[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
        realize C[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
         for (A.s0.mk, 0, 4) {
          for (A.s0.ci, 0, 8) {
           for (A.s0.yy_xx, 0, 7) {
            for (A.s0.yyy_xxx, 0, 7) {
             for (A.s0.kx, 0, 3) {
              for (A.s0.ky, 0, 3) {
               for (A.s0.coo, 0, 1) {
                for (A.s0.y_x, 0, 1) {
                 vectorized (A.s0.cooo, 0, 8) {
                  for (A.s0.cii, 0, 4) {
                   A(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = (float32)P(((A.s0.nn*512) + ((A.s0.mx*128) + ((A.s0.mk*32) + ((A.s0.ci*4) + A.s0.cii)))), ((A.s0.n*225) + ((((((A.s0.y_x*7) + ((A.s0.yyy_xxx/7) + A.s0.yy_xx))*2) + A.s0.kx)*15) + (((A.s0.yyy_xxx % 7)*2) + A.s0.ky))))
                   B(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = (float32)W(((A.s0.my*32) + ((A.s0.co*8) + ((A.s0.coo*8) + A.s0.cooo))), ((A.s0.mk*288) + ((A.s0.ci*36) + ((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii)))))
                   C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = ((let t5 = C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) in select((((((A.s0.cii == 0) && (A.s0.ci == 0)) && (A.s0.mk == 0)) && (A.s0.ky == 0)) && (A.s0.kx == 0)), 0.000000f, t5)) + (A(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)*B(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)))
                   if ((((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) {
                    Out(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, A.s0.y_x, A.s0.my, A.s0.mx, A.s0.coo, A.s0.nn, A.s0.co, A.s0.n) = C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
}

Performing allocation bounds inference...
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 7 = 7, 7
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 7 = 7, 7
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 1 = 1, 1
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 1 = 1, 1
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope (float32)C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = 0, 6
bounds_of_expr_in_scope A.s0.yy_xx = 0, 6
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 7 = 7, 7
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 7 = 7, 7
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 1 = 1, 1
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 1 = 1, 1
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = 0, 6
bounds_of_expr_in_scope A.s0.yy_xx = 0, 6
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
Box(by Provide) of A
  0 ... ((8 + 0) - 1)
  0 ... ((7 + 0) - 1)
  0 ... ((7 + 0) - 1)
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 7 = 7, 7
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 7 = 7, 7
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 1 = 1, 1
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 1 = 1, 1
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope (float32)C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = 0, 6
bounds_of_expr_in_scope A.s0.yy_xx = 0, 6
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 7 = 7, 7
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 7 = 7, 7
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 1 = 1, 1
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 1 = 1, 1
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = 0, 6
bounds_of_expr_in_scope A.s0.yy_xx = 0, 6
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
Box(by Provide) of B
  0 ... ((8 + 0) - 1)
  0 ... ((7 + 0) - 1)
  0 ... ((7 + 0) - 1)
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
Mutating (((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating ((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating (((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) (0)
Mutating ((A.s0.cii == 3) && (A.s0.ci == 7)) (0)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (1)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
(Miss) Rewrote ((A.s0.cii == 3) && (A.s0.ci == 7)) -> ((A.s0.cii == 3) && (A.s0.ci == 7)) (1)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
Mutating ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Hit) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
(Hit) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Miss) Rewrote ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) -> ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
(Miss) Rewrote (((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) -> ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
Mutating ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Hit) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Hit) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Miss) Rewrote ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) -> ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
(Miss) Rewrote ((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
Mutating ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Hit) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Miss) Rewrote ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) -> ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
(Miss) Rewrote (((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)



Input to CSE ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
After removing lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Include: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))); should extract: 1
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Canonical form without lets ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
0: A.s0.cii, 0
1: 3, 0
2: (A.s0.cii == 3), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: (A.s0.mk == 3), 1
8: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
9: A.s0.ky, 0
10: 2, 0
11: (A.s0.ky == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)), 1
13: A.s0.kx, 0
14: (A.s0.kx == 2), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)), 1
16: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))), 1
With variables ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
With lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Solved expr for A.s0.cii :
  (((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))
  ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 7 = 7, 7
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 7 = 7, 7
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 1 = 1, 1
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 1 = 1, 1
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = 0, 6
bounds_of_expr_in_scope A.s0.yy_xx = 0, 6
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope (float32)C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = ((void *))neg_inf, ((void *))pos_inf
Mutating (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (1)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
(Miss) Rewrote (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)



Input to CSE ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
After removing lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Include: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))); should extract: 1
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Canonical form without lets ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
0: A.s0.cii, 0
1: 3, 0
2: (A.s0.cii == 3), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: (A.s0.mk == 3), 1
8: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
9: A.s0.ky, 0
10: 2, 0
11: (A.s0.ky == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)), 1
13: A.s0.kx, 0
14: (A.s0.kx == 2), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)), 1
16: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))), 1
With variables ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
With lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Solved expr for A.s0.cii :
  (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))
  ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Mutating (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (1)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (1)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (1)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
Mutating ((A.s0.ci == 7) && ((A.s0.mk == 3) && (A.s0.ky == 2))) (1)
(Hit) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (1)
Mutating ((A.s0.mk == 3) && (A.s0.ky == 2)) (0)
(Hit) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Hit) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
(Miss) Rewrote ((A.s0.mk == 3) && (A.s0.ky == 2)) -> ((A.s0.mk == 3) && (A.s0.ky == 2)) (0)
(Miss) Rewrote ((A.s0.ci == 7) && ((A.s0.mk == 3) && (A.s0.ky == 2))) -> ((A.s0.ci == 7) && ((A.s0.mk == 3) && (A.s0.ky == 2))) (1)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> ((A.s0.ci == 7) && ((A.s0.mk == 3) && (A.s0.ky == 2))) (1)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
Mutating ((A.s0.ci == 7) && (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
(Hit) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (1)
Mutating (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote ((A.s0.mk == 3) && (A.s0.ky == 2)) -> ((A.s0.mk == 3) && (A.s0.ky == 2)) (0)
(Hit) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2))) -> ((A.s0.ci == 7) && (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((A.s0.ci == 7) && (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
Mutating ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)
(Hit) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (1)
Mutating ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
(Hit) Rewrote (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
(Miss) Rewrote ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
(Miss) Rewrote ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) -> ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)
(Miss) Rewrote (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)



Input to CSE ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
After removing lets: ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Include: ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)); should extract: 1
Include: (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)); should extract: 1
Include: ((A.s0.mk == 3) && (A.s0.ky == 2)); should extract: 1
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Canonical form without lets ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
0: A.s0.ci, 0
1: 7, 0
2: (A.s0.ci == 7), 1
3: A.s0.mk, 0
4: 3, 0
5: (A.s0.mk == 3), 1
6: A.s0.ky, 0
7: 2, 0
8: (A.s0.ky == 2), 1
9: ((A.s0.mk == 3) && (A.s0.ky == 2)), 1
10: A.s0.kx, 0
11: (A.s0.kx == 2), 1
12: (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)), 1
13: A.s0.cii, 0
14: (A.s0.cii == 3), 1
15: ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)), 1
16: ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))), 1
With variables ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
With lets: ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Solved expr for A.s0.ci :
  (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))
  ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Mutating (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (1)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (1)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.mk == 3) && (A.s0.ci == 7)) (1)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
Mutating ((A.s0.mk == 3) && ((A.s0.ci == 7) && (A.s0.ky == 2))) (1)
(Hit) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (1)
Mutating ((A.s0.ci == 7) && (A.s0.ky == 2)) (0)
(Hit) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
(Hit) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.ky == 2)) -> ((A.s0.ci == 7) && (A.s0.ky == 2)) (0)
(Miss) Rewrote ((A.s0.mk == 3) && ((A.s0.ci == 7) && (A.s0.ky == 2))) -> ((A.s0.mk == 3) && ((A.s0.ci == 7) && (A.s0.ky == 2))) (1)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> ((A.s0.mk == 3) && ((A.s0.ci == 7) && (A.s0.ky == 2))) (1)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
Mutating ((A.s0.mk == 3) && (((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
(Hit) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (1)
Mutating (((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote ((A.s0.ci == 7) && (A.s0.ky == 2)) -> ((A.s0.ci == 7) && (A.s0.ky == 2)) (0)
(Hit) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> (((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Miss) Rewrote ((A.s0.mk == 3) && (((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2))) -> ((A.s0.mk == 3) && (((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((A.s0.mk == 3) && (((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
Mutating ((A.s0.mk == 3) && ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)
(Hit) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (1)
Mutating ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
(Hit) Rewrote (((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> (((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
(Miss) Rewrote ((A.s0.mk == 3) && ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) -> ((A.s0.mk == 3) && ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)
(Miss) Rewrote (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((A.s0.mk == 3) && ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)



Input to CSE ((A.s0.mk == 3) && ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
After removing lets: ((A.s0.mk == 3) && ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Include: ((A.s0.mk == 3) && ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))); should extract: 1
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.ky == 2)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Canonical form without lets ((A.s0.mk == 3) && ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
0: A.s0.mk, 0
1: 3, 0
2: (A.s0.mk == 3), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.ky, 0
7: 2, 0
8: (A.s0.ky == 2), 1
9: ((A.s0.ci == 7) && (A.s0.ky == 2)), 1
10: A.s0.kx, 0
11: (A.s0.kx == 2), 1
12: (((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)), 1
13: A.s0.cii, 0
14: (A.s0.cii == 3), 1
15: ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)), 1
16: ((A.s0.mk == 3) && ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))), 1
With variables ((A.s0.mk == 3) && ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
With lets: ((A.s0.mk == 3) && ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Solved expr for A.s0.mk :
  (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))
  ((A.s0.mk == 3) && ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Mutating (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (1)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (1)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> ((A.s0.ky == 2) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
Mutating ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) (1)
(Hit) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (1)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Hit) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) (0)
(Miss) Rewrote ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) -> ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) (1)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) (1)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
Mutating ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)
(Hit) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (1)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
(Hit) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
(Miss) Rewrote ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) -> ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)
(Miss) Rewrote (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)



Input to CSE ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
After removing lets: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Include: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))); should extract: 1
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Canonical form without lets ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
0: A.s0.ky, 0
1: 2, 0
2: (A.s0.ky == 2), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: 3, 0
8: (A.s0.mk == 3), 1
9: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
10: A.s0.kx, 0
11: (A.s0.kx == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)), 1
13: A.s0.cii, 0
14: (A.s0.cii == 3), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)), 1
16: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))), 1
With variables ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
With lets: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Solved expr for A.s0.ky :
  (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))
  ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Mutating (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (1)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (1)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((A.s0.kx == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
Mutating ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))) (1)
(Hit) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (1)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)) (0)
(Hit) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)) (0)
(Miss) Rewrote ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))) -> ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))) (1)
(Miss) Rewrote (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))) (1)



Input to CSE ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
After removing lets: ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
Include: ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))); should extract: 1
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Canonical form without lets ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
0: A.s0.kx, 0
1: 2, 0
2: (A.s0.kx == 2), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: 3, 0
8: (A.s0.mk == 3), 1
9: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
10: A.s0.ky, 0
11: (A.s0.ky == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)), 1
13: A.s0.cii, 0
14: (A.s0.cii == 3), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)), 1
16: ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))), 1
With variables ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
With lets: ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
Solved expr for A.s0.kx :
  (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))
  ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = 0, 6
bounds_of_expr_in_scope A.s0.yy_xx = 0, 6
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 7 = 7, 7
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 7 = 7, 7
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 1 = 1, 1
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 1 = 1, 1
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = 0, 6
bounds_of_expr_in_scope A.s0.yy_xx = 0, 6
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
Box(by Provide) of C
  0 ... ((8 + 0) - 1)
  0 ... ((7 + 0) - 1)
  0 ... ((7 + 0) - 1)
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
Mutating (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (1)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
(Miss) Rewrote (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)



Input to CSE ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
After removing lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Include: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))); should extract: 1
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Canonical form without lets ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
0: A.s0.cii, 0
1: 3, 0
2: (A.s0.cii == 3), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: (A.s0.mk == 3), 1
8: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
9: A.s0.ky, 0
10: 2, 0
11: (A.s0.ky == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)), 1
13: A.s0.kx, 0
14: (A.s0.kx == 2), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)), 1
16: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))), 1
With variables ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
With lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Solved expr for A.s0.cii :
  (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))
  ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Mutating (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (1)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (1)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (1)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
Mutating ((A.s0.ci == 7) && ((A.s0.mk == 3) && (A.s0.ky == 2))) (1)
(Hit) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (1)
Mutating ((A.s0.mk == 3) && (A.s0.ky == 2)) (0)
(Hit) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Hit) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
(Miss) Rewrote ((A.s0.mk == 3) && (A.s0.ky == 2)) -> ((A.s0.mk == 3) && (A.s0.ky == 2)) (0)
(Miss) Rewrote ((A.s0.ci == 7) && ((A.s0.mk == 3) && (A.s0.ky == 2))) -> ((A.s0.ci == 7) && ((A.s0.mk == 3) && (A.s0.ky == 2))) (1)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> ((A.s0.ci == 7) && ((A.s0.mk == 3) && (A.s0.ky == 2))) (1)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
Mutating ((A.s0.ci == 7) && (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
(Hit) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (1)
Mutating (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote ((A.s0.mk == 3) && (A.s0.ky == 2)) -> ((A.s0.mk == 3) && (A.s0.ky == 2)) (0)
(Hit) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2))) -> ((A.s0.ci == 7) && (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((A.s0.ci == 7) && (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
Mutating ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)
(Hit) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (1)
Mutating ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
(Hit) Rewrote (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
(Miss) Rewrote ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
(Miss) Rewrote ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) -> ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)
(Miss) Rewrote (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)



Input to CSE ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
After removing lets: ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Include: ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)); should extract: 1
Include: (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)); should extract: 1
Include: ((A.s0.mk == 3) && (A.s0.ky == 2)); should extract: 1
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Canonical form without lets ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
0: A.s0.ci, 0
1: 7, 0
2: (A.s0.ci == 7), 1
3: A.s0.mk, 0
4: 3, 0
5: (A.s0.mk == 3), 1
6: A.s0.ky, 0
7: 2, 0
8: (A.s0.ky == 2), 1
9: ((A.s0.mk == 3) && (A.s0.ky == 2)), 1
10: A.s0.kx, 0
11: (A.s0.kx == 2), 1
12: (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)), 1
13: A.s0.cii, 0
14: (A.s0.cii == 3), 1
15: ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)), 1
16: ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))), 1
With variables ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
With lets: ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Solved expr for A.s0.ci :
  (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))
  ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Mutating (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (1)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (1)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.mk == 3) && (A.s0.ci == 7)) (1)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
Mutating ((A.s0.mk == 3) && ((A.s0.ci == 7) && (A.s0.ky == 2))) (1)
(Hit) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (1)
Mutating ((A.s0.ci == 7) && (A.s0.ky == 2)) (0)
(Hit) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
(Hit) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.ky == 2)) -> ((A.s0.ci == 7) && (A.s0.ky == 2)) (0)
(Miss) Rewrote ((A.s0.mk == 3) && ((A.s0.ci == 7) && (A.s0.ky == 2))) -> ((A.s0.mk == 3) && ((A.s0.ci == 7) && (A.s0.ky == 2))) (1)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> ((A.s0.mk == 3) && ((A.s0.ci == 7) && (A.s0.ky == 2))) (1)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
Mutating ((A.s0.mk == 3) && (((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
(Hit) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (1)
Mutating (((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote ((A.s0.ci == 7) && (A.s0.ky == 2)) -> ((A.s0.ci == 7) && (A.s0.ky == 2)) (0)
(Hit) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> (((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Miss) Rewrote ((A.s0.mk == 3) && (((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2))) -> ((A.s0.mk == 3) && (((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((A.s0.mk == 3) && (((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
Mutating ((A.s0.mk == 3) && ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)
(Hit) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (1)
Mutating ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
(Hit) Rewrote (((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> (((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
(Miss) Rewrote ((A.s0.mk == 3) && ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) -> ((A.s0.mk == 3) && ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)
(Miss) Rewrote (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((A.s0.mk == 3) && ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)



Input to CSE ((A.s0.mk == 3) && ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
After removing lets: ((A.s0.mk == 3) && ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Include: ((A.s0.mk == 3) && ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))); should extract: 1
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.ky == 2)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Canonical form without lets ((A.s0.mk == 3) && ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
0: A.s0.mk, 0
1: 3, 0
2: (A.s0.mk == 3), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.ky, 0
7: 2, 0
8: (A.s0.ky == 2), 1
9: ((A.s0.ci == 7) && (A.s0.ky == 2)), 1
10: A.s0.kx, 0
11: (A.s0.kx == 2), 1
12: (((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)), 1
13: A.s0.cii, 0
14: (A.s0.cii == 3), 1
15: ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)), 1
16: ((A.s0.mk == 3) && ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))), 1
With variables ((A.s0.mk == 3) && ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
With lets: ((A.s0.mk == 3) && ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Solved expr for A.s0.mk :
  (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))
  ((A.s0.mk == 3) && ((((A.s0.ci == 7) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Mutating (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (1)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (1)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> ((A.s0.ky == 2) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
Mutating ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) (1)
(Hit) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (1)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Hit) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) (0)
(Miss) Rewrote ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) -> ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) (1)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) (1)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
Mutating ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)
(Hit) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (1)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
(Hit) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
(Miss) Rewrote ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) -> ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)
(Miss) Rewrote (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)



Input to CSE ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
After removing lets: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Include: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))); should extract: 1
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Canonical form without lets ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
0: A.s0.ky, 0
1: 2, 0
2: (A.s0.ky == 2), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: 3, 0
8: (A.s0.mk == 3), 1
9: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
10: A.s0.kx, 0
11: (A.s0.kx == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)), 1
13: A.s0.cii, 0
14: (A.s0.cii == 3), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)), 1
16: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))), 1
With variables ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
With lets: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Solved expr for A.s0.ky :
  (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))
  ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Mutating (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (1)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (1)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((A.s0.kx == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
Mutating ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))) (1)
(Hit) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (1)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)) (0)
(Hit) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)) (0)
(Miss) Rewrote ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))) -> ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))) (1)
(Miss) Rewrote (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))) (1)



Input to CSE ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
After removing lets: ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
Include: ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))); should extract: 1
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Canonical form without lets ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
0: A.s0.kx, 0
1: 2, 0
2: (A.s0.kx == 2), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: 3, 0
8: (A.s0.mk == 3), 1
9: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
10: A.s0.ky, 0
11: (A.s0.ky == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)), 1
13: A.s0.cii, 0
14: (A.s0.cii == 3), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)), 1
16: ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))), 1
With variables ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
With lets: ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
Solved expr for A.s0.kx :
  (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))
  ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
Lowering after allocation bounds inference:
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
if (!((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer) || ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || (uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)))) {
 assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
 assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
 assert(((uint32)P.type == (uint32)73730), halide_error_bad_type("Input buffer P", (uint32)P.type, (uint32)73730))
 assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
 assert(((uint32)W.type == (uint32)73730), halide_error_bad_type("Input buffer W", (uint32)W.type, (uint32)73730))
 assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
 assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
 assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
 assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
 assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
 assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
 assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
 assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
 assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
 assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
 assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
 assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
 assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
 assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
 assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
 assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
 assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
 assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
 assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
 assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
 assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
 0
 assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
 0
 assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
 0
 assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
 0
 assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
 assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
 assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
 assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
 let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
 let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
 let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
 let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
 let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
 let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
 let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
 let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
 let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
 let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
 let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
 assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
 assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
 assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
 assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
 assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
 assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
 assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
 assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
 assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
 assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
 assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
 assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
 assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
 assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
 assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
 assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
 assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
 gpu_block<Default_GPU> (A.s0.n, 0, (P.extent.1/3600)) {
  gpu_block<Default_GPU> (A.s0.nn, 0, 16) {
   gpu_block<Default_GPU> (A.s0.co, 0, 4) {
    gpu_thread<Default_GPU> (A.s0.mx, 0, 4) {
     gpu_thread<Default_GPU> (A.s0.my, 0, 4) {
      let A.n.max_realized = ((P.extent.1/3600) + -1)
      let A.n.min_realized = 0
      let A.n.extent_realized = (P.extent.1/3600)
      let A.co.max_realized = 3
      let A.co.min_realized = 0
      let A.co.extent_realized = 4
      let A.mk.max_realized = 3
      let A.mk.min_realized = 0
      let A.mk.extent_realized = 4
      let A.ci.max_realized = 7
      let A.ci.min_realized = 0
      let A.ci.extent_realized = 8
      let A.kx.max_realized = 2
      let A.kx.min_realized = 0
      let A.kx.extent_realized = 3
      let A.ky.max_realized = 2
      let A.ky.min_realized = 0
      let A.ky.extent_realized = 3
      let A.nn.max_realized = 15
      let A.nn.min_realized = 0
      let A.nn.extent_realized = 16
      let A.coo.max_realized = 0
      let A.coo.min_realized = 0
      let A.coo.extent_realized = 1
      let A.mx.max_realized = 3
      let A.mx.min_realized = 0
      let A.mx.extent_realized = 4
      let A.my.max_realized = 3
      let A.my.min_realized = 0
      let A.my.extent_realized = 4
      let A.y_x.max_realized = 0
      let A.y_x.min_realized = 0
      let A.y_x.extent_realized = 1
      let A.yy_xx.max_realized = 6
      let A.yy_xx.min_realized = 0
      let A.yy_xx.extent_realized = 7
      let A.yyy_xxx.max_realized = 6
      let A.yyy_xxx.min_realized = 0
      let A.yyy_xxx.extent_realized = 7
      let A.cooo.max_realized = 7
      let A.cooo.min_realized = 0
      let A.cooo.extent_realized = 8
      let A.cii.max_realized = 3
      let A.cii.min_realized = 0
      let A.cii.extent_realized = 4
      realize A[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
       let B.n.max_realized = ((P.extent.1/3600) + -1)
       let B.n.min_realized = 0
       let B.n.extent_realized = (P.extent.1/3600)
       let B.co.max_realized = 3
       let B.co.min_realized = 0
       let B.co.extent_realized = 4
       let B.mk.max_realized = 3
       let B.mk.min_realized = 0
       let B.mk.extent_realized = 4
       let B.ci.max_realized = 7
       let B.ci.min_realized = 0
       let B.ci.extent_realized = 8
       let B.kx.max_realized = 2
       let B.kx.min_realized = 0
       let B.kx.extent_realized = 3
       let B.ky.max_realized = 2
       let B.ky.min_realized = 0
       let B.ky.extent_realized = 3
       let B.nn.max_realized = 15
       let B.nn.min_realized = 0
       let B.nn.extent_realized = 16
       let B.coo.max_realized = 0
       let B.coo.min_realized = 0
       let B.coo.extent_realized = 1
       let B.mx.max_realized = 3
       let B.mx.min_realized = 0
       let B.mx.extent_realized = 4
       let B.my.max_realized = 3
       let B.my.min_realized = 0
       let B.my.extent_realized = 4
       let B.y_x.max_realized = 0
       let B.y_x.min_realized = 0
       let B.y_x.extent_realized = 1
       let B.yy_xx.max_realized = 6
       let B.yy_xx.min_realized = 0
       let B.yy_xx.extent_realized = 7
       let B.yyy_xxx.max_realized = 6
       let B.yyy_xxx.min_realized = 0
       let B.yyy_xxx.extent_realized = 7
       let B.cooo.max_realized = 7
       let B.cooo.min_realized = 0
       let B.cooo.extent_realized = 8
       let B.cii.max_realized = 3
       let B.cii.min_realized = 0
       let B.cii.extent_realized = 4
       realize B[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
        let C.n.max_realized = ((P.extent.1/3600) + -1)
        let C.n.min_realized = 0
        let C.n.extent_realized = (P.extent.1/3600)
        let C.co.max_realized = 3
        let C.co.min_realized = 0
        let C.co.extent_realized = 4
        let C.mk.max_realized = 3
        let C.mk.min_realized = 0
        let C.mk.extent_realized = 4
        let C.ci.max_realized = 7
        let C.ci.min_realized = 0
        let C.ci.extent_realized = 8
        let C.kx.max_realized = 2
        let C.kx.min_realized = 0
        let C.kx.extent_realized = 3
        let C.ky.max_realized = 2
        let C.ky.min_realized = 0
        let C.ky.extent_realized = 3
        let C.nn.max_realized = 15
        let C.nn.min_realized = 0
        let C.nn.extent_realized = 16
        let C.coo.max_realized = 0
        let C.coo.min_realized = 0
        let C.coo.extent_realized = 1
        let C.mx.max_realized = 3
        let C.mx.min_realized = 0
        let C.mx.extent_realized = 4
        let C.my.max_realized = 3
        let C.my.min_realized = 0
        let C.my.extent_realized = 4
        let C.y_x.max_realized = 0
        let C.y_x.min_realized = 0
        let C.y_x.extent_realized = 1
        let C.yy_xx.max_realized = 6
        let C.yy_xx.min_realized = 0
        let C.yy_xx.extent_realized = 7
        let C.yyy_xxx.max_realized = 6
        let C.yyy_xxx.min_realized = 0
        let C.yyy_xxx.extent_realized = 7
        let C.cooo.max_realized = 7
        let C.cooo.min_realized = 0
        let C.cooo.extent_realized = 8
        let C.cii.max_realized = 3
        let C.cii.min_realized = 0
        let C.cii.extent_realized = 4
        realize C[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
         for (A.s0.mk, 0, 4) {
          for (A.s0.ci, 0, 8) {
           for (A.s0.yy_xx, 0, 7) {
            for (A.s0.yyy_xxx, 0, 7) {
             for (A.s0.kx, 0, 3) {
              for (A.s0.ky, 0, 3) {
               for (A.s0.coo, 0, 1) {
                for (A.s0.y_x, 0, 1) {
                 vectorized (A.s0.cooo, 0, 8) {
                  for (A.s0.cii, 0, 4) {
                   A(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = (float32)P(((A.s0.nn*512) + ((A.s0.mx*128) + ((A.s0.mk*32) + ((A.s0.ci*4) + A.s0.cii)))), ((A.s0.n*225) + ((((((A.s0.y_x*7) + ((A.s0.yyy_xxx/7) + A.s0.yy_xx))*2) + A.s0.kx)*15) + (((A.s0.yyy_xxx % 7)*2) + A.s0.ky))))
                   B(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = (float32)W(((A.s0.my*32) + ((A.s0.co*8) + ((A.s0.coo*8) + A.s0.cooo))), ((A.s0.mk*288) + ((A.s0.ci*36) + ((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii)))))
                   C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = ((let t5 = C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) in select((((((A.s0.cii == 0) && (A.s0.ci == 0)) && (A.s0.mk == 0)) && (A.s0.ky == 0)) && (A.s0.kx == 0)), 0.000000f, t5)) + (A(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)*B(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)))
                   if ((((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) {
                    Out(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, A.s0.y_x, A.s0.my, A.s0.mx, A.s0.coo, A.s0.nn, A.s0.co, A.s0.n) = C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
}

Removing code that depends on undef values...
Lowering after removing code that depends on undef values:
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
if (!((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer) || ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || (uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)))) {
 assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
 assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
 assert(((uint32)P.type == (uint32)73730), halide_error_bad_type("Input buffer P", (uint32)P.type, (uint32)73730))
 assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
 assert(((uint32)W.type == (uint32)73730), halide_error_bad_type("Input buffer W", (uint32)W.type, (uint32)73730))
 assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
 assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
 assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
 assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
 assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
 assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
 assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
 assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
 assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
 assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
 assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
 assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
 assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
 assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
 assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
 assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
 assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
 assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
 assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
 assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
 assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
 0
 assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
 0
 assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
 0
 assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
 0
 assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
 assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
 assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
 assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
 let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
 let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
 let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
 let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
 let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
 let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
 let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
 let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
 let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
 let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
 let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
 assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
 assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
 assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
 assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
 assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
 assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
 assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
 assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
 assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
 assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
 assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
 assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
 assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
 assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
 assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
 assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
 assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
 gpu_block<Default_GPU> (A.s0.n, 0, (P.extent.1/3600)) {
  gpu_block<Default_GPU> (A.s0.nn, 0, 16) {
   gpu_block<Default_GPU> (A.s0.co, 0, 4) {
    gpu_thread<Default_GPU> (A.s0.mx, 0, 4) {
     gpu_thread<Default_GPU> (A.s0.my, 0, 4) {
      let A.n.max_realized = ((P.extent.1/3600) + -1)
      let A.n.min_realized = 0
      let A.n.extent_realized = (P.extent.1/3600)
      let A.co.max_realized = 3
      let A.co.min_realized = 0
      let A.co.extent_realized = 4
      let A.mk.max_realized = 3
      let A.mk.min_realized = 0
      let A.mk.extent_realized = 4
      let A.ci.max_realized = 7
      let A.ci.min_realized = 0
      let A.ci.extent_realized = 8
      let A.kx.max_realized = 2
      let A.kx.min_realized = 0
      let A.kx.extent_realized = 3
      let A.ky.max_realized = 2
      let A.ky.min_realized = 0
      let A.ky.extent_realized = 3
      let A.nn.max_realized = 15
      let A.nn.min_realized = 0
      let A.nn.extent_realized = 16
      let A.coo.max_realized = 0
      let A.coo.min_realized = 0
      let A.coo.extent_realized = 1
      let A.mx.max_realized = 3
      let A.mx.min_realized = 0
      let A.mx.extent_realized = 4
      let A.my.max_realized = 3
      let A.my.min_realized = 0
      let A.my.extent_realized = 4
      let A.y_x.max_realized = 0
      let A.y_x.min_realized = 0
      let A.y_x.extent_realized = 1
      let A.yy_xx.max_realized = 6
      let A.yy_xx.min_realized = 0
      let A.yy_xx.extent_realized = 7
      let A.yyy_xxx.max_realized = 6
      let A.yyy_xxx.min_realized = 0
      let A.yyy_xxx.extent_realized = 7
      let A.cooo.max_realized = 7
      let A.cooo.min_realized = 0
      let A.cooo.extent_realized = 8
      let A.cii.max_realized = 3
      let A.cii.min_realized = 0
      let A.cii.extent_realized = 4
      realize A[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
       let B.n.max_realized = ((P.extent.1/3600) + -1)
       let B.n.min_realized = 0
       let B.n.extent_realized = (P.extent.1/3600)
       let B.co.max_realized = 3
       let B.co.min_realized = 0
       let B.co.extent_realized = 4
       let B.mk.max_realized = 3
       let B.mk.min_realized = 0
       let B.mk.extent_realized = 4
       let B.ci.max_realized = 7
       let B.ci.min_realized = 0
       let B.ci.extent_realized = 8
       let B.kx.max_realized = 2
       let B.kx.min_realized = 0
       let B.kx.extent_realized = 3
       let B.ky.max_realized = 2
       let B.ky.min_realized = 0
       let B.ky.extent_realized = 3
       let B.nn.max_realized = 15
       let B.nn.min_realized = 0
       let B.nn.extent_realized = 16
       let B.coo.max_realized = 0
       let B.coo.min_realized = 0
       let B.coo.extent_realized = 1
       let B.mx.max_realized = 3
       let B.mx.min_realized = 0
       let B.mx.extent_realized = 4
       let B.my.max_realized = 3
       let B.my.min_realized = 0
       let B.my.extent_realized = 4
       let B.y_x.max_realized = 0
       let B.y_x.min_realized = 0
       let B.y_x.extent_realized = 1
       let B.yy_xx.max_realized = 6
       let B.yy_xx.min_realized = 0
       let B.yy_xx.extent_realized = 7
       let B.yyy_xxx.max_realized = 6
       let B.yyy_xxx.min_realized = 0
       let B.yyy_xxx.extent_realized = 7
       let B.cooo.max_realized = 7
       let B.cooo.min_realized = 0
       let B.cooo.extent_realized = 8
       let B.cii.max_realized = 3
       let B.cii.min_realized = 0
       let B.cii.extent_realized = 4
       realize B[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
        let C.n.max_realized = ((P.extent.1/3600) + -1)
        let C.n.min_realized = 0
        let C.n.extent_realized = (P.extent.1/3600)
        let C.co.max_realized = 3
        let C.co.min_realized = 0
        let C.co.extent_realized = 4
        let C.mk.max_realized = 3
        let C.mk.min_realized = 0
        let C.mk.extent_realized = 4
        let C.ci.max_realized = 7
        let C.ci.min_realized = 0
        let C.ci.extent_realized = 8
        let C.kx.max_realized = 2
        let C.kx.min_realized = 0
        let C.kx.extent_realized = 3
        let C.ky.max_realized = 2
        let C.ky.min_realized = 0
        let C.ky.extent_realized = 3
        let C.nn.max_realized = 15
        let C.nn.min_realized = 0
        let C.nn.extent_realized = 16
        let C.coo.max_realized = 0
        let C.coo.min_realized = 0
        let C.coo.extent_realized = 1
        let C.mx.max_realized = 3
        let C.mx.min_realized = 0
        let C.mx.extent_realized = 4
        let C.my.max_realized = 3
        let C.my.min_realized = 0
        let C.my.extent_realized = 4
        let C.y_x.max_realized = 0
        let C.y_x.min_realized = 0
        let C.y_x.extent_realized = 1
        let C.yy_xx.max_realized = 6
        let C.yy_xx.min_realized = 0
        let C.yy_xx.extent_realized = 7
        let C.yyy_xxx.max_realized = 6
        let C.yyy_xxx.min_realized = 0
        let C.yyy_xxx.extent_realized = 7
        let C.cooo.max_realized = 7
        let C.cooo.min_realized = 0
        let C.cooo.extent_realized = 8
        let C.cii.max_realized = 3
        let C.cii.min_realized = 0
        let C.cii.extent_realized = 4
        realize C[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
         for (A.s0.mk, 0, 4) {
          for (A.s0.ci, 0, 8) {
           for (A.s0.yy_xx, 0, 7) {
            for (A.s0.yyy_xxx, 0, 7) {
             for (A.s0.kx, 0, 3) {
              for (A.s0.ky, 0, 3) {
               for (A.s0.coo, 0, 1) {
                for (A.s0.y_x, 0, 1) {
                 vectorized (A.s0.cooo, 0, 8) {
                  for (A.s0.cii, 0, 4) {
                   A(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = (float32)P(((A.s0.nn*512) + ((A.s0.mx*128) + ((A.s0.mk*32) + ((A.s0.ci*4) + A.s0.cii)))), ((A.s0.n*225) + ((((((A.s0.y_x*7) + ((A.s0.yyy_xxx/7) + A.s0.yy_xx))*2) + A.s0.kx)*15) + (((A.s0.yyy_xxx % 7)*2) + A.s0.ky))))
                   B(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = (float32)W(((A.s0.my*32) + ((A.s0.co*8) + ((A.s0.coo*8) + A.s0.cooo))), ((A.s0.mk*288) + ((A.s0.ci*36) + ((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii)))))
                   C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = ((let t5 = C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) in select((((((A.s0.cii == 0) && (A.s0.ci == 0)) && (A.s0.mk == 0)) && (A.s0.ky == 0)) && (A.s0.kx == 0)), 0.000000f, t5)) + (A(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)*B(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)))
                   if ((((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) {
                    Out(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, A.s0.y_x, A.s0.my, A.s0.mx, A.s0.coo, A.s0.nn, A.s0.co, A.s0.n) = C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
}


Placing device functions...
Lowering after placing device functions:
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
if (!((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer) || ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || (uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)))) {
 assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
 assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
 assert(((uint32)P.type == (uint32)73730), halide_error_bad_type("Input buffer P", (uint32)P.type, (uint32)73730))
 assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
 assert(((uint32)W.type == (uint32)73730), halide_error_bad_type("Input buffer W", (uint32)W.type, (uint32)73730))
 assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
 assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
 assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
 assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
 assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
 assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
 assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
 assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
 assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
 assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
 assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
 assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
 assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
 assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
 assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
 assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
 assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
 assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
 assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
 assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
 assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
 0
 assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
 0
 assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
 0
 assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
 0
 assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
 assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
 assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
 assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
 let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
 let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
 let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
 let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
 let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
 let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
 let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
 let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
 let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
 let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
 let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
 assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
 assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
 assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
 assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
 assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
 assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
 assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
 assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
 assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
 assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
 assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
 assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
 assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
 assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
 assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
 assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
 assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
 gpu_block<Default_GPU> (A.s0.n, 0, (P.extent.1/3600)) {
  gpu_block<Default_GPU> (A.s0.nn, 0, 16) {
   gpu_block<Default_GPU> (A.s0.co, 0, 4) {
    gpu_thread<Default_GPU> (A.s0.mx, 0, 4) {
     gpu_thread<Default_GPU> (A.s0.my, 0, 4) {
      let A.n.max_realized = ((P.extent.1/3600) + -1)
      let A.n.min_realized = 0
      let A.n.extent_realized = (P.extent.1/3600)
      let A.co.max_realized = 3
      let A.co.min_realized = 0
      let A.co.extent_realized = 4
      let A.mk.max_realized = 3
      let A.mk.min_realized = 0
      let A.mk.extent_realized = 4
      let A.ci.max_realized = 7
      let A.ci.min_realized = 0
      let A.ci.extent_realized = 8
      let A.kx.max_realized = 2
      let A.kx.min_realized = 0
      let A.kx.extent_realized = 3
      let A.ky.max_realized = 2
      let A.ky.min_realized = 0
      let A.ky.extent_realized = 3
      let A.nn.max_realized = 15
      let A.nn.min_realized = 0
      let A.nn.extent_realized = 16
      let A.coo.max_realized = 0
      let A.coo.min_realized = 0
      let A.coo.extent_realized = 1
      let A.mx.max_realized = 3
      let A.mx.min_realized = 0
      let A.mx.extent_realized = 4
      let A.my.max_realized = 3
      let A.my.min_realized = 0
      let A.my.extent_realized = 4
      let A.y_x.max_realized = 0
      let A.y_x.min_realized = 0
      let A.y_x.extent_realized = 1
      let A.yy_xx.max_realized = 6
      let A.yy_xx.min_realized = 0
      let A.yy_xx.extent_realized = 7
      let A.yyy_xxx.max_realized = 6
      let A.yyy_xxx.min_realized = 0
      let A.yyy_xxx.extent_realized = 7
      let A.cooo.max_realized = 7
      let A.cooo.min_realized = 0
      let A.cooo.extent_realized = 8
      let A.cii.max_realized = 3
      let A.cii.min_realized = 0
      let A.cii.extent_realized = 4
      realize A[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
       let B.n.max_realized = ((P.extent.1/3600) + -1)
       let B.n.min_realized = 0
       let B.n.extent_realized = (P.extent.1/3600)
       let B.co.max_realized = 3
       let B.co.min_realized = 0
       let B.co.extent_realized = 4
       let B.mk.max_realized = 3
       let B.mk.min_realized = 0
       let B.mk.extent_realized = 4
       let B.ci.max_realized = 7
       let B.ci.min_realized = 0
       let B.ci.extent_realized = 8
       let B.kx.max_realized = 2
       let B.kx.min_realized = 0
       let B.kx.extent_realized = 3
       let B.ky.max_realized = 2
       let B.ky.min_realized = 0
       let B.ky.extent_realized = 3
       let B.nn.max_realized = 15
       let B.nn.min_realized = 0
       let B.nn.extent_realized = 16
       let B.coo.max_realized = 0
       let B.coo.min_realized = 0
       let B.coo.extent_realized = 1
       let B.mx.max_realized = 3
       let B.mx.min_realized = 0
       let B.mx.extent_realized = 4
       let B.my.max_realized = 3
       let B.my.min_realized = 0
       let B.my.extent_realized = 4
       let B.y_x.max_realized = 0
       let B.y_x.min_realized = 0
       let B.y_x.extent_realized = 1
       let B.yy_xx.max_realized = 6
       let B.yy_xx.min_realized = 0
       let B.yy_xx.extent_realized = 7
       let B.yyy_xxx.max_realized = 6
       let B.yyy_xxx.min_realized = 0
       let B.yyy_xxx.extent_realized = 7
       let B.cooo.max_realized = 7
       let B.cooo.min_realized = 0
       let B.cooo.extent_realized = 8
       let B.cii.max_realized = 3
       let B.cii.min_realized = 0
       let B.cii.extent_realized = 4
       realize B[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
        let C.n.max_realized = ((P.extent.1/3600) + -1)
        let C.n.min_realized = 0
        let C.n.extent_realized = (P.extent.1/3600)
        let C.co.max_realized = 3
        let C.co.min_realized = 0
        let C.co.extent_realized = 4
        let C.mk.max_realized = 3
        let C.mk.min_realized = 0
        let C.mk.extent_realized = 4
        let C.ci.max_realized = 7
        let C.ci.min_realized = 0
        let C.ci.extent_realized = 8
        let C.kx.max_realized = 2
        let C.kx.min_realized = 0
        let C.kx.extent_realized = 3
        let C.ky.max_realized = 2
        let C.ky.min_realized = 0
        let C.ky.extent_realized = 3
        let C.nn.max_realized = 15
        let C.nn.min_realized = 0
        let C.nn.extent_realized = 16
        let C.coo.max_realized = 0
        let C.coo.min_realized = 0
        let C.coo.extent_realized = 1
        let C.mx.max_realized = 3
        let C.mx.min_realized = 0
        let C.mx.extent_realized = 4
        let C.my.max_realized = 3
        let C.my.min_realized = 0
        let C.my.extent_realized = 4
        let C.y_x.max_realized = 0
        let C.y_x.min_realized = 0
        let C.y_x.extent_realized = 1
        let C.yy_xx.max_realized = 6
        let C.yy_xx.min_realized = 0
        let C.yy_xx.extent_realized = 7
        let C.yyy_xxx.max_realized = 6
        let C.yyy_xxx.min_realized = 0
        let C.yyy_xxx.extent_realized = 7
        let C.cooo.max_realized = 7
        let C.cooo.min_realized = 0
        let C.cooo.extent_realized = 8
        let C.cii.max_realized = 3
        let C.cii.min_realized = 0
        let C.cii.extent_realized = 4
        realize C[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
         for (A.s0.mk, 0, 4) {
          for (A.s0.ci, 0, 8) {
           for (A.s0.yy_xx, 0, 7) {
            for (A.s0.yyy_xxx, 0, 7) {
             for (A.s0.kx, 0, 3) {
              for (A.s0.ky, 0, 3) {
               for (A.s0.coo, 0, 1) {
                for (A.s0.y_x, 0, 1) {
                 vectorized (A.s0.cooo, 0, 8) {
                  for (A.s0.cii, 0, 4) {
                   A(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = (float32)P(((A.s0.nn*512) + ((A.s0.mx*128) + ((A.s0.mk*32) + ((A.s0.ci*4) + A.s0.cii)))), ((A.s0.n*225) + ((((((A.s0.y_x*7) + ((A.s0.yyy_xxx/7) + A.s0.yy_xx))*2) + A.s0.kx)*15) + (((A.s0.yyy_xxx % 7)*2) + A.s0.ky))))
                   B(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = (float32)W(((A.s0.my*32) + ((A.s0.co*8) + ((A.s0.coo*8) + A.s0.cooo))), ((A.s0.mk*288) + ((A.s0.ci*36) + ((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii)))))
                   C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = ((let t5 = C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) in select((((((A.s0.cii == 0) && (A.s0.ci == 0)) && (A.s0.mk == 0)) && (A.s0.ky == 0)) && (A.s0.kx == 0)), 0.000000f, t5)) + (A(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)*B(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)))
                   if ((((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) {
                    Out(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, A.s0.y_x, A.s0.my, A.s0.mx, A.s0.coo, A.s0.nn, A.s0.co, A.s0.n) = C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
}


Replacing references with channels and shift registers...
Call graph (mapping from a func -> funcs that produce input data for it): 
	A: P_im, A
	B: W_im, B
	C: C, A, B
	Out: C
	P_im: 
	W_im: 
Reverse call graph (mapping from a func -> its consumers): 
	A: A C 
	B: B C 
	C: C Out 
	Out: 
	P_im: A 
	W_im: B 
Funcs to output to channels: 
Lowering after replacing references with channels and shift registers:
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
if (!((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer) || ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || (uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)))) {
 assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
 assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
 assert(((uint32)P.type == (uint32)73730), halide_error_bad_type("Input buffer P", (uint32)P.type, (uint32)73730))
 assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
 assert(((uint32)W.type == (uint32)73730), halide_error_bad_type("Input buffer W", (uint32)W.type, (uint32)73730))
 assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
 assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
 assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
 assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
 assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
 assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
 assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
 assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
 assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
 assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
 assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
 assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
 assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
 assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
 assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
 assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
 assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
 assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
 assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
 assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
 assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
 0
 assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
 0
 assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
 0
 assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
 0
 assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
 assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
 assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
 assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
 let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
 let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
 let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
 let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
 let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
 let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
 let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
 let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
 let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
 let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
 let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
 assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
 assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
 assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
 assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
 assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
 assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
 assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
 assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
 assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
 assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
 assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
 assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
 assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
 assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
 assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
 assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
 assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
 gpu_block<Default_GPU> (A.s0.n, 0, (P.extent.1/3600)) {
  gpu_block<Default_GPU> (A.s0.nn, 0, 16) {
   gpu_block<Default_GPU> (A.s0.co, 0, 4) {
    gpu_thread<Default_GPU> (A.s0.mx, 0, 4) {
     gpu_thread<Default_GPU> (A.s0.my, 0, 4) {
      let A.n.max_realized = ((P.extent.1/3600) + -1)
      let A.n.min_realized = 0
      let A.n.extent_realized = (P.extent.1/3600)
      let A.co.max_realized = 3
      let A.co.min_realized = 0
      let A.co.extent_realized = 4
      let A.mk.max_realized = 3
      let A.mk.min_realized = 0
      let A.mk.extent_realized = 4
      let A.ci.max_realized = 7
      let A.ci.min_realized = 0
      let A.ci.extent_realized = 8
      let A.kx.max_realized = 2
      let A.kx.min_realized = 0
      let A.kx.extent_realized = 3
      let A.ky.max_realized = 2
      let A.ky.min_realized = 0
      let A.ky.extent_realized = 3
      let A.nn.max_realized = 15
      let A.nn.min_realized = 0
      let A.nn.extent_realized = 16
      let A.coo.max_realized = 0
      let A.coo.min_realized = 0
      let A.coo.extent_realized = 1
      let A.mx.max_realized = 3
      let A.mx.min_realized = 0
      let A.mx.extent_realized = 4
      let A.my.max_realized = 3
      let A.my.min_realized = 0
      let A.my.extent_realized = 4
      let A.y_x.max_realized = 0
      let A.y_x.min_realized = 0
      let A.y_x.extent_realized = 1
      let A.yy_xx.max_realized = 6
      let A.yy_xx.min_realized = 0
      let A.yy_xx.extent_realized = 7
      let A.yyy_xxx.max_realized = 6
      let A.yyy_xxx.min_realized = 0
      let A.yyy_xxx.extent_realized = 7
      let A.cooo.max_realized = 7
      let A.cooo.min_realized = 0
      let A.cooo.extent_realized = 8
      let A.cii.max_realized = 3
      let A.cii.min_realized = 0
      let A.cii.extent_realized = 4
      realize A[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
       let B.n.max_realized = ((P.extent.1/3600) + -1)
       let B.n.min_realized = 0
       let B.n.extent_realized = (P.extent.1/3600)
       let B.co.max_realized = 3
       let B.co.min_realized = 0
       let B.co.extent_realized = 4
       let B.mk.max_realized = 3
       let B.mk.min_realized = 0
       let B.mk.extent_realized = 4
       let B.ci.max_realized = 7
       let B.ci.min_realized = 0
       let B.ci.extent_realized = 8
       let B.kx.max_realized = 2
       let B.kx.min_realized = 0
       let B.kx.extent_realized = 3
       let B.ky.max_realized = 2
       let B.ky.min_realized = 0
       let B.ky.extent_realized = 3
       let B.nn.max_realized = 15
       let B.nn.min_realized = 0
       let B.nn.extent_realized = 16
       let B.coo.max_realized = 0
       let B.coo.min_realized = 0
       let B.coo.extent_realized = 1
       let B.mx.max_realized = 3
       let B.mx.min_realized = 0
       let B.mx.extent_realized = 4
       let B.my.max_realized = 3
       let B.my.min_realized = 0
       let B.my.extent_realized = 4
       let B.y_x.max_realized = 0
       let B.y_x.min_realized = 0
       let B.y_x.extent_realized = 1
       let B.yy_xx.max_realized = 6
       let B.yy_xx.min_realized = 0
       let B.yy_xx.extent_realized = 7
       let B.yyy_xxx.max_realized = 6
       let B.yyy_xxx.min_realized = 0
       let B.yyy_xxx.extent_realized = 7
       let B.cooo.max_realized = 7
       let B.cooo.min_realized = 0
       let B.cooo.extent_realized = 8
       let B.cii.max_realized = 3
       let B.cii.min_realized = 0
       let B.cii.extent_realized = 4
       realize B[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
        let C.n.max_realized = ((P.extent.1/3600) + -1)
        let C.n.min_realized = 0
        let C.n.extent_realized = (P.extent.1/3600)
        let C.co.max_realized = 3
        let C.co.min_realized = 0
        let C.co.extent_realized = 4
        let C.mk.max_realized = 3
        let C.mk.min_realized = 0
        let C.mk.extent_realized = 4
        let C.ci.max_realized = 7
        let C.ci.min_realized = 0
        let C.ci.extent_realized = 8
        let C.kx.max_realized = 2
        let C.kx.min_realized = 0
        let C.kx.extent_realized = 3
        let C.ky.max_realized = 2
        let C.ky.min_realized = 0
        let C.ky.extent_realized = 3
        let C.nn.max_realized = 15
        let C.nn.min_realized = 0
        let C.nn.extent_realized = 16
        let C.coo.max_realized = 0
        let C.coo.min_realized = 0
        let C.coo.extent_realized = 1
        let C.mx.max_realized = 3
        let C.mx.min_realized = 0
        let C.mx.extent_realized = 4
        let C.my.max_realized = 3
        let C.my.min_realized = 0
        let C.my.extent_realized = 4
        let C.y_x.max_realized = 0
        let C.y_x.min_realized = 0
        let C.y_x.extent_realized = 1
        let C.yy_xx.max_realized = 6
        let C.yy_xx.min_realized = 0
        let C.yy_xx.extent_realized = 7
        let C.yyy_xxx.max_realized = 6
        let C.yyy_xxx.min_realized = 0
        let C.yyy_xxx.extent_realized = 7
        let C.cooo.max_realized = 7
        let C.cooo.min_realized = 0
        let C.cooo.extent_realized = 8
        let C.cii.max_realized = 3
        let C.cii.min_realized = 0
        let C.cii.extent_realized = 4
        realize C[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
         for (A.s0.mk, 0, 4) {
          for (A.s0.ci, 0, 8) {
           for (A.s0.yy_xx, 0, 7) {
            for (A.s0.yyy_xxx, 0, 7) {
             for (A.s0.kx, 0, 3) {
              for (A.s0.ky, 0, 3) {
               for (A.s0.coo, 0, 1) {
                for (A.s0.y_x, 0, 1) {
                 vectorized (A.s0.cooo, 0, 8) {
                  for (A.s0.cii, 0, 4) {
                   A(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = (float32)P(((A.s0.nn*512) + ((A.s0.mx*128) + ((A.s0.mk*32) + ((A.s0.ci*4) + A.s0.cii)))), ((A.s0.n*225) + ((((((A.s0.y_x*7) + ((A.s0.yyy_xxx/7) + A.s0.yy_xx))*2) + A.s0.kx)*15) + (((A.s0.yyy_xxx % 7)*2) + A.s0.ky))))
                   B(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = (float32)W(((A.s0.my*32) + ((A.s0.co*8) + ((A.s0.coo*8) + A.s0.cooo))), ((A.s0.mk*288) + ((A.s0.ci*36) + ((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii)))))
                   C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = ((let t5 = C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) in select((((((A.s0.cii == 0) && (A.s0.ci == 0)) && (A.s0.mk == 0)) && (A.s0.ky == 0)) && (A.s0.kx == 0)), 0.000000f, t5)) + (A(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)*B(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)))
                   if ((((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) {
                    Out(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, A.s0.y_x, A.s0.my, A.s0.mx, A.s0.coo, A.s0.nn, A.s0.co, A.s0.n) = C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
}


Simplifying IfThenElse without keeping unit loops...
simplify let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0)) in...
simplify let Out.total_extent.2 = ((int64)Out.total_extent.1*int64(Out.extent.2)) in...
simplify let Out.total_extent.3 = ((int64)Out.total_extent.2*int64(Out.extent.3)) in...
simplify let Out.total_extent.4 = ((int64)Out.total_extent.3*int64(Out.extent.4)) in...
simplify let Out.total_extent.5 = ((int64)Out.total_extent.4*int64(Out.extent.5)) in...
simplify let Out.total_extent.6 = ((int64)Out.total_extent.5*int64(Out.extent.6)) in...
simplify let Out.total_extent.7 = ((int64)Out.total_extent.6*int64(Out.extent.7)) in...
simplify let Out.total_extent.8 = ((int64)Out.total_extent.7*int64(Out.extent.8)) in...
simplify let Out.total_extent.9 = ((int64)Out.total_extent.8*int64(Out.extent.9)) in...
simplify let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0)) in...
simplify let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0)) in...
simplify let A.n.max_realized = ((P.extent.1/3600) + -1) in...
new let A.n.max_realized.s = (undefined) in ... ((P.extent.1/3600) + -1) ...
simplify let A.n.min_realized = 0 in...
new let A.n.min_realized.s = (undefined) in ... 0 ...
simplify let A.n.extent_realized = (P.extent.1/3600) in...
new let A.n.extent_realized.s = (undefined) in ... (P.extent.1/3600) ...
simplify let A.co.max_realized = 3 in...
new let A.co.max_realized.s = (undefined) in ... 3 ...
simplify let A.co.min_realized = 0 in...
new let A.co.min_realized.s = (undefined) in ... 0 ...
simplify let A.co.extent_realized = 4 in...
new let A.co.extent_realized.s = (undefined) in ... 4 ...
simplify let A.mk.max_realized = 3 in...
new let A.mk.max_realized.s = (undefined) in ... 3 ...
simplify let A.mk.min_realized = 0 in...
new let A.mk.min_realized.s = (undefined) in ... 0 ...
simplify let A.mk.extent_realized = 4 in...
new let A.mk.extent_realized.s = (undefined) in ... 4 ...
simplify let A.ci.max_realized = 7 in...
new let A.ci.max_realized.s = (undefined) in ... 7 ...
simplify let A.ci.min_realized = 0 in...
new let A.ci.min_realized.s = (undefined) in ... 0 ...
simplify let A.ci.extent_realized = 8 in...
new let A.ci.extent_realized.s = (undefined) in ... 8 ...
simplify let A.kx.max_realized = 2 in...
new let A.kx.max_realized.s = (undefined) in ... 2 ...
simplify let A.kx.min_realized = 0 in...
new let A.kx.min_realized.s = (undefined) in ... 0 ...
simplify let A.kx.extent_realized = 3 in...
new let A.kx.extent_realized.s = (undefined) in ... 3 ...
simplify let A.ky.max_realized = 2 in...
new let A.ky.max_realized.s = (undefined) in ... 2 ...
simplify let A.ky.min_realized = 0 in...
new let A.ky.min_realized.s = (undefined) in ... 0 ...
simplify let A.ky.extent_realized = 3 in...
new let A.ky.extent_realized.s = (undefined) in ... 3 ...
simplify let A.nn.max_realized = 15 in...
new let A.nn.max_realized.s = (undefined) in ... 15 ...
simplify let A.nn.min_realized = 0 in...
new let A.nn.min_realized.s = (undefined) in ... 0 ...
simplify let A.nn.extent_realized = 16 in...
new let A.nn.extent_realized.s = (undefined) in ... 16 ...
simplify let A.coo.max_realized = 0 in...
new let A.coo.max_realized.s = (undefined) in ... 0 ...
simplify let A.coo.min_realized = 0 in...
new let A.coo.min_realized.s = (undefined) in ... 0 ...
simplify let A.coo.extent_realized = 1 in...
new let A.coo.extent_realized.s = (undefined) in ... 1 ...
simplify let A.mx.max_realized = 3 in...
new let A.mx.max_realized.s = (undefined) in ... 3 ...
simplify let A.mx.min_realized = 0 in...
new let A.mx.min_realized.s = (undefined) in ... 0 ...
simplify let A.mx.extent_realized = 4 in...
new let A.mx.extent_realized.s = (undefined) in ... 4 ...
simplify let A.my.max_realized = 3 in...
new let A.my.max_realized.s = (undefined) in ... 3 ...
simplify let A.my.min_realized = 0 in...
new let A.my.min_realized.s = (undefined) in ... 0 ...
simplify let A.my.extent_realized = 4 in...
new let A.my.extent_realized.s = (undefined) in ... 4 ...
simplify let A.y_x.max_realized = 0 in...
new let A.y_x.max_realized.s = (undefined) in ... 0 ...
simplify let A.y_x.min_realized = 0 in...
new let A.y_x.min_realized.s = (undefined) in ... 0 ...
simplify let A.y_x.extent_realized = 1 in...
new let A.y_x.extent_realized.s = (undefined) in ... 1 ...
simplify let A.yy_xx.max_realized = 6 in...
new let A.yy_xx.max_realized.s = (undefined) in ... 6 ...
simplify let A.yy_xx.min_realized = 0 in...
new let A.yy_xx.min_realized.s = (undefined) in ... 0 ...
simplify let A.yy_xx.extent_realized = 7 in...
new let A.yy_xx.extent_realized.s = (undefined) in ... 7 ...
simplify let A.yyy_xxx.max_realized = 6 in...
new let A.yyy_xxx.max_realized.s = (undefined) in ... 6 ...
simplify let A.yyy_xxx.min_realized = 0 in...
new let A.yyy_xxx.min_realized.s = (undefined) in ... 0 ...
simplify let A.yyy_xxx.extent_realized = 7 in...
new let A.yyy_xxx.extent_realized.s = (undefined) in ... 7 ...
simplify let A.cooo.max_realized = 7 in...
new let A.cooo.max_realized.s = (undefined) in ... 7 ...
simplify let A.cooo.min_realized = 0 in...
new let A.cooo.min_realized.s = (undefined) in ... 0 ...
simplify let A.cooo.extent_realized = 8 in...
new let A.cooo.extent_realized.s = (undefined) in ... 8 ...
simplify let A.cii.max_realized = 3 in...
new let A.cii.max_realized.s = (undefined) in ... 3 ...
simplify let A.cii.min_realized = 0 in...
new let A.cii.min_realized.s = (undefined) in ... 0 ...
simplify let A.cii.extent_realized = 4 in...
new let A.cii.extent_realized.s = (undefined) in ... 4 ...
simplify let B.n.max_realized = ((P.extent.1/3600) + -1) in...
new let B.n.max_realized.s = (undefined) in ... ((P.extent.1/3600) + -1) ...
simplify let B.n.min_realized = 0 in...
new let B.n.min_realized.s = (undefined) in ... 0 ...
simplify let B.n.extent_realized = (P.extent.1/3600) in...
new let B.n.extent_realized.s = (undefined) in ... (P.extent.1/3600) ...
simplify let B.co.max_realized = 3 in...
new let B.co.max_realized.s = (undefined) in ... 3 ...
simplify let B.co.min_realized = 0 in...
new let B.co.min_realized.s = (undefined) in ... 0 ...
simplify let B.co.extent_realized = 4 in...
new let B.co.extent_realized.s = (undefined) in ... 4 ...
simplify let B.mk.max_realized = 3 in...
new let B.mk.max_realized.s = (undefined) in ... 3 ...
simplify let B.mk.min_realized = 0 in...
new let B.mk.min_realized.s = (undefined) in ... 0 ...
simplify let B.mk.extent_realized = 4 in...
new let B.mk.extent_realized.s = (undefined) in ... 4 ...
simplify let B.ci.max_realized = 7 in...
new let B.ci.max_realized.s = (undefined) in ... 7 ...
simplify let B.ci.min_realized = 0 in...
new let B.ci.min_realized.s = (undefined) in ... 0 ...
simplify let B.ci.extent_realized = 8 in...
new let B.ci.extent_realized.s = (undefined) in ... 8 ...
simplify let B.kx.max_realized = 2 in...
new let B.kx.max_realized.s = (undefined) in ... 2 ...
simplify let B.kx.min_realized = 0 in...
new let B.kx.min_realized.s = (undefined) in ... 0 ...
simplify let B.kx.extent_realized = 3 in...
new let B.kx.extent_realized.s = (undefined) in ... 3 ...
simplify let B.ky.max_realized = 2 in...
new let B.ky.max_realized.s = (undefined) in ... 2 ...
simplify let B.ky.min_realized = 0 in...
new let B.ky.min_realized.s = (undefined) in ... 0 ...
simplify let B.ky.extent_realized = 3 in...
new let B.ky.extent_realized.s = (undefined) in ... 3 ...
simplify let B.nn.max_realized = 15 in...
new let B.nn.max_realized.s = (undefined) in ... 15 ...
simplify let B.nn.min_realized = 0 in...
new let B.nn.min_realized.s = (undefined) in ... 0 ...
simplify let B.nn.extent_realized = 16 in...
new let B.nn.extent_realized.s = (undefined) in ... 16 ...
simplify let B.coo.max_realized = 0 in...
new let B.coo.max_realized.s = (undefined) in ... 0 ...
simplify let B.coo.min_realized = 0 in...
new let B.coo.min_realized.s = (undefined) in ... 0 ...
simplify let B.coo.extent_realized = 1 in...
new let B.coo.extent_realized.s = (undefined) in ... 1 ...
simplify let B.mx.max_realized = 3 in...
new let B.mx.max_realized.s = (undefined) in ... 3 ...
simplify let B.mx.min_realized = 0 in...
new let B.mx.min_realized.s = (undefined) in ... 0 ...
simplify let B.mx.extent_realized = 4 in...
new let B.mx.extent_realized.s = (undefined) in ... 4 ...
simplify let B.my.max_realized = 3 in...
new let B.my.max_realized.s = (undefined) in ... 3 ...
simplify let B.my.min_realized = 0 in...
new let B.my.min_realized.s = (undefined) in ... 0 ...
simplify let B.my.extent_realized = 4 in...
new let B.my.extent_realized.s = (undefined) in ... 4 ...
simplify let B.y_x.max_realized = 0 in...
new let B.y_x.max_realized.s = (undefined) in ... 0 ...
simplify let B.y_x.min_realized = 0 in...
new let B.y_x.min_realized.s = (undefined) in ... 0 ...
simplify let B.y_x.extent_realized = 1 in...
new let B.y_x.extent_realized.s = (undefined) in ... 1 ...
simplify let B.yy_xx.max_realized = 6 in...
new let B.yy_xx.max_realized.s = (undefined) in ... 6 ...
simplify let B.yy_xx.min_realized = 0 in...
new let B.yy_xx.min_realized.s = (undefined) in ... 0 ...
simplify let B.yy_xx.extent_realized = 7 in...
new let B.yy_xx.extent_realized.s = (undefined) in ... 7 ...
simplify let B.yyy_xxx.max_realized = 6 in...
new let B.yyy_xxx.max_realized.s = (undefined) in ... 6 ...
simplify let B.yyy_xxx.min_realized = 0 in...
new let B.yyy_xxx.min_realized.s = (undefined) in ... 0 ...
simplify let B.yyy_xxx.extent_realized = 7 in...
new let B.yyy_xxx.extent_realized.s = (undefined) in ... 7 ...
simplify let B.cooo.max_realized = 7 in...
new let B.cooo.max_realized.s = (undefined) in ... 7 ...
simplify let B.cooo.min_realized = 0 in...
new let B.cooo.min_realized.s = (undefined) in ... 0 ...
simplify let B.cooo.extent_realized = 8 in...
new let B.cooo.extent_realized.s = (undefined) in ... 8 ...
simplify let B.cii.max_realized = 3 in...
new let B.cii.max_realized.s = (undefined) in ... 3 ...
simplify let B.cii.min_realized = 0 in...
new let B.cii.min_realized.s = (undefined) in ... 0 ...
simplify let B.cii.extent_realized = 4 in...
new let B.cii.extent_realized.s = (undefined) in ... 4 ...
simplify let C.n.max_realized = ((P.extent.1/3600) + -1) in...
new let C.n.max_realized.s = (undefined) in ... ((P.extent.1/3600) + -1) ...
simplify let C.n.min_realized = 0 in...
new let C.n.min_realized.s = (undefined) in ... 0 ...
simplify let C.n.extent_realized = (P.extent.1/3600) in...
new let C.n.extent_realized.s = (undefined) in ... (P.extent.1/3600) ...
simplify let C.co.max_realized = 3 in...
new let C.co.max_realized.s = (undefined) in ... 3 ...
simplify let C.co.min_realized = 0 in...
new let C.co.min_realized.s = (undefined) in ... 0 ...
simplify let C.co.extent_realized = 4 in...
new let C.co.extent_realized.s = (undefined) in ... 4 ...
simplify let C.mk.max_realized = 3 in...
new let C.mk.max_realized.s = (undefined) in ... 3 ...
simplify let C.mk.min_realized = 0 in...
new let C.mk.min_realized.s = (undefined) in ... 0 ...
simplify let C.mk.extent_realized = 4 in...
new let C.mk.extent_realized.s = (undefined) in ... 4 ...
simplify let C.ci.max_realized = 7 in...
new let C.ci.max_realized.s = (undefined) in ... 7 ...
simplify let C.ci.min_realized = 0 in...
new let C.ci.min_realized.s = (undefined) in ... 0 ...
simplify let C.ci.extent_realized = 8 in...
new let C.ci.extent_realized.s = (undefined) in ... 8 ...
simplify let C.kx.max_realized = 2 in...
new let C.kx.max_realized.s = (undefined) in ... 2 ...
simplify let C.kx.min_realized = 0 in...
new let C.kx.min_realized.s = (undefined) in ... 0 ...
simplify let C.kx.extent_realized = 3 in...
new let C.kx.extent_realized.s = (undefined) in ... 3 ...
simplify let C.ky.max_realized = 2 in...
new let C.ky.max_realized.s = (undefined) in ... 2 ...
simplify let C.ky.min_realized = 0 in...
new let C.ky.min_realized.s = (undefined) in ... 0 ...
simplify let C.ky.extent_realized = 3 in...
new let C.ky.extent_realized.s = (undefined) in ... 3 ...
simplify let C.nn.max_realized = 15 in...
new let C.nn.max_realized.s = (undefined) in ... 15 ...
simplify let C.nn.min_realized = 0 in...
new let C.nn.min_realized.s = (undefined) in ... 0 ...
simplify let C.nn.extent_realized = 16 in...
new let C.nn.extent_realized.s = (undefined) in ... 16 ...
simplify let C.coo.max_realized = 0 in...
new let C.coo.max_realized.s = (undefined) in ... 0 ...
simplify let C.coo.min_realized = 0 in...
new let C.coo.min_realized.s = (undefined) in ... 0 ...
simplify let C.coo.extent_realized = 1 in...
new let C.coo.extent_realized.s = (undefined) in ... 1 ...
simplify let C.mx.max_realized = 3 in...
new let C.mx.max_realized.s = (undefined) in ... 3 ...
simplify let C.mx.min_realized = 0 in...
new let C.mx.min_realized.s = (undefined) in ... 0 ...
simplify let C.mx.extent_realized = 4 in...
new let C.mx.extent_realized.s = (undefined) in ... 4 ...
simplify let C.my.max_realized = 3 in...
new let C.my.max_realized.s = (undefined) in ... 3 ...
simplify let C.my.min_realized = 0 in...
new let C.my.min_realized.s = (undefined) in ... 0 ...
simplify let C.my.extent_realized = 4 in...
new let C.my.extent_realized.s = (undefined) in ... 4 ...
simplify let C.y_x.max_realized = 0 in...
new let C.y_x.max_realized.s = (undefined) in ... 0 ...
simplify let C.y_x.min_realized = 0 in...
new let C.y_x.min_realized.s = (undefined) in ... 0 ...
simplify let C.y_x.extent_realized = 1 in...
new let C.y_x.extent_realized.s = (undefined) in ... 1 ...
simplify let C.yy_xx.max_realized = 6 in...
new let C.yy_xx.max_realized.s = (undefined) in ... 6 ...
simplify let C.yy_xx.min_realized = 0 in...
new let C.yy_xx.min_realized.s = (undefined) in ... 0 ...
simplify let C.yy_xx.extent_realized = 7 in...
new let C.yy_xx.extent_realized.s = (undefined) in ... 7 ...
simplify let C.yyy_xxx.max_realized = 6 in...
new let C.yyy_xxx.max_realized.s = (undefined) in ... 6 ...
simplify let C.yyy_xxx.min_realized = 0 in...
new let C.yyy_xxx.min_realized.s = (undefined) in ... 0 ...
simplify let C.yyy_xxx.extent_realized = 7 in...
new let C.yyy_xxx.extent_realized.s = (undefined) in ... 7 ...
simplify let C.cooo.max_realized = 7 in...
new let C.cooo.max_realized.s = (undefined) in ... 7 ...
simplify let C.cooo.min_realized = 0 in...
new let C.cooo.min_realized.s = (undefined) in ... 0 ...
simplify let C.cooo.extent_realized = 8 in...
new let C.cooo.extent_realized.s = (undefined) in ... 8 ...
simplify let C.cii.max_realized = 3 in...
new let C.cii.max_realized.s = (undefined) in ... 3 ...
simplify let C.cii.min_realized = 0 in...
new let C.cii.min_realized.s = (undefined) in ... 0 ...
simplify let C.cii.extent_realized = 4 in...
new let C.cii.extent_realized.s = (undefined) in ... 4 ...
simplify let t5 = (float32)C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) in...
simplify let A.s0.y_x = 0 in...
new let A.s0.y_x.s = (undefined) in ... 0 ...
simplify let t5 = (float32)C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) in...
simplify let A.s0.coo = 0 in...
new let A.s0.coo.s = (undefined) in ... 0 ...
simplify let t5 = (float32)C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) in...
Lowering after simplifying IfThenElse without keeping unit loops:
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
if (!((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer) || ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || (uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)))) {
 assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
 assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
 assert(((uint32)P.type == (uint32)73730), halide_error_bad_type("Input buffer P", (uint32)P.type, (uint32)73730))
 assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
 assert(((uint32)W.type == (uint32)73730), halide_error_bad_type("Input buffer W", (uint32)W.type, (uint32)73730))
 assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
 assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
 assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
 assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
 assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
 assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
 assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
 assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
 assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
 assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
 assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
 assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
 assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
 assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
 assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
 assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
 assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
 assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
 assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
 assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
 assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
 assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
 assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
 assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
 assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
 assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
 assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
 assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
 let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
 let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
 let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
 let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
 let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
 let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
 let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
 let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
 let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
 let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
 let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
 assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
 assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
 assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
 assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
 assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
 assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
 assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
 assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
 assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
 assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
 assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
 assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
 assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
 assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
 assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
 assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
 assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
 gpu_block<Default_GPU> (A.s0.n, 0, (P.extent.1/3600)) {
  gpu_block<Default_GPU> (A.s0.nn, 0, 16) {
   gpu_block<Default_GPU> (A.s0.co, 0, 4) {
    gpu_thread<Default_GPU> (A.s0.mx, 0, 4) {
     gpu_thread<Default_GPU> (A.s0.my, 0, 4) {
      realize A[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
       realize B[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
        realize C[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
         for (A.s0.mk, 0, 4) {
          for (A.s0.ci, 0, 8) {
           for (A.s0.yy_xx, 0, 7) {
            for (A.s0.yyy_xxx, 0, 7) {
             for (A.s0.kx, 0, 3) {
              for (A.s0.ky, 0, 3) {
               vectorized (A.s0.cooo, 0, 8) {
                for (A.s0.cii, 0, 4) {
                 A(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = (float32)P(((A.s0.nn*512) + ((A.s0.mx*128) + ((A.s0.mk*32) + ((A.s0.ci*4) + A.s0.cii)))), ((A.s0.n*225) + ((((A.s0.yy_xx*2) + A.s0.kx)*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))))
                 B(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = (float32)W(((A.s0.my*32) + ((A.s0.co*8) + A.s0.cooo)), ((A.s0.mk*288) + ((A.s0.ci*36) + ((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii)))))
                 C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = ((let t5 = C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) in select((((((A.s0.cii == 0) && (A.s0.ci == 0)) && (A.s0.mk == 0)) && (A.s0.ky == 0)) && (A.s0.kx == 0)), 0.000000f, t5)) + (A(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)*B(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)))
                 if ((((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) {
                  Out(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, A.s0.my, A.s0.mx, 0, A.s0.nn, A.s0.co, A.s0.n) = C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
}


Performing storage folding optimization...
Attempting to fold C
Mutating (((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating ((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating (((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) (0)
Mutating ((A.s0.cii == 3) && (A.s0.ci == 7)) (0)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (1)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
(Miss) Rewrote ((A.s0.cii == 3) && (A.s0.ci == 7)) -> ((A.s0.cii == 3) && (A.s0.ci == 7)) (1)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
Mutating ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Hit) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
(Hit) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Miss) Rewrote ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) -> ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
(Miss) Rewrote (((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) -> ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
Mutating ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Hit) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Hit) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Miss) Rewrote ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) -> ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
(Miss) Rewrote ((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
Mutating ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Hit) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Miss) Rewrote ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) -> ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
(Miss) Rewrote (((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)



Input to CSE ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
After removing lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Include: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))); should extract: 1
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Canonical form without lets ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
0: A.s0.cii, 0
1: 3, 0
2: (A.s0.cii == 3), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: (A.s0.mk == 3), 1
8: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
9: A.s0.ky, 0
10: 2, 0
11: (A.s0.ky == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)), 1
13: A.s0.kx, 0
14: (A.s0.kx == 2), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)), 1
16: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))), 1
With variables ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
With lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Solved expr for A.s0.cii :
  (((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))
  ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 7 = 7, 7
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 7 = 7, 7
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = 0, 6
bounds_of_expr_in_scope A.s0.yy_xx = 0, 6
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
Box(by Provide) of C
  0 ... ((8 + 0) - 1)
  0 ... ((7 + 0) - 1)
  0 ... ((7 + 0) - 1)
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
Mutating (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (1)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
(Miss) Rewrote (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)



Input to CSE ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
After removing lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Include: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))); should extract: 1
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Canonical form without lets ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
0: A.s0.cii, 0
1: 3, 0
2: (A.s0.cii == 3), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: (A.s0.mk == 3), 1
8: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
9: A.s0.ky, 0
10: 2, 0
11: (A.s0.ky == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)), 1
13: A.s0.kx, 0
14: (A.s0.kx == 2), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)), 1
16: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))), 1
With variables ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
With lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Solved expr for A.s0.cii :
  (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))
  ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Mutating (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (1)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (1)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (1)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
Mutating ((A.s0.ci == 7) && ((A.s0.mk == 3) && (A.s0.ky == 2))) (1)
(Hit) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (1)
Mutating ((A.s0.mk == 3) && (A.s0.ky == 2)) (0)
(Hit) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Hit) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
(Miss) Rewrote ((A.s0.mk == 3) && (A.s0.ky == 2)) -> ((A.s0.mk == 3) && (A.s0.ky == 2)) (0)
(Miss) Rewrote ((A.s0.ci == 7) && ((A.s0.mk == 3) && (A.s0.ky == 2))) -> ((A.s0.ci == 7) && ((A.s0.mk == 3) && (A.s0.ky == 2))) (1)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> ((A.s0.ci == 7) && ((A.s0.mk == 3) && (A.s0.ky == 2))) (1)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
Mutating ((A.s0.ci == 7) && (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
(Hit) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (1)
Mutating (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote ((A.s0.mk == 3) && (A.s0.ky == 2)) -> ((A.s0.mk == 3) && (A.s0.ky == 2)) (0)
(Hit) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2))) -> ((A.s0.ci == 7) && (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((A.s0.ci == 7) && (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
Mutating ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)
(Hit) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (1)
Mutating ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
(Hit) Rewrote (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
(Miss) Rewrote ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
(Miss) Rewrote ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) -> ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)
(Miss) Rewrote (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)



Input to CSE ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
After removing lets: ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Include: ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)); should extract: 1
Include: (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)); should extract: 1
Include: ((A.s0.mk == 3) && (A.s0.ky == 2)); should extract: 1
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Canonical form without lets ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
0: A.s0.ci, 0
1: 7, 0
2: (A.s0.ci == 7), 1
3: A.s0.mk, 0
4: 3, 0
5: (A.s0.mk == 3), 1
6: A.s0.ky, 0
7: 2, 0
8: (A.s0.ky == 2), 1
9: ((A.s0.mk == 3) && (A.s0.ky == 2)), 1
10: A.s0.kx, 0
11: (A.s0.kx == 2), 1
12: (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)), 1
13: A.s0.cii, 0
14: (A.s0.cii == 3), 1
15: ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)), 1
16: ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))), 1
With variables ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
With lets: ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Solved expr for A.s0.ci :
  (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))
  ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Mutating (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (1)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (1)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> ((A.s0.ky == 2) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
Mutating ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) (1)
(Hit) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (1)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Hit) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) (0)
(Miss) Rewrote ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) -> ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) (1)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) (1)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
Mutating ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)
(Hit) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (1)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
(Hit) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
(Miss) Rewrote ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) -> ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)
(Miss) Rewrote (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)



Input to CSE ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
After removing lets: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Include: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))); should extract: 1
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Canonical form without lets ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
0: A.s0.ky, 0
1: 2, 0
2: (A.s0.ky == 2), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: 3, 0
8: (A.s0.mk == 3), 1
9: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
10: A.s0.kx, 0
11: (A.s0.kx == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)), 1
13: A.s0.cii, 0
14: (A.s0.cii == 3), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)), 1
16: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))), 1
With variables ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
With lets: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Solved expr for A.s0.ky :
  (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))
  ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Mutating (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (1)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (1)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((A.s0.kx == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
Mutating ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))) (1)
(Hit) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (1)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)) (0)
(Hit) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)) (0)
(Miss) Rewrote ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))) -> ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))) (1)
(Miss) Rewrote (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))) (1)



Input to CSE ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
After removing lets: ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
Include: ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))); should extract: 1
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Canonical form without lets ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
0: A.s0.kx, 0
1: 2, 0
2: (A.s0.kx == 2), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: 3, 0
8: (A.s0.mk == 3), 1
9: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
10: A.s0.ky, 0
11: (A.s0.ky == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)), 1
13: A.s0.cii, 0
14: (A.s0.cii == 3), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)), 1
16: ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))), 1
With variables ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
With lets: ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
Solved expr for A.s0.kx :
  (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))
  ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
Mutating (((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating ((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating (((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) (0)
Mutating ((A.s0.cii == 3) && (A.s0.ci == 7)) (0)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (1)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
(Miss) Rewrote ((A.s0.cii == 3) && (A.s0.ci == 7)) -> ((A.s0.cii == 3) && (A.s0.ci == 7)) (1)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
Mutating ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Hit) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
(Hit) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Miss) Rewrote ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) -> ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
(Miss) Rewrote (((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) -> ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
Mutating ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Hit) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Hit) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Miss) Rewrote ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) -> ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
(Miss) Rewrote ((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
Mutating ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Hit) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Miss) Rewrote ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) -> ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
(Miss) Rewrote (((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)



Input to CSE ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
After removing lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Include: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))); should extract: 1
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Canonical form without lets ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
0: A.s0.cii, 0
1: 3, 0
2: (A.s0.cii == 3), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: (A.s0.mk == 3), 1
8: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
9: A.s0.ky, 0
10: 2, 0
11: (A.s0.ky == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)), 1
13: A.s0.kx, 0
14: (A.s0.kx == 2), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)), 1
16: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))), 1
With variables ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
With lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Solved expr for A.s0.cii :
  (((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))
  ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 7 = 7, 7
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 7 = 7, 7
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = 0, 6
bounds_of_expr_in_scope A.s0.yy_xx = 0, 6
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope (float32)C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = ((void *))neg_inf, ((void *))pos_inf
Mutating (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (1)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
(Miss) Rewrote (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)



Input to CSE ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
After removing lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Include: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))); should extract: 1
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Canonical form without lets ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
0: A.s0.cii, 0
1: 3, 0
2: (A.s0.cii == 3), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: (A.s0.mk == 3), 1
8: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
9: A.s0.ky, 0
10: 2, 0
11: (A.s0.ky == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)), 1
13: A.s0.kx, 0
14: (A.s0.kx == 2), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)), 1
16: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))), 1
With variables ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
With lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Solved expr for A.s0.cii :
  (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))
  ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Mutating (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (1)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (1)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (1)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
Mutating ((A.s0.ci == 7) && ((A.s0.mk == 3) && (A.s0.ky == 2))) (1)
(Hit) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (1)
Mutating ((A.s0.mk == 3) && (A.s0.ky == 2)) (0)
(Hit) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Hit) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
(Miss) Rewrote ((A.s0.mk == 3) && (A.s0.ky == 2)) -> ((A.s0.mk == 3) && (A.s0.ky == 2)) (0)
(Miss) Rewrote ((A.s0.ci == 7) && ((A.s0.mk == 3) && (A.s0.ky == 2))) -> ((A.s0.ci == 7) && ((A.s0.mk == 3) && (A.s0.ky == 2))) (1)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> ((A.s0.ci == 7) && ((A.s0.mk == 3) && (A.s0.ky == 2))) (1)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
Mutating ((A.s0.ci == 7) && (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
(Hit) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (1)
Mutating (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote ((A.s0.mk == 3) && (A.s0.ky == 2)) -> ((A.s0.mk == 3) && (A.s0.ky == 2)) (0)
(Hit) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2))) -> ((A.s0.ci == 7) && (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((A.s0.ci == 7) && (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
Mutating ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)
(Hit) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (1)
Mutating ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
(Hit) Rewrote (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
(Miss) Rewrote ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
(Miss) Rewrote ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) -> ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)
(Miss) Rewrote (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)



Input to CSE ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
After removing lets: ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Include: ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)); should extract: 1
Include: (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)); should extract: 1
Include: ((A.s0.mk == 3) && (A.s0.ky == 2)); should extract: 1
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Canonical form without lets ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
0: A.s0.ci, 0
1: 7, 0
2: (A.s0.ci == 7), 1
3: A.s0.mk, 0
4: 3, 0
5: (A.s0.mk == 3), 1
6: A.s0.ky, 0
7: 2, 0
8: (A.s0.ky == 2), 1
9: ((A.s0.mk == 3) && (A.s0.ky == 2)), 1
10: A.s0.kx, 0
11: (A.s0.kx == 2), 1
12: (((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)), 1
13: A.s0.cii, 0
14: (A.s0.cii == 3), 1
15: ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)), 1
16: ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))), 1
With variables ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
With lets: ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Solved expr for A.s0.ci :
  (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))
  ((A.s0.ci == 7) && ((((A.s0.mk == 3) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Mutating (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (1)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (1)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> ((A.s0.ky == 2) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
Mutating ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) (1)
(Hit) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (1)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Hit) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) (0)
(Miss) Rewrote ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) -> ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) (1)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) (1)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
Mutating ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)
(Hit) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (1)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
(Hit) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
(Miss) Rewrote ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) -> ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)
(Miss) Rewrote (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)



Input to CSE ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
After removing lets: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Include: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))); should extract: 1
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Canonical form without lets ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
0: A.s0.ky, 0
1: 2, 0
2: (A.s0.ky == 2), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: 3, 0
8: (A.s0.mk == 3), 1
9: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
10: A.s0.kx, 0
11: (A.s0.kx == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)), 1
13: A.s0.cii, 0
14: (A.s0.cii == 3), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)), 1
16: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))), 1
With variables ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
With lets: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Solved expr for A.s0.ky :
  (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))
  ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Mutating (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (1)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (1)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((A.s0.kx == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
Mutating ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))) (1)
(Hit) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (1)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)) (0)
(Hit) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)) (0)
(Miss) Rewrote ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))) -> ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))) (1)
(Miss) Rewrote (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))) (1)



Input to CSE ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
After removing lets: ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
Include: ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))); should extract: 1
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Canonical form without lets ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
0: A.s0.kx, 0
1: 2, 0
2: (A.s0.kx == 2), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: 3, 0
8: (A.s0.mk == 3), 1
9: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
10: A.s0.ky, 0
11: (A.s0.ky == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)), 1
13: A.s0.cii, 0
14: (A.s0.cii == 3), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)), 1
16: ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))), 1
With variables ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
With lets: ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
Solved expr for A.s0.kx :
  (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))
  ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = 0, 6
bounds_of_expr_in_scope A.s0.yy_xx = 0, 6
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0

Considering folding C over for loop over A.s0.mk dimension 14
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.mk dimension 13
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.mk dimension 12
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.mk dimension 11
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.mk dimension 10
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.mk dimension 9
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.mk dimension 8
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.mk dimension 7
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.mk dimension 6
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.mk dimension 5
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.mk dimension 4
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.mk dimension 3
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.mk dimension 2
Min: 0
Max: 6
Extent: 7
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 6

Considering folding C over for loop over A.s0.mk dimension 1
Min: 0
Max: 6
Extent: 7
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 6

Considering folding C over for loop over A.s0.mk dimension 0
Min: 0
Max: 7
Extent: 8
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 7



Input to CSE (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
After removing lets: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
Include: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)); should extract: 1
Include: (((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))); should extract: 1
Include: ((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)); should extract: 1
Include: (((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))); should extract: 1
Include: ((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)); should extract: 1
Include: (((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))); should extract: 1
Include: ((uint1)1 && (0 <= 0)); should extract: 1
Include: (uint1)1; should extract: 0
Include: (0 <= 0); should extract: 1
Include: 0; should extract: 0
Include: 0; should extract: 0
Include: (((8 + 0) - 1) >= ((8 + 0) - 1)); should extract: 1
Include: ((8 + 0) - 1); should extract: 0
Include: (8 + 0); should extract: 0
Include: 8; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: ((8 + 0) - 1); should extract: 0
Include: (8 + 0); should extract: 0
Include: 8; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: (0 <= 0); should extract: 1
Include: (((7 + 0) - 1) >= ((7 + 0) - 1)); should extract: 1
Include: ((7 + 0) - 1); should extract: 0
Include: (7 + 0); should extract: 0
Include: 7; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: ((7 + 0) - 1); should extract: 0
Include: (7 + 0); should extract: 0
Include: 7; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: (0 <= 0); should extract: 1
Include: (((7 + 0) - 1) >= ((7 + 0) - 1)); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: 0; should extract: 0
Include: 0; should extract: 0
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Canonical form without lets (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
0: (uint1)1, 0
1: 0, 0
2: (0 <= 0), 15
3: ((uint1)1 && (0 <= 0)), 1
4: 8, 0
5: (8 + 0), 0
6: 1, 0
7: ((8 + 0) - 1), 0
8: (((8 + 0) - 1) >= ((8 + 0) - 1)), 1
9: (((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))), 1
10: ((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)), 1
11: 7, 0
12: (7 + 0), 0
13: ((7 + 0) - 1), 0
14: (((7 + 0) - 1) >= ((7 + 0) - 1)), 2
15: (((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))), 1
16: ((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)), 1
17: (((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))), 1
18: ((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)), 1
19: (0 >= 0), 12
20: (((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)), 1
21: ((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
22: (((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
23: ((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
24: (((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
25: ((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
26: (((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
27: ((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
28: (((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
29: ((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
30: (((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
31: ((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
32: (((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
33: ((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
34: (((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
35: ((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
36: (((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
37: ((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
38: (((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
39: ((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
40: (((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
41: ((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
42: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
With variables (((((((((((((((((((((((((((((((uint1)1 && (uint1)t6) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (uint1)t6) && (uint1)t7) && (uint1)t6) && (uint1)t7) && (uint1)t6) && (uint1)t8) && (uint1)t6) && (uint1)t8) && (uint1)t6) && (uint1)t8) && (uint1)t6) && (uint1)t8) && (uint1)t6) && (uint1)t8) && (uint1)t6) && (uint1)t8) && (uint1)t6) && (uint1)t8) && (uint1)t6) && (uint1)t8) && (uint1)t6) && (uint1)t8) && (uint1)t6) && (uint1)t8) && (uint1)t6) && (uint1)t8) && (uint1)t6) && (uint1)t8)
With lets: (let t6 = (0 <= 0) in (let t7 = (((7 + 0) - 1) >= ((7 + 0) - 1)) in (let t8 = (0 >= 0) in (((((((((((((((((((((((((((((((uint1)1 && t6) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && t6) && t7) && t6) && t7) && t6) && t8) && t6) && t8) && t6) && t8) && t6) && t8) && t6) && t8) && t6) && t8) && t6) && t8) && t6) && t8) && t6) && t8) && t6) && t8) && t6) && t8) && t6) && t8))))
simplify let t6 = (uint1)1 in...
new let t6.s = (undefined) in ... (uint1)1 ...
simplify let t7 = (uint1)1 in...
new let t7.s = (undefined) in ... (uint1)1 ...
simplify let t8 = (uint1)1 in...
new let t8.s = (undefined) in ... (uint1)1 ...
Mutating (((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating ((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating (((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) (0)
Mutating ((A.s0.cii == 3) && (A.s0.ci == 7)) (0)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (1)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
(Miss) Rewrote ((A.s0.cii == 3) && (A.s0.ci == 7)) -> ((A.s0.cii == 3) && (A.s0.ci == 7)) (1)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
Mutating ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Hit) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
(Hit) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Miss) Rewrote ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) -> ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
(Miss) Rewrote (((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) -> ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
Mutating ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Hit) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Hit) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Miss) Rewrote ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) -> ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
(Miss) Rewrote ((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
Mutating ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Hit) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Miss) Rewrote ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) -> ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
(Miss) Rewrote (((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)



Input to CSE ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
After removing lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Include: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))); should extract: 1
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Canonical form without lets ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
0: A.s0.cii, 0
1: 3, 0
2: (A.s0.cii == 3), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: (A.s0.mk == 3), 1
8: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
9: A.s0.ky, 0
10: 2, 0
11: (A.s0.ky == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)), 1
13: A.s0.kx, 0
14: (A.s0.kx == 2), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)), 1
16: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))), 1
With variables ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
With lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Solved expr for A.s0.cii :
  (((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))
  ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 7 = 7, 7
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 7 = 7, 7
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = 0, 6
bounds_of_expr_in_scope A.s0.yy_xx = 0, 6
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
Box(by Provide) of C
  0 ... ((8 + 0) - 1)
  0 ... ((7 + 0) - 1)
  0 ... ((7 + 0) - 1)
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
Mutating (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (1)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
(Miss) Rewrote (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)



Input to CSE ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
After removing lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Include: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))); should extract: 1
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Canonical form without lets ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
0: A.s0.cii, 0
1: 3, 0
2: (A.s0.cii == 3), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: (A.s0.mk == 3), 1
8: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
9: A.s0.ky, 0
10: 2, 0
11: (A.s0.ky == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)), 1
13: A.s0.kx, 0
14: (A.s0.kx == 2), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)), 1
16: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))), 1
With variables ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
With lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Solved expr for A.s0.cii :
  (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))
  ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Mutating (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (1)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (1)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> ((A.s0.ky == 2) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
Mutating ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) (1)
(Hit) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (1)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Hit) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) (0)
(Miss) Rewrote ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) -> ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) (1)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) (1)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
Mutating ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)
(Hit) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (1)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
(Hit) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
(Miss) Rewrote ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) -> ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)
(Miss) Rewrote (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)



Input to CSE ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
After removing lets: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Include: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))); should extract: 1
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Canonical form without lets ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
0: A.s0.ky, 0
1: 2, 0
2: (A.s0.ky == 2), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: 3, 0
8: (A.s0.mk == 3), 1
9: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
10: A.s0.kx, 0
11: (A.s0.kx == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)), 1
13: A.s0.cii, 0
14: (A.s0.cii == 3), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)), 1
16: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))), 1
With variables ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
With lets: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Solved expr for A.s0.ky :
  (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))
  ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Mutating (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (1)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (1)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((A.s0.kx == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
Mutating ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))) (1)
(Hit) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (1)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)) (0)
(Hit) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)) (0)
(Miss) Rewrote ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))) -> ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))) (1)
(Miss) Rewrote (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))) (1)



Input to CSE ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
After removing lets: ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
Include: ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))); should extract: 1
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Canonical form without lets ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
0: A.s0.kx, 0
1: 2, 0
2: (A.s0.kx == 2), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: 3, 0
8: (A.s0.mk == 3), 1
9: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
10: A.s0.ky, 0
11: (A.s0.ky == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)), 1
13: A.s0.cii, 0
14: (A.s0.cii == 3), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)), 1
16: ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))), 1
With variables ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
With lets: ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
Solved expr for A.s0.kx :
  (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))
  ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
Mutating (((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating ((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating (((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) (0)
Mutating ((A.s0.cii == 3) && (A.s0.ci == 7)) (0)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (1)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
(Miss) Rewrote ((A.s0.cii == 3) && (A.s0.ci == 7)) -> ((A.s0.cii == 3) && (A.s0.ci == 7)) (1)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
Mutating ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Hit) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
(Hit) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Miss) Rewrote ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) -> ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
(Miss) Rewrote (((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) -> ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
Mutating ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Hit) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Hit) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Miss) Rewrote ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) -> ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
(Miss) Rewrote ((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
Mutating ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Hit) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Miss) Rewrote ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) -> ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
(Miss) Rewrote (((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)



Input to CSE ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
After removing lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Include: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))); should extract: 1
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Canonical form without lets ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
0: A.s0.cii, 0
1: 3, 0
2: (A.s0.cii == 3), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: (A.s0.mk == 3), 1
8: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
9: A.s0.ky, 0
10: 2, 0
11: (A.s0.ky == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)), 1
13: A.s0.kx, 0
14: (A.s0.kx == 2), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)), 1
16: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))), 1
With variables ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
With lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Solved expr for A.s0.cii :
  (((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))
  ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 7 = 7, 7
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 7 = 7, 7
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = 0, 6
bounds_of_expr_in_scope A.s0.yy_xx = 0, 6
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope (float32)C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = ((void *))neg_inf, ((void *))pos_inf
Mutating (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (1)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
(Miss) Rewrote (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)



Input to CSE ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
After removing lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Include: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))); should extract: 1
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Canonical form without lets ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
0: A.s0.cii, 0
1: 3, 0
2: (A.s0.cii == 3), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: (A.s0.mk == 3), 1
8: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
9: A.s0.ky, 0
10: 2, 0
11: (A.s0.ky == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)), 1
13: A.s0.kx, 0
14: (A.s0.kx == 2), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)), 1
16: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))), 1
With variables ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
With lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Solved expr for A.s0.cii :
  (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))
  ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Mutating (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (1)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (1)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> ((A.s0.ky == 2) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
Mutating ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) (1)
(Hit) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (1)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Hit) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) (0)
(Miss) Rewrote ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) -> ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) (1)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) (1)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
Mutating ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)
(Hit) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (1)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
(Hit) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
(Miss) Rewrote ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) -> ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)
(Miss) Rewrote (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)



Input to CSE ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
After removing lets: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Include: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))); should extract: 1
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Canonical form without lets ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
0: A.s0.ky, 0
1: 2, 0
2: (A.s0.ky == 2), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: 3, 0
8: (A.s0.mk == 3), 1
9: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
10: A.s0.kx, 0
11: (A.s0.kx == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)), 1
13: A.s0.cii, 0
14: (A.s0.cii == 3), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)), 1
16: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))), 1
With variables ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
With lets: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Solved expr for A.s0.ky :
  (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))
  ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Mutating (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (1)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (1)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((A.s0.kx == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
Mutating ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))) (1)
(Hit) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (1)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)) (0)
(Hit) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)) (0)
(Miss) Rewrote ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))) -> ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))) (1)
(Miss) Rewrote (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))) (1)



Input to CSE ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
After removing lets: ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
Include: ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))); should extract: 1
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Canonical form without lets ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
0: A.s0.kx, 0
1: 2, 0
2: (A.s0.kx == 2), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: 3, 0
8: (A.s0.mk == 3), 1
9: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
10: A.s0.ky, 0
11: (A.s0.ky == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)), 1
13: A.s0.cii, 0
14: (A.s0.cii == 3), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)), 1
16: ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))), 1
With variables ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
With lets: ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
Solved expr for A.s0.kx :
  (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))
  ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = 0, 6
bounds_of_expr_in_scope A.s0.yy_xx = 0, 6
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0

Considering folding C over for loop over A.s0.ci dimension 14
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.ci dimension 13
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.ci dimension 12
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.ci dimension 11
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.ci dimension 10
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.ci dimension 9
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.ci dimension 8
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.ci dimension 7
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.ci dimension 6
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.ci dimension 5
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.ci dimension 4
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.ci dimension 3
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.ci dimension 2
Min: 0
Max: 6
Extent: 7
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 6

Considering folding C over for loop over A.s0.ci dimension 1
Min: 0
Max: 6
Extent: 7
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 6

Considering folding C over for loop over A.s0.ci dimension 0
Min: 0
Max: 7
Extent: 8
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 7



Input to CSE (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
After removing lets: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
Include: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)); should extract: 1
Include: (((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))); should extract: 1
Include: ((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)); should extract: 1
Include: (((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))); should extract: 1
Include: ((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)); should extract: 1
Include: (((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))); should extract: 1
Include: ((uint1)1 && (0 <= 0)); should extract: 1
Include: (uint1)1; should extract: 0
Include: (0 <= 0); should extract: 1
Include: 0; should extract: 0
Include: 0; should extract: 0
Include: (((8 + 0) - 1) >= ((8 + 0) - 1)); should extract: 1
Include: ((8 + 0) - 1); should extract: 0
Include: (8 + 0); should extract: 0
Include: 8; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: ((8 + 0) - 1); should extract: 0
Include: (8 + 0); should extract: 0
Include: 8; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: (0 <= 0); should extract: 1
Include: (((7 + 0) - 1) >= ((7 + 0) - 1)); should extract: 1
Include: ((7 + 0) - 1); should extract: 0
Include: (7 + 0); should extract: 0
Include: 7; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: ((7 + 0) - 1); should extract: 0
Include: (7 + 0); should extract: 0
Include: 7; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: (0 <= 0); should extract: 1
Include: (((7 + 0) - 1) >= ((7 + 0) - 1)); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: 0; should extract: 0
Include: 0; should extract: 0
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Canonical form without lets (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
0: (uint1)1, 0
1: 0, 0
2: (0 <= 0), 15
3: ((uint1)1 && (0 <= 0)), 1
4: 8, 0
5: (8 + 0), 0
6: 1, 0
7: ((8 + 0) - 1), 0
8: (((8 + 0) - 1) >= ((8 + 0) - 1)), 1
9: (((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))), 1
10: ((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)), 1
11: 7, 0
12: (7 + 0), 0
13: ((7 + 0) - 1), 0
14: (((7 + 0) - 1) >= ((7 + 0) - 1)), 2
15: (((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))), 1
16: ((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)), 1
17: (((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))), 1
18: ((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)), 1
19: (0 >= 0), 12
20: (((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)), 1
21: ((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
22: (((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
23: ((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
24: (((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
25: ((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
26: (((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
27: ((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
28: (((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
29: ((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
30: (((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
31: ((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
32: (((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
33: ((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
34: (((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
35: ((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
36: (((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
37: ((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
38: (((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
39: ((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
40: (((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
41: ((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
42: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
With variables (((((((((((((((((((((((((((((((uint1)1 && (uint1)t9) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (uint1)t9) && (uint1)t10) && (uint1)t9) && (uint1)t10) && (uint1)t9) && (uint1)t11) && (uint1)t9) && (uint1)t11) && (uint1)t9) && (uint1)t11) && (uint1)t9) && (uint1)t11) && (uint1)t9) && (uint1)t11) && (uint1)t9) && (uint1)t11) && (uint1)t9) && (uint1)t11) && (uint1)t9) && (uint1)t11) && (uint1)t9) && (uint1)t11) && (uint1)t9) && (uint1)t11) && (uint1)t9) && (uint1)t11) && (uint1)t9) && (uint1)t11)
With lets: (let t9 = (0 <= 0) in (let t10 = (((7 + 0) - 1) >= ((7 + 0) - 1)) in (let t11 = (0 >= 0) in (((((((((((((((((((((((((((((((uint1)1 && t9) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && t9) && t10) && t9) && t10) && t9) && t11) && t9) && t11) && t9) && t11) && t9) && t11) && t9) && t11) && t9) && t11) && t9) && t11) && t9) && t11) && t9) && t11) && t9) && t11) && t9) && t11) && t9) && t11))))
simplify let t9 = (uint1)1 in...
new let t9.s = (undefined) in ... (uint1)1 ...
simplify let t10 = (uint1)1 in...
new let t10.s = (undefined) in ... (uint1)1 ...
simplify let t11 = (uint1)1 in...
new let t11.s = (undefined) in ... (uint1)1 ...
Mutating (((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating ((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating (((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) (0)
Mutating ((A.s0.cii == 3) && (A.s0.ci == 7)) (0)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (1)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
(Miss) Rewrote ((A.s0.cii == 3) && (A.s0.ci == 7)) -> ((A.s0.cii == 3) && (A.s0.ci == 7)) (1)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
Mutating ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Hit) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
(Hit) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Miss) Rewrote ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) -> ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
(Miss) Rewrote (((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) -> ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
Mutating ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Hit) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Hit) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Miss) Rewrote ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) -> ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
(Miss) Rewrote ((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
Mutating ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Hit) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Miss) Rewrote ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) -> ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
(Miss) Rewrote (((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)



Input to CSE ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
After removing lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Include: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))); should extract: 1
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Canonical form without lets ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
0: A.s0.cii, 0
1: 3, 0
2: (A.s0.cii == 3), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: (A.s0.mk == 3), 1
8: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
9: A.s0.ky, 0
10: 2, 0
11: (A.s0.ky == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)), 1
13: A.s0.kx, 0
14: (A.s0.kx == 2), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)), 1
16: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))), 1
With variables ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
With lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Solved expr for A.s0.cii :
  (((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))
  ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 7 = 7, 7
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = 0, 6
bounds_of_expr_in_scope A.s0.yy_xx = A.s0.yy_xx, A.s0.yy_xx
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
Box(by Provide) of C
  0 ... ((8 + 0) - 1)
  0 ... ((7 + 0) - 1)
  A.s0.yy_xx ... A.s0.yy_xx
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
Mutating (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (1)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
(Miss) Rewrote (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)



Input to CSE ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
After removing lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Include: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))); should extract: 1
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Canonical form without lets ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
0: A.s0.cii, 0
1: 3, 0
2: (A.s0.cii == 3), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: (A.s0.mk == 3), 1
8: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
9: A.s0.ky, 0
10: 2, 0
11: (A.s0.ky == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)), 1
13: A.s0.kx, 0
14: (A.s0.kx == 2), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)), 1
16: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))), 1
With variables ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
With lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Solved expr for A.s0.cii :
  (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))
  ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Mutating (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (1)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (1)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> ((A.s0.ky == 2) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
Mutating ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) (1)
(Hit) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (1)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Hit) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) (0)
(Miss) Rewrote ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) -> ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) (1)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) (1)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
Mutating ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)
(Hit) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (1)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
(Hit) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
(Miss) Rewrote ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) -> ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)
(Miss) Rewrote (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)



Input to CSE ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
After removing lets: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Include: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))); should extract: 1
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Canonical form without lets ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
0: A.s0.ky, 0
1: 2, 0
2: (A.s0.ky == 2), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: 3, 0
8: (A.s0.mk == 3), 1
9: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
10: A.s0.kx, 0
11: (A.s0.kx == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)), 1
13: A.s0.cii, 0
14: (A.s0.cii == 3), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)), 1
16: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))), 1
With variables ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
With lets: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Solved expr for A.s0.ky :
  (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))
  ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Mutating (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (1)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (1)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((A.s0.kx == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
Mutating ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))) (1)
(Hit) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (1)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)) (0)
(Hit) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)) (0)
(Miss) Rewrote ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))) -> ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))) (1)
(Miss) Rewrote (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))) (1)



Input to CSE ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
After removing lets: ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
Include: ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))); should extract: 1
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Canonical form without lets ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
0: A.s0.kx, 0
1: 2, 0
2: (A.s0.kx == 2), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: 3, 0
8: (A.s0.mk == 3), 1
9: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
10: A.s0.ky, 0
11: (A.s0.ky == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)), 1
13: A.s0.cii, 0
14: (A.s0.cii == 3), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)), 1
16: ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))), 1
With variables ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
With lets: ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
Solved expr for A.s0.kx :
  (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))
  ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
Mutating (((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating ((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating (((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) (0)
Mutating ((A.s0.cii == 3) && (A.s0.ci == 7)) (0)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (1)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
(Miss) Rewrote ((A.s0.cii == 3) && (A.s0.ci == 7)) -> ((A.s0.cii == 3) && (A.s0.ci == 7)) (1)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
Mutating ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Hit) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
(Hit) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Miss) Rewrote ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) -> ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
(Miss) Rewrote (((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) -> ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
Mutating ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Hit) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Hit) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Miss) Rewrote ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) -> ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
(Miss) Rewrote ((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
Mutating ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Hit) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Miss) Rewrote ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) -> ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
(Miss) Rewrote (((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)



Input to CSE ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
After removing lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Include: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))); should extract: 1
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Canonical form without lets ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
0: A.s0.cii, 0
1: 3, 0
2: (A.s0.cii == 3), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: (A.s0.mk == 3), 1
8: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
9: A.s0.ky, 0
10: 2, 0
11: (A.s0.ky == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)), 1
13: A.s0.kx, 0
14: (A.s0.kx == 2), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)), 1
16: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))), 1
With variables ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
With lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Solved expr for A.s0.cii :
  (((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))
  ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 7 = 7, 7
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = 0, 6
bounds_of_expr_in_scope A.s0.yy_xx = A.s0.yy_xx, A.s0.yy_xx
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope (float32)C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = ((void *))neg_inf, ((void *))pos_inf
Mutating (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (1)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
(Miss) Rewrote (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)



Input to CSE ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
After removing lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Include: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))); should extract: 1
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Canonical form without lets ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
0: A.s0.cii, 0
1: 3, 0
2: (A.s0.cii == 3), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: (A.s0.mk == 3), 1
8: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
9: A.s0.ky, 0
10: 2, 0
11: (A.s0.ky == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)), 1
13: A.s0.kx, 0
14: (A.s0.kx == 2), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)), 1
16: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))), 1
With variables ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
With lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Solved expr for A.s0.cii :
  (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))
  ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Mutating (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (1)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (1)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> ((A.s0.ky == 2) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
Mutating ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) (1)
(Hit) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (1)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Hit) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) (0)
(Miss) Rewrote ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) -> ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) (1)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) (1)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
Mutating ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)
(Hit) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (1)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
(Hit) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
(Miss) Rewrote ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) -> ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)
(Miss) Rewrote (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)



Input to CSE ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
After removing lets: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Include: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))); should extract: 1
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Canonical form without lets ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
0: A.s0.ky, 0
1: 2, 0
2: (A.s0.ky == 2), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: 3, 0
8: (A.s0.mk == 3), 1
9: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
10: A.s0.kx, 0
11: (A.s0.kx == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)), 1
13: A.s0.cii, 0
14: (A.s0.cii == 3), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)), 1
16: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))), 1
With variables ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
With lets: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Solved expr for A.s0.ky :
  (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))
  ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Mutating (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (1)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (1)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((A.s0.kx == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
Mutating ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))) (1)
(Hit) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (1)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)) (0)
(Hit) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)) (0)
(Miss) Rewrote ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))) -> ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))) (1)
(Miss) Rewrote (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))) (1)



Input to CSE ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
After removing lets: ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
Include: ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))); should extract: 1
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Canonical form without lets ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
0: A.s0.kx, 0
1: 2, 0
2: (A.s0.kx == 2), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: 3, 0
8: (A.s0.mk == 3), 1
9: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
10: A.s0.ky, 0
11: (A.s0.ky == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)), 1
13: A.s0.cii, 0
14: (A.s0.cii == 3), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)), 1
16: ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))), 1
With variables ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
With lets: ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
Solved expr for A.s0.kx :
  (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))
  ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = 0, 6
bounds_of_expr_in_scope A.s0.yy_xx = A.s0.yy_xx, A.s0.yy_xx
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0

Considering folding C over for loop over A.s0.yy_xx dimension 14
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.yy_xx dimension 13
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.yy_xx dimension 12
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.yy_xx dimension 11
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.yy_xx dimension 10
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.yy_xx dimension 9
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.yy_xx dimension 8
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.yy_xx dimension 7
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.yy_xx dimension 6
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.yy_xx dimension 5
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.yy_xx dimension 4
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.yy_xx dimension 3
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.yy_xx dimension 2
Min: A.s0.yy_xx
Max: A.s0.yy_xx
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = A.s0.yy_xx
max = A.s0.yy_xx

Considering folding C over for loop over A.s0.yy_xx dimension 1
Min: 0
Max: 6
Extent: 7
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 6

Considering folding C over for loop over A.s0.yy_xx dimension 0
Min: 0
Max: 7
Extent: 8
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 7



Input to CSE (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
After removing lets: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
Include: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)); should extract: 1
Include: (((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)); should extract: 1
Include: ((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)); should extract: 1
Include: (((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))); should extract: 1
Include: ((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)); should extract: 1
Include: (((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))); should extract: 1
Include: ((uint1)1 && (0 <= 0)); should extract: 1
Include: (uint1)1; should extract: 0
Include: (0 <= 0); should extract: 1
Include: 0; should extract: 0
Include: 0; should extract: 0
Include: (((8 + 0) - 1) >= ((8 + 0) - 1)); should extract: 1
Include: ((8 + 0) - 1); should extract: 0
Include: (8 + 0); should extract: 0
Include: 8; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: ((8 + 0) - 1); should extract: 0
Include: (8 + 0); should extract: 0
Include: 8; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: (0 <= 0); should extract: 1
Include: (((7 + 0) - 1) >= ((7 + 0) - 1)); should extract: 1
Include: ((7 + 0) - 1); should extract: 0
Include: (7 + 0); should extract: 0
Include: 7; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: ((7 + 0) - 1); should extract: 0
Include: (7 + 0); should extract: 0
Include: 7; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: (A.s0.yy_xx <= A.s0.yy_xx); should extract: 1
Include: A.s0.yy_xx; should extract: 0
Include: A.s0.yy_xx; should extract: 0
Include: (A.s0.yy_xx >= A.s0.yy_xx); should extract: 1
Include: A.s0.yy_xx; should extract: 0
Include: A.s0.yy_xx; should extract: 0
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: 0; should extract: 0
Include: 0; should extract: 0
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Canonical form without lets (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
0: (uint1)1, 0
1: 0, 0
2: (0 <= 0), 14
3: ((uint1)1 && (0 <= 0)), 1
4: 8, 0
5: (8 + 0), 0
6: 1, 0
7: ((8 + 0) - 1), 0
8: (((8 + 0) - 1) >= ((8 + 0) - 1)), 1
9: (((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))), 1
10: ((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)), 1
11: 7, 0
12: (7 + 0), 0
13: ((7 + 0) - 1), 0
14: (((7 + 0) - 1) >= ((7 + 0) - 1)), 1
15: (((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))), 1
16: A.s0.yy_xx, 0
17: (A.s0.yy_xx <= A.s0.yy_xx), 1
18: ((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)), 1
19: (A.s0.yy_xx >= A.s0.yy_xx), 1
20: (((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)), 1
21: ((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)), 1
22: (0 >= 0), 12
23: (((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)), 1
24: ((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
25: (((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
26: ((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
27: (((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
28: ((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
29: (((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
30: ((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
31: (((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
32: ((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
33: (((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
34: ((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
35: (((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
36: ((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
37: (((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
38: ((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
39: (((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
40: ((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
41: (((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
42: ((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
43: (((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
44: ((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
45: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
With variables (((((((((((((((((((((((((((((((uint1)1 && (uint1)t12) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (uint1)t12) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (uint1)t12) && (uint1)t13) && (uint1)t12) && (uint1)t13) && (uint1)t12) && (uint1)t13) && (uint1)t12) && (uint1)t13) && (uint1)t12) && (uint1)t13) && (uint1)t12) && (uint1)t13) && (uint1)t12) && (uint1)t13) && (uint1)t12) && (uint1)t13) && (uint1)t12) && (uint1)t13) && (uint1)t12) && (uint1)t13) && (uint1)t12) && (uint1)t13) && (uint1)t12) && (uint1)t13)
With lets: (let t12 = (0 <= 0) in (let t13 = (0 >= 0) in (((((((((((((((((((((((((((((((uint1)1 && t12) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && t12) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && t12) && t13) && t12) && t13) && t12) && t13) && t12) && t13) && t12) && t13) && t12) && t13) && t12) && t13) && t12) && t13) && t12) && t13) && t12) && t13) && t12) && t13) && t12) && t13)))
simplify let t12 = (uint1)1 in...
new let t12.s = (undefined) in ... (uint1)1 ...
simplify let t13 = (uint1)1 in...
new let t13.s = (undefined) in ... (uint1)1 ...
Mutating (((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating ((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating (((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) (0)
Mutating ((A.s0.cii == 3) && (A.s0.ci == 7)) (0)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (1)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
(Miss) Rewrote ((A.s0.cii == 3) && (A.s0.ci == 7)) -> ((A.s0.cii == 3) && (A.s0.ci == 7)) (1)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
Mutating ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Hit) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
(Hit) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Miss) Rewrote ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) -> ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
(Miss) Rewrote (((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) -> ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
Mutating ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Hit) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Hit) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Miss) Rewrote ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) -> ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
(Miss) Rewrote ((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
Mutating ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Hit) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Miss) Rewrote ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) -> ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
(Miss) Rewrote (((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)



Input to CSE ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
After removing lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Include: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))); should extract: 1
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Canonical form without lets ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
0: A.s0.cii, 0
1: 3, 0
2: (A.s0.cii == 3), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: (A.s0.mk == 3), 1
8: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
9: A.s0.ky, 0
10: 2, 0
11: (A.s0.ky == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)), 1
13: A.s0.kx, 0
14: (A.s0.kx == 2), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)), 1
16: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))), 1
With variables ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
With lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Solved expr for A.s0.cii :
  (((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))
  ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = A.s0.yyy_xxx, A.s0.yyy_xxx
bounds_of_expr_in_scope A.s0.yy_xx = A.s0.yy_xx, A.s0.yy_xx
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
Box(by Provide) of C
  0 ... ((8 + 0) - 1)
  A.s0.yyy_xxx ... A.s0.yyy_xxx
  A.s0.yy_xx ... A.s0.yy_xx
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
Mutating (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (1)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
(Miss) Rewrote (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)



Input to CSE ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
After removing lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Include: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))); should extract: 1
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Canonical form without lets ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
0: A.s0.cii, 0
1: 3, 0
2: (A.s0.cii == 3), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: (A.s0.mk == 3), 1
8: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
9: A.s0.ky, 0
10: 2, 0
11: (A.s0.ky == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)), 1
13: A.s0.kx, 0
14: (A.s0.kx == 2), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)), 1
16: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))), 1
With variables ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
With lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Solved expr for A.s0.cii :
  (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))
  ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Mutating (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (1)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (1)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> ((A.s0.ky == 2) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
Mutating ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) (1)
(Hit) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (1)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Hit) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) (0)
(Miss) Rewrote ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) -> ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) (1)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) (1)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
Mutating ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)
(Hit) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (1)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
(Hit) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
(Miss) Rewrote ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) -> ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)
(Miss) Rewrote (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)



Input to CSE ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
After removing lets: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Include: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))); should extract: 1
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Canonical form without lets ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
0: A.s0.ky, 0
1: 2, 0
2: (A.s0.ky == 2), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: 3, 0
8: (A.s0.mk == 3), 1
9: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
10: A.s0.kx, 0
11: (A.s0.kx == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)), 1
13: A.s0.cii, 0
14: (A.s0.cii == 3), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)), 1
16: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))), 1
With variables ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
With lets: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Solved expr for A.s0.ky :
  (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))
  ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Mutating (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (1)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (1)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((A.s0.kx == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
Mutating ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))) (1)
(Hit) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (1)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)) (0)
(Hit) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)) (0)
(Miss) Rewrote ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))) -> ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))) (1)
(Miss) Rewrote (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))) (1)



Input to CSE ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
After removing lets: ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
Include: ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))); should extract: 1
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Canonical form without lets ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
0: A.s0.kx, 0
1: 2, 0
2: (A.s0.kx == 2), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: 3, 0
8: (A.s0.mk == 3), 1
9: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
10: A.s0.ky, 0
11: (A.s0.ky == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)), 1
13: A.s0.cii, 0
14: (A.s0.cii == 3), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)), 1
16: ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))), 1
With variables ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
With lets: ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
Solved expr for A.s0.kx :
  (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))
  ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
Mutating (((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating ((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating (((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) (0)
Mutating ((A.s0.cii == 3) && (A.s0.ci == 7)) (0)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (1)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
(Miss) Rewrote ((A.s0.cii == 3) && (A.s0.ci == 7)) -> ((A.s0.cii == 3) && (A.s0.ci == 7)) (1)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
Mutating ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Hit) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
(Hit) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Miss) Rewrote ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) -> ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
(Miss) Rewrote (((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) -> ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
Mutating ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Hit) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Hit) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Miss) Rewrote ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) -> ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
(Miss) Rewrote ((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
Mutating ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Hit) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Miss) Rewrote ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) -> ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
(Miss) Rewrote (((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)



Input to CSE ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
After removing lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Include: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))); should extract: 1
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Canonical form without lets ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
0: A.s0.cii, 0
1: 3, 0
2: (A.s0.cii == 3), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: (A.s0.mk == 3), 1
8: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
9: A.s0.ky, 0
10: 2, 0
11: (A.s0.ky == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)), 1
13: A.s0.kx, 0
14: (A.s0.kx == 2), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)), 1
16: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))), 1
With variables ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
With lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Solved expr for A.s0.cii :
  (((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))
  ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = A.s0.yyy_xxx, A.s0.yyy_xxx
bounds_of_expr_in_scope A.s0.yy_xx = A.s0.yy_xx, A.s0.yy_xx
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope (float32)C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = ((void *))neg_inf, ((void *))pos_inf
Mutating (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (1)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
(Miss) Rewrote (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)



Input to CSE ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
After removing lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Include: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))); should extract: 1
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Canonical form without lets ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
0: A.s0.cii, 0
1: 3, 0
2: (A.s0.cii == 3), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: (A.s0.mk == 3), 1
8: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
9: A.s0.ky, 0
10: 2, 0
11: (A.s0.ky == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)), 1
13: A.s0.kx, 0
14: (A.s0.kx == 2), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)), 1
16: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))), 1
With variables ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
With lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Solved expr for A.s0.cii :
  (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))
  ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Mutating (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (1)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (1)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> ((A.s0.ky == 2) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
Mutating ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) (1)
(Hit) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (1)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Hit) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) (0)
(Miss) Rewrote ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) -> ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) (1)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) (1)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
Mutating ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)
(Hit) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (1)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
(Hit) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
(Miss) Rewrote ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) -> ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)
(Miss) Rewrote (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)



Input to CSE ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
After removing lets: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Include: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))); should extract: 1
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Canonical form without lets ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
0: A.s0.ky, 0
1: 2, 0
2: (A.s0.ky == 2), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: 3, 0
8: (A.s0.mk == 3), 1
9: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
10: A.s0.kx, 0
11: (A.s0.kx == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)), 1
13: A.s0.cii, 0
14: (A.s0.cii == 3), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)), 1
16: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))), 1
With variables ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
With lets: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Solved expr for A.s0.ky :
  (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))
  ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Mutating (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (1)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (1)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((A.s0.kx == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
Mutating ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))) (1)
(Hit) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (1)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)) (0)
(Hit) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)) (0)
(Miss) Rewrote ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))) -> ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))) (1)
(Miss) Rewrote (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))) (1)



Input to CSE ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
After removing lets: ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
Include: ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))); should extract: 1
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Canonical form without lets ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
0: A.s0.kx, 0
1: 2, 0
2: (A.s0.kx == 2), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: 3, 0
8: (A.s0.mk == 3), 1
9: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
10: A.s0.ky, 0
11: (A.s0.ky == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)), 1
13: A.s0.cii, 0
14: (A.s0.cii == 3), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)), 1
16: ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3))), 1
With variables ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
With lets: ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
Solved expr for A.s0.kx :
  (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))
  ((A.s0.kx == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.cii == 3)))
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = A.s0.yyy_xxx, A.s0.yyy_xxx
bounds_of_expr_in_scope A.s0.yy_xx = A.s0.yy_xx, A.s0.yy_xx
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0

Considering folding C over for loop over A.s0.yyy_xxx dimension 14
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.yyy_xxx dimension 13
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.yyy_xxx dimension 12
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.yyy_xxx dimension 11
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.yyy_xxx dimension 10
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.yyy_xxx dimension 9
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.yyy_xxx dimension 8
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.yyy_xxx dimension 7
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.yyy_xxx dimension 6
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.yyy_xxx dimension 5
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.yyy_xxx dimension 4
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.yyy_xxx dimension 3
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.yyy_xxx dimension 2
Min: A.s0.yy_xx
Max: A.s0.yy_xx
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = A.s0.yy_xx
max = A.s0.yy_xx

Considering folding C over for loop over A.s0.yyy_xxx dimension 1
Min: A.s0.yyy_xxx
Max: A.s0.yyy_xxx
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = A.s0.yyy_xxx
max = A.s0.yyy_xxx

Considering folding C over for loop over A.s0.yyy_xxx dimension 0
Min: 0
Max: 7
Extent: 8
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 7



Input to CSE (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
After removing lets: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
Include: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)); should extract: 1
Include: (((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)); should extract: 1
Include: ((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)); should extract: 1
Include: (((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)); should extract: 1
Include: ((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)); should extract: 1
Include: (((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))); should extract: 1
Include: ((uint1)1 && (0 <= 0)); should extract: 1
Include: (uint1)1; should extract: 0
Include: (0 <= 0); should extract: 1
Include: 0; should extract: 0
Include: 0; should extract: 0
Include: (((8 + 0) - 1) >= ((8 + 0) - 1)); should extract: 1
Include: ((8 + 0) - 1); should extract: 0
Include: (8 + 0); should extract: 0
Include: 8; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: ((8 + 0) - 1); should extract: 0
Include: (8 + 0); should extract: 0
Include: 8; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: (A.s0.yyy_xxx <= A.s0.yyy_xxx); should extract: 1
Include: A.s0.yyy_xxx; should extract: 0
Include: A.s0.yyy_xxx; should extract: 0
Include: (A.s0.yyy_xxx >= A.s0.yyy_xxx); should extract: 1
Include: A.s0.yyy_xxx; should extract: 0
Include: A.s0.yyy_xxx; should extract: 0
Include: (A.s0.yy_xx <= A.s0.yy_xx); should extract: 1
Include: A.s0.yy_xx; should extract: 0
Include: A.s0.yy_xx; should extract: 0
Include: (A.s0.yy_xx >= A.s0.yy_xx); should extract: 1
Include: A.s0.yy_xx; should extract: 0
Include: A.s0.yy_xx; should extract: 0
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: 0; should extract: 0
Include: 0; should extract: 0
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Canonical form without lets (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
0: (uint1)1, 0
1: 0, 0
2: (0 <= 0), 13
3: ((uint1)1 && (0 <= 0)), 1
4: 8, 0
5: (8 + 0), 0
6: 1, 0
7: ((8 + 0) - 1), 0
8: (((8 + 0) - 1) >= ((8 + 0) - 1)), 1
9: (((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))), 1
10: A.s0.yyy_xxx, 0
11: (A.s0.yyy_xxx <= A.s0.yyy_xxx), 1
12: ((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)), 1
13: (A.s0.yyy_xxx >= A.s0.yyy_xxx), 1
14: (((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)), 1
15: A.s0.yy_xx, 0
16: (A.s0.yy_xx <= A.s0.yy_xx), 1
17: ((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)), 1
18: (A.s0.yy_xx >= A.s0.yy_xx), 1
19: (((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)), 1
20: ((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)), 1
21: (0 >= 0), 12
22: (((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)), 1
23: ((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
24: (((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
25: ((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
26: (((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
27: ((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
28: (((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
29: ((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
30: (((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
31: ((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
32: (((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
33: ((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
34: (((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
35: ((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
36: (((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
37: ((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
38: (((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
39: ((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
40: (((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
41: ((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
42: (((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
43: ((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
44: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
With variables (((((((((((((((((((((((((((((((uint1)1 && (uint1)t14) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (uint1)t14) && (uint1)t15) && (uint1)t14) && (uint1)t15) && (uint1)t14) && (uint1)t15) && (uint1)t14) && (uint1)t15) && (uint1)t14) && (uint1)t15) && (uint1)t14) && (uint1)t15) && (uint1)t14) && (uint1)t15) && (uint1)t14) && (uint1)t15) && (uint1)t14) && (uint1)t15) && (uint1)t14) && (uint1)t15) && (uint1)t14) && (uint1)t15) && (uint1)t14) && (uint1)t15)
With lets: (let t14 = (0 <= 0) in (let t15 = (0 >= 0) in (((((((((((((((((((((((((((((((uint1)1 && t14) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && t14) && t15) && t14) && t15) && t14) && t15) && t14) && t15) && t14) && t15) && t14) && t15) && t14) && t15) && t14) && t15) && t14) && t15) && t14) && t15) && t14) && t15) && t14) && t15)))
simplify let t14 = (uint1)1 in...
new let t14.s = (undefined) in ... (uint1)1 ...
simplify let t15 = (uint1)1 in...
new let t15.s = (undefined) in ... (uint1)1 ...
Mutating (((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating ((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating (((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) (0)
Mutating ((A.s0.cii == 3) && (A.s0.ci == 7)) (0)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (1)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
(Miss) Rewrote ((A.s0.cii == 3) && (A.s0.ci == 7)) -> ((A.s0.cii == 3) && (A.s0.ci == 7)) (1)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
Mutating ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Hit) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
(Hit) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Miss) Rewrote ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) -> ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
(Miss) Rewrote (((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) -> ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
Mutating ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Hit) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Hit) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Miss) Rewrote ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) -> ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
(Miss) Rewrote ((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
Mutating ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Hit) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Miss) Rewrote ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) -> ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
(Miss) Rewrote (((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)



Input to CSE ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
After removing lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Include: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))); should extract: 1
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Canonical form without lets ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
0: A.s0.cii, 0
1: 3, 0
2: (A.s0.cii == 3), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: (A.s0.mk == 3), 1
8: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
9: A.s0.ky, 0
10: 2, 0
11: (A.s0.ky == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)), 1
13: A.s0.kx, 0
14: (A.s0.kx == 2), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)), 1
16: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))), 1
With variables ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
With lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Solved expr for A.s0.cii :
  (((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))
  ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = A.s0.yyy_xxx, A.s0.yyy_xxx
bounds_of_expr_in_scope A.s0.yy_xx = A.s0.yy_xx, A.s0.yy_xx
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
Box(by Provide) of C
  0 ... ((8 + 0) - 1)
  A.s0.yyy_xxx ... A.s0.yyy_xxx
  A.s0.yy_xx ... A.s0.yy_xx
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
Mutating (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (1)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
(Miss) Rewrote (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)



Input to CSE ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
After removing lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Include: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))); should extract: 1
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Canonical form without lets ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
0: A.s0.cii, 0
1: 3, 0
2: (A.s0.cii == 3), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: (A.s0.mk == 3), 1
8: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
9: A.s0.ky, 0
10: 2, 0
11: (A.s0.ky == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)), 1
13: A.s0.kx, 0
14: (A.s0.kx == 2), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)), 1
16: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))), 1
With variables ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
With lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Solved expr for A.s0.cii :
  (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))
  ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Mutating (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (1)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (1)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> ((A.s0.ky == 2) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
Mutating ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) (1)
(Hit) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (1)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Hit) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) (0)
(Miss) Rewrote ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) -> ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) (1)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) (1)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
Mutating ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)
(Hit) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (1)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
(Hit) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
(Miss) Rewrote ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) -> ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)
(Miss) Rewrote (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)



Input to CSE ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
After removing lets: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Include: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))); should extract: 1
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Canonical form without lets ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
0: A.s0.ky, 0
1: 2, 0
2: (A.s0.ky == 2), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: 3, 0
8: (A.s0.mk == 3), 1
9: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
10: A.s0.kx, 0
11: (A.s0.kx == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)), 1
13: A.s0.cii, 0
14: (A.s0.cii == 3), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)), 1
16: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))), 1
With variables ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
With lets: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Solved expr for A.s0.ky :
  (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))
  ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Mutating (((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating ((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating (((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) (0)
Mutating ((A.s0.cii == 3) && (A.s0.ci == 7)) (0)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (1)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
(Miss) Rewrote ((A.s0.cii == 3) && (A.s0.ci == 7)) -> ((A.s0.cii == 3) && (A.s0.ci == 7)) (1)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
Mutating ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Hit) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
(Hit) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Miss) Rewrote ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) -> ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
(Miss) Rewrote (((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) -> ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
Mutating ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Hit) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Hit) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Miss) Rewrote ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) -> ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
(Miss) Rewrote ((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
Mutating ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Hit) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Miss) Rewrote ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) -> ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
(Miss) Rewrote (((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)



Input to CSE ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
After removing lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Include: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))); should extract: 1
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Canonical form without lets ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
0: A.s0.cii, 0
1: 3, 0
2: (A.s0.cii == 3), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: (A.s0.mk == 3), 1
8: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
9: A.s0.ky, 0
10: 2, 0
11: (A.s0.ky == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)), 1
13: A.s0.kx, 0
14: (A.s0.kx == 2), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)), 1
16: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))), 1
With variables ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
With lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Solved expr for A.s0.cii :
  (((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))
  ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = A.s0.yyy_xxx, A.s0.yyy_xxx
bounds_of_expr_in_scope A.s0.yy_xx = A.s0.yy_xx, A.s0.yy_xx
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope (float32)C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = ((void *))neg_inf, ((void *))pos_inf
Mutating (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (1)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
(Miss) Rewrote (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)



Input to CSE ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
After removing lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Include: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))); should extract: 1
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Canonical form without lets ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
0: A.s0.cii, 0
1: 3, 0
2: (A.s0.cii == 3), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: (A.s0.mk == 3), 1
8: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
9: A.s0.ky, 0
10: 2, 0
11: (A.s0.ky == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)), 1
13: A.s0.kx, 0
14: (A.s0.kx == 2), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)), 1
16: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))), 1
With variables ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
With lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Solved expr for A.s0.cii :
  (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))
  ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Mutating (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (1)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (1)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> ((A.s0.ky == 2) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
Mutating ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) (1)
(Hit) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (1)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Hit) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) (0)
(Miss) Rewrote ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) -> ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) (1)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((A.s0.ky == 2) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2))) (1)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
Mutating ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)
(Hit) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (1)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
(Hit) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
(Miss) Rewrote ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) -> ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)
(Miss) Rewrote (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))) (1)



Input to CSE ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
After removing lets: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Include: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))); should extract: 1
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Canonical form without lets ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
0: A.s0.ky, 0
1: 2, 0
2: (A.s0.ky == 2), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: 3, 0
8: (A.s0.mk == 3), 1
9: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
10: A.s0.kx, 0
11: (A.s0.kx == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)), 1
13: A.s0.cii, 0
14: (A.s0.cii == 3), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)), 1
16: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3))), 1
With variables ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
With lets: ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
Solved expr for A.s0.ky :
  (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))
  ((A.s0.ky == 2) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.kx == 2)) && (A.s0.cii == 3)))
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = A.s0.yyy_xxx, A.s0.yyy_xxx
bounds_of_expr_in_scope A.s0.yy_xx = A.s0.yy_xx, A.s0.yy_xx
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0

Considering folding C over for loop over A.s0.kx dimension 14
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.kx dimension 13
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.kx dimension 12
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.kx dimension 11
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.kx dimension 10
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.kx dimension 9
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.kx dimension 8
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.kx dimension 7
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.kx dimension 6
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.kx dimension 5
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.kx dimension 4
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.kx dimension 3
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.kx dimension 2
Min: A.s0.yy_xx
Max: A.s0.yy_xx
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = A.s0.yy_xx
max = A.s0.yy_xx

Considering folding C over for loop over A.s0.kx dimension 1
Min: A.s0.yyy_xxx
Max: A.s0.yyy_xxx
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = A.s0.yyy_xxx
max = A.s0.yyy_xxx

Considering folding C over for loop over A.s0.kx dimension 0
Min: 0
Max: 7
Extent: 8
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 7



Input to CSE (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
After removing lets: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
Include: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)); should extract: 1
Include: (((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)); should extract: 1
Include: ((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)); should extract: 1
Include: (((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)); should extract: 1
Include: ((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)); should extract: 1
Include: (((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))); should extract: 1
Include: ((uint1)1 && (0 <= 0)); should extract: 1
Include: (uint1)1; should extract: 0
Include: (0 <= 0); should extract: 1
Include: 0; should extract: 0
Include: 0; should extract: 0
Include: (((8 + 0) - 1) >= ((8 + 0) - 1)); should extract: 1
Include: ((8 + 0) - 1); should extract: 0
Include: (8 + 0); should extract: 0
Include: 8; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: ((8 + 0) - 1); should extract: 0
Include: (8 + 0); should extract: 0
Include: 8; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: (A.s0.yyy_xxx <= A.s0.yyy_xxx); should extract: 1
Include: A.s0.yyy_xxx; should extract: 0
Include: A.s0.yyy_xxx; should extract: 0
Include: (A.s0.yyy_xxx >= A.s0.yyy_xxx); should extract: 1
Include: A.s0.yyy_xxx; should extract: 0
Include: A.s0.yyy_xxx; should extract: 0
Include: (A.s0.yy_xx <= A.s0.yy_xx); should extract: 1
Include: A.s0.yy_xx; should extract: 0
Include: A.s0.yy_xx; should extract: 0
Include: (A.s0.yy_xx >= A.s0.yy_xx); should extract: 1
Include: A.s0.yy_xx; should extract: 0
Include: A.s0.yy_xx; should extract: 0
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: 0; should extract: 0
Include: 0; should extract: 0
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Canonical form without lets (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
0: (uint1)1, 0
1: 0, 0
2: (0 <= 0), 13
3: ((uint1)1 && (0 <= 0)), 1
4: 8, 0
5: (8 + 0), 0
6: 1, 0
7: ((8 + 0) - 1), 0
8: (((8 + 0) - 1) >= ((8 + 0) - 1)), 1
9: (((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))), 1
10: A.s0.yyy_xxx, 0
11: (A.s0.yyy_xxx <= A.s0.yyy_xxx), 1
12: ((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)), 1
13: (A.s0.yyy_xxx >= A.s0.yyy_xxx), 1
14: (((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)), 1
15: A.s0.yy_xx, 0
16: (A.s0.yy_xx <= A.s0.yy_xx), 1
17: ((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)), 1
18: (A.s0.yy_xx >= A.s0.yy_xx), 1
19: (((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)), 1
20: ((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)), 1
21: (0 >= 0), 12
22: (((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)), 1
23: ((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
24: (((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
25: ((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
26: (((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
27: ((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
28: (((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
29: ((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
30: (((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
31: ((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
32: (((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
33: ((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
34: (((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
35: ((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
36: (((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
37: ((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
38: (((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
39: ((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
40: (((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
41: ((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
42: (((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
43: ((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
44: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
With variables (((((((((((((((((((((((((((((((uint1)1 && (uint1)t16) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (uint1)t16) && (uint1)t17) && (uint1)t16) && (uint1)t17) && (uint1)t16) && (uint1)t17) && (uint1)t16) && (uint1)t17) && (uint1)t16) && (uint1)t17) && (uint1)t16) && (uint1)t17) && (uint1)t16) && (uint1)t17) && (uint1)t16) && (uint1)t17) && (uint1)t16) && (uint1)t17) && (uint1)t16) && (uint1)t17) && (uint1)t16) && (uint1)t17) && (uint1)t16) && (uint1)t17)
With lets: (let t16 = (0 <= 0) in (let t17 = (0 >= 0) in (((((((((((((((((((((((((((((((uint1)1 && t16) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && t16) && t17) && t16) && t17) && t16) && t17) && t16) && t17) && t16) && t17) && t16) && t17) && t16) && t17) && t16) && t17) && t16) && t17) && t16) && t17) && t16) && t17) && t16) && t17)))
simplify let t16 = (uint1)1 in...
new let t16.s = (undefined) in ... (uint1)1 ...
simplify let t17 = (uint1)1 in...
new let t17.s = (undefined) in ... (uint1)1 ...
Mutating (((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating ((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating (((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) (0)
Mutating ((A.s0.cii == 3) && (A.s0.ci == 7)) (0)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (1)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
(Miss) Rewrote ((A.s0.cii == 3) && (A.s0.ci == 7)) -> ((A.s0.cii == 3) && (A.s0.ci == 7)) (1)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
Mutating ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Hit) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
(Hit) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Miss) Rewrote ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) -> ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
(Miss) Rewrote (((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) -> ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
Mutating ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Hit) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Hit) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Miss) Rewrote ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) -> ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
(Miss) Rewrote ((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
Mutating ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Hit) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Miss) Rewrote ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) -> ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
(Miss) Rewrote (((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)



Input to CSE ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
After removing lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Include: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))); should extract: 1
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Canonical form without lets ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
0: A.s0.cii, 0
1: 3, 0
2: (A.s0.cii == 3), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: (A.s0.mk == 3), 1
8: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
9: A.s0.ky, 0
10: 2, 0
11: (A.s0.ky == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)), 1
13: A.s0.kx, 0
14: (A.s0.kx == 2), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)), 1
16: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))), 1
With variables ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
With lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Solved expr for A.s0.cii :
  (((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))
  ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = A.s0.yyy_xxx, A.s0.yyy_xxx
bounds_of_expr_in_scope A.s0.yy_xx = A.s0.yy_xx, A.s0.yy_xx
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
Box(by Provide) of C
  0 ... ((8 + 0) - 1)
  A.s0.yyy_xxx ... A.s0.yyy_xxx
  A.s0.yy_xx ... A.s0.yy_xx
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
Mutating (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (1)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
(Miss) Rewrote (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)



Input to CSE ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
After removing lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Include: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))); should extract: 1
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Canonical form without lets ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
0: A.s0.cii, 0
1: 3, 0
2: (A.s0.cii == 3), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: (A.s0.mk == 3), 1
8: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
9: A.s0.ky, 0
10: 2, 0
11: (A.s0.ky == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)), 1
13: A.s0.kx, 0
14: (A.s0.kx == 2), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)), 1
16: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))), 1
With variables ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
With lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Solved expr for A.s0.cii :
  (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))
  ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Mutating (((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating ((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating (((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) (0)
Mutating ((A.s0.cii == 3) && (A.s0.ci == 7)) (0)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (1)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
(Miss) Rewrote ((A.s0.cii == 3) && (A.s0.ci == 7)) -> ((A.s0.cii == 3) && (A.s0.ci == 7)) (1)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
Mutating ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Hit) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
(Hit) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Miss) Rewrote ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) -> ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
(Miss) Rewrote (((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) -> ((A.s0.cii == 3) && ((A.s0.ci == 7) && (A.s0.mk == 3))) (1)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
Mutating ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Hit) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
(Hit) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Miss) Rewrote ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) -> ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
(Miss) Rewrote ((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> ((A.s0.cii == 3) && (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2))) (1)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
Mutating ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
(Hit) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Hit) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
(Hit) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
(Miss) Rewrote ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) -> ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)
(Miss) Rewrote (((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)



Input to CSE ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
After removing lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Include: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))); should extract: 1
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Canonical form without lets ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
0: A.s0.cii, 0
1: 3, 0
2: (A.s0.cii == 3), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: (A.s0.mk == 3), 1
8: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
9: A.s0.ky, 0
10: 2, 0
11: (A.s0.ky == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)), 1
13: A.s0.kx, 0
14: (A.s0.kx == 2), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)), 1
16: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))), 1
With variables ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
With lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Solved expr for A.s0.cii :
  (((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))
  ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = A.s0.yyy_xxx, A.s0.yyy_xxx
bounds_of_expr_in_scope A.s0.yy_xx = A.s0.yy_xx, A.s0.yy_xx
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope (float32)C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = ((void *))neg_inf, ((void *))pos_inf
Mutating (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) (0)
Mutating ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ci == 7) (0)
Mutating A.s0.ci (0)
(Miss) Rewrote A.s0.ci -> A.s0.ci (0)
Mutating 7 (0)
(Miss) Rewrote 7 -> 7 (0)
(Miss) Rewrote (A.s0.ci == 7) -> (A.s0.ci == 7) (0)
Mutating (A.s0.mk == 3) (0)
Mutating A.s0.mk (0)
(Miss) Rewrote A.s0.mk -> A.s0.mk (0)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.mk == 3) -> (A.s0.mk == 3) (0)
(Miss) Rewrote ((A.s0.ci == 7) && (A.s0.mk == 3)) -> ((A.s0.ci == 7) && (A.s0.mk == 3)) (0)
Mutating (A.s0.ky == 2) (0)
Mutating A.s0.ky (0)
(Miss) Rewrote A.s0.ky -> A.s0.ky (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.ky == 2) -> (A.s0.ky == 2) (0)
(Miss) Rewrote (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) -> (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) (0)
Mutating (A.s0.kx == 2) (0)
Mutating A.s0.kx (0)
(Miss) Rewrote A.s0.kx -> A.s0.kx (0)
Mutating 2 (0)
(Miss) Rewrote 2 -> 2 (0)
(Miss) Rewrote (A.s0.kx == 2) -> (A.s0.kx == 2) (0)
(Miss) Rewrote ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) -> ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) (0)
Mutating (A.s0.cii == 3) (0)
Mutating A.s0.cii (0)
(Miss) Rewrote A.s0.cii -> A.s0.cii (1)
Mutating 3 (0)
(Miss) Rewrote 3 -> 3 (0)
(Miss) Rewrote (A.s0.cii == 3) -> (A.s0.cii == 3) (1)
(Miss) Rewrote (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3)) -> ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) (1)



Input to CSE ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
After removing lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Include: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))); should extract: 1
Include: (A.s0.cii == 3); should extract: 1
Include: A.s0.cii; should extract: 0
Include: 3; should extract: 0
Include: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)); should extract: 1
Include: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)); should extract: 1
Include: ((A.s0.ci == 7) && (A.s0.mk == 3)); should extract: 1
Include: (A.s0.ci == 7); should extract: 1
Include: A.s0.ci; should extract: 0
Include: 7; should extract: 0
Include: (A.s0.mk == 3); should extract: 1
Include: A.s0.mk; should extract: 0
Include: 3; should extract: 0
Include: (A.s0.ky == 2); should extract: 1
Include: A.s0.ky; should extract: 0
Include: 2; should extract: 0
Include: (A.s0.kx == 2); should extract: 1
Include: A.s0.kx; should extract: 0
Include: 2; should extract: 0
Canonical form without lets ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
0: A.s0.cii, 0
1: 3, 0
2: (A.s0.cii == 3), 1
3: A.s0.ci, 0
4: 7, 0
5: (A.s0.ci == 7), 1
6: A.s0.mk, 0
7: (A.s0.mk == 3), 1
8: ((A.s0.ci == 7) && (A.s0.mk == 3)), 1
9: A.s0.ky, 0
10: 2, 0
11: (A.s0.ky == 2), 1
12: (((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)), 1
13: A.s0.kx, 0
14: (A.s0.kx == 2), 1
15: ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)), 1
16: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))), 1
With variables ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
With lets: ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
Solved expr for A.s0.cii :
  (((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)) && (A.s0.cii == 3))
  ((A.s0.cii == 3) && ((((A.s0.ci == 7) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2)))
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = A.s0.yyy_xxx, A.s0.yyy_xxx
bounds_of_expr_in_scope A.s0.yy_xx = A.s0.yy_xx, A.s0.yy_xx
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0

Considering folding C over for loop over A.s0.ky dimension 14
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.ky dimension 13
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.ky dimension 12
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.ky dimension 11
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.ky dimension 10
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.ky dimension 9
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.ky dimension 8
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.ky dimension 7
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.ky dimension 6
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.ky dimension 5
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.ky dimension 4
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.ky dimension 3
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding C over for loop over A.s0.ky dimension 2
Min: A.s0.yy_xx
Max: A.s0.yy_xx
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = A.s0.yy_xx
max = A.s0.yy_xx

Considering folding C over for loop over A.s0.ky dimension 1
Min: A.s0.yyy_xxx
Max: A.s0.yyy_xxx
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = A.s0.yyy_xxx
max = A.s0.yyy_xxx

Considering folding C over for loop over A.s0.ky dimension 0
Min: 0
Max: 7
Extent: 8
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 7



Input to CSE (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
After removing lets: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
Include: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)); should extract: 1
Include: (((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)); should extract: 1
Include: ((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)); should extract: 1
Include: (((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)); should extract: 1
Include: ((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)); should extract: 1
Include: (((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))); should extract: 1
Include: ((uint1)1 && (0 <= 0)); should extract: 1
Include: (uint1)1; should extract: 0
Include: (0 <= 0); should extract: 1
Include: 0; should extract: 0
Include: 0; should extract: 0
Include: (((8 + 0) - 1) >= ((8 + 0) - 1)); should extract: 1
Include: ((8 + 0) - 1); should extract: 0
Include: (8 + 0); should extract: 0
Include: 8; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: ((8 + 0) - 1); should extract: 0
Include: (8 + 0); should extract: 0
Include: 8; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: (A.s0.yyy_xxx <= A.s0.yyy_xxx); should extract: 1
Include: A.s0.yyy_xxx; should extract: 0
Include: A.s0.yyy_xxx; should extract: 0
Include: (A.s0.yyy_xxx >= A.s0.yyy_xxx); should extract: 1
Include: A.s0.yyy_xxx; should extract: 0
Include: A.s0.yyy_xxx; should extract: 0
Include: (A.s0.yy_xx <= A.s0.yy_xx); should extract: 1
Include: A.s0.yy_xx; should extract: 0
Include: A.s0.yy_xx; should extract: 0
Include: (A.s0.yy_xx >= A.s0.yy_xx); should extract: 1
Include: A.s0.yy_xx; should extract: 0
Include: A.s0.yy_xx; should extract: 0
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: 0; should extract: 0
Include: 0; should extract: 0
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Canonical form without lets (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
0: (uint1)1, 0
1: 0, 0
2: (0 <= 0), 13
3: ((uint1)1 && (0 <= 0)), 1
4: 8, 0
5: (8 + 0), 0
6: 1, 0
7: ((8 + 0) - 1), 0
8: (((8 + 0) - 1) >= ((8 + 0) - 1)), 1
9: (((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))), 1
10: A.s0.yyy_xxx, 0
11: (A.s0.yyy_xxx <= A.s0.yyy_xxx), 1
12: ((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)), 1
13: (A.s0.yyy_xxx >= A.s0.yyy_xxx), 1
14: (((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)), 1
15: A.s0.yy_xx, 0
16: (A.s0.yy_xx <= A.s0.yy_xx), 1
17: ((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)), 1
18: (A.s0.yy_xx >= A.s0.yy_xx), 1
19: (((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)), 1
20: ((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)), 1
21: (0 >= 0), 12
22: (((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)), 1
23: ((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
24: (((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
25: ((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
26: (((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
27: ((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
28: (((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
29: ((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
30: (((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
31: ((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
32: (((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
33: ((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
34: (((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
35: ((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
36: (((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
37: ((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
38: (((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
39: ((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
40: (((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
41: ((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
42: (((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
43: ((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
44: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
With variables (((((((((((((((((((((((((((((((uint1)1 && (uint1)t18) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (uint1)t18) && (uint1)t19) && (uint1)t18) && (uint1)t19) && (uint1)t18) && (uint1)t19) && (uint1)t18) && (uint1)t19) && (uint1)t18) && (uint1)t19) && (uint1)t18) && (uint1)t19) && (uint1)t18) && (uint1)t19) && (uint1)t18) && (uint1)t19) && (uint1)t18) && (uint1)t19) && (uint1)t18) && (uint1)t19) && (uint1)t18) && (uint1)t19) && (uint1)t18) && (uint1)t19)
With lets: (let t18 = (0 <= 0) in (let t19 = (0 >= 0) in (((((((((((((((((((((((((((((((uint1)1 && t18) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && t18) && t19) && t18) && t19) && t18) && t19) && t18) && t19) && t18) && t19) && t18) && t19) && t18) && t19) && t18) && t19) && t18) && t19) && t18) && t19) && t18) && t19) && t18) && t19)))
simplify let t18 = (uint1)1 in...
new let t18.s = (undefined) in ... (uint1)1 ...
simplify let t19 = (uint1)1 in...
new let t19.s = (undefined) in ... (uint1)1 ...
Attempting to fold B
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 7 = 7, 7
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 7 = 7, 7
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = 0, 6
bounds_of_expr_in_scope A.s0.yy_xx = 0, 6
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
Box(by Provide) of B
  0 ... ((8 + 0) - 1)
  0 ... ((7 + 0) - 1)
  0 ... ((7 + 0) - 1)
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 7 = 7, 7
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 7 = 7, 7
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope (float32)C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = 0, 6
bounds_of_expr_in_scope A.s0.yy_xx = 0, 6
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0

Considering folding B over for loop over A.s0.mk dimension 14
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.mk dimension 13
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.mk dimension 12
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.mk dimension 11
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.mk dimension 10
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.mk dimension 9
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.mk dimension 8
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.mk dimension 7
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.mk dimension 6
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.mk dimension 5
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.mk dimension 4
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.mk dimension 3
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.mk dimension 2
Min: 0
Max: 6
Extent: 7
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 6

Considering folding B over for loop over A.s0.mk dimension 1
Min: 0
Max: 6
Extent: 7
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 6

Considering folding B over for loop over A.s0.mk dimension 0
Min: 0
Max: 7
Extent: 8
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 7



Input to CSE (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
After removing lets: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
Include: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)); should extract: 1
Include: (((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))); should extract: 1
Include: ((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)); should extract: 1
Include: (((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))); should extract: 1
Include: ((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)); should extract: 1
Include: (((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))); should extract: 1
Include: ((uint1)1 && (0 <= 0)); should extract: 1
Include: (uint1)1; should extract: 0
Include: (0 <= 0); should extract: 1
Include: 0; should extract: 0
Include: 0; should extract: 0
Include: (((8 + 0) - 1) >= ((8 + 0) - 1)); should extract: 1
Include: ((8 + 0) - 1); should extract: 0
Include: (8 + 0); should extract: 0
Include: 8; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: ((8 + 0) - 1); should extract: 0
Include: (8 + 0); should extract: 0
Include: 8; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: (0 <= 0); should extract: 1
Include: (((7 + 0) - 1) >= ((7 + 0) - 1)); should extract: 1
Include: ((7 + 0) - 1); should extract: 0
Include: (7 + 0); should extract: 0
Include: 7; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: ((7 + 0) - 1); should extract: 0
Include: (7 + 0); should extract: 0
Include: 7; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: (0 <= 0); should extract: 1
Include: (((7 + 0) - 1) >= ((7 + 0) - 1)); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: 0; should extract: 0
Include: 0; should extract: 0
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Canonical form without lets (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
0: (uint1)1, 0
1: 0, 0
2: (0 <= 0), 15
3: ((uint1)1 && (0 <= 0)), 1
4: 8, 0
5: (8 + 0), 0
6: 1, 0
7: ((8 + 0) - 1), 0
8: (((8 + 0) - 1) >= ((8 + 0) - 1)), 1
9: (((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))), 1
10: ((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)), 1
11: 7, 0
12: (7 + 0), 0
13: ((7 + 0) - 1), 0
14: (((7 + 0) - 1) >= ((7 + 0) - 1)), 2
15: (((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))), 1
16: ((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)), 1
17: (((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))), 1
18: ((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)), 1
19: (0 >= 0), 12
20: (((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)), 1
21: ((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
22: (((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
23: ((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
24: (((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
25: ((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
26: (((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
27: ((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
28: (((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
29: ((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
30: (((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
31: ((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
32: (((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
33: ((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
34: (((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
35: ((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
36: (((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
37: ((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
38: (((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
39: ((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
40: (((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
41: ((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
42: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
With variables (((((((((((((((((((((((((((((((uint1)1 && (uint1)t20) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (uint1)t20) && (uint1)t21) && (uint1)t20) && (uint1)t21) && (uint1)t20) && (uint1)t22) && (uint1)t20) && (uint1)t22) && (uint1)t20) && (uint1)t22) && (uint1)t20) && (uint1)t22) && (uint1)t20) && (uint1)t22) && (uint1)t20) && (uint1)t22) && (uint1)t20) && (uint1)t22) && (uint1)t20) && (uint1)t22) && (uint1)t20) && (uint1)t22) && (uint1)t20) && (uint1)t22) && (uint1)t20) && (uint1)t22) && (uint1)t20) && (uint1)t22)
With lets: (let t20 = (0 <= 0) in (let t21 = (((7 + 0) - 1) >= ((7 + 0) - 1)) in (let t22 = (0 >= 0) in (((((((((((((((((((((((((((((((uint1)1 && t20) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && t20) && t21) && t20) && t21) && t20) && t22) && t20) && t22) && t20) && t22) && t20) && t22) && t20) && t22) && t20) && t22) && t20) && t22) && t20) && t22) && t20) && t22) && t20) && t22) && t20) && t22) && t20) && t22))))
simplify let t20 = (uint1)1 in...
new let t20.s = (undefined) in ... (uint1)1 ...
simplify let t21 = (uint1)1 in...
new let t21.s = (undefined) in ... (uint1)1 ...
simplify let t22 = (uint1)1 in...
new let t22.s = (undefined) in ... (uint1)1 ...
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 7 = 7, 7
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 7 = 7, 7
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = 0, 6
bounds_of_expr_in_scope A.s0.yy_xx = 0, 6
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
Box(by Provide) of B
  0 ... ((8 + 0) - 1)
  0 ... ((7 + 0) - 1)
  0 ... ((7 + 0) - 1)
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 7 = 7, 7
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 7 = 7, 7
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope (float32)C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = 0, 6
bounds_of_expr_in_scope A.s0.yy_xx = 0, 6
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0

Considering folding B over for loop over A.s0.ci dimension 14
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.ci dimension 13
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.ci dimension 12
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.ci dimension 11
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.ci dimension 10
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.ci dimension 9
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.ci dimension 8
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.ci dimension 7
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.ci dimension 6
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.ci dimension 5
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.ci dimension 4
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.ci dimension 3
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.ci dimension 2
Min: 0
Max: 6
Extent: 7
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 6

Considering folding B over for loop over A.s0.ci dimension 1
Min: 0
Max: 6
Extent: 7
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 6

Considering folding B over for loop over A.s0.ci dimension 0
Min: 0
Max: 7
Extent: 8
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 7



Input to CSE (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
After removing lets: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
Include: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)); should extract: 1
Include: (((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))); should extract: 1
Include: ((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)); should extract: 1
Include: (((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))); should extract: 1
Include: ((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)); should extract: 1
Include: (((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))); should extract: 1
Include: ((uint1)1 && (0 <= 0)); should extract: 1
Include: (uint1)1; should extract: 0
Include: (0 <= 0); should extract: 1
Include: 0; should extract: 0
Include: 0; should extract: 0
Include: (((8 + 0) - 1) >= ((8 + 0) - 1)); should extract: 1
Include: ((8 + 0) - 1); should extract: 0
Include: (8 + 0); should extract: 0
Include: 8; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: ((8 + 0) - 1); should extract: 0
Include: (8 + 0); should extract: 0
Include: 8; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: (0 <= 0); should extract: 1
Include: (((7 + 0) - 1) >= ((7 + 0) - 1)); should extract: 1
Include: ((7 + 0) - 1); should extract: 0
Include: (7 + 0); should extract: 0
Include: 7; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: ((7 + 0) - 1); should extract: 0
Include: (7 + 0); should extract: 0
Include: 7; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: (0 <= 0); should extract: 1
Include: (((7 + 0) - 1) >= ((7 + 0) - 1)); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: 0; should extract: 0
Include: 0; should extract: 0
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Canonical form without lets (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
0: (uint1)1, 0
1: 0, 0
2: (0 <= 0), 15
3: ((uint1)1 && (0 <= 0)), 1
4: 8, 0
5: (8 + 0), 0
6: 1, 0
7: ((8 + 0) - 1), 0
8: (((8 + 0) - 1) >= ((8 + 0) - 1)), 1
9: (((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))), 1
10: ((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)), 1
11: 7, 0
12: (7 + 0), 0
13: ((7 + 0) - 1), 0
14: (((7 + 0) - 1) >= ((7 + 0) - 1)), 2
15: (((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))), 1
16: ((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)), 1
17: (((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))), 1
18: ((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)), 1
19: (0 >= 0), 12
20: (((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)), 1
21: ((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
22: (((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
23: ((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
24: (((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
25: ((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
26: (((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
27: ((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
28: (((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
29: ((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
30: (((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
31: ((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
32: (((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
33: ((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
34: (((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
35: ((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
36: (((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
37: ((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
38: (((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
39: ((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
40: (((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
41: ((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
42: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
With variables (((((((((((((((((((((((((((((((uint1)1 && (uint1)t23) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (uint1)t23) && (uint1)t24) && (uint1)t23) && (uint1)t24) && (uint1)t23) && (uint1)t25) && (uint1)t23) && (uint1)t25) && (uint1)t23) && (uint1)t25) && (uint1)t23) && (uint1)t25) && (uint1)t23) && (uint1)t25) && (uint1)t23) && (uint1)t25) && (uint1)t23) && (uint1)t25) && (uint1)t23) && (uint1)t25) && (uint1)t23) && (uint1)t25) && (uint1)t23) && (uint1)t25) && (uint1)t23) && (uint1)t25) && (uint1)t23) && (uint1)t25)
With lets: (let t23 = (0 <= 0) in (let t24 = (((7 + 0) - 1) >= ((7 + 0) - 1)) in (let t25 = (0 >= 0) in (((((((((((((((((((((((((((((((uint1)1 && t23) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && t23) && t24) && t23) && t24) && t23) && t25) && t23) && t25) && t23) && t25) && t23) && t25) && t23) && t25) && t23) && t25) && t23) && t25) && t23) && t25) && t23) && t25) && t23) && t25) && t23) && t25) && t23) && t25))))
simplify let t23 = (uint1)1 in...
new let t23.s = (undefined) in ... (uint1)1 ...
simplify let t24 = (uint1)1 in...
new let t24.s = (undefined) in ... (uint1)1 ...
simplify let t25 = (uint1)1 in...
new let t25.s = (undefined) in ... (uint1)1 ...
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 7 = 7, 7
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = 0, 6
bounds_of_expr_in_scope A.s0.yy_xx = A.s0.yy_xx, A.s0.yy_xx
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
Box(by Provide) of B
  0 ... ((8 + 0) - 1)
  0 ... ((7 + 0) - 1)
  A.s0.yy_xx ... A.s0.yy_xx
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 7 = 7, 7
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope (float32)C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = 0, 6
bounds_of_expr_in_scope A.s0.yy_xx = A.s0.yy_xx, A.s0.yy_xx
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0

Considering folding B over for loop over A.s0.yy_xx dimension 14
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.yy_xx dimension 13
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.yy_xx dimension 12
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.yy_xx dimension 11
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.yy_xx dimension 10
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.yy_xx dimension 9
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.yy_xx dimension 8
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.yy_xx dimension 7
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.yy_xx dimension 6
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.yy_xx dimension 5
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.yy_xx dimension 4
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.yy_xx dimension 3
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.yy_xx dimension 2
Min: A.s0.yy_xx
Max: A.s0.yy_xx
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = A.s0.yy_xx
max = A.s0.yy_xx

Considering folding B over for loop over A.s0.yy_xx dimension 1
Min: 0
Max: 6
Extent: 7
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 6

Considering folding B over for loop over A.s0.yy_xx dimension 0
Min: 0
Max: 7
Extent: 8
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 7



Input to CSE (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
After removing lets: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
Include: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)); should extract: 1
Include: (((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)); should extract: 1
Include: ((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)); should extract: 1
Include: (((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))); should extract: 1
Include: ((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)); should extract: 1
Include: (((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))); should extract: 1
Include: ((uint1)1 && (0 <= 0)); should extract: 1
Include: (uint1)1; should extract: 0
Include: (0 <= 0); should extract: 1
Include: 0; should extract: 0
Include: 0; should extract: 0
Include: (((8 + 0) - 1) >= ((8 + 0) - 1)); should extract: 1
Include: ((8 + 0) - 1); should extract: 0
Include: (8 + 0); should extract: 0
Include: 8; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: ((8 + 0) - 1); should extract: 0
Include: (8 + 0); should extract: 0
Include: 8; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: (0 <= 0); should extract: 1
Include: (((7 + 0) - 1) >= ((7 + 0) - 1)); should extract: 1
Include: ((7 + 0) - 1); should extract: 0
Include: (7 + 0); should extract: 0
Include: 7; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: ((7 + 0) - 1); should extract: 0
Include: (7 + 0); should extract: 0
Include: 7; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: (A.s0.yy_xx <= A.s0.yy_xx); should extract: 1
Include: A.s0.yy_xx; should extract: 0
Include: A.s0.yy_xx; should extract: 0
Include: (A.s0.yy_xx >= A.s0.yy_xx); should extract: 1
Include: A.s0.yy_xx; should extract: 0
Include: A.s0.yy_xx; should extract: 0
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: 0; should extract: 0
Include: 0; should extract: 0
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Canonical form without lets (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
0: (uint1)1, 0
1: 0, 0
2: (0 <= 0), 14
3: ((uint1)1 && (0 <= 0)), 1
4: 8, 0
5: (8 + 0), 0
6: 1, 0
7: ((8 + 0) - 1), 0
8: (((8 + 0) - 1) >= ((8 + 0) - 1)), 1
9: (((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))), 1
10: ((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)), 1
11: 7, 0
12: (7 + 0), 0
13: ((7 + 0) - 1), 0
14: (((7 + 0) - 1) >= ((7 + 0) - 1)), 1
15: (((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))), 1
16: A.s0.yy_xx, 0
17: (A.s0.yy_xx <= A.s0.yy_xx), 1
18: ((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)), 1
19: (A.s0.yy_xx >= A.s0.yy_xx), 1
20: (((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)), 1
21: ((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)), 1
22: (0 >= 0), 12
23: (((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)), 1
24: ((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
25: (((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
26: ((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
27: (((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
28: ((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
29: (((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
30: ((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
31: (((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
32: ((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
33: (((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
34: ((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
35: (((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
36: ((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
37: (((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
38: ((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
39: (((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
40: ((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
41: (((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
42: ((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
43: (((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
44: ((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
45: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
With variables (((((((((((((((((((((((((((((((uint1)1 && (uint1)t26) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (uint1)t26) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (uint1)t26) && (uint1)t27) && (uint1)t26) && (uint1)t27) && (uint1)t26) && (uint1)t27) && (uint1)t26) && (uint1)t27) && (uint1)t26) && (uint1)t27) && (uint1)t26) && (uint1)t27) && (uint1)t26) && (uint1)t27) && (uint1)t26) && (uint1)t27) && (uint1)t26) && (uint1)t27) && (uint1)t26) && (uint1)t27) && (uint1)t26) && (uint1)t27) && (uint1)t26) && (uint1)t27)
With lets: (let t26 = (0 <= 0) in (let t27 = (0 >= 0) in (((((((((((((((((((((((((((((((uint1)1 && t26) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && t26) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && t26) && t27) && t26) && t27) && t26) && t27) && t26) && t27) && t26) && t27) && t26) && t27) && t26) && t27) && t26) && t27) && t26) && t27) && t26) && t27) && t26) && t27) && t26) && t27)))
simplify let t26 = (uint1)1 in...
new let t26.s = (undefined) in ... (uint1)1 ...
simplify let t27 = (uint1)1 in...
new let t27.s = (undefined) in ... (uint1)1 ...
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = A.s0.yyy_xxx, A.s0.yyy_xxx
bounds_of_expr_in_scope A.s0.yy_xx = A.s0.yy_xx, A.s0.yy_xx
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
Box(by Provide) of B
  0 ... ((8 + 0) - 1)
  A.s0.yyy_xxx ... A.s0.yyy_xxx
  A.s0.yy_xx ... A.s0.yy_xx
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope (float32)C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = A.s0.yyy_xxx, A.s0.yyy_xxx
bounds_of_expr_in_scope A.s0.yy_xx = A.s0.yy_xx, A.s0.yy_xx
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0

Considering folding B over for loop over A.s0.yyy_xxx dimension 14
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.yyy_xxx dimension 13
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.yyy_xxx dimension 12
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.yyy_xxx dimension 11
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.yyy_xxx dimension 10
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.yyy_xxx dimension 9
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.yyy_xxx dimension 8
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.yyy_xxx dimension 7
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.yyy_xxx dimension 6
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.yyy_xxx dimension 5
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.yyy_xxx dimension 4
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.yyy_xxx dimension 3
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.yyy_xxx dimension 2
Min: A.s0.yy_xx
Max: A.s0.yy_xx
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = A.s0.yy_xx
max = A.s0.yy_xx

Considering folding B over for loop over A.s0.yyy_xxx dimension 1
Min: A.s0.yyy_xxx
Max: A.s0.yyy_xxx
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = A.s0.yyy_xxx
max = A.s0.yyy_xxx

Considering folding B over for loop over A.s0.yyy_xxx dimension 0
Min: 0
Max: 7
Extent: 8
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 7



Input to CSE (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
After removing lets: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
Include: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)); should extract: 1
Include: (((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)); should extract: 1
Include: ((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)); should extract: 1
Include: (((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)); should extract: 1
Include: ((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)); should extract: 1
Include: (((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))); should extract: 1
Include: ((uint1)1 && (0 <= 0)); should extract: 1
Include: (uint1)1; should extract: 0
Include: (0 <= 0); should extract: 1
Include: 0; should extract: 0
Include: 0; should extract: 0
Include: (((8 + 0) - 1) >= ((8 + 0) - 1)); should extract: 1
Include: ((8 + 0) - 1); should extract: 0
Include: (8 + 0); should extract: 0
Include: 8; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: ((8 + 0) - 1); should extract: 0
Include: (8 + 0); should extract: 0
Include: 8; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: (A.s0.yyy_xxx <= A.s0.yyy_xxx); should extract: 1
Include: A.s0.yyy_xxx; should extract: 0
Include: A.s0.yyy_xxx; should extract: 0
Include: (A.s0.yyy_xxx >= A.s0.yyy_xxx); should extract: 1
Include: A.s0.yyy_xxx; should extract: 0
Include: A.s0.yyy_xxx; should extract: 0
Include: (A.s0.yy_xx <= A.s0.yy_xx); should extract: 1
Include: A.s0.yy_xx; should extract: 0
Include: A.s0.yy_xx; should extract: 0
Include: (A.s0.yy_xx >= A.s0.yy_xx); should extract: 1
Include: A.s0.yy_xx; should extract: 0
Include: A.s0.yy_xx; should extract: 0
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: 0; should extract: 0
Include: 0; should extract: 0
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Canonical form without lets (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
0: (uint1)1, 0
1: 0, 0
2: (0 <= 0), 13
3: ((uint1)1 && (0 <= 0)), 1
4: 8, 0
5: (8 + 0), 0
6: 1, 0
7: ((8 + 0) - 1), 0
8: (((8 + 0) - 1) >= ((8 + 0) - 1)), 1
9: (((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))), 1
10: A.s0.yyy_xxx, 0
11: (A.s0.yyy_xxx <= A.s0.yyy_xxx), 1
12: ((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)), 1
13: (A.s0.yyy_xxx >= A.s0.yyy_xxx), 1
14: (((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)), 1
15: A.s0.yy_xx, 0
16: (A.s0.yy_xx <= A.s0.yy_xx), 1
17: ((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)), 1
18: (A.s0.yy_xx >= A.s0.yy_xx), 1
19: (((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)), 1
20: ((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)), 1
21: (0 >= 0), 12
22: (((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)), 1
23: ((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
24: (((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
25: ((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
26: (((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
27: ((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
28: (((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
29: ((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
30: (((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
31: ((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
32: (((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
33: ((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
34: (((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
35: ((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
36: (((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
37: ((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
38: (((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
39: ((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
40: (((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
41: ((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
42: (((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
43: ((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
44: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
With variables (((((((((((((((((((((((((((((((uint1)1 && (uint1)t28) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (uint1)t28) && (uint1)t29) && (uint1)t28) && (uint1)t29) && (uint1)t28) && (uint1)t29) && (uint1)t28) && (uint1)t29) && (uint1)t28) && (uint1)t29) && (uint1)t28) && (uint1)t29) && (uint1)t28) && (uint1)t29) && (uint1)t28) && (uint1)t29) && (uint1)t28) && (uint1)t29) && (uint1)t28) && (uint1)t29) && (uint1)t28) && (uint1)t29) && (uint1)t28) && (uint1)t29)
With lets: (let t28 = (0 <= 0) in (let t29 = (0 >= 0) in (((((((((((((((((((((((((((((((uint1)1 && t28) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && t28) && t29) && t28) && t29) && t28) && t29) && t28) && t29) && t28) && t29) && t28) && t29) && t28) && t29) && t28) && t29) && t28) && t29) && t28) && t29) && t28) && t29) && t28) && t29)))
simplify let t28 = (uint1)1 in...
new let t28.s = (undefined) in ... (uint1)1 ...
simplify let t29 = (uint1)1 in...
new let t29.s = (undefined) in ... (uint1)1 ...
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = A.s0.yyy_xxx, A.s0.yyy_xxx
bounds_of_expr_in_scope A.s0.yy_xx = A.s0.yy_xx, A.s0.yy_xx
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
Box(by Provide) of B
  0 ... ((8 + 0) - 1)
  A.s0.yyy_xxx ... A.s0.yyy_xxx
  A.s0.yy_xx ... A.s0.yy_xx
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope (float32)C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = A.s0.yyy_xxx, A.s0.yyy_xxx
bounds_of_expr_in_scope A.s0.yy_xx = A.s0.yy_xx, A.s0.yy_xx
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0

Considering folding B over for loop over A.s0.kx dimension 14
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.kx dimension 13
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.kx dimension 12
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.kx dimension 11
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.kx dimension 10
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.kx dimension 9
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.kx dimension 8
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.kx dimension 7
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.kx dimension 6
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.kx dimension 5
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.kx dimension 4
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.kx dimension 3
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.kx dimension 2
Min: A.s0.yy_xx
Max: A.s0.yy_xx
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = A.s0.yy_xx
max = A.s0.yy_xx

Considering folding B over for loop over A.s0.kx dimension 1
Min: A.s0.yyy_xxx
Max: A.s0.yyy_xxx
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = A.s0.yyy_xxx
max = A.s0.yyy_xxx

Considering folding B over for loop over A.s0.kx dimension 0
Min: 0
Max: 7
Extent: 8
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 7



Input to CSE (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
After removing lets: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
Include: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)); should extract: 1
Include: (((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)); should extract: 1
Include: ((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)); should extract: 1
Include: (((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)); should extract: 1
Include: ((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)); should extract: 1
Include: (((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))); should extract: 1
Include: ((uint1)1 && (0 <= 0)); should extract: 1
Include: (uint1)1; should extract: 0
Include: (0 <= 0); should extract: 1
Include: 0; should extract: 0
Include: 0; should extract: 0
Include: (((8 + 0) - 1) >= ((8 + 0) - 1)); should extract: 1
Include: ((8 + 0) - 1); should extract: 0
Include: (8 + 0); should extract: 0
Include: 8; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: ((8 + 0) - 1); should extract: 0
Include: (8 + 0); should extract: 0
Include: 8; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: (A.s0.yyy_xxx <= A.s0.yyy_xxx); should extract: 1
Include: A.s0.yyy_xxx; should extract: 0
Include: A.s0.yyy_xxx; should extract: 0
Include: (A.s0.yyy_xxx >= A.s0.yyy_xxx); should extract: 1
Include: A.s0.yyy_xxx; should extract: 0
Include: A.s0.yyy_xxx; should extract: 0
Include: (A.s0.yy_xx <= A.s0.yy_xx); should extract: 1
Include: A.s0.yy_xx; should extract: 0
Include: A.s0.yy_xx; should extract: 0
Include: (A.s0.yy_xx >= A.s0.yy_xx); should extract: 1
Include: A.s0.yy_xx; should extract: 0
Include: A.s0.yy_xx; should extract: 0
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: 0; should extract: 0
Include: 0; should extract: 0
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Canonical form without lets (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
0: (uint1)1, 0
1: 0, 0
2: (0 <= 0), 13
3: ((uint1)1 && (0 <= 0)), 1
4: 8, 0
5: (8 + 0), 0
6: 1, 0
7: ((8 + 0) - 1), 0
8: (((8 + 0) - 1) >= ((8 + 0) - 1)), 1
9: (((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))), 1
10: A.s0.yyy_xxx, 0
11: (A.s0.yyy_xxx <= A.s0.yyy_xxx), 1
12: ((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)), 1
13: (A.s0.yyy_xxx >= A.s0.yyy_xxx), 1
14: (((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)), 1
15: A.s0.yy_xx, 0
16: (A.s0.yy_xx <= A.s0.yy_xx), 1
17: ((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)), 1
18: (A.s0.yy_xx >= A.s0.yy_xx), 1
19: (((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)), 1
20: ((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)), 1
21: (0 >= 0), 12
22: (((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)), 1
23: ((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
24: (((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
25: ((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
26: (((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
27: ((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
28: (((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
29: ((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
30: (((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
31: ((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
32: (((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
33: ((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
34: (((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
35: ((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
36: (((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
37: ((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
38: (((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
39: ((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
40: (((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
41: ((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
42: (((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
43: ((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
44: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
With variables (((((((((((((((((((((((((((((((uint1)1 && (uint1)t30) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (uint1)t30) && (uint1)t31) && (uint1)t30) && (uint1)t31) && (uint1)t30) && (uint1)t31) && (uint1)t30) && (uint1)t31) && (uint1)t30) && (uint1)t31) && (uint1)t30) && (uint1)t31) && (uint1)t30) && (uint1)t31) && (uint1)t30) && (uint1)t31) && (uint1)t30) && (uint1)t31) && (uint1)t30) && (uint1)t31) && (uint1)t30) && (uint1)t31) && (uint1)t30) && (uint1)t31)
With lets: (let t30 = (0 <= 0) in (let t31 = (0 >= 0) in (((((((((((((((((((((((((((((((uint1)1 && t30) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && t30) && t31) && t30) && t31) && t30) && t31) && t30) && t31) && t30) && t31) && t30) && t31) && t30) && t31) && t30) && t31) && t30) && t31) && t30) && t31) && t30) && t31) && t30) && t31)))
simplify let t30 = (uint1)1 in...
new let t30.s = (undefined) in ... (uint1)1 ...
simplify let t31 = (uint1)1 in...
new let t31.s = (undefined) in ... (uint1)1 ...
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = A.s0.yyy_xxx, A.s0.yyy_xxx
bounds_of_expr_in_scope A.s0.yy_xx = A.s0.yy_xx, A.s0.yy_xx
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
Box(by Provide) of B
  0 ... ((8 + 0) - 1)
  A.s0.yyy_xxx ... A.s0.yyy_xxx
  A.s0.yy_xx ... A.s0.yy_xx
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope (float32)C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = A.s0.yyy_xxx, A.s0.yyy_xxx
bounds_of_expr_in_scope A.s0.yy_xx = A.s0.yy_xx, A.s0.yy_xx
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0

Considering folding B over for loop over A.s0.ky dimension 14
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.ky dimension 13
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.ky dimension 12
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.ky dimension 11
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.ky dimension 10
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.ky dimension 9
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.ky dimension 8
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.ky dimension 7
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.ky dimension 6
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.ky dimension 5
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.ky dimension 4
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.ky dimension 3
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding B over for loop over A.s0.ky dimension 2
Min: A.s0.yy_xx
Max: A.s0.yy_xx
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = A.s0.yy_xx
max = A.s0.yy_xx

Considering folding B over for loop over A.s0.ky dimension 1
Min: A.s0.yyy_xxx
Max: A.s0.yyy_xxx
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = A.s0.yyy_xxx
max = A.s0.yyy_xxx

Considering folding B over for loop over A.s0.ky dimension 0
Min: 0
Max: 7
Extent: 8
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 7



Input to CSE (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
After removing lets: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
Include: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)); should extract: 1
Include: (((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)); should extract: 1
Include: ((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)); should extract: 1
Include: (((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)); should extract: 1
Include: ((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)); should extract: 1
Include: (((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))); should extract: 1
Include: ((uint1)1 && (0 <= 0)); should extract: 1
Include: (uint1)1; should extract: 0
Include: (0 <= 0); should extract: 1
Include: 0; should extract: 0
Include: 0; should extract: 0
Include: (((8 + 0) - 1) >= ((8 + 0) - 1)); should extract: 1
Include: ((8 + 0) - 1); should extract: 0
Include: (8 + 0); should extract: 0
Include: 8; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: ((8 + 0) - 1); should extract: 0
Include: (8 + 0); should extract: 0
Include: 8; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: (A.s0.yyy_xxx <= A.s0.yyy_xxx); should extract: 1
Include: A.s0.yyy_xxx; should extract: 0
Include: A.s0.yyy_xxx; should extract: 0
Include: (A.s0.yyy_xxx >= A.s0.yyy_xxx); should extract: 1
Include: A.s0.yyy_xxx; should extract: 0
Include: A.s0.yyy_xxx; should extract: 0
Include: (A.s0.yy_xx <= A.s0.yy_xx); should extract: 1
Include: A.s0.yy_xx; should extract: 0
Include: A.s0.yy_xx; should extract: 0
Include: (A.s0.yy_xx >= A.s0.yy_xx); should extract: 1
Include: A.s0.yy_xx; should extract: 0
Include: A.s0.yy_xx; should extract: 0
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: 0; should extract: 0
Include: 0; should extract: 0
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Canonical form without lets (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
0: (uint1)1, 0
1: 0, 0
2: (0 <= 0), 13
3: ((uint1)1 && (0 <= 0)), 1
4: 8, 0
5: (8 + 0), 0
6: 1, 0
7: ((8 + 0) - 1), 0
8: (((8 + 0) - 1) >= ((8 + 0) - 1)), 1
9: (((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))), 1
10: A.s0.yyy_xxx, 0
11: (A.s0.yyy_xxx <= A.s0.yyy_xxx), 1
12: ((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)), 1
13: (A.s0.yyy_xxx >= A.s0.yyy_xxx), 1
14: (((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)), 1
15: A.s0.yy_xx, 0
16: (A.s0.yy_xx <= A.s0.yy_xx), 1
17: ((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)), 1
18: (A.s0.yy_xx >= A.s0.yy_xx), 1
19: (((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)), 1
20: ((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)), 1
21: (0 >= 0), 12
22: (((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)), 1
23: ((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
24: (((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
25: ((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
26: (((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
27: ((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
28: (((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
29: ((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
30: (((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
31: ((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
32: (((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
33: ((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
34: (((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
35: ((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
36: (((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
37: ((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
38: (((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
39: ((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
40: (((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
41: ((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
42: (((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
43: ((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
44: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
With variables (((((((((((((((((((((((((((((((uint1)1 && (uint1)t32) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (uint1)t32) && (uint1)t33) && (uint1)t32) && (uint1)t33) && (uint1)t32) && (uint1)t33) && (uint1)t32) && (uint1)t33) && (uint1)t32) && (uint1)t33) && (uint1)t32) && (uint1)t33) && (uint1)t32) && (uint1)t33) && (uint1)t32) && (uint1)t33) && (uint1)t32) && (uint1)t33) && (uint1)t32) && (uint1)t33) && (uint1)t32) && (uint1)t33) && (uint1)t32) && (uint1)t33)
With lets: (let t32 = (0 <= 0) in (let t33 = (0 >= 0) in (((((((((((((((((((((((((((((((uint1)1 && t32) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && t32) && t33) && t32) && t33) && t32) && t33) && t32) && t33) && t32) && t33) && t32) && t33) && t32) && t33) && t32) && t33) && t32) && t33) && t32) && t33) && t32) && t33) && t32) && t33)))
simplify let t32 = (uint1)1 in...
new let t32.s = (undefined) in ... (uint1)1 ...
simplify let t33 = (uint1)1 in...
new let t33.s = (undefined) in ... (uint1)1 ...
Attempting to fold A
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 7 = 7, 7
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 7 = 7, 7
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = 0, 6
bounds_of_expr_in_scope A.s0.yy_xx = 0, 6
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
Box(by Provide) of A
  0 ... ((8 + 0) - 1)
  0 ... ((7 + 0) - 1)
  0 ... ((7 + 0) - 1)
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 7 = 7, 7
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 7 = 7, 7
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope (float32)C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = 0, 6
bounds_of_expr_in_scope A.s0.yy_xx = 0, 6
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0

Considering folding A over for loop over A.s0.mk dimension 14
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.mk dimension 13
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.mk dimension 12
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.mk dimension 11
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.mk dimension 10
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.mk dimension 9
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.mk dimension 8
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.mk dimension 7
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.mk dimension 6
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.mk dimension 5
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.mk dimension 4
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.mk dimension 3
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.mk dimension 2
Min: 0
Max: 6
Extent: 7
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 6

Considering folding A over for loop over A.s0.mk dimension 1
Min: 0
Max: 6
Extent: 7
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 6

Considering folding A over for loop over A.s0.mk dimension 0
Min: 0
Max: 7
Extent: 8
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 7



Input to CSE (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
After removing lets: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
Include: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)); should extract: 1
Include: (((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))); should extract: 1
Include: ((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)); should extract: 1
Include: (((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))); should extract: 1
Include: ((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)); should extract: 1
Include: (((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))); should extract: 1
Include: ((uint1)1 && (0 <= 0)); should extract: 1
Include: (uint1)1; should extract: 0
Include: (0 <= 0); should extract: 1
Include: 0; should extract: 0
Include: 0; should extract: 0
Include: (((8 + 0) - 1) >= ((8 + 0) - 1)); should extract: 1
Include: ((8 + 0) - 1); should extract: 0
Include: (8 + 0); should extract: 0
Include: 8; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: ((8 + 0) - 1); should extract: 0
Include: (8 + 0); should extract: 0
Include: 8; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: (0 <= 0); should extract: 1
Include: (((7 + 0) - 1) >= ((7 + 0) - 1)); should extract: 1
Include: ((7 + 0) - 1); should extract: 0
Include: (7 + 0); should extract: 0
Include: 7; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: ((7 + 0) - 1); should extract: 0
Include: (7 + 0); should extract: 0
Include: 7; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: (0 <= 0); should extract: 1
Include: (((7 + 0) - 1) >= ((7 + 0) - 1)); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: 0; should extract: 0
Include: 0; should extract: 0
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Canonical form without lets (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
0: (uint1)1, 0
1: 0, 0
2: (0 <= 0), 15
3: ((uint1)1 && (0 <= 0)), 1
4: 8, 0
5: (8 + 0), 0
6: 1, 0
7: ((8 + 0) - 1), 0
8: (((8 + 0) - 1) >= ((8 + 0) - 1)), 1
9: (((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))), 1
10: ((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)), 1
11: 7, 0
12: (7 + 0), 0
13: ((7 + 0) - 1), 0
14: (((7 + 0) - 1) >= ((7 + 0) - 1)), 2
15: (((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))), 1
16: ((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)), 1
17: (((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))), 1
18: ((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)), 1
19: (0 >= 0), 12
20: (((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)), 1
21: ((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
22: (((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
23: ((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
24: (((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
25: ((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
26: (((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
27: ((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
28: (((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
29: ((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
30: (((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
31: ((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
32: (((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
33: ((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
34: (((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
35: ((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
36: (((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
37: ((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
38: (((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
39: ((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
40: (((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
41: ((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
42: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
With variables (((((((((((((((((((((((((((((((uint1)1 && (uint1)t34) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (uint1)t34) && (uint1)t35) && (uint1)t34) && (uint1)t35) && (uint1)t34) && (uint1)t36) && (uint1)t34) && (uint1)t36) && (uint1)t34) && (uint1)t36) && (uint1)t34) && (uint1)t36) && (uint1)t34) && (uint1)t36) && (uint1)t34) && (uint1)t36) && (uint1)t34) && (uint1)t36) && (uint1)t34) && (uint1)t36) && (uint1)t34) && (uint1)t36) && (uint1)t34) && (uint1)t36) && (uint1)t34) && (uint1)t36) && (uint1)t34) && (uint1)t36)
With lets: (let t34 = (0 <= 0) in (let t35 = (((7 + 0) - 1) >= ((7 + 0) - 1)) in (let t36 = (0 >= 0) in (((((((((((((((((((((((((((((((uint1)1 && t34) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && t34) && t35) && t34) && t35) && t34) && t36) && t34) && t36) && t34) && t36) && t34) && t36) && t34) && t36) && t34) && t36) && t34) && t36) && t34) && t36) && t34) && t36) && t34) && t36) && t34) && t36) && t34) && t36))))
simplify let t34 = (uint1)1 in...
new let t34.s = (undefined) in ... (uint1)1 ...
simplify let t35 = (uint1)1 in...
new let t35.s = (undefined) in ... (uint1)1 ...
simplify let t36 = (uint1)1 in...
new let t36.s = (undefined) in ... (uint1)1 ...
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 7 = 7, 7
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 7 = 7, 7
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = 0, 6
bounds_of_expr_in_scope A.s0.yy_xx = 0, 6
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
Box(by Provide) of A
  0 ... ((8 + 0) - 1)
  0 ... ((7 + 0) - 1)
  0 ... ((7 + 0) - 1)
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 7 = 7, 7
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 7 = 7, 7
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope (float32)C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = 0, 6
bounds_of_expr_in_scope A.s0.yy_xx = 0, 6
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0

Considering folding A over for loop over A.s0.ci dimension 14
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.ci dimension 13
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.ci dimension 12
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.ci dimension 11
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.ci dimension 10
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.ci dimension 9
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.ci dimension 8
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.ci dimension 7
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.ci dimension 6
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.ci dimension 5
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.ci dimension 4
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.ci dimension 3
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.ci dimension 2
Min: 0
Max: 6
Extent: 7
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 6

Considering folding A over for loop over A.s0.ci dimension 1
Min: 0
Max: 6
Extent: 7
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 6

Considering folding A over for loop over A.s0.ci dimension 0
Min: 0
Max: 7
Extent: 8
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 7



Input to CSE (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
After removing lets: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
Include: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)); should extract: 1
Include: (((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))); should extract: 1
Include: ((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)); should extract: 1
Include: (((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))); should extract: 1
Include: ((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)); should extract: 1
Include: (((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))); should extract: 1
Include: ((uint1)1 && (0 <= 0)); should extract: 1
Include: (uint1)1; should extract: 0
Include: (0 <= 0); should extract: 1
Include: 0; should extract: 0
Include: 0; should extract: 0
Include: (((8 + 0) - 1) >= ((8 + 0) - 1)); should extract: 1
Include: ((8 + 0) - 1); should extract: 0
Include: (8 + 0); should extract: 0
Include: 8; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: ((8 + 0) - 1); should extract: 0
Include: (8 + 0); should extract: 0
Include: 8; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: (0 <= 0); should extract: 1
Include: (((7 + 0) - 1) >= ((7 + 0) - 1)); should extract: 1
Include: ((7 + 0) - 1); should extract: 0
Include: (7 + 0); should extract: 0
Include: 7; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: ((7 + 0) - 1); should extract: 0
Include: (7 + 0); should extract: 0
Include: 7; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: (0 <= 0); should extract: 1
Include: (((7 + 0) - 1) >= ((7 + 0) - 1)); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: 0; should extract: 0
Include: 0; should extract: 0
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Canonical form without lets (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
0: (uint1)1, 0
1: 0, 0
2: (0 <= 0), 15
3: ((uint1)1 && (0 <= 0)), 1
4: 8, 0
5: (8 + 0), 0
6: 1, 0
7: ((8 + 0) - 1), 0
8: (((8 + 0) - 1) >= ((8 + 0) - 1)), 1
9: (((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))), 1
10: ((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)), 1
11: 7, 0
12: (7 + 0), 0
13: ((7 + 0) - 1), 0
14: (((7 + 0) - 1) >= ((7 + 0) - 1)), 2
15: (((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))), 1
16: ((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)), 1
17: (((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))), 1
18: ((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)), 1
19: (0 >= 0), 12
20: (((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)), 1
21: ((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
22: (((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
23: ((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
24: (((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
25: ((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
26: (((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
27: ((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
28: (((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
29: ((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
30: (((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
31: ((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
32: (((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
33: ((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
34: (((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
35: ((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
36: (((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
37: ((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
38: (((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
39: ((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
40: (((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
41: ((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
42: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
With variables (((((((((((((((((((((((((((((((uint1)1 && (uint1)t37) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (uint1)t37) && (uint1)t38) && (uint1)t37) && (uint1)t38) && (uint1)t37) && (uint1)t39) && (uint1)t37) && (uint1)t39) && (uint1)t37) && (uint1)t39) && (uint1)t37) && (uint1)t39) && (uint1)t37) && (uint1)t39) && (uint1)t37) && (uint1)t39) && (uint1)t37) && (uint1)t39) && (uint1)t37) && (uint1)t39) && (uint1)t37) && (uint1)t39) && (uint1)t37) && (uint1)t39) && (uint1)t37) && (uint1)t39) && (uint1)t37) && (uint1)t39)
With lets: (let t37 = (0 <= 0) in (let t38 = (((7 + 0) - 1) >= ((7 + 0) - 1)) in (let t39 = (0 >= 0) in (((((((((((((((((((((((((((((((uint1)1 && t37) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && t37) && t38) && t37) && t38) && t37) && t39) && t37) && t39) && t37) && t39) && t37) && t39) && t37) && t39) && t37) && t39) && t37) && t39) && t37) && t39) && t37) && t39) && t37) && t39) && t37) && t39) && t37) && t39))))
simplify let t37 = (uint1)1 in...
new let t37.s = (undefined) in ... (uint1)1 ...
simplify let t38 = (uint1)1 in...
new let t38.s = (undefined) in ... (uint1)1 ...
simplify let t39 = (uint1)1 in...
new let t39.s = (undefined) in ... (uint1)1 ...
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 7 = 7, 7
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = 0, 6
bounds_of_expr_in_scope A.s0.yy_xx = A.s0.yy_xx, A.s0.yy_xx
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
Box(by Provide) of A
  0 ... ((8 + 0) - 1)
  0 ... ((7 + 0) - 1)
  A.s0.yy_xx ... A.s0.yy_xx
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 7 = 7, 7
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope (float32)C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = 0, 6
bounds_of_expr_in_scope A.s0.yy_xx = A.s0.yy_xx, A.s0.yy_xx
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0

Considering folding A over for loop over A.s0.yy_xx dimension 14
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.yy_xx dimension 13
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.yy_xx dimension 12
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.yy_xx dimension 11
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.yy_xx dimension 10
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.yy_xx dimension 9
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.yy_xx dimension 8
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.yy_xx dimension 7
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.yy_xx dimension 6
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.yy_xx dimension 5
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.yy_xx dimension 4
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.yy_xx dimension 3
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.yy_xx dimension 2
Min: A.s0.yy_xx
Max: A.s0.yy_xx
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = A.s0.yy_xx
max = A.s0.yy_xx

Considering folding A over for loop over A.s0.yy_xx dimension 1
Min: 0
Max: 6
Extent: 7
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 6

Considering folding A over for loop over A.s0.yy_xx dimension 0
Min: 0
Max: 7
Extent: 8
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 7



Input to CSE (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
After removing lets: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
Include: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)); should extract: 1
Include: (((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)); should extract: 1
Include: ((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)); should extract: 1
Include: (((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))); should extract: 1
Include: ((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)); should extract: 1
Include: (((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))); should extract: 1
Include: ((uint1)1 && (0 <= 0)); should extract: 1
Include: (uint1)1; should extract: 0
Include: (0 <= 0); should extract: 1
Include: 0; should extract: 0
Include: 0; should extract: 0
Include: (((8 + 0) - 1) >= ((8 + 0) - 1)); should extract: 1
Include: ((8 + 0) - 1); should extract: 0
Include: (8 + 0); should extract: 0
Include: 8; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: ((8 + 0) - 1); should extract: 0
Include: (8 + 0); should extract: 0
Include: 8; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: (0 <= 0); should extract: 1
Include: (((7 + 0) - 1) >= ((7 + 0) - 1)); should extract: 1
Include: ((7 + 0) - 1); should extract: 0
Include: (7 + 0); should extract: 0
Include: 7; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: ((7 + 0) - 1); should extract: 0
Include: (7 + 0); should extract: 0
Include: 7; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: (A.s0.yy_xx <= A.s0.yy_xx); should extract: 1
Include: A.s0.yy_xx; should extract: 0
Include: A.s0.yy_xx; should extract: 0
Include: (A.s0.yy_xx >= A.s0.yy_xx); should extract: 1
Include: A.s0.yy_xx; should extract: 0
Include: A.s0.yy_xx; should extract: 0
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: 0; should extract: 0
Include: 0; should extract: 0
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Canonical form without lets (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
0: (uint1)1, 0
1: 0, 0
2: (0 <= 0), 14
3: ((uint1)1 && (0 <= 0)), 1
4: 8, 0
5: (8 + 0), 0
6: 1, 0
7: ((8 + 0) - 1), 0
8: (((8 + 0) - 1) >= ((8 + 0) - 1)), 1
9: (((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))), 1
10: ((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)), 1
11: 7, 0
12: (7 + 0), 0
13: ((7 + 0) - 1), 0
14: (((7 + 0) - 1) >= ((7 + 0) - 1)), 1
15: (((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))), 1
16: A.s0.yy_xx, 0
17: (A.s0.yy_xx <= A.s0.yy_xx), 1
18: ((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)), 1
19: (A.s0.yy_xx >= A.s0.yy_xx), 1
20: (((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)), 1
21: ((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)), 1
22: (0 >= 0), 12
23: (((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)), 1
24: ((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
25: (((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
26: ((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
27: (((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
28: ((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
29: (((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
30: ((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
31: (((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
32: ((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
33: (((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
34: ((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
35: (((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
36: ((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
37: (((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
38: ((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
39: (((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
40: ((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
41: (((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
42: ((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
43: (((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
44: ((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
45: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (0 <= 0)) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
With variables (((((((((((((((((((((((((((((((uint1)1 && (uint1)t40) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (uint1)t40) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (uint1)t40) && (uint1)t41) && (uint1)t40) && (uint1)t41) && (uint1)t40) && (uint1)t41) && (uint1)t40) && (uint1)t41) && (uint1)t40) && (uint1)t41) && (uint1)t40) && (uint1)t41) && (uint1)t40) && (uint1)t41) && (uint1)t40) && (uint1)t41) && (uint1)t40) && (uint1)t41) && (uint1)t40) && (uint1)t41) && (uint1)t40) && (uint1)t41) && (uint1)t40) && (uint1)t41)
With lets: (let t40 = (0 <= 0) in (let t41 = (0 >= 0) in (((((((((((((((((((((((((((((((uint1)1 && t40) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && t40) && (((7 + 0) - 1) >= ((7 + 0) - 1))) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && t40) && t41) && t40) && t41) && t40) && t41) && t40) && t41) && t40) && t41) && t40) && t41) && t40) && t41) && t40) && t41) && t40) && t41) && t40) && t41) && t40) && t41) && t40) && t41)))
simplify let t40 = (uint1)1 in...
new let t40.s = (undefined) in ... (uint1)1 ...
simplify let t41 = (uint1)1 in...
new let t41.s = (undefined) in ... (uint1)1 ...
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = A.s0.yyy_xxx, A.s0.yyy_xxx
bounds_of_expr_in_scope A.s0.yy_xx = A.s0.yy_xx, A.s0.yy_xx
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
Box(by Provide) of A
  0 ... ((8 + 0) - 1)
  A.s0.yyy_xxx ... A.s0.yyy_xxx
  A.s0.yy_xx ... A.s0.yy_xx
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope (float32)C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = A.s0.yyy_xxx, A.s0.yyy_xxx
bounds_of_expr_in_scope A.s0.yy_xx = A.s0.yy_xx, A.s0.yy_xx
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0

Considering folding A over for loop over A.s0.yyy_xxx dimension 14
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.yyy_xxx dimension 13
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.yyy_xxx dimension 12
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.yyy_xxx dimension 11
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.yyy_xxx dimension 10
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.yyy_xxx dimension 9
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.yyy_xxx dimension 8
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.yyy_xxx dimension 7
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.yyy_xxx dimension 6
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.yyy_xxx dimension 5
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.yyy_xxx dimension 4
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.yyy_xxx dimension 3
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.yyy_xxx dimension 2
Min: A.s0.yy_xx
Max: A.s0.yy_xx
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = A.s0.yy_xx
max = A.s0.yy_xx

Considering folding A over for loop over A.s0.yyy_xxx dimension 1
Min: A.s0.yyy_xxx
Max: A.s0.yyy_xxx
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = A.s0.yyy_xxx
max = A.s0.yyy_xxx

Considering folding A over for loop over A.s0.yyy_xxx dimension 0
Min: 0
Max: 7
Extent: 8
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 7



Input to CSE (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
After removing lets: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
Include: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)); should extract: 1
Include: (((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)); should extract: 1
Include: ((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)); should extract: 1
Include: (((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)); should extract: 1
Include: ((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)); should extract: 1
Include: (((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))); should extract: 1
Include: ((uint1)1 && (0 <= 0)); should extract: 1
Include: (uint1)1; should extract: 0
Include: (0 <= 0); should extract: 1
Include: 0; should extract: 0
Include: 0; should extract: 0
Include: (((8 + 0) - 1) >= ((8 + 0) - 1)); should extract: 1
Include: ((8 + 0) - 1); should extract: 0
Include: (8 + 0); should extract: 0
Include: 8; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: ((8 + 0) - 1); should extract: 0
Include: (8 + 0); should extract: 0
Include: 8; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: (A.s0.yyy_xxx <= A.s0.yyy_xxx); should extract: 1
Include: A.s0.yyy_xxx; should extract: 0
Include: A.s0.yyy_xxx; should extract: 0
Include: (A.s0.yyy_xxx >= A.s0.yyy_xxx); should extract: 1
Include: A.s0.yyy_xxx; should extract: 0
Include: A.s0.yyy_xxx; should extract: 0
Include: (A.s0.yy_xx <= A.s0.yy_xx); should extract: 1
Include: A.s0.yy_xx; should extract: 0
Include: A.s0.yy_xx; should extract: 0
Include: (A.s0.yy_xx >= A.s0.yy_xx); should extract: 1
Include: A.s0.yy_xx; should extract: 0
Include: A.s0.yy_xx; should extract: 0
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: 0; should extract: 0
Include: 0; should extract: 0
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Canonical form without lets (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
0: (uint1)1, 0
1: 0, 0
2: (0 <= 0), 13
3: ((uint1)1 && (0 <= 0)), 1
4: 8, 0
5: (8 + 0), 0
6: 1, 0
7: ((8 + 0) - 1), 0
8: (((8 + 0) - 1) >= ((8 + 0) - 1)), 1
9: (((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))), 1
10: A.s0.yyy_xxx, 0
11: (A.s0.yyy_xxx <= A.s0.yyy_xxx), 1
12: ((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)), 1
13: (A.s0.yyy_xxx >= A.s0.yyy_xxx), 1
14: (((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)), 1
15: A.s0.yy_xx, 0
16: (A.s0.yy_xx <= A.s0.yy_xx), 1
17: ((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)), 1
18: (A.s0.yy_xx >= A.s0.yy_xx), 1
19: (((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)), 1
20: ((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)), 1
21: (0 >= 0), 12
22: (((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)), 1
23: ((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
24: (((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
25: ((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
26: (((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
27: ((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
28: (((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
29: ((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
30: (((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
31: ((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
32: (((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
33: ((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
34: (((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
35: ((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
36: (((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
37: ((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
38: (((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
39: ((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
40: (((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
41: ((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
42: (((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
43: ((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
44: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
With variables (((((((((((((((((((((((((((((((uint1)1 && (uint1)t42) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (uint1)t42) && (uint1)t43) && (uint1)t42) && (uint1)t43) && (uint1)t42) && (uint1)t43) && (uint1)t42) && (uint1)t43) && (uint1)t42) && (uint1)t43) && (uint1)t42) && (uint1)t43) && (uint1)t42) && (uint1)t43) && (uint1)t42) && (uint1)t43) && (uint1)t42) && (uint1)t43) && (uint1)t42) && (uint1)t43) && (uint1)t42) && (uint1)t43) && (uint1)t42) && (uint1)t43)
With lets: (let t42 = (0 <= 0) in (let t43 = (0 >= 0) in (((((((((((((((((((((((((((((((uint1)1 && t42) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && t42) && t43) && t42) && t43) && t42) && t43) && t42) && t43) && t42) && t43) && t42) && t43) && t42) && t43) && t42) && t43) && t42) && t43) && t42) && t43) && t42) && t43) && t42) && t43)))
simplify let t42 = (uint1)1 in...
new let t42.s = (undefined) in ... (uint1)1 ...
simplify let t43 = (uint1)1 in...
new let t43.s = (undefined) in ... (uint1)1 ...
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = A.s0.yyy_xxx, A.s0.yyy_xxx
bounds_of_expr_in_scope A.s0.yy_xx = A.s0.yy_xx, A.s0.yy_xx
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
Box(by Provide) of A
  0 ... ((8 + 0) - 1)
  A.s0.yyy_xxx ... A.s0.yyy_xxx
  A.s0.yy_xx ... A.s0.yy_xx
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 3 = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope (float32)C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = A.s0.yyy_xxx, A.s0.yyy_xxx
bounds_of_expr_in_scope A.s0.yy_xx = A.s0.yy_xx, A.s0.yy_xx
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0

Considering folding A over for loop over A.s0.kx dimension 14
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.kx dimension 13
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.kx dimension 12
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.kx dimension 11
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.kx dimension 10
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.kx dimension 9
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.kx dimension 8
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.kx dimension 7
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.kx dimension 6
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.kx dimension 5
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.kx dimension 4
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.kx dimension 3
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.kx dimension 2
Min: A.s0.yy_xx
Max: A.s0.yy_xx
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = A.s0.yy_xx
max = A.s0.yy_xx

Considering folding A over for loop over A.s0.kx dimension 1
Min: A.s0.yyy_xxx
Max: A.s0.yyy_xxx
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = A.s0.yyy_xxx
max = A.s0.yyy_xxx

Considering folding A over for loop over A.s0.kx dimension 0
Min: 0
Max: 7
Extent: 8
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 7



Input to CSE (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
After removing lets: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
Include: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)); should extract: 1
Include: (((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)); should extract: 1
Include: ((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)); should extract: 1
Include: (((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)); should extract: 1
Include: ((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)); should extract: 1
Include: (((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))); should extract: 1
Include: ((uint1)1 && (0 <= 0)); should extract: 1
Include: (uint1)1; should extract: 0
Include: (0 <= 0); should extract: 1
Include: 0; should extract: 0
Include: 0; should extract: 0
Include: (((8 + 0) - 1) >= ((8 + 0) - 1)); should extract: 1
Include: ((8 + 0) - 1); should extract: 0
Include: (8 + 0); should extract: 0
Include: 8; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: ((8 + 0) - 1); should extract: 0
Include: (8 + 0); should extract: 0
Include: 8; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: (A.s0.yyy_xxx <= A.s0.yyy_xxx); should extract: 1
Include: A.s0.yyy_xxx; should extract: 0
Include: A.s0.yyy_xxx; should extract: 0
Include: (A.s0.yyy_xxx >= A.s0.yyy_xxx); should extract: 1
Include: A.s0.yyy_xxx; should extract: 0
Include: A.s0.yyy_xxx; should extract: 0
Include: (A.s0.yy_xx <= A.s0.yy_xx); should extract: 1
Include: A.s0.yy_xx; should extract: 0
Include: A.s0.yy_xx; should extract: 0
Include: (A.s0.yy_xx >= A.s0.yy_xx); should extract: 1
Include: A.s0.yy_xx; should extract: 0
Include: A.s0.yy_xx; should extract: 0
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: 0; should extract: 0
Include: 0; should extract: 0
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Canonical form without lets (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
0: (uint1)1, 0
1: 0, 0
2: (0 <= 0), 13
3: ((uint1)1 && (0 <= 0)), 1
4: 8, 0
5: (8 + 0), 0
6: 1, 0
7: ((8 + 0) - 1), 0
8: (((8 + 0) - 1) >= ((8 + 0) - 1)), 1
9: (((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))), 1
10: A.s0.yyy_xxx, 0
11: (A.s0.yyy_xxx <= A.s0.yyy_xxx), 1
12: ((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)), 1
13: (A.s0.yyy_xxx >= A.s0.yyy_xxx), 1
14: (((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)), 1
15: A.s0.yy_xx, 0
16: (A.s0.yy_xx <= A.s0.yy_xx), 1
17: ((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)), 1
18: (A.s0.yy_xx >= A.s0.yy_xx), 1
19: (((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)), 1
20: ((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)), 1
21: (0 >= 0), 12
22: (((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)), 1
23: ((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
24: (((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
25: ((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
26: (((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
27: ((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
28: (((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
29: ((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
30: (((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
31: ((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
32: (((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
33: ((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
34: (((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
35: ((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
36: (((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
37: ((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
38: (((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
39: ((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
40: (((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
41: ((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
42: (((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
43: ((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
44: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
With variables (((((((((((((((((((((((((((((((uint1)1 && (uint1)t44) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (uint1)t44) && (uint1)t45) && (uint1)t44) && (uint1)t45) && (uint1)t44) && (uint1)t45) && (uint1)t44) && (uint1)t45) && (uint1)t44) && (uint1)t45) && (uint1)t44) && (uint1)t45) && (uint1)t44) && (uint1)t45) && (uint1)t44) && (uint1)t45) && (uint1)t44) && (uint1)t45) && (uint1)t44) && (uint1)t45) && (uint1)t44) && (uint1)t45) && (uint1)t44) && (uint1)t45)
With lets: (let t44 = (0 <= 0) in (let t45 = (0 >= 0) in (((((((((((((((((((((((((((((((uint1)1 && t44) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && t44) && t45) && t44) && t45) && t44) && t45) && t44) && t45) && t44) && t45) && t44) && t45) && t44) && t45) && t44) && t45) && t44) && t45) && t44) && t45) && t44) && t45) && t44) && t45)))
simplify let t44 = (uint1)1 in...
new let t44.s = (undefined) in ... (uint1)1 ...
simplify let t45 = (uint1)1 in...
new let t45.s = (undefined) in ... (uint1)1 ...
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = A.s0.yyy_xxx, A.s0.yyy_xxx
bounds_of_expr_in_scope A.s0.yy_xx = A.s0.yy_xx, A.s0.yy_xx
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
Box(by Provide) of A
  0 ... ((8 + 0) - 1)
  A.s0.yyy_xxx ... A.s0.yyy_xxx
  A.s0.yy_xx ... A.s0.yy_xx
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
  0 ... 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 8 = 8, 8
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 4 = 4, 4
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope (float32)C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope A.s0.cooo = 0, 7
bounds_of_expr_in_scope A.s0.yyy_xxx = A.s0.yyy_xxx, A.s0.yyy_xxx
bounds_of_expr_in_scope A.s0.yy_xx = A.s0.yy_xx, A.s0.yy_xx
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope 0 = 0, 0

Considering folding A over for loop over A.s0.ky dimension 14
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.ky dimension 13
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.ky dimension 12
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.ky dimension 11
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.ky dimension 10
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.ky dimension 9
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.ky dimension 8
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.ky dimension 7
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.ky dimension 6
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.ky dimension 5
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.ky dimension 4
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.ky dimension 3
Min: 0
Max: 0
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 0

Considering folding A over for loop over A.s0.ky dimension 2
Min: A.s0.yy_xx
Max: A.s0.yy_xx
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = A.s0.yy_xx
max = A.s0.yy_xx

Considering folding A over for loop over A.s0.ky dimension 1
Min: A.s0.yyy_xxx
Max: A.s0.yyy_xxx
Extent: 1
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = A.s0.yyy_xxx
max = A.s0.yyy_xxx

Considering folding A over for loop over A.s0.ky dimension 0
Min: 0
Max: 7
Extent: 8
explicit_factor: (undefined)
Not folding because loop min or max not monotonic in the loop variable
min = 0
max = 7



Input to CSE (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
After removing lets: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
Include: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)); should extract: 1
Include: (((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)); should extract: 1
Include: ((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)); should extract: 1
Include: (((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)); should extract: 1
Include: ((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)); should extract: 1
Include: (((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)); should extract: 1
Include: ((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)); should extract: 1
Include: (((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))); should extract: 1
Include: ((uint1)1 && (0 <= 0)); should extract: 1
Include: (uint1)1; should extract: 0
Include: (0 <= 0); should extract: 1
Include: 0; should extract: 0
Include: 0; should extract: 0
Include: (((8 + 0) - 1) >= ((8 + 0) - 1)); should extract: 1
Include: ((8 + 0) - 1); should extract: 0
Include: (8 + 0); should extract: 0
Include: 8; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: ((8 + 0) - 1); should extract: 0
Include: (8 + 0); should extract: 0
Include: 8; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: (A.s0.yyy_xxx <= A.s0.yyy_xxx); should extract: 1
Include: A.s0.yyy_xxx; should extract: 0
Include: A.s0.yyy_xxx; should extract: 0
Include: (A.s0.yyy_xxx >= A.s0.yyy_xxx); should extract: 1
Include: A.s0.yyy_xxx; should extract: 0
Include: A.s0.yyy_xxx; should extract: 0
Include: (A.s0.yy_xx <= A.s0.yy_xx); should extract: 1
Include: A.s0.yy_xx; should extract: 0
Include: A.s0.yy_xx; should extract: 0
Include: (A.s0.yy_xx >= A.s0.yy_xx); should extract: 1
Include: A.s0.yy_xx; should extract: 0
Include: A.s0.yy_xx; should extract: 0
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: 0; should extract: 0
Include: 0; should extract: 0
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Include: (0 <= 0); should extract: 1
Include: (0 >= 0); should extract: 1
Canonical form without lets (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0))
0: (uint1)1, 0
1: 0, 0
2: (0 <= 0), 13
3: ((uint1)1 && (0 <= 0)), 1
4: 8, 0
5: (8 + 0), 0
6: 1, 0
7: ((8 + 0) - 1), 0
8: (((8 + 0) - 1) >= ((8 + 0) - 1)), 1
9: (((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))), 1
10: A.s0.yyy_xxx, 0
11: (A.s0.yyy_xxx <= A.s0.yyy_xxx), 1
12: ((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)), 1
13: (A.s0.yyy_xxx >= A.s0.yyy_xxx), 1
14: (((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)), 1
15: A.s0.yy_xx, 0
16: (A.s0.yy_xx <= A.s0.yy_xx), 1
17: ((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)), 1
18: (A.s0.yy_xx >= A.s0.yy_xx), 1
19: (((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)), 1
20: ((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)), 1
21: (0 >= 0), 12
22: (((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)), 1
23: ((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
24: (((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
25: ((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
26: (((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
27: ((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
28: (((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
29: ((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
30: (((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
31: ((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
32: (((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
33: ((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
34: (((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
35: ((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
36: (((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
37: ((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
38: (((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
39: ((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
40: (((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
41: ((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
42: (((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
43: ((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)), 1
44: (((((((((((((((((((((((((((((((uint1)1 && (0 <= 0)) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)) && (0 <= 0)) && (0 >= 0)), 1
With variables (((((((((((((((((((((((((((((((uint1)1 && (uint1)t46) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && (uint1)t46) && (uint1)t47) && (uint1)t46) && (uint1)t47) && (uint1)t46) && (uint1)t47) && (uint1)t46) && (uint1)t47) && (uint1)t46) && (uint1)t47) && (uint1)t46) && (uint1)t47) && (uint1)t46) && (uint1)t47) && (uint1)t46) && (uint1)t47) && (uint1)t46) && (uint1)t47) && (uint1)t46) && (uint1)t47) && (uint1)t46) && (uint1)t47) && (uint1)t46) && (uint1)t47)
With lets: (let t46 = (0 <= 0) in (let t47 = (0 >= 0) in (((((((((((((((((((((((((((((((uint1)1 && t46) && (((8 + 0) - 1) >= ((8 + 0) - 1))) && (A.s0.yyy_xxx <= A.s0.yyy_xxx)) && (A.s0.yyy_xxx >= A.s0.yyy_xxx)) && (A.s0.yy_xx <= A.s0.yy_xx)) && (A.s0.yy_xx >= A.s0.yy_xx)) && t46) && t47) && t46) && t47) && t46) && t47) && t46) && t47) && t46) && t47) && t46) && t47) && t46) && t47) && t46) && t47) && t46) && t47) && t46) && t47) && t46) && t47) && t46) && t47)))
simplify let t46 = (uint1)1 in...
new let t46.s = (undefined) in ... (uint1)1 ...
simplify let t47 = (uint1)1 in...
new let t47.s = (undefined) in ... (uint1)1 ...
Lowering after storage folding:
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
if (!((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer) || ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || (uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)))) {
 assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
 assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
 assert(((uint32)P.type == (uint32)73730), halide_error_bad_type("Input buffer P", (uint32)P.type, (uint32)73730))
 assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
 assert(((uint32)W.type == (uint32)73730), halide_error_bad_type("Input buffer W", (uint32)W.type, (uint32)73730))
 assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
 assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
 assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
 assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
 assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
 assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
 assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
 assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
 assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
 assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
 assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
 assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
 assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
 assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
 assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
 assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
 assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
 assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
 assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
 assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
 assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
 assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
 assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
 assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
 assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
 assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
 assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
 assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
 let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
 let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
 let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
 let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
 let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
 let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
 let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
 let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
 let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
 let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
 let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
 assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
 assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
 assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
 assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
 assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
 assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
 assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
 assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
 assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
 assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
 assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
 assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
 assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
 assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
 assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
 assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
 assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
 gpu_block<Default_GPU> (A.s0.n, 0, (P.extent.1/3600)) {
  gpu_block<Default_GPU> (A.s0.nn, 0, 16) {
   gpu_block<Default_GPU> (A.s0.co, 0, 4) {
    gpu_thread<Default_GPU> (A.s0.mx, 0, 4) {
     gpu_thread<Default_GPU> (A.s0.my, 0, 4) {
      realize A[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
       realize B[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
        realize C[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
         for (A.s0.mk, 0, 4) {
          for (A.s0.ci, 0, 8) {
           for (A.s0.yy_xx, 0, 7) {
            for (A.s0.yyy_xxx, 0, 7) {
             for (A.s0.kx, 0, 3) {
              for (A.s0.ky, 0, 3) {
               vectorized (A.s0.cooo, 0, 8) {
                for (A.s0.cii, 0, 4) {
                 A(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = (float32)P(((A.s0.nn*512) + ((A.s0.mx*128) + ((A.s0.mk*32) + ((A.s0.ci*4) + A.s0.cii)))), ((A.s0.n*225) + ((((A.s0.yy_xx*2) + A.s0.kx)*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))))
                 B(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = (float32)W(((A.s0.my*32) + ((A.s0.co*8) + A.s0.cooo)), ((A.s0.mk*288) + ((A.s0.ci*36) + ((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii)))))
                 C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = ((let t5 = C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) in select((((((A.s0.cii == 0) && (A.s0.ci == 0)) && (A.s0.mk == 0)) && (A.s0.ky == 0)) && (A.s0.kx == 0)), 0.000000f, t5)) + (A(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)*B(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)))
                 if ((((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) {
                  Out(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, A.s0.my, A.s0.mx, 0, A.s0.nn, A.s0.co, A.s0.n) = C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
}

Injecting debug_to_file calls...
Lowering after injecting debug_to_file calls:
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
if (!((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer) || ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || (uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)))) {
 assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
 assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
 assert(((uint32)P.type == (uint32)73730), halide_error_bad_type("Input buffer P", (uint32)P.type, (uint32)73730))
 assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
 assert(((uint32)W.type == (uint32)73730), halide_error_bad_type("Input buffer W", (uint32)W.type, (uint32)73730))
 assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
 assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
 assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
 assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
 assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
 assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
 assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
 assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
 assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
 assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
 assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
 assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
 assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
 assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
 assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
 assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
 assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
 assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
 assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
 assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
 assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
 assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
 assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
 assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
 assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
 assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
 assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
 assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
 let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
 let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
 let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
 let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
 let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
 let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
 let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
 let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
 let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
 let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
 let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
 assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
 assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
 assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
 assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
 assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
 assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
 assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
 assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
 assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
 assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
 assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
 assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
 assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
 assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
 assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
 assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
 assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
 gpu_block<Default_GPU> (A.s0.n, 0, (P.extent.1/3600)) {
  gpu_block<Default_GPU> (A.s0.nn, 0, 16) {
   gpu_block<Default_GPU> (A.s0.co, 0, 4) {
    gpu_thread<Default_GPU> (A.s0.mx, 0, 4) {
     gpu_thread<Default_GPU> (A.s0.my, 0, 4) {
      realize A[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
       realize B[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
        realize C[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
         for (A.s0.mk, 0, 4) {
          for (A.s0.ci, 0, 8) {
           for (A.s0.yy_xx, 0, 7) {
            for (A.s0.yyy_xxx, 0, 7) {
             for (A.s0.kx, 0, 3) {
              for (A.s0.ky, 0, 3) {
               vectorized (A.s0.cooo, 0, 8) {
                for (A.s0.cii, 0, 4) {
                 A(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = (float32)P(((A.s0.nn*512) + ((A.s0.mx*128) + ((A.s0.mk*32) + ((A.s0.ci*4) + A.s0.cii)))), ((A.s0.n*225) + ((((A.s0.yy_xx*2) + A.s0.kx)*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))))
                 B(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = (float32)W(((A.s0.my*32) + ((A.s0.co*8) + A.s0.cooo)), ((A.s0.mk*288) + ((A.s0.ci*36) + ((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii)))))
                 C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = ((let t5 = C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) in select((((((A.s0.cii == 0) && (A.s0.ci == 0)) && (A.s0.mk == 0)) && (A.s0.ky == 0)) && (A.s0.kx == 0)), 0.000000f, t5)) + (A(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)*B(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)))
                 if ((((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) {
                  Out(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, A.s0.my, A.s0.mx, 0, A.s0.nn, A.s0.co, A.s0.n) = C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
}

Injecting prefetches...
Lowering after injecting prefetches:
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
if (!((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer) || ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || (uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)))) {
 assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
 assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
 assert(((uint32)P.type == (uint32)73730), halide_error_bad_type("Input buffer P", (uint32)P.type, (uint32)73730))
 assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
 assert(((uint32)W.type == (uint32)73730), halide_error_bad_type("Input buffer W", (uint32)W.type, (uint32)73730))
 assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
 assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
 assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
 assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
 assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
 assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
 assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
 assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
 assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
 assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
 assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
 assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
 assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
 assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
 assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
 assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
 assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
 assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
 assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
 assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
 assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
 assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
 assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
 assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
 assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
 assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
 assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
 assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
 let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
 let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
 let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
 let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
 let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
 let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
 let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
 let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
 let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
 let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
 let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
 assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
 assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
 assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
 assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
 assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
 assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
 assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
 assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
 assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
 assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
 assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
 assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
 assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
 assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
 assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
 assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
 assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
 gpu_block<Default_GPU> (A.s0.n, 0, (P.extent.1/3600)) {
  gpu_block<Default_GPU> (A.s0.nn, 0, 16) {
   gpu_block<Default_GPU> (A.s0.co, 0, 4) {
    gpu_thread<Default_GPU> (A.s0.mx, 0, 4) {
     gpu_thread<Default_GPU> (A.s0.my, 0, 4) {
      realize A[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
       realize B[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
        realize C[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
         for (A.s0.mk, 0, 4) {
          for (A.s0.ci, 0, 8) {
           for (A.s0.yy_xx, 0, 7) {
            for (A.s0.yyy_xxx, 0, 7) {
             for (A.s0.kx, 0, 3) {
              for (A.s0.ky, 0, 3) {
               vectorized (A.s0.cooo, 0, 8) {
                for (A.s0.cii, 0, 4) {
                 A(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = (float32)P(((A.s0.nn*512) + ((A.s0.mx*128) + ((A.s0.mk*32) + ((A.s0.ci*4) + A.s0.cii)))), ((A.s0.n*225) + ((((A.s0.yy_xx*2) + A.s0.kx)*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))))
                 B(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = (float32)W(((A.s0.my*32) + ((A.s0.co*8) + A.s0.cooo)), ((A.s0.mk*288) + ((A.s0.ci*36) + ((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii)))))
                 C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = ((let t5 = C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) in select((((((A.s0.cii == 0) && (A.s0.ci == 0)) && (A.s0.mk == 0)) && (A.s0.ky == 0)) && (A.s0.kx == 0)), 0.000000f, t5)) + (A(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)*B(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)))
                 if ((((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) {
                  Out(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, A.s0.my, A.s0.mx, 0, A.s0.nn, A.s0.co, A.s0.n) = C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
}


Destructuring tuple-valued realizations...
Lowering after destructuring tuple-valued realizations:
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
if (!((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer) || ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || (uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)))) {
 assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
 assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
 assert(((uint32)P.type == (uint32)73730), halide_error_bad_type("Input buffer P", (uint32)P.type, (uint32)73730))
 assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
 assert(((uint32)W.type == (uint32)73730), halide_error_bad_type("Input buffer W", (uint32)W.type, (uint32)73730))
 assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
 assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
 assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
 assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
 assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
 assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
 assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
 assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
 assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
 assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
 assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
 assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
 assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
 assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
 assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
 assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
 assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
 assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
 assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
 assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
 assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
 assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
 assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
 assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
 assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
 assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
 assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
 assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
 let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
 let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
 let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
 let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
 let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
 let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
 let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
 let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
 let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
 let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
 let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
 assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
 assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
 assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
 assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
 assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
 assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
 assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
 assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
 assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
 assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
 assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
 assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
 assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
 assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
 assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
 assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
 assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
 gpu_block<Default_GPU> (A.s0.n, 0, (P.extent.1/3600)) {
  gpu_block<Default_GPU> (A.s0.nn, 0, 16) {
   gpu_block<Default_GPU> (A.s0.co, 0, 4) {
    gpu_thread<Default_GPU> (A.s0.mx, 0, 4) {
     gpu_thread<Default_GPU> (A.s0.my, 0, 4) {
      realize A[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
       realize B[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
        realize C[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
         for (A.s0.mk, 0, 4) {
          for (A.s0.ci, 0, 8) {
           for (A.s0.yy_xx, 0, 7) {
            for (A.s0.yyy_xxx, 0, 7) {
             for (A.s0.kx, 0, 3) {
              for (A.s0.ky, 0, 3) {
               vectorized (A.s0.cooo, 0, 8) {
                for (A.s0.cii, 0, 4) {
                 A(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = (float32)P(((A.s0.nn*512) + ((A.s0.mx*128) + ((A.s0.mk*32) + ((A.s0.ci*4) + A.s0.cii)))), ((A.s0.n*225) + ((((A.s0.yy_xx*2) + A.s0.kx)*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))))
                 B(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = (float32)W(((A.s0.my*32) + ((A.s0.co*8) + A.s0.cooo)), ((A.s0.mk*288) + ((A.s0.ci*36) + ((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii)))))
                 C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = ((let t5 = C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) in select((((((A.s0.cii == 0) && (A.s0.ci == 0)) && (A.s0.mk == 0)) && (A.s0.ky == 0)) && (A.s0.kx == 0)), 0.000000f, t5)) + (A(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)*B(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)))
                 if ((((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) {
                  Out(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, A.s0.my, A.s0.mx, 0, A.s0.nn, A.s0.co, A.s0.n) = C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
}


Canonicalizing GPU var names...
Lowering after canonicalizing GPU var names:
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
if (!((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer) || ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || (uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)))) {
 assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
 assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
 assert(((uint32)P.type == (uint32)73730), halide_error_bad_type("Input buffer P", (uint32)P.type, (uint32)73730))
 assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
 assert(((uint32)W.type == (uint32)73730), halide_error_bad_type("Input buffer W", (uint32)W.type, (uint32)73730))
 assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
 assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
 assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
 assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
 assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
 assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
 assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
 assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
 assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
 assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
 assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
 assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
 assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
 assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
 assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
 assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
 assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
 assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
 assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
 assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
 assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
 assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
 assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
 assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
 assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
 assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
 assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
 assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
 let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
 let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
 let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
 let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
 let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
 let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
 let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
 let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
 let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
 let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
 let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
 assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
 assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
 assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
 assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
 assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
 assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
 assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
 assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
 assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
 assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
 assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
 assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
 assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
 assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
 assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
 assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
 assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
 gpu_block<Default_GPU> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
  gpu_block<Default_GPU> (A.s0.nn.__block_id_y, 0, 16) {
   gpu_block<Default_GPU> (A.s0.co.__block_id_x, 0, 4) {
    gpu_thread<Default_GPU> (A.s0.mx.__thread_id_y, 0, 4) {
     gpu_thread<Default_GPU> (A.s0.my.__thread_id_x, 0, 4) {
      realize A[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
       realize B[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
        realize C[0, 8], [0, 7], [0, 7], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1] of type `float32' {
         for (A.s0.mk, 0, 4) {
          for (A.s0.ci, 0, 8) {
           for (A.s0.yy_xx, 0, 7) {
            for (A.s0.yyy_xxx, 0, 7) {
             for (A.s0.kx, 0, 3) {
              for (A.s0.ky, 0, 3) {
               vectorized (A.s0.cooo, 0, 8) {
                for (A.s0.cii, 0, 4) {
                 A(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = (float32)P(((A.s0.nn.__block_id_y*512) + ((A.s0.mx.__thread_id_y*128) + ((A.s0.mk*32) + ((A.s0.ci*4) + A.s0.cii)))), ((A.s0.n.__block_id_z*225) + ((((A.s0.yy_xx*2) + A.s0.kx)*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))))
                 B(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = (float32)W(((A.s0.my.__thread_id_x*32) + ((A.s0.co.__block_id_x*8) + A.s0.cooo)), ((A.s0.mk*288) + ((A.s0.ci*36) + ((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii)))))
                 C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = ((let t5 = C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) in select((((((A.s0.cii == 0) && (A.s0.ci == 0)) && (A.s0.mk == 0)) && (A.s0.ky == 0)) && (A.s0.kx == 0)), 0.000000f, t5)) + (A(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)*B(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)))
                 if ((((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) {
                  Out(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, A.s0.my.__thread_id_x, A.s0.mx.__thread_id_y, 0, A.s0.nn.__block_id_y, A.s0.co.__block_id_x, A.s0.n.__block_id_z) = C(A.s0.cooo, A.s0.yyy_xxx, A.s0.yy_xx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
}

Performing storage flattening...
Lowering after storage flattening:
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
if (!((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer) || ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer) || (uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)))) {
 assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
 assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
 assert(((uint32)P.type == (uint32)73730), halide_error_bad_type("Input buffer P", (uint32)P.type, (uint32)73730))
 assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
 assert(((uint32)W.type == (uint32)73730), halide_error_bad_type("Input buffer W", (uint32)W.type, (uint32)73730))
 assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
 assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
 assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
 assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
 assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
 assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
 assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
 assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
 assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
 assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
 assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
 assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
 assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
 assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
 assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
 assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
 assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
 assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
 assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
 assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
 assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
 assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
 assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
 assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
 assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
 assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
 assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
 assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
 let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
 let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
 let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
 let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
 let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
 let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
 let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
 let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
 let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
 let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
 let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
 assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
 assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
 assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
 assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
 assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
 assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
 assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
 assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
 assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
 assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
 assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
 assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
 assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
 assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
 assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
 assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
 assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
 assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
 gpu_block<Default_GPU> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
  gpu_block<Default_GPU> (A.s0.nn.__block_id_y, 0, 16) {
   gpu_block<Default_GPU> (A.s0.co.__block_id_x, 0, 4) {
    gpu_thread<Default_GPU> (A.s0.mx.__thread_id_y, 0, 4) {
     gpu_thread<Default_GPU> (A.s0.my.__thread_id_x, 0, 4) {
      let A.extent.0 = 8
      let A.min.0 = 0
      let A.extent.1 = 7
      let A.min.1 = 0
      let A.extent.2 = 7
      let A.min.2 = 0
      let A.extent.3 = 1
      let A.min.3 = 0
      let A.extent.4 = 1
      let A.min.4 = 0
      let A.extent.5 = 1
      let A.min.5 = 0
      let A.extent.6 = 1
      let A.min.6 = 0
      let A.extent.7 = 1
      let A.min.7 = 0
      let A.extent.8 = 1
      let A.min.8 = 0
      let A.extent.9 = 1
      let A.min.9 = 0
      let A.extent.10 = 1
      let A.min.10 = 0
      let A.extent.11 = 1
      let A.min.11 = 0
      let A.extent.12 = 1
      let A.min.12 = 0
      let A.extent.13 = 1
      let A.min.13 = 0
      let A.extent.14 = 1
      let A.min.14 = 0
      let A.stride.0 = 1
      let A.stride.1 = (A.stride.0*8)
      let A.stride.2 = (A.stride.1*7)
      let A.stride.3 = (A.stride.2*7)
      let A.stride.4 = (A.stride.3*1)
      let A.stride.5 = (A.stride.4*1)
      let A.stride.6 = (A.stride.5*1)
      let A.stride.7 = (A.stride.6*1)
      let A.stride.8 = (A.stride.7*1)
      let A.stride.9 = (A.stride.8*1)
      let A.stride.10 = (A.stride.9*1)
      let A.stride.11 = (A.stride.10*1)
      let A.stride.12 = (A.stride.11*1)
      let A.stride.13 = (A.stride.12*1)
      let A.stride.14 = (A.stride.13*1)
      allocate A[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
      let A.buffer = (let t50 = ((halide_dimension_t *))make_struct(A.min.0, A.extent.0, A.stride.0, 0, A.min.1, A.extent.1, A.stride.1, 0, A.min.2, A.extent.2, A.stride.2, 0, A.min.3, A.extent.3, A.stride.3, 0, A.min.4, A.extent.4, A.stride.4, 0, A.min.5, A.extent.5, A.stride.5, 0, A.min.6, A.extent.6, A.stride.6, 0, A.min.7, A.extent.7, A.stride.7, 0, A.min.8, A.extent.8, A.stride.8, 0, A.min.9, A.extent.9, A.stride.9, 0, A.min.10, A.extent.10, A.stride.10, 0, A.min.11, A.extent.11, A.stride.11, 0, A.min.12, A.extent.12, A.stride.12, 0, A.min.13, A.extent.13, A.stride.13, 0, A.min.14, A.extent.14, A.stride.14, 0) in ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))alloca(size_of_halide_buffer_t()), t50, A, (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 15, t50, (uint64)0))
      let B.extent.0 = 8
      let B.min.0 = 0
      let B.extent.1 = 7
      let B.min.1 = 0
      let B.extent.2 = 7
      let B.min.2 = 0
      let B.extent.3 = 1
      let B.min.3 = 0
      let B.extent.4 = 1
      let B.min.4 = 0
      let B.extent.5 = 1
      let B.min.5 = 0
      let B.extent.6 = 1
      let B.min.6 = 0
      let B.extent.7 = 1
      let B.min.7 = 0
      let B.extent.8 = 1
      let B.min.8 = 0
      let B.extent.9 = 1
      let B.min.9 = 0
      let B.extent.10 = 1
      let B.min.10 = 0
      let B.extent.11 = 1
      let B.min.11 = 0
      let B.extent.12 = 1
      let B.min.12 = 0
      let B.extent.13 = 1
      let B.min.13 = 0
      let B.extent.14 = 1
      let B.min.14 = 0
      let B.stride.0 = 1
      let B.stride.1 = (B.stride.0*8)
      let B.stride.2 = (B.stride.1*7)
      let B.stride.3 = (B.stride.2*7)
      let B.stride.4 = (B.stride.3*1)
      let B.stride.5 = (B.stride.4*1)
      let B.stride.6 = (B.stride.5*1)
      let B.stride.7 = (B.stride.6*1)
      let B.stride.8 = (B.stride.7*1)
      let B.stride.9 = (B.stride.8*1)
      let B.stride.10 = (B.stride.9*1)
      let B.stride.11 = (B.stride.10*1)
      let B.stride.12 = (B.stride.11*1)
      let B.stride.13 = (B.stride.12*1)
      let B.stride.14 = (B.stride.13*1)
      allocate B[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
      let B.buffer = (let t49 = ((halide_dimension_t *))make_struct(B.min.0, B.extent.0, B.stride.0, 0, B.min.1, B.extent.1, B.stride.1, 0, B.min.2, B.extent.2, B.stride.2, 0, B.min.3, B.extent.3, B.stride.3, 0, B.min.4, B.extent.4, B.stride.4, 0, B.min.5, B.extent.5, B.stride.5, 0, B.min.6, B.extent.6, B.stride.6, 0, B.min.7, B.extent.7, B.stride.7, 0, B.min.8, B.extent.8, B.stride.8, 0, B.min.9, B.extent.9, B.stride.9, 0, B.min.10, B.extent.10, B.stride.10, 0, B.min.11, B.extent.11, B.stride.11, 0, B.min.12, B.extent.12, B.stride.12, 0, B.min.13, B.extent.13, B.stride.13, 0, B.min.14, B.extent.14, B.stride.14, 0) in ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))alloca(size_of_halide_buffer_t()), t49, B, (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 15, t49, (uint64)0))
      let C.extent.0 = 8
      let C.min.0 = 0
      let C.extent.1 = 7
      let C.min.1 = 0
      let C.extent.2 = 7
      let C.min.2 = 0
      let C.extent.3 = 1
      let C.min.3 = 0
      let C.extent.4 = 1
      let C.min.4 = 0
      let C.extent.5 = 1
      let C.min.5 = 0
      let C.extent.6 = 1
      let C.min.6 = 0
      let C.extent.7 = 1
      let C.min.7 = 0
      let C.extent.8 = 1
      let C.min.8 = 0
      let C.extent.9 = 1
      let C.min.9 = 0
      let C.extent.10 = 1
      let C.min.10 = 0
      let C.extent.11 = 1
      let C.min.11 = 0
      let C.extent.12 = 1
      let C.min.12 = 0
      let C.extent.13 = 1
      let C.min.13 = 0
      let C.extent.14 = 1
      let C.min.14 = 0
      let C.stride.0 = 1
      let C.stride.1 = (C.stride.0*8)
      let C.stride.2 = (C.stride.1*7)
      let C.stride.3 = (C.stride.2*7)
      let C.stride.4 = (C.stride.3*1)
      let C.stride.5 = (C.stride.4*1)
      let C.stride.6 = (C.stride.5*1)
      let C.stride.7 = (C.stride.6*1)
      let C.stride.8 = (C.stride.7*1)
      let C.stride.9 = (C.stride.8*1)
      let C.stride.10 = (C.stride.9*1)
      let C.stride.11 = (C.stride.10*1)
      let C.stride.12 = (C.stride.11*1)
      let C.stride.13 = (C.stride.12*1)
      let C.stride.14 = (C.stride.13*1)
      allocate C[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
      let C.buffer = (let t48 = ((halide_dimension_t *))make_struct(C.min.0, C.extent.0, C.stride.0, 0, C.min.1, C.extent.1, C.stride.1, 0, C.min.2, C.extent.2, C.stride.2, 0, C.min.3, C.extent.3, C.stride.3, 0, C.min.4, C.extent.4, C.stride.4, 0, C.min.5, C.extent.5, C.stride.5, 0, C.min.6, C.extent.6, C.stride.6, 0, C.min.7, C.extent.7, C.stride.7, 0, C.min.8, C.extent.8, C.stride.8, 0, C.min.9, C.extent.9, C.stride.9, 0, C.min.10, C.extent.10, C.stride.10, 0, C.min.11, C.extent.11, C.stride.11, 0, C.min.12, C.extent.12, C.stride.12, 0, C.min.13, C.extent.13, C.stride.13, 0, C.min.14, C.extent.14, C.stride.14, 0) in ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))alloca(size_of_halide_buffer_t()), t48, C, (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 15, t48, (uint64)0))
      for (A.s0.mk, 0, 4) {
       for (A.s0.ci, 0, 8) {
        for (A.s0.yy_xx, 0, 7) {
         for (A.s0.yyy_xxx, 0, 7) {
          for (A.s0.kx, 0, 3) {
           for (A.s0.ky, 0, 3) {
            vectorized (A.s0.cooo, 0, 8) {
             for (A.s0.cii, 0, 4) {
              A[(((((((((((((((0 + ((A.s0.cooo - A.min.0)*A.stride.0)) + ((A.s0.yyy_xxx - A.min.1)*A.stride.1)) + ((A.s0.yy_xx - A.min.2)*A.stride.2)) + ((0 - A.min.3)*A.stride.3)) + ((0 - A.min.4)*A.stride.4)) + ((0 - A.min.5)*A.stride.5)) + ((0 - A.min.6)*A.stride.6)) + ((0 - A.min.7)*A.stride.7)) + ((0 - A.min.8)*A.stride.8)) + ((0 - A.min.9)*A.stride.9)) + ((0 - A.min.10)*A.stride.10)) + ((0 - A.min.11)*A.stride.11)) + ((0 - A.min.12)*A.stride.12)) + ((0 - A.min.13)*A.stride.13)) + ((0 - A.min.14)*A.stride.14))] = (float32)P[(((0 + (((A.s0.nn.__block_id_y*512) + ((A.s0.mx.__thread_id_y*128) + ((A.s0.mk*32) + ((A.s0.ci*4) + A.s0.cii))))*P.stride.0)) + (((A.s0.n.__block_id_z*225) + ((((A.s0.yy_xx*2) + A.s0.kx)*15) + ((A.s0.yyy_xxx*2) + A.s0.ky)))*P.stride.1)) - ((0 + (P.min.0*P.stride.0)) + (P.min.1*P.stride.1)))]
              B[(((((((((((((((0 + ((A.s0.cooo - B.min.0)*B.stride.0)) + ((A.s0.yyy_xxx - B.min.1)*B.stride.1)) + ((A.s0.yy_xx - B.min.2)*B.stride.2)) + ((0 - B.min.3)*B.stride.3)) + ((0 - B.min.4)*B.stride.4)) + ((0 - B.min.5)*B.stride.5)) + ((0 - B.min.6)*B.stride.6)) + ((0 - B.min.7)*B.stride.7)) + ((0 - B.min.8)*B.stride.8)) + ((0 - B.min.9)*B.stride.9)) + ((0 - B.min.10)*B.stride.10)) + ((0 - B.min.11)*B.stride.11)) + ((0 - B.min.12)*B.stride.12)) + ((0 - B.min.13)*B.stride.13)) + ((0 - B.min.14)*B.stride.14))] = (float32)W[(((0 + (((A.s0.my.__thread_id_x*32) + ((A.s0.co.__block_id_x*8) + A.s0.cooo))*W.stride.0)) + (((A.s0.mk*288) + ((A.s0.ci*36) + ((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))))*W.stride.1)) - ((0 + (W.min.0*W.stride.0)) + (W.min.1*W.stride.1)))]
              C[(((((((((((((((0 + ((A.s0.cooo - C.min.0)*C.stride.0)) + ((A.s0.yyy_xxx - C.min.1)*C.stride.1)) + ((A.s0.yy_xx - C.min.2)*C.stride.2)) + ((0 - C.min.3)*C.stride.3)) + ((0 - C.min.4)*C.stride.4)) + ((0 - C.min.5)*C.stride.5)) + ((0 - C.min.6)*C.stride.6)) + ((0 - C.min.7)*C.stride.7)) + ((0 - C.min.8)*C.stride.8)) + ((0 - C.min.9)*C.stride.9)) + ((0 - C.min.10)*C.stride.10)) + ((0 - C.min.11)*C.stride.11)) + ((0 - C.min.12)*C.stride.12)) + ((0 - C.min.13)*C.stride.13)) + ((0 - C.min.14)*C.stride.14))] = ((let t5 = C[(((((((((((((((0 + ((A.s0.cooo - C.min.0)*C.stride.0)) + ((A.s0.yyy_xxx - C.min.1)*C.stride.1)) + ((A.s0.yy_xx - C.min.2)*C.stride.2)) + ((0 - C.min.3)*C.stride.3)) + ((0 - C.min.4)*C.stride.4)) + ((0 - C.min.5)*C.stride.5)) + ((0 - C.min.6)*C.stride.6)) + ((0 - C.min.7)*C.stride.7)) + ((0 - C.min.8)*C.stride.8)) + ((0 - C.min.9)*C.stride.9)) + ((0 - C.min.10)*C.stride.10)) + ((0 - C.min.11)*C.stride.11)) + ((0 - C.min.12)*C.stride.12)) + ((0 - C.min.13)*C.stride.13)) + ((0 - C.min.14)*C.stride.14))] in select((((((A.s0.cii == 0) && (A.s0.ci == 0)) && (A.s0.mk == 0)) && (A.s0.ky == 0)) && (A.s0.kx == 0)), 0.000000f, t5)) + (A[(((((((((((((((0 + ((A.s0.cooo - A.min.0)*A.stride.0)) + ((A.s0.yyy_xxx - A.min.1)*A.stride.1)) + ((A.s0.yy_xx - A.min.2)*A.stride.2)) + ((0 - A.min.3)*A.stride.3)) + ((0 - A.min.4)*A.stride.4)) + ((0 - A.min.5)*A.stride.5)) + ((0 - A.min.6)*A.stride.6)) + ((0 - A.min.7)*A.stride.7)) + ((0 - A.min.8)*A.stride.8)) + ((0 - A.min.9)*A.stride.9)) + ((0 - A.min.10)*A.stride.10)) + ((0 - A.min.11)*A.stride.11)) + ((0 - A.min.12)*A.stride.12)) + ((0 - A.min.13)*A.stride.13)) + ((0 - A.min.14)*A.stride.14))]*B[(((((((((((((((0 + ((A.s0.cooo - B.min.0)*B.stride.0)) + ((A.s0.yyy_xxx - B.min.1)*B.stride.1)) + ((A.s0.yy_xx - B.min.2)*B.stride.2)) + ((0 - B.min.3)*B.stride.3)) + ((0 - B.min.4)*B.stride.4)) + ((0 - B.min.5)*B.stride.5)) + ((0 - B.min.6)*B.stride.6)) + ((0 - B.min.7)*B.stride.7)) + ((0 - B.min.8)*B.stride.8)) + ((0 - B.min.9)*B.stride.9)) + ((0 - B.min.10)*B.stride.10)) + ((0 - B.min.11)*B.stride.11)) + ((0 - B.min.12)*B.stride.12)) + ((0 - B.min.13)*B.stride.13)) + ((0 - B.min.14)*B.stride.14))]))
              if ((((((A.s0.cii == 3) && (A.s0.ci == 7)) && (A.s0.mk == 3)) && (A.s0.ky == 2)) && (A.s0.kx == 2))) {
               Out[(((((((((((0 + (A.s0.cooo*Out.stride.0)) + (A.s0.yyy_xxx*Out.stride.1)) + (A.s0.yy_xx*Out.stride.2)) + (0*Out.stride.3)) + (A.s0.my.__thread_id_x*Out.stride.4)) + (A.s0.mx.__thread_id_y*Out.stride.5)) + (0*Out.stride.6)) + (A.s0.nn.__block_id_y*Out.stride.7)) + (A.s0.co.__block_id_x*Out.stride.8)) + (A.s0.n.__block_id_z*Out.stride.9)) - ((((((((((0 + (Out.min.0*Out.stride.0)) + (Out.min.1*Out.stride.1)) + (Out.min.2*Out.stride.2)) + (Out.min.3*Out.stride.3)) + (Out.min.4*Out.stride.4)) + (Out.min.5*Out.stride.5)) + (Out.min.6*Out.stride.6)) + (Out.min.7*Out.stride.7)) + (Out.min.8*Out.stride.8)) + (Out.min.9*Out.stride.9)))] = C[(((((((((((((((0 + ((A.s0.cooo - C.min.0)*C.stride.0)) + ((A.s0.yyy_xxx - C.min.1)*C.stride.1)) + ((A.s0.yy_xx - C.min.2)*C.stride.2)) + ((0 - C.min.3)*C.stride.3)) + ((0 - C.min.4)*C.stride.4)) + ((0 - C.min.5)*C.stride.5)) + ((0 - C.min.6)*C.stride.6)) + ((0 - C.min.7)*C.stride.7)) + ((0 - C.min.8)*C.stride.8)) + ((0 - C.min.9)*C.stride.9)) + ((0 - C.min.10)*C.stride.10)) + ((0 - C.min.11)*C.stride.11)) + ((0 - C.min.12)*C.stride.12)) + ((0 - C.min.13)*C.stride.13)) + ((0 - C.min.14)*C.stride.14))]
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
}


Applying memory schedule...
Lowering after memory schedule:
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert(((uint32)P.type == (uint32)73730), halide_error_bad_type("Input buffer P", (uint32)P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert(((uint32)W.type == (uint32)73730), halide_error_bad_type("Input buffer W", (uint32)W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<Default_GPU> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<Default_GPU> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<Default_GPU> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<Default_GPU> (A.s0.mx.__thread_id_y, 0, 4) {
    gpu_thread<Default_GPU> (A.s0.my.__thread_id_x, 0, 4) {
     allocate W_im_buf[float32 * 8 * 36] in Register
     allocate P_im_buf[float32 * 4 * 45] in Register
     let A.extent.0 = 8
     let A.min.0 = 0
     let A.extent.1 = 7
     let A.min.1 = 0
     let A.extent.2 = 7
     let A.min.2 = 0
     let A.extent.3 = 1
     let A.min.3 = 0
     let A.extent.4 = 1
     let A.min.4 = 0
     let A.extent.5 = 1
     let A.min.5 = 0
     let A.extent.6 = 1
     let A.min.6 = 0
     let A.extent.7 = 1
     let A.min.7 = 0
     let A.extent.8 = 1
     let A.min.8 = 0
     let A.extent.9 = 1
     let A.min.9 = 0
     let A.extent.10 = 1
     let A.min.10 = 0
     let A.extent.11 = 1
     let A.min.11 = 0
     let A.extent.12 = 1
     let A.min.12 = 0
     let A.extent.13 = 1
     let A.min.13 = 0
     let A.extent.14 = 1
     let A.min.14 = 0
     let A.stride.0 = 1
     let A.stride.1 = (A.stride.0*8)
     let A.stride.2 = (A.stride.1*7)
     let A.stride.3 = (A.stride.2*7)
     let A.stride.4 = (A.stride.3*1)
     let A.stride.5 = (A.stride.4*1)
     let A.stride.6 = (A.stride.5*1)
     let A.stride.7 = (A.stride.6*1)
     let A.stride.8 = (A.stride.7*1)
     let A.stride.9 = (A.stride.8*1)
     let A.stride.10 = (A.stride.9*1)
     let A.stride.11 = (A.stride.10*1)
     let A.stride.12 = (A.stride.11*1)
     let A.stride.13 = (A.stride.12*1)
     let A.stride.14 = (A.stride.13*1)
     allocate A[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
     let A.buffer = (let t50 = ((halide_dimension_t *))make_struct(A.min.0, A.extent.0, A.stride.0, 0, A.min.1, A.extent.1, A.stride.1, 0, A.min.2, A.extent.2, A.stride.2, 0, A.min.3, A.extent.3, A.stride.3, 0, A.min.4, A.extent.4, A.stride.4, 0, A.min.5, A.extent.5, A.stride.5, 0, A.min.6, A.extent.6, A.stride.6, 0, A.min.7, A.extent.7, A.stride.7, 0, A.min.8, A.extent.8, A.stride.8, 0, A.min.9, A.extent.9, A.stride.9, 0, A.min.10, A.extent.10, A.stride.10, 0, A.min.11, A.extent.11, A.stride.11, 0, A.min.12, A.extent.12, A.stride.12, 0, A.min.13, A.extent.13, A.stride.13, 0, A.min.14, A.extent.14, A.stride.14, 0) in ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))alloca(size_of_halide_buffer_t()), t50, A, (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 15, t50, (uint64)0))
     let B.extent.0 = 8
     let B.min.0 = 0
     let B.extent.1 = 7
     let B.min.1 = 0
     let B.extent.2 = 7
     let B.min.2 = 0
     let B.extent.3 = 1
     let B.min.3 = 0
     let B.extent.4 = 1
     let B.min.4 = 0
     let B.extent.5 = 1
     let B.min.5 = 0
     let B.extent.6 = 1
     let B.min.6 = 0
     let B.extent.7 = 1
     let B.min.7 = 0
     let B.extent.8 = 1
     let B.min.8 = 0
     let B.extent.9 = 1
     let B.min.9 = 0
     let B.extent.10 = 1
     let B.min.10 = 0
     let B.extent.11 = 1
     let B.min.11 = 0
     let B.extent.12 = 1
     let B.min.12 = 0
     let B.extent.13 = 1
     let B.min.13 = 0
     let B.extent.14 = 1
     let B.min.14 = 0
     let B.stride.0 = 1
     let B.stride.1 = (B.stride.0*8)
     let B.stride.2 = (B.stride.1*7)
     let B.stride.3 = (B.stride.2*7)
     let B.stride.4 = (B.stride.3*1)
     let B.stride.5 = (B.stride.4*1)
     let B.stride.6 = (B.stride.5*1)
     let B.stride.7 = (B.stride.6*1)
     let B.stride.8 = (B.stride.7*1)
     let B.stride.9 = (B.stride.8*1)
     let B.stride.10 = (B.stride.9*1)
     let B.stride.11 = (B.stride.10*1)
     let B.stride.12 = (B.stride.11*1)
     let B.stride.13 = (B.stride.12*1)
     let B.stride.14 = (B.stride.13*1)
     allocate B[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
     let B.buffer = (let t49 = ((halide_dimension_t *))make_struct(B.min.0, B.extent.0, B.stride.0, 0, B.min.1, B.extent.1, B.stride.1, 0, B.min.2, B.extent.2, B.stride.2, 0, B.min.3, B.extent.3, B.stride.3, 0, B.min.4, B.extent.4, B.stride.4, 0, B.min.5, B.extent.5, B.stride.5, 0, B.min.6, B.extent.6, B.stride.6, 0, B.min.7, B.extent.7, B.stride.7, 0, B.min.8, B.extent.8, B.stride.8, 0, B.min.9, B.extent.9, B.stride.9, 0, B.min.10, B.extent.10, B.stride.10, 0, B.min.11, B.extent.11, B.stride.11, 0, B.min.12, B.extent.12, B.stride.12, 0, B.min.13, B.extent.13, B.stride.13, 0, B.min.14, B.extent.14, B.stride.14, 0) in ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))alloca(size_of_halide_buffer_t()), t49, B, (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 15, t49, (uint64)0))
     let C.extent.0 = 8
     let C.min.0 = 0
     let C.extent.1 = 7
     let C.min.1 = 0
     let C.extent.2 = 7
     let C.min.2 = 0
     let C.extent.3 = 1
     let C.min.3 = 0
     let C.extent.4 = 1
     let C.min.4 = 0
     let C.extent.5 = 1
     let C.min.5 = 0
     let C.extent.6 = 1
     let C.min.6 = 0
     let C.extent.7 = 1
     let C.min.7 = 0
     let C.extent.8 = 1
     let C.min.8 = 0
     let C.extent.9 = 1
     let C.min.9 = 0
     let C.extent.10 = 1
     let C.min.10 = 0
     let C.extent.11 = 1
     let C.min.11 = 0
     let C.extent.12 = 1
     let C.min.12 = 0
     let C.extent.13 = 1
     let C.min.13 = 0
     let C.extent.14 = 1
     let C.min.14 = 0
     let C.stride.0 = 1
     let C.stride.1 = (C.stride.0*8)
     let C.stride.2 = (C.stride.1*7)
     let C.stride.3 = (C.stride.2*7)
     let C.stride.4 = (C.stride.3*1)
     let C.stride.5 = (C.stride.4*1)
     let C.stride.6 = (C.stride.5*1)
     let C.stride.7 = (C.stride.6*1)
     let C.stride.8 = (C.stride.7*1)
     let C.stride.9 = (C.stride.8*1)
     let C.stride.10 = (C.stride.9*1)
     let C.stride.11 = (C.stride.10*1)
     let C.stride.12 = (C.stride.11*1)
     let C.stride.13 = (C.stride.12*1)
     let C.stride.14 = (C.stride.13*1)
     allocate C[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
     let C.buffer = (let t48 = ((halide_dimension_t *))make_struct(C.min.0, C.extent.0, C.stride.0, 0, C.min.1, C.extent.1, C.stride.1, 0, C.min.2, C.extent.2, C.stride.2, 0, C.min.3, C.extent.3, C.stride.3, 0, C.min.4, C.extent.4, C.stride.4, 0, C.min.5, C.extent.5, C.stride.5, 0, C.min.6, C.extent.6, C.stride.6, 0, C.min.7, C.extent.7, C.stride.7, 0, C.min.8, C.extent.8, C.stride.8, 0, C.min.9, C.extent.9, C.stride.9, 0, C.min.10, C.extent.10, C.stride.10, 0, C.min.11, C.extent.11, C.stride.11, 0, C.min.12, C.extent.12, C.stride.12, 0, C.min.13, C.extent.13, C.stride.13, 0, C.min.14, C.extent.14, C.stride.14, 0) in ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))alloca(size_of_halide_buffer_t()), t48, C, (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 15, t48, (uint64)0))
     if ((uint1)1) {
      C[ramp(0, 1, 392)] = x392(0.000000f)
     }
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((A.s0.my.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(((void *))W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((A.s0.mx.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(((void *))P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           vectorized (A.s0.cooo, 0, 8) {
            punrolled (A.s0.cii, 0, 4) {
             0
             0
             C[(((((((((((((((0 + ((A.s0.cooo - C.min.0)*C.stride.0)) + ((A.s0.yyy_xxx - C.min.1)*C.stride.1)) + ((A.s0.yy_xx - C.min.2)*C.stride.2)) + ((0 - C.min.3)*C.stride.3)) + ((0 - C.min.4)*C.stride.4)) + ((0 - C.min.5)*C.stride.5)) + ((0 - C.min.6)*C.stride.6)) + ((0 - C.min.7)*C.stride.7)) + ((0 - C.min.8)*C.stride.8)) + ((0 - C.min.9)*C.stride.9)) + ((0 - C.min.10)*C.stride.10)) + ((0 - C.min.11)*C.stride.11)) + ((0 - C.min.12)*C.stride.12)) + ((0 - C.min.13)*C.stride.13)) + ((0 - C.min.14)*C.stride.14))] = ((let t5 = C[(((((((((((((((0 + ((A.s0.cooo - C.min.0)*C.stride.0)) + ((A.s0.yyy_xxx - C.min.1)*C.stride.1)) + ((A.s0.yy_xx - C.min.2)*C.stride.2)) + ((0 - C.min.3)*C.stride.3)) + ((0 - C.min.4)*C.stride.4)) + ((0 - C.min.5)*C.stride.5)) + ((0 - C.min.6)*C.stride.6)) + ((0 - C.min.7)*C.stride.7)) + ((0 - C.min.8)*C.stride.8)) + ((0 - C.min.9)*C.stride.9)) + ((0 - C.min.10)*C.stride.10)) + ((0 - C.min.11)*C.stride.11)) + ((0 - C.min.12)*C.stride.12)) + ((0 - C.min.13)*C.stride.13)) + ((0 - C.min.14)*C.stride.14))] in t5) + (P_im_buf[((0 + A.s0.cii) + (((((((A.s0.yyy_xxx/7) + (0*7))*2) + A.s0.kx)*15) + (((A.s0.yyy_xxx % 7)*2) + A.s0.ky))*4))]*W_im_buf[((0 + ((0*8) + A.s0.cooo)) + (((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8))]))
            }
           }
          }
         }
        }
       }
      }
     }
     let var.Out.store.addr.1 = ((A.s0.n.__block_id_z + 0)*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((A.s0.mx.__thread_id_y*16) + ((A.s0.my.__thread_id_x*4) + (A.s0.co.__block_id_x + 0))))*8)
     unrolled (Out.store.t0, 0, 1) {
      (float32x392)cm_store_2d(((void *))Out, (var.Out.store.addr.0 + 0), (var.Out.store.addr.1 + 0), C, ramp((Out.store.t0*392), 1, 392), 8, 49, "deserializer")
     }
    }
   }
  }
 }
}


Adding atomic mutex allocation...
Lowering after adding atomic mutex allocation:
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert(((uint32)P.type == (uint32)73730), halide_error_bad_type("Input buffer P", (uint32)P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert(((uint32)W.type == (uint32)73730), halide_error_bad_type("Input buffer W", (uint32)W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<Default_GPU> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<Default_GPU> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<Default_GPU> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<Default_GPU> (A.s0.mx.__thread_id_y, 0, 4) {
    gpu_thread<Default_GPU> (A.s0.my.__thread_id_x, 0, 4) {
     allocate W_im_buf[float32 * 8 * 36] in Register
     allocate P_im_buf[float32 * 4 * 45] in Register
     let A.extent.0 = 8
     let A.min.0 = 0
     let A.extent.1 = 7
     let A.min.1 = 0
     let A.extent.2 = 7
     let A.min.2 = 0
     let A.extent.3 = 1
     let A.min.3 = 0
     let A.extent.4 = 1
     let A.min.4 = 0
     let A.extent.5 = 1
     let A.min.5 = 0
     let A.extent.6 = 1
     let A.min.6 = 0
     let A.extent.7 = 1
     let A.min.7 = 0
     let A.extent.8 = 1
     let A.min.8 = 0
     let A.extent.9 = 1
     let A.min.9 = 0
     let A.extent.10 = 1
     let A.min.10 = 0
     let A.extent.11 = 1
     let A.min.11 = 0
     let A.extent.12 = 1
     let A.min.12 = 0
     let A.extent.13 = 1
     let A.min.13 = 0
     let A.extent.14 = 1
     let A.min.14 = 0
     let A.stride.0 = 1
     let A.stride.1 = (A.stride.0*8)
     let A.stride.2 = (A.stride.1*7)
     let A.stride.3 = (A.stride.2*7)
     let A.stride.4 = (A.stride.3*1)
     let A.stride.5 = (A.stride.4*1)
     let A.stride.6 = (A.stride.5*1)
     let A.stride.7 = (A.stride.6*1)
     let A.stride.8 = (A.stride.7*1)
     let A.stride.9 = (A.stride.8*1)
     let A.stride.10 = (A.stride.9*1)
     let A.stride.11 = (A.stride.10*1)
     let A.stride.12 = (A.stride.11*1)
     let A.stride.13 = (A.stride.12*1)
     let A.stride.14 = (A.stride.13*1)
     allocate A[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
     let A.buffer = (let t50 = ((halide_dimension_t *))make_struct(A.min.0, A.extent.0, A.stride.0, 0, A.min.1, A.extent.1, A.stride.1, 0, A.min.2, A.extent.2, A.stride.2, 0, A.min.3, A.extent.3, A.stride.3, 0, A.min.4, A.extent.4, A.stride.4, 0, A.min.5, A.extent.5, A.stride.5, 0, A.min.6, A.extent.6, A.stride.6, 0, A.min.7, A.extent.7, A.stride.7, 0, A.min.8, A.extent.8, A.stride.8, 0, A.min.9, A.extent.9, A.stride.9, 0, A.min.10, A.extent.10, A.stride.10, 0, A.min.11, A.extent.11, A.stride.11, 0, A.min.12, A.extent.12, A.stride.12, 0, A.min.13, A.extent.13, A.stride.13, 0, A.min.14, A.extent.14, A.stride.14, 0) in ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))alloca(size_of_halide_buffer_t()), t50, A, (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 15, t50, (uint64)0))
     let B.extent.0 = 8
     let B.min.0 = 0
     let B.extent.1 = 7
     let B.min.1 = 0
     let B.extent.2 = 7
     let B.min.2 = 0
     let B.extent.3 = 1
     let B.min.3 = 0
     let B.extent.4 = 1
     let B.min.4 = 0
     let B.extent.5 = 1
     let B.min.5 = 0
     let B.extent.6 = 1
     let B.min.6 = 0
     let B.extent.7 = 1
     let B.min.7 = 0
     let B.extent.8 = 1
     let B.min.8 = 0
     let B.extent.9 = 1
     let B.min.9 = 0
     let B.extent.10 = 1
     let B.min.10 = 0
     let B.extent.11 = 1
     let B.min.11 = 0
     let B.extent.12 = 1
     let B.min.12 = 0
     let B.extent.13 = 1
     let B.min.13 = 0
     let B.extent.14 = 1
     let B.min.14 = 0
     let B.stride.0 = 1
     let B.stride.1 = (B.stride.0*8)
     let B.stride.2 = (B.stride.1*7)
     let B.stride.3 = (B.stride.2*7)
     let B.stride.4 = (B.stride.3*1)
     let B.stride.5 = (B.stride.4*1)
     let B.stride.6 = (B.stride.5*1)
     let B.stride.7 = (B.stride.6*1)
     let B.stride.8 = (B.stride.7*1)
     let B.stride.9 = (B.stride.8*1)
     let B.stride.10 = (B.stride.9*1)
     let B.stride.11 = (B.stride.10*1)
     let B.stride.12 = (B.stride.11*1)
     let B.stride.13 = (B.stride.12*1)
     let B.stride.14 = (B.stride.13*1)
     allocate B[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
     let B.buffer = (let t49 = ((halide_dimension_t *))make_struct(B.min.0, B.extent.0, B.stride.0, 0, B.min.1, B.extent.1, B.stride.1, 0, B.min.2, B.extent.2, B.stride.2, 0, B.min.3, B.extent.3, B.stride.3, 0, B.min.4, B.extent.4, B.stride.4, 0, B.min.5, B.extent.5, B.stride.5, 0, B.min.6, B.extent.6, B.stride.6, 0, B.min.7, B.extent.7, B.stride.7, 0, B.min.8, B.extent.8, B.stride.8, 0, B.min.9, B.extent.9, B.stride.9, 0, B.min.10, B.extent.10, B.stride.10, 0, B.min.11, B.extent.11, B.stride.11, 0, B.min.12, B.extent.12, B.stride.12, 0, B.min.13, B.extent.13, B.stride.13, 0, B.min.14, B.extent.14, B.stride.14, 0) in ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))alloca(size_of_halide_buffer_t()), t49, B, (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 15, t49, (uint64)0))
     let C.extent.0 = 8
     let C.min.0 = 0
     let C.extent.1 = 7
     let C.min.1 = 0
     let C.extent.2 = 7
     let C.min.2 = 0
     let C.extent.3 = 1
     let C.min.3 = 0
     let C.extent.4 = 1
     let C.min.4 = 0
     let C.extent.5 = 1
     let C.min.5 = 0
     let C.extent.6 = 1
     let C.min.6 = 0
     let C.extent.7 = 1
     let C.min.7 = 0
     let C.extent.8 = 1
     let C.min.8 = 0
     let C.extent.9 = 1
     let C.min.9 = 0
     let C.extent.10 = 1
     let C.min.10 = 0
     let C.extent.11 = 1
     let C.min.11 = 0
     let C.extent.12 = 1
     let C.min.12 = 0
     let C.extent.13 = 1
     let C.min.13 = 0
     let C.extent.14 = 1
     let C.min.14 = 0
     let C.stride.0 = 1
     let C.stride.1 = (C.stride.0*8)
     let C.stride.2 = (C.stride.1*7)
     let C.stride.3 = (C.stride.2*7)
     let C.stride.4 = (C.stride.3*1)
     let C.stride.5 = (C.stride.4*1)
     let C.stride.6 = (C.stride.5*1)
     let C.stride.7 = (C.stride.6*1)
     let C.stride.8 = (C.stride.7*1)
     let C.stride.9 = (C.stride.8*1)
     let C.stride.10 = (C.stride.9*1)
     let C.stride.11 = (C.stride.10*1)
     let C.stride.12 = (C.stride.11*1)
     let C.stride.13 = (C.stride.12*1)
     let C.stride.14 = (C.stride.13*1)
     allocate C[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
     let C.buffer = (let t48 = ((halide_dimension_t *))make_struct(C.min.0, C.extent.0, C.stride.0, 0, C.min.1, C.extent.1, C.stride.1, 0, C.min.2, C.extent.2, C.stride.2, 0, C.min.3, C.extent.3, C.stride.3, 0, C.min.4, C.extent.4, C.stride.4, 0, C.min.5, C.extent.5, C.stride.5, 0, C.min.6, C.extent.6, C.stride.6, 0, C.min.7, C.extent.7, C.stride.7, 0, C.min.8, C.extent.8, C.stride.8, 0, C.min.9, C.extent.9, C.stride.9, 0, C.min.10, C.extent.10, C.stride.10, 0, C.min.11, C.extent.11, C.stride.11, 0, C.min.12, C.extent.12, C.stride.12, 0, C.min.13, C.extent.13, C.stride.13, 0, C.min.14, C.extent.14, C.stride.14, 0) in ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))alloca(size_of_halide_buffer_t()), t48, C, (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 15, t48, (uint64)0))
     if ((uint1)1) {
      C[ramp(0, 1, 392)] = x392(0.000000f)
     }
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((A.s0.my.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(((void *))W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((A.s0.mx.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(((void *))P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           vectorized (A.s0.cooo, 0, 8) {
            punrolled (A.s0.cii, 0, 4) {
             0
             0
             C[(((((((((((((((0 + ((A.s0.cooo - C.min.0)*C.stride.0)) + ((A.s0.yyy_xxx - C.min.1)*C.stride.1)) + ((A.s0.yy_xx - C.min.2)*C.stride.2)) + ((0 - C.min.3)*C.stride.3)) + ((0 - C.min.4)*C.stride.4)) + ((0 - C.min.5)*C.stride.5)) + ((0 - C.min.6)*C.stride.6)) + ((0 - C.min.7)*C.stride.7)) + ((0 - C.min.8)*C.stride.8)) + ((0 - C.min.9)*C.stride.9)) + ((0 - C.min.10)*C.stride.10)) + ((0 - C.min.11)*C.stride.11)) + ((0 - C.min.12)*C.stride.12)) + ((0 - C.min.13)*C.stride.13)) + ((0 - C.min.14)*C.stride.14))] = ((let t5 = C[(((((((((((((((0 + ((A.s0.cooo - C.min.0)*C.stride.0)) + ((A.s0.yyy_xxx - C.min.1)*C.stride.1)) + ((A.s0.yy_xx - C.min.2)*C.stride.2)) + ((0 - C.min.3)*C.stride.3)) + ((0 - C.min.4)*C.stride.4)) + ((0 - C.min.5)*C.stride.5)) + ((0 - C.min.6)*C.stride.6)) + ((0 - C.min.7)*C.stride.7)) + ((0 - C.min.8)*C.stride.8)) + ((0 - C.min.9)*C.stride.9)) + ((0 - C.min.10)*C.stride.10)) + ((0 - C.min.11)*C.stride.11)) + ((0 - C.min.12)*C.stride.12)) + ((0 - C.min.13)*C.stride.13)) + ((0 - C.min.14)*C.stride.14))] in t5) + (P_im_buf[((0 + A.s0.cii) + (((((((A.s0.yyy_xxx/7) + (0*7))*2) + A.s0.kx)*15) + (((A.s0.yyy_xxx % 7)*2) + A.s0.ky))*4))]*W_im_buf[((0 + ((0*8) + A.s0.cooo)) + (((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8))]))
            }
           }
          }
         }
        }
       }
      }
     }
     let var.Out.store.addr.1 = ((A.s0.n.__block_id_z + 0)*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((A.s0.mx.__thread_id_y*16) + ((A.s0.my.__thread_id_x*4) + (A.s0.co.__block_id_x + 0))))*8)
     unrolled (Out.store.t0, 0, 1) {
      (float32x392)cm_store_2d(((void *))Out, (var.Out.store.addr.0 + 0), (var.Out.store.addr.1 + 0), C, ramp((Out.store.t0*392), 1, 392), 8, 49, "deserializer")
     }
    }
   }
  }
 }
}


Unpacking buffer arguments...
Lowering after unpacking buffer arguments...
assert(((uint64)reinterpret(((buffer_t *))W.buffer) != (uint64)0), halide_error_buffer_argument_is_null("W"))
assert(((uint64)reinterpret(((buffer_t *))P.buffer) != (uint64)0), halide_error_buffer_argument_is_null("P"))
assert(((uint64)reinterpret(((buffer_t *))Out.buffer) != (uint64)0), halide_error_buffer_argument_is_null("Out"))
let Out = ((void *))_halide_buffer_get_host(((buffer_t *))Out.buffer)
let Out.type = (uint32)_halide_buffer_get_type(((buffer_t *))Out.buffer)
let Out.dimensions = _halide_buffer_get_dimensions(((buffer_t *))Out.buffer)
let Out.min.0 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 0)
let Out.extent.0 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0)
let Out.stride.0 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0)
let Out.min.1 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 1)
let Out.extent.1 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1)
let Out.stride.1 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1)
let Out.min.2 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 2)
let Out.extent.2 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2)
let Out.stride.2 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2)
let Out.min.3 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 3)
let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3)
let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3)
let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4)
let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)
let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert((Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<Default_GPU> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<Default_GPU> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<Default_GPU> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<Default_GPU> (A.s0.mx.__thread_id_y, 0, 4) {
    gpu_thread<Default_GPU> (A.s0.my.__thread_id_x, 0, 4) {
     allocate W_im_buf[float32 * 8 * 36] in Register
     allocate P_im_buf[float32 * 4 * 45] in Register
     let A.extent.0 = 8
     let A.min.0 = 0
     let A.extent.1 = 7
     let A.min.1 = 0
     let A.extent.2 = 7
     let A.min.2 = 0
     let A.extent.3 = 1
     let A.min.3 = 0
     let A.extent.4 = 1
     let A.min.4 = 0
     let A.extent.5 = 1
     let A.min.5 = 0
     let A.extent.6 = 1
     let A.min.6 = 0
     let A.extent.7 = 1
     let A.min.7 = 0
     let A.extent.8 = 1
     let A.min.8 = 0
     let A.extent.9 = 1
     let A.min.9 = 0
     let A.extent.10 = 1
     let A.min.10 = 0
     let A.extent.11 = 1
     let A.min.11 = 0
     let A.extent.12 = 1
     let A.min.12 = 0
     let A.extent.13 = 1
     let A.min.13 = 0
     let A.extent.14 = 1
     let A.min.14 = 0
     let A.stride.0 = 1
     let A.stride.1 = (A.stride.0*8)
     let A.stride.2 = (A.stride.1*7)
     let A.stride.3 = (A.stride.2*7)
     let A.stride.4 = (A.stride.3*1)
     let A.stride.5 = (A.stride.4*1)
     let A.stride.6 = (A.stride.5*1)
     let A.stride.7 = (A.stride.6*1)
     let A.stride.8 = (A.stride.7*1)
     let A.stride.9 = (A.stride.8*1)
     let A.stride.10 = (A.stride.9*1)
     let A.stride.11 = (A.stride.10*1)
     let A.stride.12 = (A.stride.11*1)
     let A.stride.13 = (A.stride.12*1)
     let A.stride.14 = (A.stride.13*1)
     allocate A[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
     let A.buffer = (let t50 = ((halide_dimension_t *))make_struct(A.min.0, A.extent.0, A.stride.0, 0, A.min.1, A.extent.1, A.stride.1, 0, A.min.2, A.extent.2, A.stride.2, 0, A.min.3, A.extent.3, A.stride.3, 0, A.min.4, A.extent.4, A.stride.4, 0, A.min.5, A.extent.5, A.stride.5, 0, A.min.6, A.extent.6, A.stride.6, 0, A.min.7, A.extent.7, A.stride.7, 0, A.min.8, A.extent.8, A.stride.8, 0, A.min.9, A.extent.9, A.stride.9, 0, A.min.10, A.extent.10, A.stride.10, 0, A.min.11, A.extent.11, A.stride.11, 0, A.min.12, A.extent.12, A.stride.12, 0, A.min.13, A.extent.13, A.stride.13, 0, A.min.14, A.extent.14, A.stride.14, 0) in ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))alloca(size_of_halide_buffer_t()), t50, A, (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 15, t50, (uint64)0))
     let B.extent.0 = 8
     let B.min.0 = 0
     let B.extent.1 = 7
     let B.min.1 = 0
     let B.extent.2 = 7
     let B.min.2 = 0
     let B.extent.3 = 1
     let B.min.3 = 0
     let B.extent.4 = 1
     let B.min.4 = 0
     let B.extent.5 = 1
     let B.min.5 = 0
     let B.extent.6 = 1
     let B.min.6 = 0
     let B.extent.7 = 1
     let B.min.7 = 0
     let B.extent.8 = 1
     let B.min.8 = 0
     let B.extent.9 = 1
     let B.min.9 = 0
     let B.extent.10 = 1
     let B.min.10 = 0
     let B.extent.11 = 1
     let B.min.11 = 0
     let B.extent.12 = 1
     let B.min.12 = 0
     let B.extent.13 = 1
     let B.min.13 = 0
     let B.extent.14 = 1
     let B.min.14 = 0
     let B.stride.0 = 1
     let B.stride.1 = (B.stride.0*8)
     let B.stride.2 = (B.stride.1*7)
     let B.stride.3 = (B.stride.2*7)
     let B.stride.4 = (B.stride.3*1)
     let B.stride.5 = (B.stride.4*1)
     let B.stride.6 = (B.stride.5*1)
     let B.stride.7 = (B.stride.6*1)
     let B.stride.8 = (B.stride.7*1)
     let B.stride.9 = (B.stride.8*1)
     let B.stride.10 = (B.stride.9*1)
     let B.stride.11 = (B.stride.10*1)
     let B.stride.12 = (B.stride.11*1)
     let B.stride.13 = (B.stride.12*1)
     let B.stride.14 = (B.stride.13*1)
     allocate B[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
     let B.buffer = (let t49 = ((halide_dimension_t *))make_struct(B.min.0, B.extent.0, B.stride.0, 0, B.min.1, B.extent.1, B.stride.1, 0, B.min.2, B.extent.2, B.stride.2, 0, B.min.3, B.extent.3, B.stride.3, 0, B.min.4, B.extent.4, B.stride.4, 0, B.min.5, B.extent.5, B.stride.5, 0, B.min.6, B.extent.6, B.stride.6, 0, B.min.7, B.extent.7, B.stride.7, 0, B.min.8, B.extent.8, B.stride.8, 0, B.min.9, B.extent.9, B.stride.9, 0, B.min.10, B.extent.10, B.stride.10, 0, B.min.11, B.extent.11, B.stride.11, 0, B.min.12, B.extent.12, B.stride.12, 0, B.min.13, B.extent.13, B.stride.13, 0, B.min.14, B.extent.14, B.stride.14, 0) in ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))alloca(size_of_halide_buffer_t()), t49, B, (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 15, t49, (uint64)0))
     let C.extent.0 = 8
     let C.min.0 = 0
     let C.extent.1 = 7
     let C.min.1 = 0
     let C.extent.2 = 7
     let C.min.2 = 0
     let C.extent.3 = 1
     let C.min.3 = 0
     let C.extent.4 = 1
     let C.min.4 = 0
     let C.extent.5 = 1
     let C.min.5 = 0
     let C.extent.6 = 1
     let C.min.6 = 0
     let C.extent.7 = 1
     let C.min.7 = 0
     let C.extent.8 = 1
     let C.min.8 = 0
     let C.extent.9 = 1
     let C.min.9 = 0
     let C.extent.10 = 1
     let C.min.10 = 0
     let C.extent.11 = 1
     let C.min.11 = 0
     let C.extent.12 = 1
     let C.min.12 = 0
     let C.extent.13 = 1
     let C.min.13 = 0
     let C.extent.14 = 1
     let C.min.14 = 0
     let C.stride.0 = 1
     let C.stride.1 = (C.stride.0*8)
     let C.stride.2 = (C.stride.1*7)
     let C.stride.3 = (C.stride.2*7)
     let C.stride.4 = (C.stride.3*1)
     let C.stride.5 = (C.stride.4*1)
     let C.stride.6 = (C.stride.5*1)
     let C.stride.7 = (C.stride.6*1)
     let C.stride.8 = (C.stride.7*1)
     let C.stride.9 = (C.stride.8*1)
     let C.stride.10 = (C.stride.9*1)
     let C.stride.11 = (C.stride.10*1)
     let C.stride.12 = (C.stride.11*1)
     let C.stride.13 = (C.stride.12*1)
     let C.stride.14 = (C.stride.13*1)
     allocate C[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
     let C.buffer = (let t48 = ((halide_dimension_t *))make_struct(C.min.0, C.extent.0, C.stride.0, 0, C.min.1, C.extent.1, C.stride.1, 0, C.min.2, C.extent.2, C.stride.2, 0, C.min.3, C.extent.3, C.stride.3, 0, C.min.4, C.extent.4, C.stride.4, 0, C.min.5, C.extent.5, C.stride.5, 0, C.min.6, C.extent.6, C.stride.6, 0, C.min.7, C.extent.7, C.stride.7, 0, C.min.8, C.extent.8, C.stride.8, 0, C.min.9, C.extent.9, C.stride.9, 0, C.min.10, C.extent.10, C.stride.10, 0, C.min.11, C.extent.11, C.stride.11, 0, C.min.12, C.extent.12, C.stride.12, 0, C.min.13, C.extent.13, C.stride.13, 0, C.min.14, C.extent.14, C.stride.14, 0) in ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))alloca(size_of_halide_buffer_t()), t48, C, (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 15, t48, (uint64)0))
     if ((uint1)1) {
      C[ramp(0, 1, 392)] = x392(0.000000f)
     }
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((A.s0.my.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((A.s0.mx.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           vectorized (A.s0.cooo, 0, 8) {
            punrolled (A.s0.cii, 0, 4) {
             0
             0
             C[(((((((((((((((0 + ((A.s0.cooo - C.min.0)*C.stride.0)) + ((A.s0.yyy_xxx - C.min.1)*C.stride.1)) + ((A.s0.yy_xx - C.min.2)*C.stride.2)) + ((0 - C.min.3)*C.stride.3)) + ((0 - C.min.4)*C.stride.4)) + ((0 - C.min.5)*C.stride.5)) + ((0 - C.min.6)*C.stride.6)) + ((0 - C.min.7)*C.stride.7)) + ((0 - C.min.8)*C.stride.8)) + ((0 - C.min.9)*C.stride.9)) + ((0 - C.min.10)*C.stride.10)) + ((0 - C.min.11)*C.stride.11)) + ((0 - C.min.12)*C.stride.12)) + ((0 - C.min.13)*C.stride.13)) + ((0 - C.min.14)*C.stride.14))] = ((let t5 = C[(((((((((((((((0 + ((A.s0.cooo - C.min.0)*C.stride.0)) + ((A.s0.yyy_xxx - C.min.1)*C.stride.1)) + ((A.s0.yy_xx - C.min.2)*C.stride.2)) + ((0 - C.min.3)*C.stride.3)) + ((0 - C.min.4)*C.stride.4)) + ((0 - C.min.5)*C.stride.5)) + ((0 - C.min.6)*C.stride.6)) + ((0 - C.min.7)*C.stride.7)) + ((0 - C.min.8)*C.stride.8)) + ((0 - C.min.9)*C.stride.9)) + ((0 - C.min.10)*C.stride.10)) + ((0 - C.min.11)*C.stride.11)) + ((0 - C.min.12)*C.stride.12)) + ((0 - C.min.13)*C.stride.13)) + ((0 - C.min.14)*C.stride.14))] in t5) + (P_im_buf[((0 + A.s0.cii) + (((((((A.s0.yyy_xxx/7) + (0*7))*2) + A.s0.kx)*15) + (((A.s0.yyy_xxx % 7)*2) + A.s0.ky))*4))]*W_im_buf[((0 + ((0*8) + A.s0.cooo)) + (((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8))]))
            }
           }
          }
         }
        }
       }
      }
     }
     let var.Out.store.addr.1 = ((A.s0.n.__block_id_z + 0)*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((A.s0.mx.__thread_id_y*16) + ((A.s0.my.__thread_id_x*4) + (A.s0.co.__block_id_x + 0))))*8)
     unrolled (Out.store.t0, 0, 1) {
      (float32x392)cm_store_2d(Out, (var.Out.store.addr.0 + 0), (var.Out.store.addr.1 + 0), C, ramp((Out.store.t0*392), 1, 392), 8, 49, "deserializer")
     }
    }
   }
  }
 }
}


Skipping rewriting memoized allocations...
Second simplification...
simplify let Out = ((void *))_halide_buffer_get_host(((buffer_t *))Out.buffer) in...
simplify let Out.type = (uint32)_halide_buffer_get_type(((buffer_t *))Out.buffer) in...
simplify let Out.dimensions = _halide_buffer_get_dimensions(((buffer_t *))Out.buffer) in...
simplify let Out.min.0 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 0) in...
simplify let Out.extent.0 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0) in...
simplify let Out.stride.0 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0) in...
simplify let Out.min.1 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 1) in...
simplify let Out.extent.1 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1) in...
simplify let Out.stride.1 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1) in...
simplify let Out.min.2 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 2) in...
simplify let Out.extent.2 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2) in...
simplify let Out.stride.2 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2) in...
simplify let Out.min.3 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 3) in...
simplify let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3) in...
simplify let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3) in...
simplify let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4) in...
simplify let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4) in...
simplify let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4) in...
simplify let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5) in...
simplify let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5) in...
simplify let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5) in...
simplify let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6) in...
simplify let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6) in...
simplify let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6) in...
simplify let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7) in...
simplify let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7) in...
simplify let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7) in...
simplify let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8) in...
simplify let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8) in...
simplify let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8) in...
simplify let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9) in...
simplify let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9) in...
simplify let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9) in...
simplify let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer) in...
simplify let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer) in...
simplify let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer) in...
simplify let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0) in...
simplify let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0) in...
simplify let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0) in...
simplify let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1) in...
simplify let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1) in...
simplify let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1) in...
simplify let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer) in...
simplify let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer) in...
simplify let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer) in...
simplify let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0) in...
simplify let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0) in...
simplify let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0) in...
simplify let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1) in...
simplify let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1) in...
simplify let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1) in...
simplify let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0)) in...
simplify let Out.total_extent.2 = ((int64)Out.total_extent.1*int64(Out.extent.2)) in...
simplify let Out.total_extent.3 = ((int64)Out.total_extent.2*int64(Out.extent.3)) in...
simplify let Out.total_extent.4 = ((int64)Out.total_extent.3*int64(Out.extent.4)) in...
simplify let Out.total_extent.5 = ((int64)Out.total_extent.4*int64(Out.extent.5)) in...
simplify let Out.total_extent.6 = ((int64)Out.total_extent.5*int64(Out.extent.6)) in...
simplify let Out.total_extent.7 = ((int64)Out.total_extent.6*int64(Out.extent.7)) in...
simplify let Out.total_extent.8 = ((int64)Out.total_extent.7*int64(Out.extent.8)) in...
simplify let Out.total_extent.9 = ((int64)Out.total_extent.8*int64(Out.extent.9)) in...
simplify let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0)) in...
simplify let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0)) in...
simplify let A.extent.0 = 8 in...
new let A.extent.0.s = (undefined) in ... 8 ...
simplify let A.min.0 = 0 in...
new let A.min.0.s = (undefined) in ... 0 ...
simplify let A.extent.1 = 7 in...
new let A.extent.1.s = (undefined) in ... 7 ...
simplify let A.min.1 = 0 in...
new let A.min.1.s = (undefined) in ... 0 ...
simplify let A.extent.2 = 7 in...
new let A.extent.2.s = (undefined) in ... 7 ...
simplify let A.min.2 = 0 in...
new let A.min.2.s = (undefined) in ... 0 ...
simplify let A.extent.3 = 1 in...
new let A.extent.3.s = (undefined) in ... 1 ...
simplify let A.min.3 = 0 in...
new let A.min.3.s = (undefined) in ... 0 ...
simplify let A.extent.4 = 1 in...
new let A.extent.4.s = (undefined) in ... 1 ...
simplify let A.min.4 = 0 in...
new let A.min.4.s = (undefined) in ... 0 ...
simplify let A.extent.5 = 1 in...
new let A.extent.5.s = (undefined) in ... 1 ...
simplify let A.min.5 = 0 in...
new let A.min.5.s = (undefined) in ... 0 ...
simplify let A.extent.6 = 1 in...
new let A.extent.6.s = (undefined) in ... 1 ...
simplify let A.min.6 = 0 in...
new let A.min.6.s = (undefined) in ... 0 ...
simplify let A.extent.7 = 1 in...
new let A.extent.7.s = (undefined) in ... 1 ...
simplify let A.min.7 = 0 in...
new let A.min.7.s = (undefined) in ... 0 ...
simplify let A.extent.8 = 1 in...
new let A.extent.8.s = (undefined) in ... 1 ...
simplify let A.min.8 = 0 in...
new let A.min.8.s = (undefined) in ... 0 ...
simplify let A.extent.9 = 1 in...
new let A.extent.9.s = (undefined) in ... 1 ...
simplify let A.min.9 = 0 in...
new let A.min.9.s = (undefined) in ... 0 ...
simplify let A.extent.10 = 1 in...
new let A.extent.10.s = (undefined) in ... 1 ...
simplify let A.min.10 = 0 in...
new let A.min.10.s = (undefined) in ... 0 ...
simplify let A.extent.11 = 1 in...
new let A.extent.11.s = (undefined) in ... 1 ...
simplify let A.min.11 = 0 in...
new let A.min.11.s = (undefined) in ... 0 ...
simplify let A.extent.12 = 1 in...
new let A.extent.12.s = (undefined) in ... 1 ...
simplify let A.min.12 = 0 in...
new let A.min.12.s = (undefined) in ... 0 ...
simplify let A.extent.13 = 1 in...
new let A.extent.13.s = (undefined) in ... 1 ...
simplify let A.min.13 = 0 in...
new let A.min.13.s = (undefined) in ... 0 ...
simplify let A.extent.14 = 1 in...
new let A.extent.14.s = (undefined) in ... 1 ...
simplify let A.min.14 = 0 in...
new let A.min.14.s = (undefined) in ... 0 ...
simplify let A.stride.0 = 1 in...
new let A.stride.0.s = (undefined) in ... 1 ...
simplify let A.stride.1 = 8 in...
new let A.stride.1.s = (undefined) in ... 8 ...
simplify let A.stride.2 = 56 in...
new let A.stride.2.s = (undefined) in ... 56 ...
simplify let A.stride.3 = 392 in...
new let A.stride.3.s = (undefined) in ... 392 ...
simplify let A.stride.4 = 392 in...
new let A.stride.4.s = (undefined) in ... 392 ...
simplify let A.stride.5 = 392 in...
new let A.stride.5.s = (undefined) in ... 392 ...
simplify let A.stride.6 = 392 in...
new let A.stride.6.s = (undefined) in ... 392 ...
simplify let A.stride.7 = 392 in...
new let A.stride.7.s = (undefined) in ... 392 ...
simplify let A.stride.8 = 392 in...
new let A.stride.8.s = (undefined) in ... 392 ...
simplify let A.stride.9 = 392 in...
new let A.stride.9.s = (undefined) in ... 392 ...
simplify let A.stride.10 = 392 in...
new let A.stride.10.s = (undefined) in ... 392 ...
simplify let A.stride.11 = 392 in...
new let A.stride.11.s = (undefined) in ... 392 ...
simplify let A.stride.12 = 392 in...
new let A.stride.12.s = (undefined) in ... 392 ...
simplify let A.stride.13 = 392 in...
new let A.stride.13.s = (undefined) in ... 392 ...
simplify let A.stride.14 = 392 in...
new let A.stride.14.s = (undefined) in ... 392 ...
simplify let t50 = ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0) in...
simplify let A.buffer = (let t50 = ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0) in ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))alloca(size_of_halide_buffer_t()), t50, ((void *))A, (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 15, t50, (uint64)0)) in...
simplify let B.extent.0 = 8 in...
new let B.extent.0.s = (undefined) in ... 8 ...
simplify let B.min.0 = 0 in...
new let B.min.0.s = (undefined) in ... 0 ...
simplify let B.extent.1 = 7 in...
new let B.extent.1.s = (undefined) in ... 7 ...
simplify let B.min.1 = 0 in...
new let B.min.1.s = (undefined) in ... 0 ...
simplify let B.extent.2 = 7 in...
new let B.extent.2.s = (undefined) in ... 7 ...
simplify let B.min.2 = 0 in...
new let B.min.2.s = (undefined) in ... 0 ...
simplify let B.extent.3 = 1 in...
new let B.extent.3.s = (undefined) in ... 1 ...
simplify let B.min.3 = 0 in...
new let B.min.3.s = (undefined) in ... 0 ...
simplify let B.extent.4 = 1 in...
new let B.extent.4.s = (undefined) in ... 1 ...
simplify let B.min.4 = 0 in...
new let B.min.4.s = (undefined) in ... 0 ...
simplify let B.extent.5 = 1 in...
new let B.extent.5.s = (undefined) in ... 1 ...
simplify let B.min.5 = 0 in...
new let B.min.5.s = (undefined) in ... 0 ...
simplify let B.extent.6 = 1 in...
new let B.extent.6.s = (undefined) in ... 1 ...
simplify let B.min.6 = 0 in...
new let B.min.6.s = (undefined) in ... 0 ...
simplify let B.extent.7 = 1 in...
new let B.extent.7.s = (undefined) in ... 1 ...
simplify let B.min.7 = 0 in...
new let B.min.7.s = (undefined) in ... 0 ...
simplify let B.extent.8 = 1 in...
new let B.extent.8.s = (undefined) in ... 1 ...
simplify let B.min.8 = 0 in...
new let B.min.8.s = (undefined) in ... 0 ...
simplify let B.extent.9 = 1 in...
new let B.extent.9.s = (undefined) in ... 1 ...
simplify let B.min.9 = 0 in...
new let B.min.9.s = (undefined) in ... 0 ...
simplify let B.extent.10 = 1 in...
new let B.extent.10.s = (undefined) in ... 1 ...
simplify let B.min.10 = 0 in...
new let B.min.10.s = (undefined) in ... 0 ...
simplify let B.extent.11 = 1 in...
new let B.extent.11.s = (undefined) in ... 1 ...
simplify let B.min.11 = 0 in...
new let B.min.11.s = (undefined) in ... 0 ...
simplify let B.extent.12 = 1 in...
new let B.extent.12.s = (undefined) in ... 1 ...
simplify let B.min.12 = 0 in...
new let B.min.12.s = (undefined) in ... 0 ...
simplify let B.extent.13 = 1 in...
new let B.extent.13.s = (undefined) in ... 1 ...
simplify let B.min.13 = 0 in...
new let B.min.13.s = (undefined) in ... 0 ...
simplify let B.extent.14 = 1 in...
new let B.extent.14.s = (undefined) in ... 1 ...
simplify let B.min.14 = 0 in...
new let B.min.14.s = (undefined) in ... 0 ...
simplify let B.stride.0 = 1 in...
new let B.stride.0.s = (undefined) in ... 1 ...
simplify let B.stride.1 = 8 in...
new let B.stride.1.s = (undefined) in ... 8 ...
simplify let B.stride.2 = 56 in...
new let B.stride.2.s = (undefined) in ... 56 ...
simplify let B.stride.3 = 392 in...
new let B.stride.3.s = (undefined) in ... 392 ...
simplify let B.stride.4 = 392 in...
new let B.stride.4.s = (undefined) in ... 392 ...
simplify let B.stride.5 = 392 in...
new let B.stride.5.s = (undefined) in ... 392 ...
simplify let B.stride.6 = 392 in...
new let B.stride.6.s = (undefined) in ... 392 ...
simplify let B.stride.7 = 392 in...
new let B.stride.7.s = (undefined) in ... 392 ...
simplify let B.stride.8 = 392 in...
new let B.stride.8.s = (undefined) in ... 392 ...
simplify let B.stride.9 = 392 in...
new let B.stride.9.s = (undefined) in ... 392 ...
simplify let B.stride.10 = 392 in...
new let B.stride.10.s = (undefined) in ... 392 ...
simplify let B.stride.11 = 392 in...
new let B.stride.11.s = (undefined) in ... 392 ...
simplify let B.stride.12 = 392 in...
new let B.stride.12.s = (undefined) in ... 392 ...
simplify let B.stride.13 = 392 in...
new let B.stride.13.s = (undefined) in ... 392 ...
simplify let B.stride.14 = 392 in...
new let B.stride.14.s = (undefined) in ... 392 ...
simplify let t49 = ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0) in...
simplify let B.buffer = (let t49 = ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0) in ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))alloca(size_of_halide_buffer_t()), t49, ((void *))B, (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 15, t49, (uint64)0)) in...
simplify let C.extent.0 = 8 in...
new let C.extent.0.s = (undefined) in ... 8 ...
simplify let C.min.0 = 0 in...
new let C.min.0.s = (undefined) in ... 0 ...
simplify let C.extent.1 = 7 in...
new let C.extent.1.s = (undefined) in ... 7 ...
simplify let C.min.1 = 0 in...
new let C.min.1.s = (undefined) in ... 0 ...
simplify let C.extent.2 = 7 in...
new let C.extent.2.s = (undefined) in ... 7 ...
simplify let C.min.2 = 0 in...
new let C.min.2.s = (undefined) in ... 0 ...
simplify let C.extent.3 = 1 in...
new let C.extent.3.s = (undefined) in ... 1 ...
simplify let C.min.3 = 0 in...
new let C.min.3.s = (undefined) in ... 0 ...
simplify let C.extent.4 = 1 in...
new let C.extent.4.s = (undefined) in ... 1 ...
simplify let C.min.4 = 0 in...
new let C.min.4.s = (undefined) in ... 0 ...
simplify let C.extent.5 = 1 in...
new let C.extent.5.s = (undefined) in ... 1 ...
simplify let C.min.5 = 0 in...
new let C.min.5.s = (undefined) in ... 0 ...
simplify let C.extent.6 = 1 in...
new let C.extent.6.s = (undefined) in ... 1 ...
simplify let C.min.6 = 0 in...
new let C.min.6.s = (undefined) in ... 0 ...
simplify let C.extent.7 = 1 in...
new let C.extent.7.s = (undefined) in ... 1 ...
simplify let C.min.7 = 0 in...
new let C.min.7.s = (undefined) in ... 0 ...
simplify let C.extent.8 = 1 in...
new let C.extent.8.s = (undefined) in ... 1 ...
simplify let C.min.8 = 0 in...
new let C.min.8.s = (undefined) in ... 0 ...
simplify let C.extent.9 = 1 in...
new let C.extent.9.s = (undefined) in ... 1 ...
simplify let C.min.9 = 0 in...
new let C.min.9.s = (undefined) in ... 0 ...
simplify let C.extent.10 = 1 in...
new let C.extent.10.s = (undefined) in ... 1 ...
simplify let C.min.10 = 0 in...
new let C.min.10.s = (undefined) in ... 0 ...
simplify let C.extent.11 = 1 in...
new let C.extent.11.s = (undefined) in ... 1 ...
simplify let C.min.11 = 0 in...
new let C.min.11.s = (undefined) in ... 0 ...
simplify let C.extent.12 = 1 in...
new let C.extent.12.s = (undefined) in ... 1 ...
simplify let C.min.12 = 0 in...
new let C.min.12.s = (undefined) in ... 0 ...
simplify let C.extent.13 = 1 in...
new let C.extent.13.s = (undefined) in ... 1 ...
simplify let C.min.13 = 0 in...
new let C.min.13.s = (undefined) in ... 0 ...
simplify let C.extent.14 = 1 in...
new let C.extent.14.s = (undefined) in ... 1 ...
simplify let C.min.14 = 0 in...
new let C.min.14.s = (undefined) in ... 0 ...
simplify let C.stride.0 = 1 in...
new let C.stride.0.s = (undefined) in ... 1 ...
simplify let C.stride.1 = 8 in...
new let C.stride.1.s = (undefined) in ... 8 ...
simplify let C.stride.2 = 56 in...
new let C.stride.2.s = (undefined) in ... 56 ...
simplify let C.stride.3 = 392 in...
new let C.stride.3.s = (undefined) in ... 392 ...
simplify let C.stride.4 = 392 in...
new let C.stride.4.s = (undefined) in ... 392 ...
simplify let C.stride.5 = 392 in...
new let C.stride.5.s = (undefined) in ... 392 ...
simplify let C.stride.6 = 392 in...
new let C.stride.6.s = (undefined) in ... 392 ...
simplify let C.stride.7 = 392 in...
new let C.stride.7.s = (undefined) in ... 392 ...
simplify let C.stride.8 = 392 in...
new let C.stride.8.s = (undefined) in ... 392 ...
simplify let C.stride.9 = 392 in...
new let C.stride.9.s = (undefined) in ... 392 ...
simplify let C.stride.10 = 392 in...
new let C.stride.10.s = (undefined) in ... 392 ...
simplify let C.stride.11 = 392 in...
new let C.stride.11.s = (undefined) in ... 392 ...
simplify let C.stride.12 = 392 in...
new let C.stride.12.s = (undefined) in ... 392 ...
simplify let C.stride.13 = 392 in...
new let C.stride.13.s = (undefined) in ... 392 ...
simplify let C.stride.14 = 392 in...
new let C.stride.14.s = (undefined) in ... 392 ...
simplify let t48 = ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0) in...
simplify let C.buffer = (let t48 = ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0, 0, 1, 392, 0) in ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))alloca(size_of_halide_buffer_t()), t48, ((void *))C, (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 15, t48, (uint64)0)) in...
simplify let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36) in...
simplify let var.W_im.load.addr.0 = (((A.s0.my.__thread_id_x*4) + A.s0.co.__block_id_x)*8) in...
simplify let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30)) in...
simplify let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((A.s0.mx.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4) in...
simplify let t5 = (float32)C[((A.s0.yy_xx*56) + ((A.s0.yyy_xxx*8) + A.s0.cooo))] in...
simplify let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49) in...
simplify let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((A.s0.mx.__thread_id_y*16) + ((A.s0.my.__thread_id_x*4) + A.s0.co.__block_id_x)))*8) in...
simplify let Out.store.t0 = 0 in...
new let Out.store.t0.s = (undefined) in ... 0 ...
Lowering after second simplifcation:
assert(((uint64)reinterpret(((buffer_t *))W.buffer) != (uint64)0), halide_error_buffer_argument_is_null("W"))
assert(((uint64)reinterpret(((buffer_t *))P.buffer) != (uint64)0), halide_error_buffer_argument_is_null("P"))
assert(((uint64)reinterpret(((buffer_t *))Out.buffer) != (uint64)0), halide_error_buffer_argument_is_null("Out"))
let Out = ((void *))_halide_buffer_get_host(((buffer_t *))Out.buffer)
let Out.type = (uint32)_halide_buffer_get_type(((buffer_t *))Out.buffer)
let Out.dimensions = _halide_buffer_get_dimensions(((buffer_t *))Out.buffer)
let Out.min.0 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 0)
let Out.extent.0 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0)
let Out.stride.0 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0)
let Out.min.1 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 1)
let Out.extent.1 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1)
let Out.stride.1 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1)
let Out.min.2 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 2)
let Out.extent.2 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2)
let Out.stride.2 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2)
let Out.min.3 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 3)
let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3)
let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3)
let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4)
let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)
let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert((Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<Default_GPU> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<Default_GPU> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<Default_GPU> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<Default_GPU> (A.s0.mx.__thread_id_y, 0, 4) {
    gpu_thread<Default_GPU> (A.s0.my.__thread_id_x, 0, 4) {
     allocate W_im_buf[float32 * 8 * 36] in Register
     allocate P_im_buf[float32 * 4 * 45] in Register
     allocate A[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
     allocate B[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
     allocate C[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((A.s0.my.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((A.s0.mx.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           vectorized (A.s0.cooo, 0, 8) {
            punrolled (A.s0.cii, 0, 4) {
             C[((A.s0.yy_xx*56) + ((A.s0.yyy_xxx*8) + A.s0.cooo))] = ((let t5 = C[((A.s0.yy_xx*56) + ((A.s0.yyy_xxx*8) + A.s0.cooo))] in t5) + (P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)]*W_im_buf[((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8) + A.s0.cooo)]))
            }
           }
          }
         }
        }
       }
      }
     }
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((A.s0.mx.__thread_id_y*16) + ((A.s0.my.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
    }
   }
  }
 }
}


Reduce prefetch dimension...
Lowering after reduce prefetch dimension:
assert(((uint64)reinterpret(((buffer_t *))W.buffer) != (uint64)0), halide_error_buffer_argument_is_null("W"))
assert(((uint64)reinterpret(((buffer_t *))P.buffer) != (uint64)0), halide_error_buffer_argument_is_null("P"))
assert(((uint64)reinterpret(((buffer_t *))Out.buffer) != (uint64)0), halide_error_buffer_argument_is_null("Out"))
let Out = ((void *))_halide_buffer_get_host(((buffer_t *))Out.buffer)
let Out.type = (uint32)_halide_buffer_get_type(((buffer_t *))Out.buffer)
let Out.dimensions = _halide_buffer_get_dimensions(((buffer_t *))Out.buffer)
let Out.min.0 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 0)
let Out.extent.0 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0)
let Out.stride.0 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0)
let Out.min.1 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 1)
let Out.extent.1 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1)
let Out.stride.1 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1)
let Out.min.2 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 2)
let Out.extent.2 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2)
let Out.stride.2 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2)
let Out.min.3 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 3)
let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3)
let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3)
let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4)
let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)
let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert((Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<Default_GPU> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<Default_GPU> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<Default_GPU> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<Default_GPU> (A.s0.mx.__thread_id_y, 0, 4) {
    gpu_thread<Default_GPU> (A.s0.my.__thread_id_x, 0, 4) {
     allocate W_im_buf[float32 * 8 * 36] in Register
     allocate P_im_buf[float32 * 4 * 45] in Register
     allocate A[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
     allocate B[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
     allocate C[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((A.s0.my.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((A.s0.mx.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           vectorized (A.s0.cooo, 0, 8) {
            punrolled (A.s0.cii, 0, 4) {
             C[((A.s0.yy_xx*56) + ((A.s0.yyy_xxx*8) + A.s0.cooo))] = ((let t5 = C[((A.s0.yy_xx*56) + ((A.s0.yyy_xxx*8) + A.s0.cooo))] in t5) + (P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)]*W_im_buf[((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8) + A.s0.cooo)]))
            }
           }
          }
         }
        }
       }
      }
     }
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((A.s0.mx.__thread_id_y*16) + ((A.s0.my.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
    }
   }
  }
 }
}

Simplifying correlated differences...
Lowering after simplifying correlated differences:
assert(((uint64)reinterpret(((buffer_t *))W.buffer) != (uint64)0), halide_error_buffer_argument_is_null("W"))
assert(((uint64)reinterpret(((buffer_t *))P.buffer) != (uint64)0), halide_error_buffer_argument_is_null("P"))
assert(((uint64)reinterpret(((buffer_t *))Out.buffer) != (uint64)0), halide_error_buffer_argument_is_null("Out"))
let Out = ((void *))_halide_buffer_get_host(((buffer_t *))Out.buffer)
let Out.type = (uint32)_halide_buffer_get_type(((buffer_t *))Out.buffer)
let Out.dimensions = _halide_buffer_get_dimensions(((buffer_t *))Out.buffer)
let Out.min.0 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 0)
let Out.extent.0 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0)
let Out.stride.0 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0)
let Out.min.1 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 1)
let Out.extent.1 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1)
let Out.stride.1 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1)
let Out.min.2 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 2)
let Out.extent.2 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2)
let Out.stride.2 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2)
let Out.min.3 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 3)
let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3)
let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3)
let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4)
let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)
let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert((Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<Default_GPU> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<Default_GPU> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<Default_GPU> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<Default_GPU> (A.s0.mx.__thread_id_y, 0, 4) {
    gpu_thread<Default_GPU> (A.s0.my.__thread_id_x, 0, 4) {
     allocate W_im_buf[float32 * 8 * 36] in Register
     allocate P_im_buf[float32 * 4 * 45] in Register
     allocate A[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
     allocate B[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
     allocate C[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((A.s0.my.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((A.s0.mx.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           vectorized (A.s0.cooo, 0, 8) {
            punrolled (A.s0.cii, 0, 4) {
             C[((A.s0.yy_xx*56) + ((A.s0.yyy_xxx*8) + A.s0.cooo))] = ((let t5 = C[((A.s0.yy_xx*56) + ((A.s0.yyy_xxx*8) + A.s0.cooo))] in t5) + (P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)]*W_im_buf[((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8) + A.s0.cooo)]))
            }
           }
          }
         }
        }
       }
      }
     }
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((A.s0.mx.__thread_id_y*16) + ((A.s0.my.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
    }
   }
  }
 }
}

Vectorizing...
Lowering after vectorizing:
assert(((uint64)reinterpret(((buffer_t *))W.buffer) != (uint64)0), halide_error_buffer_argument_is_null("W"))
assert(((uint64)reinterpret(((buffer_t *))P.buffer) != (uint64)0), halide_error_buffer_argument_is_null("P"))
assert(((uint64)reinterpret(((buffer_t *))Out.buffer) != (uint64)0), halide_error_buffer_argument_is_null("Out"))
let Out = ((void *))_halide_buffer_get_host(((buffer_t *))Out.buffer)
let Out.type = (uint32)_halide_buffer_get_type(((buffer_t *))Out.buffer)
let Out.dimensions = _halide_buffer_get_dimensions(((buffer_t *))Out.buffer)
let Out.min.0 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 0)
let Out.extent.0 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0)
let Out.stride.0 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0)
let Out.min.1 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 1)
let Out.extent.1 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1)
let Out.stride.1 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1)
let Out.min.2 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 2)
let Out.extent.2 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2)
let Out.stride.2 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2)
let Out.min.3 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 3)
let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3)
let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3)
let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4)
let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)
let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert((Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<Default_GPU> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<Default_GPU> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<Default_GPU> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<Default_GPU> (A.s0.mx.__thread_id_y, 0, 4) {
    gpu_thread<Default_GPU> (A.s0.my.__thread_id_x, 0, 4) {
     allocate W_im_buf[float32 * 8 * 36] in Register
     allocate P_im_buf[float32 * 4 * 45] in Register
     allocate A[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
     allocate B[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
     allocate C[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((A.s0.my.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((A.s0.mx.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[(x8((A.s0.yy_xx*56)) + (x8((A.s0.yyy_xxx*8)) + ramp(0, 1, 8)))] = ((let t5.x8 = C[(x8((A.s0.yy_xx*56)) + (x8((A.s0.yyy_xxx*8)) + ramp(0, 1, 8)))] in t5.x8) + (x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])*W_im_buf[(x8((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8)) + ramp(0, 1, 8))]))
           }
          }
         }
        }
       }
      }
     }
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((A.s0.mx.__thread_id_y*16) + ((A.s0.my.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
    }
   }
  }
 }
}


simplify let Out = ((void *))_halide_buffer_get_host(((buffer_t *))Out.buffer) in...
simplify let Out.type = (uint32)_halide_buffer_get_type(((buffer_t *))Out.buffer) in...
simplify let Out.dimensions = _halide_buffer_get_dimensions(((buffer_t *))Out.buffer) in...
simplify let Out.min.0 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 0) in...
simplify let Out.extent.0 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0) in...
simplify let Out.stride.0 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0) in...
simplify let Out.min.1 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 1) in...
simplify let Out.extent.1 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1) in...
simplify let Out.stride.1 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1) in...
simplify let Out.min.2 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 2) in...
simplify let Out.extent.2 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2) in...
simplify let Out.stride.2 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2) in...
simplify let Out.min.3 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 3) in...
simplify let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3) in...
simplify let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3) in...
simplify let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4) in...
simplify let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4) in...
simplify let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4) in...
simplify let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5) in...
simplify let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5) in...
simplify let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5) in...
simplify let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6) in...
simplify let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6) in...
simplify let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6) in...
simplify let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7) in...
simplify let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7) in...
simplify let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7) in...
simplify let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8) in...
simplify let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8) in...
simplify let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8) in...
simplify let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9) in...
simplify let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9) in...
simplify let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9) in...
simplify let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer) in...
simplify let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer) in...
simplify let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer) in...
simplify let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0) in...
simplify let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0) in...
simplify let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0) in...
simplify let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1) in...
simplify let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1) in...
simplify let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1) in...
simplify let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer) in...
simplify let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer) in...
simplify let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer) in...
simplify let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0) in...
simplify let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0) in...
simplify let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0) in...
simplify let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1) in...
simplify let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1) in...
simplify let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1) in...
simplify let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0)) in...
simplify let Out.total_extent.2 = ((int64)Out.total_extent.1*int64(Out.extent.2)) in...
simplify let Out.total_extent.3 = ((int64)Out.total_extent.2*int64(Out.extent.3)) in...
simplify let Out.total_extent.4 = ((int64)Out.total_extent.3*int64(Out.extent.4)) in...
simplify let Out.total_extent.5 = ((int64)Out.total_extent.4*int64(Out.extent.5)) in...
simplify let Out.total_extent.6 = ((int64)Out.total_extent.5*int64(Out.extent.6)) in...
simplify let Out.total_extent.7 = ((int64)Out.total_extent.6*int64(Out.extent.7)) in...
simplify let Out.total_extent.8 = ((int64)Out.total_extent.7*int64(Out.extent.8)) in...
simplify let Out.total_extent.9 = ((int64)Out.total_extent.8*int64(Out.extent.9)) in...
simplify let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0)) in...
simplify let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0)) in...
simplify let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36) in...
simplify let var.W_im.load.addr.0 = (((A.s0.my.__thread_id_x*4) + A.s0.co.__block_id_x)*8) in...
simplify let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30)) in...
simplify let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((A.s0.mx.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4) in...
simplify let t5.x8 = (float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] in...
simplify let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49) in...
simplify let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((A.s0.mx.__thread_id_y*16) + ((A.s0.my.__thread_id_x*4) + A.s0.co.__block_id_x)))*8) in...
Lowering after simplify after vectorizing:
assert(((uint64)reinterpret(((buffer_t *))W.buffer) != (uint64)0), halide_error_buffer_argument_is_null("W"))
assert(((uint64)reinterpret(((buffer_t *))P.buffer) != (uint64)0), halide_error_buffer_argument_is_null("P"))
assert(((uint64)reinterpret(((buffer_t *))Out.buffer) != (uint64)0), halide_error_buffer_argument_is_null("Out"))
let Out = ((void *))_halide_buffer_get_host(((buffer_t *))Out.buffer)
let Out.type = (uint32)_halide_buffer_get_type(((buffer_t *))Out.buffer)
let Out.dimensions = _halide_buffer_get_dimensions(((buffer_t *))Out.buffer)
let Out.min.0 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 0)
let Out.extent.0 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0)
let Out.stride.0 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0)
let Out.min.1 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 1)
let Out.extent.1 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1)
let Out.stride.1 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1)
let Out.min.2 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 2)
let Out.extent.2 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2)
let Out.stride.2 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2)
let Out.min.3 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 3)
let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3)
let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3)
let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4)
let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)
let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert((Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<Default_GPU> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<Default_GPU> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<Default_GPU> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<Default_GPU> (A.s0.mx.__thread_id_y, 0, 4) {
    gpu_thread<Default_GPU> (A.s0.my.__thread_id_x, 0, 4) {
     allocate W_im_buf[float32 * 8 * 36] in Register
     allocate P_im_buf[float32 * 4 * 45] in Register
     allocate A[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
     allocate B[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
     allocate C[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((A.s0.my.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((A.s0.mx.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = ((let t5.x8 = C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] in t5.x8) + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((A.s0.mx.__thread_id_y*16) + ((A.s0.my.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
    }
   }
  }
 }
}


Combining channels ...
Lowering after combining channels:
assert(((uint64)reinterpret(((buffer_t *))W.buffer) != (uint64)0), halide_error_buffer_argument_is_null("W"))
assert(((uint64)reinterpret(((buffer_t *))P.buffer) != (uint64)0), halide_error_buffer_argument_is_null("P"))
assert(((uint64)reinterpret(((buffer_t *))Out.buffer) != (uint64)0), halide_error_buffer_argument_is_null("Out"))
let Out = ((void *))_halide_buffer_get_host(((buffer_t *))Out.buffer)
let Out.type = (uint32)_halide_buffer_get_type(((buffer_t *))Out.buffer)
let Out.dimensions = _halide_buffer_get_dimensions(((buffer_t *))Out.buffer)
let Out.min.0 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 0)
let Out.extent.0 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0)
let Out.stride.0 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0)
let Out.min.1 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 1)
let Out.extent.1 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1)
let Out.stride.1 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1)
let Out.min.2 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 2)
let Out.extent.2 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2)
let Out.stride.2 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2)
let Out.min.3 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 3)
let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3)
let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3)
let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4)
let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)
let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert((Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<Default_GPU> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<Default_GPU> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<Default_GPU> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<Default_GPU> (A.s0.mx.__thread_id_y, 0, 4) {
    gpu_thread<Default_GPU> (A.s0.my.__thread_id_x, 0, 4) {
     allocate W_im_buf[float32 * 8 * 36] in Register
     allocate P_im_buf[float32 * 4 * 45] in Register
     allocate A[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
     allocate B[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
     allocate C[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((A.s0.my.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((A.s0.mx.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = ((let t5.x8 = C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] in t5.x8) + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((A.s0.mx.__thread_id_y*16) + ((A.s0.my.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
    }
   }
  }
 }
}


Trimming loops to the region over which they do something...
TrimNoOps found gpu loop var: A.s0.n.__block_id_z
TrimNoOps found gpu loop var: A.s0.nn.__block_id_y
TrimNoOps found gpu loop var: A.s0.co.__block_id_x
TrimNoOps found gpu loop var: A.s0.mx.__thread_id_y
TrimNoOps found gpu loop var: A.s0.my.__thread_id_x


 ***** Trim no ops in loop over A.s0.cii
Considering store: C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = ((let t5.x8 = (float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] in t5.x8) + ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))




Input to CSE ((float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] == ((let t5.x8 = (float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] in t5.x8) + ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)]))))
After removing lets: ((float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] == ((float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)]))))
Include: ((float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] == ((float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))); should extract: 1
Include: (float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)]; should extract: 1
Include: x8((uint1)1); should extract: 0
Include: (uint1)1; should extract: 0
Include: ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8); should extract: 0
Include: (((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8); should extract: 0
Include: ((A.s0.yy_xx*7) + A.s0.yyy_xxx); should extract: 1
Include: (A.s0.yy_xx*7); should extract: 0
Include: A.s0.yy_xx; should extract: 0
Include: 7; should extract: 0
Include: A.s0.yyy_xxx; should extract: 0
Include: 8; should extract: 0
Include: 1; should extract: 0
Include: ((float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)]))); should extract: 1
Include: (float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)]; should extract: 1
Include: ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])); should extract: 1
Include: (float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]; should extract: 1
Include: x8((uint1)1); should extract: 0
Include: (uint1)1; should extract: 0
Include: ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8); should extract: 0
Include: (((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8); should extract: 0
Include: ((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii)); should extract: 1
Include: (A.s0.kx*12); should extract: 0
Include: A.s0.kx; should extract: 0
Include: 12; should extract: 0
Include: ((A.s0.ky*4) + A.s0.cii); should extract: 1
Include: (A.s0.ky*4); should extract: 0
Include: A.s0.ky; should extract: 0
Include: 4; should extract: 0
Include: A.s0.cii; should extract: 0
Include: 8; should extract: 0
Include: 1; should extract: 0
Include: x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)]); should extract: 1
Include: (float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)]; should extract: 1
Include: (uint1)1; should extract: 0
Include: ((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii); should extract: 1
Include: (((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4); should extract: 0
Include: ((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky)); should extract: 1
Include: (A.s0.kx*15); should extract: 0
Include: A.s0.kx; should extract: 0
Include: 15; should extract: 0
Include: ((A.s0.yyy_xxx*2) + A.s0.ky); should extract: 1
Include: (A.s0.yyy_xxx*2); should extract: 0
Include: A.s0.yyy_xxx; should extract: 0
Include: 2; should extract: 0
Include: A.s0.ky; should extract: 0
Include: 4; should extract: 0
Include: A.s0.cii; should extract: 0
Canonical form without lets ((float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] == ((float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)]))))
0: (uint1)1, 0
1: x8((uint1)1), 0
2: A.s0.yy_xx, 0
3: 7, 0
4: (A.s0.yy_xx*7), 0
5: A.s0.yyy_xxx, 0
6: ((A.s0.yy_xx*7) + A.s0.yyy_xxx), 1
7: 8, 0
8: (((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 0
9: 1, 0
10: ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8), 0
11: (float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)], 2
12: A.s0.kx, 0
13: 12, 0
14: (A.s0.kx*12), 0
15: A.s0.ky, 0
16: 4, 0
17: (A.s0.ky*4), 0
18: A.s0.cii, 0
19: ((A.s0.ky*4) + A.s0.cii), 1
20: ((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii)), 1
21: (((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 0
22: ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8), 0
23: (float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)], 1
24: 15, 0
25: (A.s0.kx*15), 0
26: 2, 0
27: (A.s0.yyy_xxx*2), 0
28: ((A.s0.yyy_xxx*2) + A.s0.ky), 1
29: ((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky)), 1
30: (((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4), 0
31: ((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii), 1
32: (float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)], 1
33: x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)]), 1
34: ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])), 1
35: ((float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)]))), 1
36: ((float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] == ((float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))), 1
With variables ((float32x8)t51 == ((float32x8)t51 + ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)]))))
With lets: (let t51 = (float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] in (t51 == (t51 + ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))))
simplify let t51 = (float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] in...
Anding condition over domain... (((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])) == x8(0.000000f))
Condition is now (uint1)0
Condition is (uint1)0
Simplified condition is (uint1)0


 ***** Trim no ops in loop over A.s0.ky
Considering store: C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = ((let t5.x8 = (float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] in t5.x8) + ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))




Input to CSE ((float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] == ((let t5.x8 = (float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] in t5.x8) + ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)]))))
After removing lets: ((float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] == ((float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)]))))
Include: ((float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] == ((float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))); should extract: 1
Include: (float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)]; should extract: 1
Include: x8((uint1)1); should extract: 0
Include: (uint1)1; should extract: 0
Include: ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8); should extract: 0
Include: (((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8); should extract: 0
Include: ((A.s0.yy_xx*7) + A.s0.yyy_xxx); should extract: 1
Include: (A.s0.yy_xx*7); should extract: 0
Include: A.s0.yy_xx; should extract: 0
Include: 7; should extract: 0
Include: A.s0.yyy_xxx; should extract: 0
Include: 8; should extract: 0
Include: 1; should extract: 0
Include: ((float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)]))); should extract: 1
Include: (float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)]; should extract: 1
Include: ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])); should extract: 1
Include: (float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]; should extract: 1
Include: x8((uint1)1); should extract: 0
Include: (uint1)1; should extract: 0
Include: ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8); should extract: 0
Include: (((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8); should extract: 0
Include: ((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii)); should extract: 1
Include: (A.s0.kx*12); should extract: 0
Include: A.s0.kx; should extract: 0
Include: 12; should extract: 0
Include: ((A.s0.ky*4) + A.s0.cii); should extract: 1
Include: (A.s0.ky*4); should extract: 0
Include: A.s0.ky; should extract: 0
Include: 4; should extract: 0
Include: A.s0.cii; should extract: 0
Include: 8; should extract: 0
Include: 1; should extract: 0
Include: x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)]); should extract: 1
Include: (float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)]; should extract: 1
Include: (uint1)1; should extract: 0
Include: ((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii); should extract: 1
Include: (((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4); should extract: 0
Include: ((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky)); should extract: 1
Include: (A.s0.kx*15); should extract: 0
Include: A.s0.kx; should extract: 0
Include: 15; should extract: 0
Include: ((A.s0.yyy_xxx*2) + A.s0.ky); should extract: 1
Include: (A.s0.yyy_xxx*2); should extract: 0
Include: A.s0.yyy_xxx; should extract: 0
Include: 2; should extract: 0
Include: A.s0.ky; should extract: 0
Include: 4; should extract: 0
Include: A.s0.cii; should extract: 0
Canonical form without lets ((float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] == ((float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)]))))
0: (uint1)1, 0
1: x8((uint1)1), 0
2: A.s0.yy_xx, 0
3: 7, 0
4: (A.s0.yy_xx*7), 0
5: A.s0.yyy_xxx, 0
6: ((A.s0.yy_xx*7) + A.s0.yyy_xxx), 1
7: 8, 0
8: (((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 0
9: 1, 0
10: ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8), 0
11: (float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)], 2
12: A.s0.kx, 0
13: 12, 0
14: (A.s0.kx*12), 0
15: A.s0.ky, 0
16: 4, 0
17: (A.s0.ky*4), 0
18: A.s0.cii, 0
19: ((A.s0.ky*4) + A.s0.cii), 1
20: ((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii)), 1
21: (((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 0
22: ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8), 0
23: (float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)], 1
24: 15, 0
25: (A.s0.kx*15), 0
26: 2, 0
27: (A.s0.yyy_xxx*2), 0
28: ((A.s0.yyy_xxx*2) + A.s0.ky), 1
29: ((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky)), 1
30: (((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4), 0
31: ((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii), 1
32: (float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)], 1
33: x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)]), 1
34: ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])), 1
35: ((float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)]))), 1
36: ((float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] == ((float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))), 1
With variables ((float32x8)t52 == ((float32x8)t52 + ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)]))))
With lets: (let t52 = (float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] in (t52 == (t52 + ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))))
simplify let t52 = (float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] in...
Anding condition over domain... (((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])) == x8(0.000000f))
Condition is now (uint1)0
About to relax over A.s0.cii : (uint1)0
Relaxed: (uint1)0
Condition is (uint1)0
Simplified condition is (uint1)0


 ***** Trim no ops in loop over A.s0.kx
Considering store: C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = ((let t5.x8 = (float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] in t5.x8) + ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))




Input to CSE ((float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] == ((let t5.x8 = (float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] in t5.x8) + ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)]))))
After removing lets: ((float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] == ((float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)]))))
Include: ((float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] == ((float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))); should extract: 1
Include: (float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)]; should extract: 1
Include: x8((uint1)1); should extract: 0
Include: (uint1)1; should extract: 0
Include: ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8); should extract: 0
Include: (((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8); should extract: 0
Include: ((A.s0.yy_xx*7) + A.s0.yyy_xxx); should extract: 1
Include: (A.s0.yy_xx*7); should extract: 0
Include: A.s0.yy_xx; should extract: 0
Include: 7; should extract: 0
Include: A.s0.yyy_xxx; should extract: 0
Include: 8; should extract: 0
Include: 1; should extract: 0
Include: ((float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)]))); should extract: 1
Include: (float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)]; should extract: 1
Include: ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])); should extract: 1
Include: (float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]; should extract: 1
Include: x8((uint1)1); should extract: 0
Include: (uint1)1; should extract: 0
Include: ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8); should extract: 0
Include: (((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8); should extract: 0
Include: ((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii)); should extract: 1
Include: (A.s0.kx*12); should extract: 0
Include: A.s0.kx; should extract: 0
Include: 12; should extract: 0
Include: ((A.s0.ky*4) + A.s0.cii); should extract: 1
Include: (A.s0.ky*4); should extract: 0
Include: A.s0.ky; should extract: 0
Include: 4; should extract: 0
Include: A.s0.cii; should extract: 0
Include: 8; should extract: 0
Include: 1; should extract: 0
Include: x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)]); should extract: 1
Include: (float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)]; should extract: 1
Include: (uint1)1; should extract: 0
Include: ((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii); should extract: 1
Include: (((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4); should extract: 0
Include: ((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky)); should extract: 1
Include: (A.s0.kx*15); should extract: 0
Include: A.s0.kx; should extract: 0
Include: 15; should extract: 0
Include: ((A.s0.yyy_xxx*2) + A.s0.ky); should extract: 1
Include: (A.s0.yyy_xxx*2); should extract: 0
Include: A.s0.yyy_xxx; should extract: 0
Include: 2; should extract: 0
Include: A.s0.ky; should extract: 0
Include: 4; should extract: 0
Include: A.s0.cii; should extract: 0
Canonical form without lets ((float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] == ((float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)]))))
0: (uint1)1, 0
1: x8((uint1)1), 0
2: A.s0.yy_xx, 0
3: 7, 0
4: (A.s0.yy_xx*7), 0
5: A.s0.yyy_xxx, 0
6: ((A.s0.yy_xx*7) + A.s0.yyy_xxx), 1
7: 8, 0
8: (((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 0
9: 1, 0
10: ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8), 0
11: (float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)], 2
12: A.s0.kx, 0
13: 12, 0
14: (A.s0.kx*12), 0
15: A.s0.ky, 0
16: 4, 0
17: (A.s0.ky*4), 0
18: A.s0.cii, 0
19: ((A.s0.ky*4) + A.s0.cii), 1
20: ((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii)), 1
21: (((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 0
22: ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8), 0
23: (float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)], 1
24: 15, 0
25: (A.s0.kx*15), 0
26: 2, 0
27: (A.s0.yyy_xxx*2), 0
28: ((A.s0.yyy_xxx*2) + A.s0.ky), 1
29: ((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky)), 1
30: (((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4), 0
31: ((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii), 1
32: (float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)], 1
33: x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)]), 1
34: ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])), 1
35: ((float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)]))), 1
36: ((float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] == ((float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))), 1
With variables ((float32x8)t53 == ((float32x8)t53 + ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)]))))
With lets: (let t53 = (float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] in (t53 == (t53 + ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))))
simplify let t53 = (float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] in...
Anding condition over domain... (((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])) == x8(0.000000f))
Condition is now (uint1)0
About to relax over A.s0.cii : (uint1)0
Relaxed: (uint1)0
About to relax over A.s0.ky : (uint1)0
Relaxed: (uint1)0
Condition is (uint1)0
Simplified condition is (uint1)0


 ***** Trim no ops in loop over A.s0.yyy_xxx
Considering store: C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = ((let t5.x8 = (float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] in t5.x8) + ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))




Input to CSE ((float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] == ((let t5.x8 = (float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] in t5.x8) + ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)]))))
After removing lets: ((float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] == ((float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)]))))
Include: ((float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] == ((float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))); should extract: 1
Include: (float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)]; should extract: 1
Include: x8((uint1)1); should extract: 0
Include: (uint1)1; should extract: 0
Include: ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8); should extract: 0
Include: (((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8); should extract: 0
Include: ((A.s0.yy_xx*7) + A.s0.yyy_xxx); should extract: 1
Include: (A.s0.yy_xx*7); should extract: 0
Include: A.s0.yy_xx; should extract: 0
Include: 7; should extract: 0
Include: A.s0.yyy_xxx; should extract: 0
Include: 8; should extract: 0
Include: 1; should extract: 0
Include: ((float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)]))); should extract: 1
Include: (float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)]; should extract: 1
Include: ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])); should extract: 1
Include: (float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]; should extract: 1
Include: x8((uint1)1); should extract: 0
Include: (uint1)1; should extract: 0
Include: ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8); should extract: 0
Include: (((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8); should extract: 0
Include: ((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii)); should extract: 1
Include: (A.s0.kx*12); should extract: 0
Include: A.s0.kx; should extract: 0
Include: 12; should extract: 0
Include: ((A.s0.ky*4) + A.s0.cii); should extract: 1
Include: (A.s0.ky*4); should extract: 0
Include: A.s0.ky; should extract: 0
Include: 4; should extract: 0
Include: A.s0.cii; should extract: 0
Include: 8; should extract: 0
Include: 1; should extract: 0
Include: x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)]); should extract: 1
Include: (float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)]; should extract: 1
Include: (uint1)1; should extract: 0
Include: ((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii); should extract: 1
Include: (((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4); should extract: 0
Include: ((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky)); should extract: 1
Include: (A.s0.kx*15); should extract: 0
Include: A.s0.kx; should extract: 0
Include: 15; should extract: 0
Include: ((A.s0.yyy_xxx*2) + A.s0.ky); should extract: 1
Include: (A.s0.yyy_xxx*2); should extract: 0
Include: A.s0.yyy_xxx; should extract: 0
Include: 2; should extract: 0
Include: A.s0.ky; should extract: 0
Include: 4; should extract: 0
Include: A.s0.cii; should extract: 0
Canonical form without lets ((float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] == ((float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)]))))
0: (uint1)1, 0
1: x8((uint1)1), 0
2: A.s0.yy_xx, 0
3: 7, 0
4: (A.s0.yy_xx*7), 0
5: A.s0.yyy_xxx, 0
6: ((A.s0.yy_xx*7) + A.s0.yyy_xxx), 1
7: 8, 0
8: (((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 0
9: 1, 0
10: ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8), 0
11: (float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)], 2
12: A.s0.kx, 0
13: 12, 0
14: (A.s0.kx*12), 0
15: A.s0.ky, 0
16: 4, 0
17: (A.s0.ky*4), 0
18: A.s0.cii, 0
19: ((A.s0.ky*4) + A.s0.cii), 1
20: ((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii)), 1
21: (((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 0
22: ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8), 0
23: (float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)], 1
24: 15, 0
25: (A.s0.kx*15), 0
26: 2, 0
27: (A.s0.yyy_xxx*2), 0
28: ((A.s0.yyy_xxx*2) + A.s0.ky), 1
29: ((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky)), 1
30: (((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4), 0
31: ((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii), 1
32: (float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)], 1
33: x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)]), 1
34: ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])), 1
35: ((float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)]))), 1
36: ((float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] == ((float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))), 1
With variables ((float32x8)t54 == ((float32x8)t54 + ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)]))))
With lets: (let t54 = (float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] in (t54 == (t54 + ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))))
simplify let t54 = (float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] in...
Anding condition over domain... (((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])) == x8(0.000000f))
Condition is now (uint1)0
About to relax over A.s0.cii : (uint1)0
Relaxed: (uint1)0
About to relax over A.s0.ky : (uint1)0
Relaxed: (uint1)0
About to relax over A.s0.kx : (uint1)0
Relaxed: (uint1)0
Condition is (uint1)0
Simplified condition is (uint1)0


 ***** Trim no ops in loop over A.s0.yy_xx
Condition is (uint1)0
Simplified condition is (uint1)0


 ***** Trim no ops in loop over A.s0.ci
Condition is (uint1)0
Simplified condition is (uint1)0


 ***** Trim no ops in loop over A.s0.mk
About to relax over A.s0.ci : (uint1)0
Relaxed: (uint1)0
Condition is (uint1)0
Simplified condition is (uint1)0
Lowering after loop trimming:
assert(((uint64)reinterpret(((buffer_t *))W.buffer) != (uint64)0), halide_error_buffer_argument_is_null("W"))
assert(((uint64)reinterpret(((buffer_t *))P.buffer) != (uint64)0), halide_error_buffer_argument_is_null("P"))
assert(((uint64)reinterpret(((buffer_t *))Out.buffer) != (uint64)0), halide_error_buffer_argument_is_null("Out"))
let Out = ((void *))_halide_buffer_get_host(((buffer_t *))Out.buffer)
let Out.type = (uint32)_halide_buffer_get_type(((buffer_t *))Out.buffer)
let Out.dimensions = _halide_buffer_get_dimensions(((buffer_t *))Out.buffer)
let Out.min.0 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 0)
let Out.extent.0 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0)
let Out.stride.0 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0)
let Out.min.1 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 1)
let Out.extent.1 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1)
let Out.stride.1 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1)
let Out.min.2 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 2)
let Out.extent.2 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2)
let Out.stride.2 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2)
let Out.min.3 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 3)
let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3)
let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3)
let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4)
let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)
let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert((Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<Default_GPU> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<Default_GPU> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<Default_GPU> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<Default_GPU> (A.s0.mx.__thread_id_y, 0, 4) {
    gpu_thread<Default_GPU> (A.s0.my.__thread_id_x, 0, 4) {
     allocate W_im_buf[float32 * 8 * 36] in Register
     allocate P_im_buf[float32 * 4 * 45] in Register
     allocate A[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
     allocate B[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
     allocate C[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((A.s0.my.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((A.s0.mx.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = ((let t5.x8 = C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] in t5.x8) + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((A.s0.mx.__thread_id_y*16) + ((A.s0.my.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
    }
   }
  }
 }
}


Remove Lets and LetStmts in funcs with buffering or scattering...
simplify let Out = ((void *))_halide_buffer_get_host(((buffer_t *))Out.buffer) in...
simplify let Out.type = (uint32)_halide_buffer_get_type(((buffer_t *))Out.buffer) in...
simplify let Out.dimensions = _halide_buffer_get_dimensions(((buffer_t *))Out.buffer) in...
simplify let Out.min.0 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 0) in...
simplify let Out.extent.0 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0) in...
simplify let Out.stride.0 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0) in...
simplify let Out.min.1 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 1) in...
simplify let Out.extent.1 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1) in...
simplify let Out.stride.1 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1) in...
simplify let Out.min.2 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 2) in...
simplify let Out.extent.2 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2) in...
simplify let Out.stride.2 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2) in...
simplify let Out.min.3 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 3) in...
simplify let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3) in...
simplify let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3) in...
simplify let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4) in...
simplify let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4) in...
simplify let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4) in...
simplify let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5) in...
simplify let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5) in...
simplify let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5) in...
simplify let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6) in...
simplify let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6) in...
simplify let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6) in...
simplify let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7) in...
simplify let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7) in...
simplify let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7) in...
simplify let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8) in...
simplify let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8) in...
simplify let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8) in...
simplify let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9) in...
simplify let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9) in...
simplify let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9) in...
simplify let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer) in...
simplify let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer) in...
simplify let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer) in...
simplify let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0) in...
simplify let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0) in...
simplify let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0) in...
simplify let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1) in...
simplify let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1) in...
simplify let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1) in...
simplify let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer) in...
simplify let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer) in...
simplify let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer) in...
simplify let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0) in...
simplify let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0) in...
simplify let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0) in...
simplify let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1) in...
simplify let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1) in...
simplify let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1) in...
simplify let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0)) in...
simplify let Out.total_extent.2 = ((int64)Out.total_extent.1*int64(Out.extent.2)) in...
simplify let Out.total_extent.3 = ((int64)Out.total_extent.2*int64(Out.extent.3)) in...
simplify let Out.total_extent.4 = ((int64)Out.total_extent.3*int64(Out.extent.4)) in...
simplify let Out.total_extent.5 = ((int64)Out.total_extent.4*int64(Out.extent.5)) in...
simplify let Out.total_extent.6 = ((int64)Out.total_extent.5*int64(Out.extent.6)) in...
simplify let Out.total_extent.7 = ((int64)Out.total_extent.6*int64(Out.extent.7)) in...
simplify let Out.total_extent.8 = ((int64)Out.total_extent.7*int64(Out.extent.8)) in...
simplify let Out.total_extent.9 = ((int64)Out.total_extent.8*int64(Out.extent.9)) in...
simplify let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0)) in...
simplify let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0)) in...
simplify let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36) in...
simplify let var.W_im.load.addr.0 = (((A.s0.my.__thread_id_x*4) + A.s0.co.__block_id_x)*8) in...
simplify let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30)) in...
simplify let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((A.s0.mx.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4) in...
simplify let t5.x8 = (float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] in...
simplify let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49) in...
simplify let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((A.s0.mx.__thread_id_y*16) + ((A.s0.my.__thread_id_x*4) + A.s0.co.__block_id_x)))*8) in...
Lowering after removing Lets and LetStmts in funcs with buffering or scattering:
assert(((uint64)reinterpret(((buffer_t *))W.buffer) != (uint64)0), halide_error_buffer_argument_is_null("W"))
assert(((uint64)reinterpret(((buffer_t *))P.buffer) != (uint64)0), halide_error_buffer_argument_is_null("P"))
assert(((uint64)reinterpret(((buffer_t *))Out.buffer) != (uint64)0), halide_error_buffer_argument_is_null("Out"))
let Out = ((void *))_halide_buffer_get_host(((buffer_t *))Out.buffer)
let Out.type = (uint32)_halide_buffer_get_type(((buffer_t *))Out.buffer)
let Out.dimensions = _halide_buffer_get_dimensions(((buffer_t *))Out.buffer)
let Out.min.0 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 0)
let Out.extent.0 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0)
let Out.stride.0 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0)
let Out.min.1 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 1)
let Out.extent.1 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1)
let Out.stride.1 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1)
let Out.min.2 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 2)
let Out.extent.2 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2)
let Out.stride.2 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2)
let Out.min.3 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 3)
let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3)
let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3)
let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4)
let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)
let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert((Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<Default_GPU> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<Default_GPU> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<Default_GPU> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<Default_GPU> (A.s0.mx.__thread_id_y, 0, 4) {
    gpu_thread<Default_GPU> (A.s0.my.__thread_id_x, 0, 4) {
     allocate W_im_buf[float32 * 8 * 36] in Register
     allocate P_im_buf[float32 * 4 * 45] in Register
     allocate A[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
     allocate B[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
     allocate C[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((A.s0.my.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((A.s0.mx.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = ((let t5.x8 = C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] in t5.x8) + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((A.s0.mx.__thread_id_y*16) + ((A.s0.my.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
    }
   }
  }
 }
}


Scattering and buffering...
simplify let Out = ((void *))_halide_buffer_get_host(((buffer_t *))Out.buffer) in...
simplify let Out.type = (uint32)_halide_buffer_get_type(((buffer_t *))Out.buffer) in...
simplify let Out.dimensions = _halide_buffer_get_dimensions(((buffer_t *))Out.buffer) in...
simplify let Out.min.0 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 0) in...
simplify let Out.extent.0 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0) in...
simplify let Out.stride.0 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0) in...
simplify let Out.min.1 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 1) in...
simplify let Out.extent.1 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1) in...
simplify let Out.stride.1 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1) in...
simplify let Out.min.2 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 2) in...
simplify let Out.extent.2 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2) in...
simplify let Out.stride.2 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2) in...
simplify let Out.min.3 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 3) in...
simplify let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3) in...
simplify let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3) in...
simplify let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4) in...
simplify let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4) in...
simplify let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4) in...
simplify let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5) in...
simplify let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5) in...
simplify let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5) in...
simplify let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6) in...
simplify let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6) in...
simplify let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6) in...
simplify let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7) in...
simplify let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7) in...
simplify let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7) in...
simplify let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8) in...
simplify let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8) in...
simplify let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8) in...
simplify let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9) in...
simplify let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9) in...
simplify let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9) in...
simplify let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer) in...
simplify let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer) in...
simplify let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer) in...
simplify let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0) in...
simplify let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0) in...
simplify let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0) in...
simplify let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1) in...
simplify let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1) in...
simplify let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1) in...
simplify let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer) in...
simplify let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer) in...
simplify let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer) in...
simplify let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0) in...
simplify let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0) in...
simplify let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0) in...
simplify let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1) in...
simplify let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1) in...
simplify let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1) in...
simplify let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0)) in...
simplify let Out.total_extent.2 = ((int64)Out.total_extent.1*int64(Out.extent.2)) in...
simplify let Out.total_extent.3 = ((int64)Out.total_extent.2*int64(Out.extent.3)) in...
simplify let Out.total_extent.4 = ((int64)Out.total_extent.3*int64(Out.extent.4)) in...
simplify let Out.total_extent.5 = ((int64)Out.total_extent.4*int64(Out.extent.5)) in...
simplify let Out.total_extent.6 = ((int64)Out.total_extent.5*int64(Out.extent.6)) in...
simplify let Out.total_extent.7 = ((int64)Out.total_extent.6*int64(Out.extent.7)) in...
simplify let Out.total_extent.8 = ((int64)Out.total_extent.7*int64(Out.extent.8)) in...
simplify let Out.total_extent.9 = ((int64)Out.total_extent.8*int64(Out.extent.9)) in...
simplify let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0)) in...
simplify let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0)) in...
simplify let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36) in...
simplify let var.W_im.load.addr.0 = (((A.s0.my.__thread_id_x*4) + A.s0.co.__block_id_x)*8) in...
simplify let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30)) in...
simplify let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((A.s0.mx.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4) in...
simplify let t5.x8 = (float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] in...
simplify let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49) in...
simplify let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((A.s0.mx.__thread_id_y*16) + ((A.s0.my.__thread_id_x*4) + A.s0.co.__block_id_x)))*8) in...
Lowering after Scattering and buffering:
assert(((uint64)reinterpret(((buffer_t *))W.buffer) != (uint64)0), halide_error_buffer_argument_is_null("W"))
assert(((uint64)reinterpret(((buffer_t *))P.buffer) != (uint64)0), halide_error_buffer_argument_is_null("P"))
assert(((uint64)reinterpret(((buffer_t *))Out.buffer) != (uint64)0), halide_error_buffer_argument_is_null("Out"))
let Out = ((void *))_halide_buffer_get_host(((buffer_t *))Out.buffer)
let Out.type = (uint32)_halide_buffer_get_type(((buffer_t *))Out.buffer)
let Out.dimensions = _halide_buffer_get_dimensions(((buffer_t *))Out.buffer)
let Out.min.0 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 0)
let Out.extent.0 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0)
let Out.stride.0 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0)
let Out.min.1 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 1)
let Out.extent.1 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1)
let Out.stride.1 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1)
let Out.min.2 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 2)
let Out.extent.2 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2)
let Out.stride.2 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2)
let Out.min.3 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 3)
let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3)
let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3)
let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4)
let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)
let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert((Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<Default_GPU> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<Default_GPU> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<Default_GPU> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<Default_GPU> (A.s0.mx.__thread_id_y, 0, 4) {
    gpu_thread<Default_GPU> (A.s0.my.__thread_id_x, 0, 4) {
     allocate W_im_buf[float32 * 8 * 36] in Register
     allocate P_im_buf[float32 * 4 * 45] in Register
     allocate A[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
     allocate B[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
     allocate C[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((A.s0.my.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((A.s0.mx.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = ((let t5.x8 = C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] in t5.x8) + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((A.s0.mx.__thread_id_y*16) + ((A.s0.my.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
    }
   }
  }
 }
}


Gathering...
simplify let Out = ((void *))_halide_buffer_get_host(((buffer_t *))Out.buffer) in...
simplify let Out.type = (uint32)_halide_buffer_get_type(((buffer_t *))Out.buffer) in...
simplify let Out.dimensions = _halide_buffer_get_dimensions(((buffer_t *))Out.buffer) in...
simplify let Out.min.0 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 0) in...
simplify let Out.extent.0 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0) in...
simplify let Out.stride.0 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0) in...
simplify let Out.min.1 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 1) in...
simplify let Out.extent.1 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1) in...
simplify let Out.stride.1 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1) in...
simplify let Out.min.2 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 2) in...
simplify let Out.extent.2 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2) in...
simplify let Out.stride.2 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2) in...
simplify let Out.min.3 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 3) in...
simplify let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3) in...
simplify let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3) in...
simplify let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4) in...
simplify let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4) in...
simplify let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4) in...
simplify let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5) in...
simplify let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5) in...
simplify let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5) in...
simplify let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6) in...
simplify let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6) in...
simplify let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6) in...
simplify let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7) in...
simplify let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7) in...
simplify let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7) in...
simplify let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8) in...
simplify let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8) in...
simplify let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8) in...
simplify let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9) in...
simplify let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9) in...
simplify let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9) in...
simplify let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer) in...
simplify let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer) in...
simplify let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer) in...
simplify let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0) in...
simplify let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0) in...
simplify let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0) in...
simplify let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1) in...
simplify let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1) in...
simplify let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1) in...
simplify let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer) in...
simplify let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer) in...
simplify let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer) in...
simplify let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0) in...
simplify let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0) in...
simplify let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0) in...
simplify let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1) in...
simplify let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1) in...
simplify let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1) in...
simplify let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0)) in...
simplify let Out.total_extent.2 = ((int64)Out.total_extent.1*int64(Out.extent.2)) in...
simplify let Out.total_extent.3 = ((int64)Out.total_extent.2*int64(Out.extent.3)) in...
simplify let Out.total_extent.4 = ((int64)Out.total_extent.3*int64(Out.extent.4)) in...
simplify let Out.total_extent.5 = ((int64)Out.total_extent.4*int64(Out.extent.5)) in...
simplify let Out.total_extent.6 = ((int64)Out.total_extent.5*int64(Out.extent.6)) in...
simplify let Out.total_extent.7 = ((int64)Out.total_extent.6*int64(Out.extent.7)) in...
simplify let Out.total_extent.8 = ((int64)Out.total_extent.7*int64(Out.extent.8)) in...
simplify let Out.total_extent.9 = ((int64)Out.total_extent.8*int64(Out.extent.9)) in...
simplify let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0)) in...
simplify let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0)) in...
simplify let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36) in...
simplify let var.W_im.load.addr.0 = (((A.s0.my.__thread_id_x*4) + A.s0.co.__block_id_x)*8) in...
simplify let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30)) in...
simplify let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((A.s0.mx.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4) in...
simplify let t5.x8 = (float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] in...
simplify let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49) in...
simplify let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((A.s0.mx.__thread_id_y*16) + ((A.s0.my.__thread_id_x*4) + A.s0.co.__block_id_x)))*8) in...
Lowering after Gathering:
assert(((uint64)reinterpret(((buffer_t *))W.buffer) != (uint64)0), halide_error_buffer_argument_is_null("W"))
assert(((uint64)reinterpret(((buffer_t *))P.buffer) != (uint64)0), halide_error_buffer_argument_is_null("P"))
assert(((uint64)reinterpret(((buffer_t *))Out.buffer) != (uint64)0), halide_error_buffer_argument_is_null("Out"))
let Out = ((void *))_halide_buffer_get_host(((buffer_t *))Out.buffer)
let Out.type = (uint32)_halide_buffer_get_type(((buffer_t *))Out.buffer)
let Out.dimensions = _halide_buffer_get_dimensions(((buffer_t *))Out.buffer)
let Out.min.0 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 0)
let Out.extent.0 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0)
let Out.stride.0 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0)
let Out.min.1 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 1)
let Out.extent.1 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1)
let Out.stride.1 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1)
let Out.min.2 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 2)
let Out.extent.2 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2)
let Out.stride.2 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2)
let Out.min.3 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 3)
let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3)
let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3)
let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4)
let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)
let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert((Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<Default_GPU> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<Default_GPU> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<Default_GPU> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<Default_GPU> (A.s0.mx.__thread_id_y, 0, 4) {
    gpu_thread<Default_GPU> (A.s0.my.__thread_id_x, 0, 4) {
     allocate W_im_buf[float32 * 8 * 36] in Register
     allocate P_im_buf[float32 * 4 * 45] in Register
     allocate A[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
     allocate B[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
     allocate C[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((A.s0.my.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((A.s0.mx.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = ((let t5.x8 = C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] in t5.x8) + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((A.s0.mx.__thread_id_y*16) + ((A.s0.my.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
    }
   }
  }
 }
}


Unrolling...
simplify let Out = ((void *))_halide_buffer_get_host(((buffer_t *))Out.buffer) in...
simplify let Out.type = (uint32)_halide_buffer_get_type(((buffer_t *))Out.buffer) in...
simplify let Out.dimensions = _halide_buffer_get_dimensions(((buffer_t *))Out.buffer) in...
simplify let Out.min.0 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 0) in...
simplify let Out.extent.0 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0) in...
simplify let Out.stride.0 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0) in...
simplify let Out.min.1 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 1) in...
simplify let Out.extent.1 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1) in...
simplify let Out.stride.1 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1) in...
simplify let Out.min.2 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 2) in...
simplify let Out.extent.2 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2) in...
simplify let Out.stride.2 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2) in...
simplify let Out.min.3 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 3) in...
simplify let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3) in...
simplify let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3) in...
simplify let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4) in...
simplify let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4) in...
simplify let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4) in...
simplify let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5) in...
simplify let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5) in...
simplify let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5) in...
simplify let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6) in...
simplify let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6) in...
simplify let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6) in...
simplify let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7) in...
simplify let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7) in...
simplify let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7) in...
simplify let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8) in...
simplify let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8) in...
simplify let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8) in...
simplify let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9) in...
simplify let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9) in...
simplify let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9) in...
simplify let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer) in...
simplify let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer) in...
simplify let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer) in...
simplify let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0) in...
simplify let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0) in...
simplify let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0) in...
simplify let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1) in...
simplify let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1) in...
simplify let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1) in...
simplify let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer) in...
simplify let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer) in...
simplify let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer) in...
simplify let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0) in...
simplify let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0) in...
simplify let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0) in...
simplify let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1) in...
simplify let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1) in...
simplify let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1) in...
simplify let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0)) in...
simplify let Out.total_extent.2 = ((int64)Out.total_extent.1*int64(Out.extent.2)) in...
simplify let Out.total_extent.3 = ((int64)Out.total_extent.2*int64(Out.extent.3)) in...
simplify let Out.total_extent.4 = ((int64)Out.total_extent.3*int64(Out.extent.4)) in...
simplify let Out.total_extent.5 = ((int64)Out.total_extent.4*int64(Out.extent.5)) in...
simplify let Out.total_extent.6 = ((int64)Out.total_extent.5*int64(Out.extent.6)) in...
simplify let Out.total_extent.7 = ((int64)Out.total_extent.6*int64(Out.extent.7)) in...
simplify let Out.total_extent.8 = ((int64)Out.total_extent.7*int64(Out.extent.8)) in...
simplify let Out.total_extent.9 = ((int64)Out.total_extent.8*int64(Out.extent.9)) in...
simplify let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0)) in...
simplify let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0)) in...
simplify let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36) in...
simplify let var.W_im.load.addr.0 = (((A.s0.my.__thread_id_x*4) + A.s0.co.__block_id_x)*8) in...
simplify let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30)) in...
simplify let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((A.s0.mx.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4) in...
simplify let t5.x8 = (float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] in...
simplify let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49) in...
simplify let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((A.s0.mx.__thread_id_y*16) + ((A.s0.my.__thread_id_x*4) + A.s0.co.__block_id_x)))*8) in...
Lowering after unrolling:
assert(((uint64)reinterpret(((buffer_t *))W.buffer) != (uint64)0), halide_error_buffer_argument_is_null("W"))
assert(((uint64)reinterpret(((buffer_t *))P.buffer) != (uint64)0), halide_error_buffer_argument_is_null("P"))
assert(((uint64)reinterpret(((buffer_t *))Out.buffer) != (uint64)0), halide_error_buffer_argument_is_null("Out"))
let Out = ((void *))_halide_buffer_get_host(((buffer_t *))Out.buffer)
let Out.type = (uint32)_halide_buffer_get_type(((buffer_t *))Out.buffer)
let Out.dimensions = _halide_buffer_get_dimensions(((buffer_t *))Out.buffer)
let Out.min.0 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 0)
let Out.extent.0 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0)
let Out.stride.0 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0)
let Out.min.1 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 1)
let Out.extent.1 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1)
let Out.stride.1 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1)
let Out.min.2 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 2)
let Out.extent.2 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2)
let Out.stride.2 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2)
let Out.min.3 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 3)
let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3)
let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3)
let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4)
let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)
let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert((Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<Default_GPU> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<Default_GPU> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<Default_GPU> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<Default_GPU> (A.s0.mx.__thread_id_y, 0, 4) {
    gpu_thread<Default_GPU> (A.s0.my.__thread_id_x, 0, 4) {
     allocate W_im_buf[float32 * 8 * 36] in Register
     allocate P_im_buf[float32 * 4 * 45] in Register
     allocate A[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
     allocate B[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
     allocate C[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((A.s0.my.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((A.s0.mx.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = ((let t5.x8 = C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] in t5.x8) + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((A.s0.mx.__thread_id_y*16) + ((A.s0.my.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
    }
   }
  }
 }
}


Injecting per-block gpu synchronization...
Pulled out shared allocations:
gpu_block<Default_GPU> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<Default_GPU> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<Default_GPU> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<Default_GPU> (A.s0.mx.__thread_id_y, 0, 4) {
    gpu_thread<Default_GPU> (A.s0.my.__thread_id_x, 0, 4) {
     allocate W_im_buf[float32 * 8 * 36] in Register
     allocate P_im_buf[float32 * 4 * 45] in Register
     allocate A[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
     allocate B[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
     allocate C[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((A.s0.my.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(((void *))W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((A.s0.mx.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(((void *))P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = ((let t5.x8 = C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] in t5.x8) + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((A.s0.mx.__thread_id_y*16) + ((A.s0.my.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
    }
   }
  }
 }
}


Fusing thread block:
gpu_thread<Default_GPU> (A.s0.mx.__thread_id_y, 0, 4) {
 gpu_thread<Default_GPU> (A.s0.my.__thread_id_x, 0, 4) {
  allocate W_im_buf[float32 * 8 * 36] in Register
  allocate P_im_buf[float32 * 4 * 45] in Register
  allocate A[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
  allocate B[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
  allocate C[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
  C[ramp(0, 1, 392)] = x392(0.000000f)
  for (A.s0.mk, 0, 4) {
   for (A.s0.ci, 0, 8) {
    let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
    let var.W_im.load.addr.0 = (((A.s0.my.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
    (float32)cm_load_2d(((void *))W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
    punrolled (A.s0.yy_xx, 0, 7) {
     let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
     let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((A.s0.mx.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
     (float32)cm_load_2d(((void *))P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
     punrolled (A.s0.yyy_xxx, 0, 7) {
      punrolled (A.s0.kx, 0, 3) {
       punrolled (A.s0.ky, 0, 3) {
        punrolled (A.s0.cii, 0, 4) {
         C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = ((let t5.x8 = C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] in t5.x8) + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
        }
       }
      }
     }
    }
   }
  }
  let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
  let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((A.s0.mx.__thread_id_y*16) + ((A.s0.my.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
  (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
 }
}


Normalized dimensionality:
gpu_thread<Default_GPU> (A.s0.mx.__thread_id_y, 0, 4) {
 gpu_thread<Default_GPU> (A.s0.my.__thread_id_x, 0, 4) {
  allocate W_im_buf[float32 * 8 * 36] in Register
  allocate P_im_buf[float32 * 4 * 45] in Register
  allocate A[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
  allocate B[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
  allocate C[float32 * 8 * 7 * 7 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1]
  C[ramp(0, 1, 392)] = x392(0.000000f)
  for (A.s0.mk, 0, 4) {
   for (A.s0.ci, 0, 8) {
    let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
    let var.W_im.load.addr.0 = (((A.s0.my.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
    (float32)cm_load_2d(((void *))W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
    punrolled (A.s0.yy_xx, 0, 7) {
     let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
     let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((A.s0.mx.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
     (float32)cm_load_2d(((void *))P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
     punrolled (A.s0.yyy_xxx, 0, 7) {
      punrolled (A.s0.kx, 0, 3) {
       punrolled (A.s0.ky, 0, 3) {
        punrolled (A.s0.cii, 0, 4) {
         C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = ((let t5.x8 = C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] in t5.x8) + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
        }
       }
      }
     }
    }
   }
  }
  let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
  let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((A.s0.mx.__thread_id_y*16) + ((A.s0.my.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
  (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
 }
}


Extracted register-level allocations:
gpu_thread<Default_GPU> (A.s0.mx.__thread_id_y, 0, 4) {
 gpu_thread<Default_GPU> (A.s0.my.__thread_id_x, 0, 4) {
  C[ramp(0, 1, 392)] = x392(0.000000f)
  for (A.s0.mk, 0, 4) {
   for (A.s0.ci, 0, 8) {
    let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
    let var.W_im.load.addr.0 = (((A.s0.my.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
    (float32)cm_load_2d(((void *))W, var.W_im.load.addr.0, var.W_im.load.addr.1, ((void *))W_im_buf, ramp(0, 1, 288), 8, 36)
    punrolled (A.s0.yy_xx, 0, 7) {
     let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
     let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((A.s0.mx.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
     (float32)cm_load_2d(((void *))P, var.P_im.load.addr.0, var.P_im.load.addr.1, ((void *))P_im_buf, ramp(0, 1, 180), 4, 45)
     punrolled (A.s0.yyy_xxx, 0, 7) {
      punrolled (A.s0.kx, 0, 3) {
       punrolled (A.s0.ky, 0, 3) {
        punrolled (A.s0.cii, 0, 4) {
         C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = ((let t5.x8 = (float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] in t5.x8) + ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
        }
       }
      }
     }
    }
   }
  }
  let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
  let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((A.s0.mx.__thread_id_y*16) + ((A.s0.my.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
  (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, ((void *))C, ramp(0, 1, 392), 8, 49, "deserializer")
 }
}


Injected synchronization:
gpu_thread<Default_GPU> (A.s0.mx.__thread_id_y, 0, 4) {
 gpu_thread<Default_GPU> (A.s0.my.__thread_id_x, 0, 4) {
  C[ramp(0, 1, 392)] = x392(0.000000f)
  for (A.s0.mk, 0, 4) {
   for (A.s0.ci, 0, 8) {
    let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
    let var.W_im.load.addr.0 = (((A.s0.my.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
    (float32)cm_load_2d(((void *))W, var.W_im.load.addr.0, var.W_im.load.addr.1, ((void *))W_im_buf, ramp(0, 1, 288), 8, 36)
    punrolled (A.s0.yy_xx, 0, 7) {
     let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
     let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((A.s0.mx.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
     (float32)cm_load_2d(((void *))P, var.P_im.load.addr.0, var.P_im.load.addr.1, ((void *))P_im_buf, ramp(0, 1, 180), 4, 45)
     punrolled (A.s0.yyy_xxx, 0, 7) {
      punrolled (A.s0.kx, 0, 3) {
       punrolled (A.s0.ky, 0, 3) {
        punrolled (A.s0.cii, 0, 4) {
         C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = ((let t5.x8 = (float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] in t5.x8) + ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
        }
       }
      }
     }
    }
   }
  }
  let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
  let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((A.s0.mx.__thread_id_y*16) + ((A.s0.my.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
  (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, ((void *))C, ramp(0, 1, 392), 8, 49, "deserializer")
 }
}


Replaced for with if:
C[ramp(0, 1, 392)] = x392(0.000000f)
for (A.s0.mk, 0, 4) {
 for (A.s0.ci, 0, 8) {
  let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
  let var.W_im.load.addr.0 = ((((.__thread_id_x + 0)*4) + A.s0.co.__block_id_x)*8)
  (float32)cm_load_2d(((void *))W, var.W_im.load.addr.0, var.W_im.load.addr.1, ((void *))W_im_buf, ramp(0, 1, 288), 8, 36)
  punrolled (A.s0.yy_xx, 0, 7) {
   let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
   let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + (((.__thread_id_y + 0)*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
   (float32)cm_load_2d(((void *))P, var.P_im.load.addr.0, var.P_im.load.addr.1, ((void *))P_im_buf, ramp(0, 1, 180), 4, 45)
   punrolled (A.s0.yyy_xxx, 0, 7) {
    punrolled (A.s0.kx, 0, 3) {
     punrolled (A.s0.ky, 0, 3) {
      punrolled (A.s0.cii, 0, 4) {
       C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = ((let t5.x8 = (float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] in t5.x8) + ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
      }
     }
    }
   }
  }
 }
}
let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + (((.__thread_id_y + 0)*16) + (((.__thread_id_x + 0)*4) + A.s0.co.__block_id_x)))*8)
(float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, ((void *))C, ramp(0, 1, 392), 8, 49, "deserializer")


Rewrapped in for loops:
gpu_thread<Default_GPU> (.__thread_id_y, 0, 4) {
 gpu_thread<Default_GPU> (.__thread_id_x, 0, 4) {
  allocate C[float32 * 392]
  allocate B[float32 * 392]
  allocate A[float32 * 392]
  allocate P_im_buf[float32 * 180] in Register
  allocate W_im_buf[float32 * 288] in Register
  C[ramp(0, 1, 392)] = x392(0.000000f)
  for (A.s0.mk, 0, 4) {
   for (A.s0.ci, 0, 8) {
    let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
    let var.W_im.load.addr.0 = ((((.__thread_id_x + 0)*4) + A.s0.co.__block_id_x)*8)
    (float32)cm_load_2d(((void *))W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
    punrolled (A.s0.yy_xx, 0, 7) {
     let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
     let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + (((.__thread_id_y + 0)*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
     (float32)cm_load_2d(((void *))P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
     punrolled (A.s0.yyy_xxx, 0, 7) {
      punrolled (A.s0.kx, 0, 3) {
       punrolled (A.s0.ky, 0, 3) {
        punrolled (A.s0.cii, 0, 4) {
         C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = ((let t5.x8 = C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] in t5.x8) + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
        }
       }
      }
     }
    }
   }
  }
  let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
  let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + (((.__thread_id_y + 0)*16) + (((.__thread_id_x + 0)*4) + A.s0.co.__block_id_x)))*8)
  (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
 }
}


Add back in shared allocations:
let group_0.shared_offset = 0
let sentinel.shared_offset = group_0.shared_offset
allocate __shared[uint8 * group_0.shared_offset] in GPUShared
gpu_thread<Default_GPU> (.__thread_id_y, 0, 4) {
 gpu_thread<Default_GPU> (.__thread_id_x, 0, 4) {
  allocate C[float32 * 392]
  allocate B[float32 * 392]
  allocate A[float32 * 392]
  allocate P_im_buf[float32 * 180] in Register
  allocate W_im_buf[float32 * 288] in Register
  C[ramp(0, 1, 392)] = x392(0.000000f)
  for (A.s0.mk, 0, 4) {
   for (A.s0.ci, 0, 8) {
    let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
    let var.W_im.load.addr.0 = ((((.__thread_id_x + 0)*4) + A.s0.co.__block_id_x)*8)
    (float32)cm_load_2d(((void *))W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
    punrolled (A.s0.yy_xx, 0, 7) {
     let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
     let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + (((.__thread_id_y + 0)*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
     (float32)cm_load_2d(((void *))P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
     punrolled (A.s0.yyy_xxx, 0, 7) {
      punrolled (A.s0.kx, 0, 3) {
       punrolled (A.s0.ky, 0, 3) {
        punrolled (A.s0.cii, 0, 4) {
         C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = ((let t5.x8 = C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] in t5.x8) + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
        }
       }
      }
     }
    }
   }
  }
  let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
  let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + (((.__thread_id_y + 0)*16) + (((.__thread_id_x + 0)*4) + A.s0.co.__block_id_x)))*8)
  (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
 }
}


Lowering after injecting per-block gpu synchronization:
assert(((uint64)reinterpret(((buffer_t *))W.buffer) != (uint64)0), halide_error_buffer_argument_is_null("W"))
assert(((uint64)reinterpret(((buffer_t *))P.buffer) != (uint64)0), halide_error_buffer_argument_is_null("P"))
assert(((uint64)reinterpret(((buffer_t *))Out.buffer) != (uint64)0), halide_error_buffer_argument_is_null("Out"))
let Out = ((void *))_halide_buffer_get_host(((buffer_t *))Out.buffer)
let Out.type = (uint32)_halide_buffer_get_type(((buffer_t *))Out.buffer)
let Out.dimensions = _halide_buffer_get_dimensions(((buffer_t *))Out.buffer)
let Out.min.0 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 0)
let Out.extent.0 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0)
let Out.stride.0 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0)
let Out.min.1 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 1)
let Out.extent.1 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1)
let Out.stride.1 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1)
let Out.min.2 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 2)
let Out.extent.2 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2)
let Out.stride.2 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2)
let Out.min.3 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 3)
let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3)
let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3)
let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4)
let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)
let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert((Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<Default_GPU> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<Default_GPU> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<Default_GPU> (A.s0.co.__block_id_x, 0, 4) {
   let group_0.shared_offset = 0
   let sentinel.shared_offset = group_0.shared_offset
   allocate __shared[uint8 * group_0.shared_offset] in GPUShared
   gpu_thread<Default_GPU> (.__thread_id_y, 0, 4) {
    gpu_thread<Default_GPU> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate B[float32 * 392]
     allocate A[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = ((((.__thread_id_x + 0)*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + (((.__thread_id_y + 0)*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = ((let t5.x8 = C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] in t5.x8) + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + (((.__thread_id_y + 0)*16) + (((.__thread_id_x + 0)*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
    }
   }
  }
 }
}


Partitioning loops to simplify boundary conditions...
simplify let Out = ((void *))_halide_buffer_get_host(((buffer_t *))Out.buffer) in...
simplify let Out.type = (uint32)_halide_buffer_get_type(((buffer_t *))Out.buffer) in...
simplify let Out.dimensions = _halide_buffer_get_dimensions(((buffer_t *))Out.buffer) in...
simplify let Out.min.0 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 0) in...
simplify let Out.extent.0 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0) in...
simplify let Out.stride.0 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0) in...
simplify let Out.min.1 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 1) in...
simplify let Out.extent.1 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1) in...
simplify let Out.stride.1 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1) in...
simplify let Out.min.2 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 2) in...
simplify let Out.extent.2 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2) in...
simplify let Out.stride.2 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2) in...
simplify let Out.min.3 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 3) in...
simplify let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3) in...
simplify let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3) in...
simplify let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4) in...
simplify let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4) in...
simplify let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4) in...
simplify let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5) in...
simplify let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5) in...
simplify let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5) in...
simplify let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6) in...
simplify let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6) in...
simplify let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6) in...
simplify let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7) in...
simplify let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7) in...
simplify let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7) in...
simplify let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8) in...
simplify let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8) in...
simplify let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8) in...
simplify let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9) in...
simplify let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9) in...
simplify let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9) in...
simplify let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer) in...
simplify let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer) in...
simplify let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer) in...
simplify let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0) in...
simplify let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0) in...
simplify let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0) in...
simplify let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1) in...
simplify let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1) in...
simplify let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1) in...
simplify let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer) in...
simplify let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer) in...
simplify let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer) in...
simplify let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0) in...
simplify let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0) in...
simplify let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0) in...
simplify let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1) in...
simplify let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1) in...
simplify let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1) in...
simplify let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0)) in...
simplify let Out.total_extent.2 = ((int64)Out.total_extent.1*int64(Out.extent.2)) in...
simplify let Out.total_extent.3 = ((int64)Out.total_extent.2*int64(Out.extent.3)) in...
simplify let Out.total_extent.4 = ((int64)Out.total_extent.3*int64(Out.extent.4)) in...
simplify let Out.total_extent.5 = ((int64)Out.total_extent.4*int64(Out.extent.5)) in...
simplify let Out.total_extent.6 = ((int64)Out.total_extent.5*int64(Out.extent.6)) in...
simplify let Out.total_extent.7 = ((int64)Out.total_extent.6*int64(Out.extent.7)) in...
simplify let Out.total_extent.8 = ((int64)Out.total_extent.7*int64(Out.extent.8)) in...
simplify let Out.total_extent.9 = ((int64)Out.total_extent.8*int64(Out.extent.9)) in...
simplify let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0)) in...
simplify let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0)) in...
simplify let t55 = 0 in...
new let t55.s = (undefined) in ... 0 ...
simplify let t56 = 0 in...
new let t56.s = (undefined) in ... 0 ...
simplify let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36) in...
simplify let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8) in...
simplify let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30)) in...
simplify let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4) in...
simplify let t5.x8 = (float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] in...
simplify let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49) in...
simplify let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8) in...
Lowering after partitioning loops:
assert(((uint64)reinterpret(((buffer_t *))W.buffer) != (uint64)0), halide_error_buffer_argument_is_null("W"))
assert(((uint64)reinterpret(((buffer_t *))P.buffer) != (uint64)0), halide_error_buffer_argument_is_null("P"))
assert(((uint64)reinterpret(((buffer_t *))Out.buffer) != (uint64)0), halide_error_buffer_argument_is_null("Out"))
let Out = ((void *))_halide_buffer_get_host(((buffer_t *))Out.buffer)
let Out.type = (uint32)_halide_buffer_get_type(((buffer_t *))Out.buffer)
let Out.dimensions = _halide_buffer_get_dimensions(((buffer_t *))Out.buffer)
let Out.min.0 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 0)
let Out.extent.0 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0)
let Out.stride.0 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0)
let Out.min.1 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 1)
let Out.extent.1 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1)
let Out.stride.1 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1)
let Out.min.2 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 2)
let Out.extent.2 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2)
let Out.stride.2 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2)
let Out.min.3 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 3)
let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3)
let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3)
let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4)
let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)
let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert((Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<Default_GPU> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<Default_GPU> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<Default_GPU> (A.s0.co.__block_id_x, 0, 4) {
   allocate __shared[uint8 * 0] in GPUShared
   gpu_thread<Default_GPU> (.__thread_id_y, 0, 4) {
    gpu_thread<Default_GPU> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate B[float32 * 392]
     allocate A[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = ((let t5.x8 = C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] in t5.x8) + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
    }
   }
  }
 }
}


Injecting early frees...
Lowering after injecting early frees:
assert(((uint64)reinterpret(((buffer_t *))W.buffer) != (uint64)0), halide_error_buffer_argument_is_null("W"))
assert(((uint64)reinterpret(((buffer_t *))P.buffer) != (uint64)0), halide_error_buffer_argument_is_null("P"))
assert(((uint64)reinterpret(((buffer_t *))Out.buffer) != (uint64)0), halide_error_buffer_argument_is_null("Out"))
let Out = ((void *))_halide_buffer_get_host(((buffer_t *))Out.buffer)
let Out.type = (uint32)_halide_buffer_get_type(((buffer_t *))Out.buffer)
let Out.dimensions = _halide_buffer_get_dimensions(((buffer_t *))Out.buffer)
let Out.min.0 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 0)
let Out.extent.0 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0)
let Out.stride.0 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0)
let Out.min.1 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 1)
let Out.extent.1 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1)
let Out.stride.1 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1)
let Out.min.2 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 2)
let Out.extent.2 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2)
let Out.stride.2 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2)
let Out.min.3 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 3)
let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3)
let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3)
let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4)
let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)
let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert((Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<Default_GPU> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<Default_GPU> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<Default_GPU> (A.s0.co.__block_id_x, 0, 4) {
   allocate __shared[uint8 * 0] in GPUShared
   gpu_thread<Default_GPU> (.__thread_id_y, 0, 4) {
    gpu_thread<Default_GPU> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate B[float32 * 392]
     allocate A[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = ((let t5.x8 = C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] in t5.x8) + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
     free A
     free B
    }
   }
   free __shared
  }
 }
}


Simplifying correlated differences...
Lowering after simplifying correlated differences:
assert(((uint64)reinterpret(((buffer_t *))W.buffer) != (uint64)0), halide_error_buffer_argument_is_null("W"))
assert(((uint64)reinterpret(((buffer_t *))P.buffer) != (uint64)0), halide_error_buffer_argument_is_null("P"))
assert(((uint64)reinterpret(((buffer_t *))Out.buffer) != (uint64)0), halide_error_buffer_argument_is_null("Out"))
let Out = ((void *))_halide_buffer_get_host(((buffer_t *))Out.buffer)
let Out.type = (uint32)_halide_buffer_get_type(((buffer_t *))Out.buffer)
let Out.dimensions = _halide_buffer_get_dimensions(((buffer_t *))Out.buffer)
let Out.min.0 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 0)
let Out.extent.0 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0)
let Out.stride.0 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0)
let Out.min.1 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 1)
let Out.extent.1 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1)
let Out.stride.1 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1)
let Out.min.2 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 2)
let Out.extent.2 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2)
let Out.stride.2 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2)
let Out.min.3 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 3)
let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3)
let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3)
let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4)
let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)
let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert((Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<Default_GPU> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<Default_GPU> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<Default_GPU> (A.s0.co.__block_id_x, 0, 4) {
   allocate __shared[uint8 * 0] in GPUShared
   gpu_thread<Default_GPU> (.__thread_id_y, 0, 4) {
    gpu_thread<Default_GPU> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate B[float32 * 392]
     allocate A[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = ((let t5.x8 = C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] in t5.x8) + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
     free A
     free B
    }
   }
   free __shared
  }
 }
}

Replace memory channel with references...
IR after removing LetStmts in device kernels ...

assert(((uint64)reinterpret(((buffer_t *))W.buffer) != (uint64)0), halide_error_buffer_argument_is_null("W"))
assert(((uint64)reinterpret(((buffer_t *))P.buffer) != (uint64)0), halide_error_buffer_argument_is_null("P"))
assert(((uint64)reinterpret(((buffer_t *))Out.buffer) != (uint64)0), halide_error_buffer_argument_is_null("Out"))
let Out = ((void *))_halide_buffer_get_host(((buffer_t *))Out.buffer)
let Out.type = (uint32)_halide_buffer_get_type(((buffer_t *))Out.buffer)
let Out.dimensions = _halide_buffer_get_dimensions(((buffer_t *))Out.buffer)
let Out.min.0 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 0)
let Out.extent.0 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0)
let Out.stride.0 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0)
let Out.min.1 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 1)
let Out.extent.1 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1)
let Out.stride.1 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1)
let Out.min.2 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 2)
let Out.extent.2 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2)
let Out.stride.2 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2)
let Out.min.3 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 3)
let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3)
let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3)
let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4)
let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)
let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert((Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<Default_GPU> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<Default_GPU> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<Default_GPU> (A.s0.co.__block_id_x, 0, 4) {
   allocate __shared[uint8 * 0] in GPUShared
   gpu_thread<Default_GPU> (.__thread_id_y, 0, 4) {
    gpu_thread<Default_GPU> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate B[float32 * 392]
     allocate A[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = ((let t5.x8 = C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] in t5.x8) + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
     free A
     free B
    }
   }
   free __shared
  }
 }
}

Lowering after replacing memory channels:
assert(((uint64)reinterpret(((buffer_t *))W.buffer) != (uint64)0), halide_error_buffer_argument_is_null("W"))
assert(((uint64)reinterpret(((buffer_t *))P.buffer) != (uint64)0), halide_error_buffer_argument_is_null("P"))
assert(((uint64)reinterpret(((buffer_t *))Out.buffer) != (uint64)0), halide_error_buffer_argument_is_null("Out"))
let Out = ((void *))_halide_buffer_get_host(((buffer_t *))Out.buffer)
let Out.type = (uint32)_halide_buffer_get_type(((buffer_t *))Out.buffer)
let Out.dimensions = _halide_buffer_get_dimensions(((buffer_t *))Out.buffer)
let Out.min.0 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 0)
let Out.extent.0 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0)
let Out.stride.0 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0)
let Out.min.1 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 1)
let Out.extent.1 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1)
let Out.stride.1 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1)
let Out.min.2 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 2)
let Out.extent.2 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2)
let Out.stride.2 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2)
let Out.min.3 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 3)
let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3)
let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3)
let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4)
let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)
let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert((Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<Default_GPU> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<Default_GPU> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<Default_GPU> (A.s0.co.__block_id_x, 0, 4) {
   allocate __shared[uint8 * 0] in GPUShared
   gpu_thread<Default_GPU> (.__thread_id_y, 0, 4) {
    gpu_thread<Default_GPU> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate B[float32 * 392]
     allocate A[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = ((let t5.x8 = C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] in t5.x8) + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
     free A
     free B
    }
   }
   free __shared
  }
 }
}


Selecting a GPU API for GPU loops...
Lowering after selecting a GPU API:
assert(((uint64)reinterpret(((buffer_t *))W.buffer) != (uint64)0), halide_error_buffer_argument_is_null("W"))
assert(((uint64)reinterpret(((buffer_t *))P.buffer) != (uint64)0), halide_error_buffer_argument_is_null("P"))
assert(((uint64)reinterpret(((buffer_t *))Out.buffer) != (uint64)0), halide_error_buffer_argument_is_null("Out"))
let Out = ((void *))_halide_buffer_get_host(((buffer_t *))Out.buffer)
let Out.type = (uint32)_halide_buffer_get_type(((buffer_t *))Out.buffer)
let Out.dimensions = _halide_buffer_get_dimensions(((buffer_t *))Out.buffer)
let Out.min.0 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 0)
let Out.extent.0 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0)
let Out.stride.0 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0)
let Out.min.1 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 1)
let Out.extent.1 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1)
let Out.stride.1 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1)
let Out.min.2 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 2)
let Out.extent.2 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2)
let Out.stride.2 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2)
let Out.min.3 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 3)
let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3)
let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3)
let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4)
let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)
let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert((Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   allocate __shared[uint8 * 0] in GPUShared
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate B[float32 * 392]
     allocate A[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = ((let t5.x8 = C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] in t5.x8) + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
     free A
     free B
    }
   }
   free __shared
  }
 }
}


Injecting host <-> dev buffer copies...
Lowering after injecting host <-> dev buffer copies:
assert(((uint64)reinterpret(((buffer_t *))W.buffer) != (uint64)0), halide_error_buffer_argument_is_null("W"))
assert(((uint64)reinterpret(((buffer_t *))P.buffer) != (uint64)0), halide_error_buffer_argument_is_null("P"))
assert(((uint64)reinterpret(((buffer_t *))Out.buffer) != (uint64)0), halide_error_buffer_argument_is_null("Out"))
let Out = ((void *))_halide_buffer_get_host(((buffer_t *))Out.buffer)
let Out.type = (uint32)_halide_buffer_get_type(((buffer_t *))Out.buffer)
let Out.dimensions = _halide_buffer_get_dimensions(((buffer_t *))Out.buffer)
let Out.min.0 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 0)
let Out.extent.0 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0)
let Out.stride.0 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0)
let Out.min.1 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 1)
let Out.extent.1 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1)
let Out.stride.1 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1)
let Out.min.2 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 2)
let Out.extent.2 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2)
let Out.stride.2 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2)
let Out.min.3 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 3)
let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3)
let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3)
let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4)
let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)
let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert((Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   allocate __shared[uint8 * 0] in GPUShared
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate B[float32 * 392]
     allocate A[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = ((let t5.x8 = C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] in t5.x8) + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
     free A
     free B
    }
   }
   free __shared
  }
 }
}


Selecting a GPU API for extern stages...
Lowering after selecting a GPU API for extern stages:
assert(((uint64)reinterpret(((buffer_t *))W.buffer) != (uint64)0), halide_error_buffer_argument_is_null("W"))
assert(((uint64)reinterpret(((buffer_t *))P.buffer) != (uint64)0), halide_error_buffer_argument_is_null("P"))
assert(((uint64)reinterpret(((buffer_t *))Out.buffer) != (uint64)0), halide_error_buffer_argument_is_null("Out"))
let Out = ((void *))_halide_buffer_get_host(((buffer_t *))Out.buffer)
let Out.type = (uint32)_halide_buffer_get_type(((buffer_t *))Out.buffer)
let Out.dimensions = _halide_buffer_get_dimensions(((buffer_t *))Out.buffer)
let Out.min.0 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 0)
let Out.extent.0 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0)
let Out.stride.0 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0)
let Out.min.1 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 1)
let Out.extent.1 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1)
let Out.stride.1 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1)
let Out.min.2 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 2)
let Out.extent.2 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2)
let Out.stride.2 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2)
let Out.min.3 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 3)
let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3)
let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3)
let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4)
let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)
let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert((Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   allocate __shared[uint8 * 0] in GPUShared
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate B[float32 * 392]
     allocate A[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = ((let t5.x8 = C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] in t5.x8) + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
     free A
     free B
    }
   }
   free __shared
  }
 }
}


Bounding small allocations...
bounds_of_expr_in_scope ((void *))_halide_buffer_get_host(((buffer_t *))Out.buffer) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope (uint32)_halide_buffer_get_type(((buffer_t *))Out.buffer) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope _halide_buffer_get_dimensions(((buffer_t *))Out.buffer) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope _halide_buffer_get_min(((buffer_t *))Out.buffer, 0) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope _halide_buffer_get_min(((buffer_t *))Out.buffer, 1) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope _halide_buffer_get_min(((buffer_t *))Out.buffer, 2) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope _halide_buffer_get_min(((buffer_t *))Out.buffer, 3) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope _halide_buffer_get_min(((buffer_t *))Out.buffer, 4) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope _halide_buffer_get_min(((buffer_t *))Out.buffer, 5) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope _halide_buffer_get_min(((buffer_t *))Out.buffer, 6) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope _halide_buffer_get_min(((buffer_t *))Out.buffer, 7) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope _halide_buffer_get_min(((buffer_t *))Out.buffer, 8) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope _halide_buffer_get_min(((buffer_t *))Out.buffer, 9) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope _halide_buffer_get_dimensions(((buffer_t *))P.buffer) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope _halide_buffer_get_min(((buffer_t *))P.buffer, 0) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope _halide_buffer_get_extent(((buffer_t *))P.buffer, 0) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope _halide_buffer_get_stride(((buffer_t *))P.buffer, 0) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope _halide_buffer_get_min(((buffer_t *))P.buffer, 1) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope _halide_buffer_get_extent(((buffer_t *))P.buffer, 1) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope _halide_buffer_get_stride(((buffer_t *))P.buffer, 1) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope _halide_buffer_get_dimensions(((buffer_t *))W.buffer) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope _halide_buffer_get_min(((buffer_t *))W.buffer, 0) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope _halide_buffer_get_extent(((buffer_t *))W.buffer, 0) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope _halide_buffer_get_stride(((buffer_t *))W.buffer, 0) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope _halide_buffer_get_min(((buffer_t *))W.buffer, 1) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope _halide_buffer_get_extent(((buffer_t *))W.buffer, 1) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope _halide_buffer_get_stride(((buffer_t *))W.buffer, 1) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope (int64(Out.extent.1)*int64(Out.extent.0)) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope ((int64)Out.total_extent.1*int64(Out.extent.2)) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope ((int64)Out.total_extent.2*int64(Out.extent.3)) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope ((int64)Out.total_extent.3*int64(Out.extent.4)) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope ((int64)Out.total_extent.4*int64(Out.extent.5)) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope ((int64)Out.total_extent.5*int64(Out.extent.6)) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope ((int64)Out.total_extent.6*int64(Out.extent.7)) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope ((int64)Out.total_extent.7*int64(Out.extent.8)) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope ((int64)Out.total_extent.8*int64(Out.extent.9)) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope (int64(P.extent.1)*int64(P.extent.0)) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope (int64(W.extent.1)*int64(W.extent.0)) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope 0 = 0, 0



Input to CSE (3600 == 3600)
After removing lets: (3600 == 3600)
Include: (3600 == 3600); should extract: 1
Include: 3600; should extract: 0
Include: 3600; should extract: 0
Canonical form without lets (3600 == 3600)
0: 3600, 0
1: (3600 == 3600), 1
With variables (3600 == 3600)
With lets: (3600 == 3600)
bounds_of_expr_in_scope ((0 + (P.extent.1/3600)) - 1) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope ((0 + 16) - 1) = 15, 15
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope ((0 + 4) - 1) = 3, 3
bounds_of_expr_in_scope ((int64)1*(int64)0) = (int64)0, (int64)0
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope ((0 + 4) - 1) = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope ((0 + 4) - 1) = 3, 3
bounds_of_expr_in_scope ((int64)1*(int64)392) = (int64)392, (int64)392
bounds_of_expr_in_scope ((int64)1*(int64)392) = (int64)392, (int64)392
bounds_of_expr_in_scope ((int64)1*(int64)392) = (int64)392, (int64)392
bounds_of_expr_in_scope ((int64)1*(int64)180) = (int64)180, (int64)180
bounds_of_expr_in_scope ((int64)1*(int64)288) = (int64)288, (int64)288
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope ((0 + 4) - 1) = 3, 3
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope ((0 + 8) - 1) = 7, 7
bounds_of_expr_in_scope (((A.s0.mk*8) + A.s0.ci)*36) = 0, 1116
bounds_of_expr_in_scope (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8) = 0, 120
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope ((0 + 7) - 1) = 6, 6
bounds_of_expr_in_scope ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30)) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4) = 0, 8188
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope ((0 + 7) - 1) = 6, 6
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope ((0 + 3) - 1) = 2, 2
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope ((0 + 3) - 1) = 2, 2
bounds_of_expr_in_scope 0 = 0, 0
bounds_of_expr_in_scope ((0 + 4) - 1) = 3, 3
bounds_of_expr_in_scope (float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope (A.s0.n.__block_id_z*49) = ((void *))neg_inf, ((void *))pos_inf
bounds_of_expr_in_scope (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8) = 0, 8184
Lowering after bounding small allocations:
assert(((uint64)reinterpret(((buffer_t *))W.buffer) != (uint64)0), halide_error_buffer_argument_is_null("W"))
assert(((uint64)reinterpret(((buffer_t *))P.buffer) != (uint64)0), halide_error_buffer_argument_is_null("P"))
assert(((uint64)reinterpret(((buffer_t *))Out.buffer) != (uint64)0), halide_error_buffer_argument_is_null("Out"))
let Out = ((void *))_halide_buffer_get_host(((buffer_t *))Out.buffer)
let Out.type = (uint32)_halide_buffer_get_type(((buffer_t *))Out.buffer)
let Out.dimensions = _halide_buffer_get_dimensions(((buffer_t *))Out.buffer)
let Out.min.0 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 0)
let Out.extent.0 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0)
let Out.stride.0 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0)
let Out.min.1 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 1)
let Out.extent.1 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1)
let Out.stride.1 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1)
let Out.min.2 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 2)
let Out.extent.2 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2)
let Out.stride.2 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2)
let Out.min.3 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 3)
let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3)
let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3)
let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4)
let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)
let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert((Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   allocate __shared[uint8 * 0] in GPUShared if (uint1)0
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate B[float32 * 392]
     allocate A[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = ((let t5.x8 = C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] in t5.x8) + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
     free A
     free B
    }
   }
   free __shared
  }
 }
}


CSE...



Input to CSE ((uint64)reinterpret(((buffer_t *))W.buffer) != (uint64)0)
After removing lets: ((uint64)reinterpret(((buffer_t *))W.buffer) != (uint64)0)
Include: ((uint64)reinterpret(((buffer_t *))W.buffer) != (uint64)0); should extract: 1
Include: (uint64)reinterpret(((buffer_t *))W.buffer); should extract: 1
Include: ((buffer_t *))W.buffer; should extract: 0
Include: (uint64)0; should extract: 0
Canonical form without lets ((uint64)reinterpret(((buffer_t *))W.buffer) != (uint64)0)
0: ((buffer_t *))W.buffer, 0
1: (uint64)reinterpret(((buffer_t *))W.buffer), 1
2: (uint64)0, 0
3: ((uint64)reinterpret(((buffer_t *))W.buffer) != (uint64)0), 1
With variables ((uint64)reinterpret(((buffer_t *))W.buffer) != (uint64)0)
With lets: ((uint64)reinterpret(((buffer_t *))W.buffer) != (uint64)0)



Input to CSE halide_error_buffer_argument_is_null("W")
After removing lets: halide_error_buffer_argument_is_null("W")
Include: halide_error_buffer_argument_is_null("W"); should extract: 1
Include: "W"; should extract: 0
Canonical form without lets halide_error_buffer_argument_is_null("W")
0: "W", 0
1: halide_error_buffer_argument_is_null("W"), 1
With variables halide_error_buffer_argument_is_null("W")
With lets: halide_error_buffer_argument_is_null("W")



Input to CSE ((uint64)reinterpret(((buffer_t *))P.buffer) != (uint64)0)
After removing lets: ((uint64)reinterpret(((buffer_t *))P.buffer) != (uint64)0)
Include: ((uint64)reinterpret(((buffer_t *))P.buffer) != (uint64)0); should extract: 1
Include: (uint64)reinterpret(((buffer_t *))P.buffer); should extract: 1
Include: ((buffer_t *))P.buffer; should extract: 0
Include: (uint64)0; should extract: 0
Canonical form without lets ((uint64)reinterpret(((buffer_t *))P.buffer) != (uint64)0)
0: ((buffer_t *))P.buffer, 0
1: (uint64)reinterpret(((buffer_t *))P.buffer), 1
2: (uint64)0, 0
3: ((uint64)reinterpret(((buffer_t *))P.buffer) != (uint64)0), 1
With variables ((uint64)reinterpret(((buffer_t *))P.buffer) != (uint64)0)
With lets: ((uint64)reinterpret(((buffer_t *))P.buffer) != (uint64)0)



Input to CSE halide_error_buffer_argument_is_null("P")
After removing lets: halide_error_buffer_argument_is_null("P")
Include: halide_error_buffer_argument_is_null("P"); should extract: 1
Include: "P"; should extract: 0
Canonical form without lets halide_error_buffer_argument_is_null("P")
0: "P", 0
1: halide_error_buffer_argument_is_null("P"), 1
With variables halide_error_buffer_argument_is_null("P")
With lets: halide_error_buffer_argument_is_null("P")



Input to CSE ((uint64)reinterpret(((buffer_t *))Out.buffer) != (uint64)0)
After removing lets: ((uint64)reinterpret(((buffer_t *))Out.buffer) != (uint64)0)
Include: ((uint64)reinterpret(((buffer_t *))Out.buffer) != (uint64)0); should extract: 1
Include: (uint64)reinterpret(((buffer_t *))Out.buffer); should extract: 1
Include: ((buffer_t *))Out.buffer; should extract: 0
Include: (uint64)0; should extract: 0
Canonical form without lets ((uint64)reinterpret(((buffer_t *))Out.buffer) != (uint64)0)
0: ((buffer_t *))Out.buffer, 0
1: (uint64)reinterpret(((buffer_t *))Out.buffer), 1
2: (uint64)0, 0
3: ((uint64)reinterpret(((buffer_t *))Out.buffer) != (uint64)0), 1
With variables ((uint64)reinterpret(((buffer_t *))Out.buffer) != (uint64)0)
With lets: ((uint64)reinterpret(((buffer_t *))Out.buffer) != (uint64)0)



Input to CSE halide_error_buffer_argument_is_null("Out")
After removing lets: halide_error_buffer_argument_is_null("Out")
Include: halide_error_buffer_argument_is_null("Out"); should extract: 1
Include: "Out"; should extract: 0
Canonical form without lets halide_error_buffer_argument_is_null("Out")
0: "Out", 0
1: halide_error_buffer_argument_is_null("Out"), 1
With variables halide_error_buffer_argument_is_null("Out")
With lets: halide_error_buffer_argument_is_null("Out")



Input to CSE ((void *))_halide_buffer_get_host(((buffer_t *))Out.buffer)
After removing lets: ((void *))_halide_buffer_get_host(((buffer_t *))Out.buffer)
Include: ((void *))_halide_buffer_get_host(((buffer_t *))Out.buffer); should extract: 1
Include: ((buffer_t *))Out.buffer; should extract: 0
Canonical form without lets ((void *))_halide_buffer_get_host(((buffer_t *))Out.buffer)
0: ((buffer_t *))Out.buffer, 0
1: ((void *))_halide_buffer_get_host(((buffer_t *))Out.buffer), 1
With variables ((void *))_halide_buffer_get_host(((buffer_t *))Out.buffer)
With lets: ((void *))_halide_buffer_get_host(((buffer_t *))Out.buffer)



Input to CSE (uint32)_halide_buffer_get_type(((buffer_t *))Out.buffer)
After removing lets: (uint32)_halide_buffer_get_type(((buffer_t *))Out.buffer)
Include: (uint32)_halide_buffer_get_type(((buffer_t *))Out.buffer); should extract: 1
Include: ((buffer_t *))Out.buffer; should extract: 0
Canonical form without lets (uint32)_halide_buffer_get_type(((buffer_t *))Out.buffer)
0: ((buffer_t *))Out.buffer, 0
1: (uint32)_halide_buffer_get_type(((buffer_t *))Out.buffer), 1
With variables (uint32)_halide_buffer_get_type(((buffer_t *))Out.buffer)
With lets: (uint32)_halide_buffer_get_type(((buffer_t *))Out.buffer)



Input to CSE _halide_buffer_get_dimensions(((buffer_t *))Out.buffer)
After removing lets: _halide_buffer_get_dimensions(((buffer_t *))Out.buffer)
Include: _halide_buffer_get_dimensions(((buffer_t *))Out.buffer); should extract: 1
Include: ((buffer_t *))Out.buffer; should extract: 0
Canonical form without lets _halide_buffer_get_dimensions(((buffer_t *))Out.buffer)
0: ((buffer_t *))Out.buffer, 0
1: _halide_buffer_get_dimensions(((buffer_t *))Out.buffer), 1
With variables _halide_buffer_get_dimensions(((buffer_t *))Out.buffer)
With lets: _halide_buffer_get_dimensions(((buffer_t *))Out.buffer)



Input to CSE _halide_buffer_get_min(((buffer_t *))Out.buffer, 0)
After removing lets: _halide_buffer_get_min(((buffer_t *))Out.buffer, 0)
Include: _halide_buffer_get_min(((buffer_t *))Out.buffer, 0); should extract: 1
Include: ((buffer_t *))Out.buffer; should extract: 0
Include: 0; should extract: 0
Canonical form without lets _halide_buffer_get_min(((buffer_t *))Out.buffer, 0)
0: ((buffer_t *))Out.buffer, 0
1: 0, 0
2: _halide_buffer_get_min(((buffer_t *))Out.buffer, 0), 1
With variables _halide_buffer_get_min(((buffer_t *))Out.buffer, 0)
With lets: _halide_buffer_get_min(((buffer_t *))Out.buffer, 0)



Input to CSE _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0)
After removing lets: _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0)
Include: _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0); should extract: 1
Include: ((buffer_t *))Out.buffer; should extract: 0
Include: 0; should extract: 0
Canonical form without lets _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0)
0: ((buffer_t *))Out.buffer, 0
1: 0, 0
2: _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0), 1
With variables _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0)
With lets: _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0)



Input to CSE _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0)
After removing lets: _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0)
Include: _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0); should extract: 1
Include: ((buffer_t *))Out.buffer; should extract: 0
Include: 0; should extract: 0
Canonical form without lets _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0)
0: ((buffer_t *))Out.buffer, 0
1: 0, 0
2: _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0), 1
With variables _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0)
With lets: _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0)



Input to CSE _halide_buffer_get_min(((buffer_t *))Out.buffer, 1)
After removing lets: _halide_buffer_get_min(((buffer_t *))Out.buffer, 1)
Include: _halide_buffer_get_min(((buffer_t *))Out.buffer, 1); should extract: 1
Include: ((buffer_t *))Out.buffer; should extract: 0
Include: 1; should extract: 0
Canonical form without lets _halide_buffer_get_min(((buffer_t *))Out.buffer, 1)
0: ((buffer_t *))Out.buffer, 0
1: 1, 0
2: _halide_buffer_get_min(((buffer_t *))Out.buffer, 1), 1
With variables _halide_buffer_get_min(((buffer_t *))Out.buffer, 1)
With lets: _halide_buffer_get_min(((buffer_t *))Out.buffer, 1)



Input to CSE _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1)
After removing lets: _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1)
Include: _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1); should extract: 1
Include: ((buffer_t *))Out.buffer; should extract: 0
Include: 1; should extract: 0
Canonical form without lets _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1)
0: ((buffer_t *))Out.buffer, 0
1: 1, 0
2: _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1), 1
With variables _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1)
With lets: _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1)



Input to CSE _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1)
After removing lets: _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1)
Include: _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1); should extract: 1
Include: ((buffer_t *))Out.buffer; should extract: 0
Include: 1; should extract: 0
Canonical form without lets _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1)
0: ((buffer_t *))Out.buffer, 0
1: 1, 0
2: _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1), 1
With variables _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1)
With lets: _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1)



Input to CSE _halide_buffer_get_min(((buffer_t *))Out.buffer, 2)
After removing lets: _halide_buffer_get_min(((buffer_t *))Out.buffer, 2)
Include: _halide_buffer_get_min(((buffer_t *))Out.buffer, 2); should extract: 1
Include: ((buffer_t *))Out.buffer; should extract: 0
Include: 2; should extract: 0
Canonical form without lets _halide_buffer_get_min(((buffer_t *))Out.buffer, 2)
0: ((buffer_t *))Out.buffer, 0
1: 2, 0
2: _halide_buffer_get_min(((buffer_t *))Out.buffer, 2), 1
With variables _halide_buffer_get_min(((buffer_t *))Out.buffer, 2)
With lets: _halide_buffer_get_min(((buffer_t *))Out.buffer, 2)



Input to CSE _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2)
After removing lets: _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2)
Include: _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2); should extract: 1
Include: ((buffer_t *))Out.buffer; should extract: 0
Include: 2; should extract: 0
Canonical form without lets _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2)
0: ((buffer_t *))Out.buffer, 0
1: 2, 0
2: _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2), 1
With variables _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2)
With lets: _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2)



Input to CSE _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2)
After removing lets: _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2)
Include: _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2); should extract: 1
Include: ((buffer_t *))Out.buffer; should extract: 0
Include: 2; should extract: 0
Canonical form without lets _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2)
0: ((buffer_t *))Out.buffer, 0
1: 2, 0
2: _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2), 1
With variables _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2)
With lets: _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2)



Input to CSE _halide_buffer_get_min(((buffer_t *))Out.buffer, 3)
After removing lets: _halide_buffer_get_min(((buffer_t *))Out.buffer, 3)
Include: _halide_buffer_get_min(((buffer_t *))Out.buffer, 3); should extract: 1
Include: ((buffer_t *))Out.buffer; should extract: 0
Include: 3; should extract: 0
Canonical form without lets _halide_buffer_get_min(((buffer_t *))Out.buffer, 3)
0: ((buffer_t *))Out.buffer, 0
1: 3, 0
2: _halide_buffer_get_min(((buffer_t *))Out.buffer, 3), 1
With variables _halide_buffer_get_min(((buffer_t *))Out.buffer, 3)
With lets: _halide_buffer_get_min(((buffer_t *))Out.buffer, 3)



Input to CSE _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3)
After removing lets: _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3)
Include: _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3); should extract: 1
Include: ((buffer_t *))Out.buffer; should extract: 0
Include: 3; should extract: 0
Canonical form without lets _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3)
0: ((buffer_t *))Out.buffer, 0
1: 3, 0
2: _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3), 1
With variables _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3)
With lets: _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3)



Input to CSE _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3)
After removing lets: _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3)
Include: _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3); should extract: 1
Include: ((buffer_t *))Out.buffer; should extract: 0
Include: 3; should extract: 0
Canonical form without lets _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3)
0: ((buffer_t *))Out.buffer, 0
1: 3, 0
2: _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3), 1
With variables _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3)
With lets: _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3)



Input to CSE _halide_buffer_get_min(((buffer_t *))Out.buffer, 4)
After removing lets: _halide_buffer_get_min(((buffer_t *))Out.buffer, 4)
Include: _halide_buffer_get_min(((buffer_t *))Out.buffer, 4); should extract: 1
Include: ((buffer_t *))Out.buffer; should extract: 0
Include: 4; should extract: 0
Canonical form without lets _halide_buffer_get_min(((buffer_t *))Out.buffer, 4)
0: ((buffer_t *))Out.buffer, 0
1: 4, 0
2: _halide_buffer_get_min(((buffer_t *))Out.buffer, 4), 1
With variables _halide_buffer_get_min(((buffer_t *))Out.buffer, 4)
With lets: _halide_buffer_get_min(((buffer_t *))Out.buffer, 4)



Input to CSE _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)
After removing lets: _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)
Include: _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4); should extract: 1
Include: ((buffer_t *))Out.buffer; should extract: 0
Include: 4; should extract: 0
Canonical form without lets _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)
0: ((buffer_t *))Out.buffer, 0
1: 4, 0
2: _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4), 1
With variables _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)
With lets: _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)



Input to CSE _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
After removing lets: _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
Include: _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4); should extract: 1
Include: ((buffer_t *))Out.buffer; should extract: 0
Include: 4; should extract: 0
Canonical form without lets _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
0: ((buffer_t *))Out.buffer, 0
1: 4, 0
2: _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4), 1
With variables _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
With lets: _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)



Input to CSE _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
After removing lets: _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
Include: _halide_buffer_get_min(((buffer_t *))Out.buffer, 5); should extract: 1
Include: ((buffer_t *))Out.buffer; should extract: 0
Include: 5; should extract: 0
Canonical form without lets _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
0: ((buffer_t *))Out.buffer, 0
1: 5, 0
2: _halide_buffer_get_min(((buffer_t *))Out.buffer, 5), 1
With variables _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
With lets: _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)



Input to CSE _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
After removing lets: _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
Include: _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5); should extract: 1
Include: ((buffer_t *))Out.buffer; should extract: 0
Include: 5; should extract: 0
Canonical form without lets _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
0: ((buffer_t *))Out.buffer, 0
1: 5, 0
2: _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5), 1
With variables _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
With lets: _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)



Input to CSE _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
After removing lets: _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
Include: _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5); should extract: 1
Include: ((buffer_t *))Out.buffer; should extract: 0
Include: 5; should extract: 0
Canonical form without lets _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
0: ((buffer_t *))Out.buffer, 0
1: 5, 0
2: _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5), 1
With variables _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
With lets: _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)



Input to CSE _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
After removing lets: _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
Include: _halide_buffer_get_min(((buffer_t *))Out.buffer, 6); should extract: 1
Include: ((buffer_t *))Out.buffer; should extract: 0
Include: 6; should extract: 0
Canonical form without lets _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
0: ((buffer_t *))Out.buffer, 0
1: 6, 0
2: _halide_buffer_get_min(((buffer_t *))Out.buffer, 6), 1
With variables _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
With lets: _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)



Input to CSE _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
After removing lets: _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
Include: _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6); should extract: 1
Include: ((buffer_t *))Out.buffer; should extract: 0
Include: 6; should extract: 0
Canonical form without lets _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
0: ((buffer_t *))Out.buffer, 0
1: 6, 0
2: _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6), 1
With variables _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
With lets: _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)



Input to CSE _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
After removing lets: _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
Include: _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6); should extract: 1
Include: ((buffer_t *))Out.buffer; should extract: 0
Include: 6; should extract: 0
Canonical form without lets _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
0: ((buffer_t *))Out.buffer, 0
1: 6, 0
2: _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6), 1
With variables _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
With lets: _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)



Input to CSE _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
After removing lets: _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
Include: _halide_buffer_get_min(((buffer_t *))Out.buffer, 7); should extract: 1
Include: ((buffer_t *))Out.buffer; should extract: 0
Include: 7; should extract: 0
Canonical form without lets _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
0: ((buffer_t *))Out.buffer, 0
1: 7, 0
2: _halide_buffer_get_min(((buffer_t *))Out.buffer, 7), 1
With variables _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
With lets: _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)



Input to CSE _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
After removing lets: _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
Include: _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7); should extract: 1
Include: ((buffer_t *))Out.buffer; should extract: 0
Include: 7; should extract: 0
Canonical form without lets _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
0: ((buffer_t *))Out.buffer, 0
1: 7, 0
2: _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7), 1
With variables _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
With lets: _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)



Input to CSE _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
After removing lets: _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
Include: _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7); should extract: 1
Include: ((buffer_t *))Out.buffer; should extract: 0
Include: 7; should extract: 0
Canonical form without lets _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
0: ((buffer_t *))Out.buffer, 0
1: 7, 0
2: _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7), 1
With variables _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
With lets: _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)



Input to CSE _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
After removing lets: _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
Include: _halide_buffer_get_min(((buffer_t *))Out.buffer, 8); should extract: 1
Include: ((buffer_t *))Out.buffer; should extract: 0
Include: 8; should extract: 0
Canonical form without lets _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
0: ((buffer_t *))Out.buffer, 0
1: 8, 0
2: _halide_buffer_get_min(((buffer_t *))Out.buffer, 8), 1
With variables _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
With lets: _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)



Input to CSE _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
After removing lets: _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
Include: _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8); should extract: 1
Include: ((buffer_t *))Out.buffer; should extract: 0
Include: 8; should extract: 0
Canonical form without lets _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
0: ((buffer_t *))Out.buffer, 0
1: 8, 0
2: _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8), 1
With variables _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
With lets: _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)



Input to CSE _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
After removing lets: _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
Include: _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8); should extract: 1
Include: ((buffer_t *))Out.buffer; should extract: 0
Include: 8; should extract: 0
Canonical form without lets _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
0: ((buffer_t *))Out.buffer, 0
1: 8, 0
2: _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8), 1
With variables _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
With lets: _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)



Input to CSE _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
After removing lets: _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
Include: _halide_buffer_get_min(((buffer_t *))Out.buffer, 9); should extract: 1
Include: ((buffer_t *))Out.buffer; should extract: 0
Include: 9; should extract: 0
Canonical form without lets _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
0: ((buffer_t *))Out.buffer, 0
1: 9, 0
2: _halide_buffer_get_min(((buffer_t *))Out.buffer, 9), 1
With variables _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
With lets: _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)



Input to CSE _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
After removing lets: _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
Include: _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9); should extract: 1
Include: ((buffer_t *))Out.buffer; should extract: 0
Include: 9; should extract: 0
Canonical form without lets _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
0: ((buffer_t *))Out.buffer, 0
1: 9, 0
2: _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9), 1
With variables _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
With lets: _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)



Input to CSE _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
After removing lets: _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
Include: _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9); should extract: 1
Include: ((buffer_t *))Out.buffer; should extract: 0
Include: 9; should extract: 0
Canonical form without lets _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
0: ((buffer_t *))Out.buffer, 0
1: 9, 0
2: _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9), 1
With variables _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
With lets: _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)



Input to CSE ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
After removing lets: ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
Include: ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer); should extract: 1
Include: ((buffer_t *))P.buffer; should extract: 0
Canonical form without lets ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
0: ((buffer_t *))P.buffer, 0
1: ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer), 1
With variables ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
With lets: ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)



Input to CSE (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
After removing lets: (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
Include: (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer); should extract: 1
Include: ((buffer_t *))P.buffer; should extract: 0
Canonical form without lets (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
0: ((buffer_t *))P.buffer, 0
1: (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer), 1
With variables (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
With lets: (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)



Input to CSE _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
After removing lets: _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
Include: _halide_buffer_get_dimensions(((buffer_t *))P.buffer); should extract: 1
Include: ((buffer_t *))P.buffer; should extract: 0
Canonical form without lets _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
0: ((buffer_t *))P.buffer, 0
1: _halide_buffer_get_dimensions(((buffer_t *))P.buffer), 1
With variables _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
With lets: _halide_buffer_get_dimensions(((buffer_t *))P.buffer)



Input to CSE _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
After removing lets: _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
Include: _halide_buffer_get_min(((buffer_t *))P.buffer, 0); should extract: 1
Include: ((buffer_t *))P.buffer; should extract: 0
Include: 0; should extract: 0
Canonical form without lets _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
0: ((buffer_t *))P.buffer, 0
1: 0, 0
2: _halide_buffer_get_min(((buffer_t *))P.buffer, 0), 1
With variables _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
With lets: _halide_buffer_get_min(((buffer_t *))P.buffer, 0)



Input to CSE _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
After removing lets: _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
Include: _halide_buffer_get_extent(((buffer_t *))P.buffer, 0); should extract: 1
Include: ((buffer_t *))P.buffer; should extract: 0
Include: 0; should extract: 0
Canonical form without lets _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
0: ((buffer_t *))P.buffer, 0
1: 0, 0
2: _halide_buffer_get_extent(((buffer_t *))P.buffer, 0), 1
With variables _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
With lets: _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)



Input to CSE _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
After removing lets: _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
Include: _halide_buffer_get_stride(((buffer_t *))P.buffer, 0); should extract: 1
Include: ((buffer_t *))P.buffer; should extract: 0
Include: 0; should extract: 0
Canonical form without lets _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
0: ((buffer_t *))P.buffer, 0
1: 0, 0
2: _halide_buffer_get_stride(((buffer_t *))P.buffer, 0), 1
With variables _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
With lets: _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)



Input to CSE _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
After removing lets: _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
Include: _halide_buffer_get_min(((buffer_t *))P.buffer, 1); should extract: 1
Include: ((buffer_t *))P.buffer; should extract: 0
Include: 1; should extract: 0
Canonical form without lets _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
0: ((buffer_t *))P.buffer, 0
1: 1, 0
2: _halide_buffer_get_min(((buffer_t *))P.buffer, 1), 1
With variables _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
With lets: _halide_buffer_get_min(((buffer_t *))P.buffer, 1)



Input to CSE _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
After removing lets: _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
Include: _halide_buffer_get_extent(((buffer_t *))P.buffer, 1); should extract: 1
Include: ((buffer_t *))P.buffer; should extract: 0
Include: 1; should extract: 0
Canonical form without lets _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
0: ((buffer_t *))P.buffer, 0
1: 1, 0
2: _halide_buffer_get_extent(((buffer_t *))P.buffer, 1), 1
With variables _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
With lets: _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)



Input to CSE _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
After removing lets: _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
Include: _halide_buffer_get_stride(((buffer_t *))P.buffer, 1); should extract: 1
Include: ((buffer_t *))P.buffer; should extract: 0
Include: 1; should extract: 0
Canonical form without lets _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
0: ((buffer_t *))P.buffer, 0
1: 1, 0
2: _halide_buffer_get_stride(((buffer_t *))P.buffer, 1), 1
With variables _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
With lets: _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)



Input to CSE ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
After removing lets: ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
Include: ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer); should extract: 1
Include: ((buffer_t *))W.buffer; should extract: 0
Canonical form without lets ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
0: ((buffer_t *))W.buffer, 0
1: ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer), 1
With variables ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
With lets: ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)



Input to CSE (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
After removing lets: (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
Include: (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer); should extract: 1
Include: ((buffer_t *))W.buffer; should extract: 0
Canonical form without lets (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
0: ((buffer_t *))W.buffer, 0
1: (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer), 1
With variables (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
With lets: (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)



Input to CSE _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
After removing lets: _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
Include: _halide_buffer_get_dimensions(((buffer_t *))W.buffer); should extract: 1
Include: ((buffer_t *))W.buffer; should extract: 0
Canonical form without lets _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
0: ((buffer_t *))W.buffer, 0
1: _halide_buffer_get_dimensions(((buffer_t *))W.buffer), 1
With variables _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
With lets: _halide_buffer_get_dimensions(((buffer_t *))W.buffer)



Input to CSE _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
After removing lets: _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
Include: _halide_buffer_get_min(((buffer_t *))W.buffer, 0); should extract: 1
Include: ((buffer_t *))W.buffer; should extract: 0
Include: 0; should extract: 0
Canonical form without lets _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
0: ((buffer_t *))W.buffer, 0
1: 0, 0
2: _halide_buffer_get_min(((buffer_t *))W.buffer, 0), 1
With variables _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
With lets: _halide_buffer_get_min(((buffer_t *))W.buffer, 0)



Input to CSE _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
After removing lets: _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
Include: _halide_buffer_get_extent(((buffer_t *))W.buffer, 0); should extract: 1
Include: ((buffer_t *))W.buffer; should extract: 0
Include: 0; should extract: 0
Canonical form without lets _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
0: ((buffer_t *))W.buffer, 0
1: 0, 0
2: _halide_buffer_get_extent(((buffer_t *))W.buffer, 0), 1
With variables _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
With lets: _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)



Input to CSE _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
After removing lets: _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
Include: _halide_buffer_get_stride(((buffer_t *))W.buffer, 0); should extract: 1
Include: ((buffer_t *))W.buffer; should extract: 0
Include: 0; should extract: 0
Canonical form without lets _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
0: ((buffer_t *))W.buffer, 0
1: 0, 0
2: _halide_buffer_get_stride(((buffer_t *))W.buffer, 0), 1
With variables _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
With lets: _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)



Input to CSE _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
After removing lets: _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
Include: _halide_buffer_get_min(((buffer_t *))W.buffer, 1); should extract: 1
Include: ((buffer_t *))W.buffer; should extract: 0
Include: 1; should extract: 0
Canonical form without lets _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
0: ((buffer_t *))W.buffer, 0
1: 1, 0
2: _halide_buffer_get_min(((buffer_t *))W.buffer, 1), 1
With variables _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
With lets: _halide_buffer_get_min(((buffer_t *))W.buffer, 1)



Input to CSE _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
After removing lets: _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
Include: _halide_buffer_get_extent(((buffer_t *))W.buffer, 1); should extract: 1
Include: ((buffer_t *))W.buffer; should extract: 0
Include: 1; should extract: 0
Canonical form without lets _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
0: ((buffer_t *))W.buffer, 0
1: 1, 0
2: _halide_buffer_get_extent(((buffer_t *))W.buffer, 1), 1
With variables _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
With lets: _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)



Input to CSE _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
After removing lets: _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
Include: _halide_buffer_get_stride(((buffer_t *))W.buffer, 1); should extract: 1
Include: ((buffer_t *))W.buffer; should extract: 0
Include: 1; should extract: 0
Canonical form without lets _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
0: ((buffer_t *))W.buffer, 0
1: 1, 0
2: _halide_buffer_get_stride(((buffer_t *))W.buffer, 1), 1
With variables _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
With lets: _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)



Input to CSE (uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)
After removing lets: (uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)
Include: (uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer); should extract: 1
Include: ((buffer_t *))Out.buffer; should extract: 0
Canonical form without lets (uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)
0: ((buffer_t *))Out.buffer, 0
1: (uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer), 1
With variables (uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)
With lets: (uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)



Input to CSE ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
After removing lets: ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
Include: ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0); should extract: 1
Include: ((halide_buffer_t *))Out.buffer; should extract: 0
Include: ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer); should extract: 1
Include: ((halide_buffer_t *))Out.buffer; should extract: 0
Include: ((void *))reinterpret((uint64)0); should extract: 1
Include: (uint64)0; should extract: 0
Include: (uint64)0; should extract: 0
Include: ((halide_device_interface_t *))reinterpret((uint64)0); should extract: 1
Include: (uint64)0; should extract: 0
Include: 2; should extract: 0
Include: 32; should extract: 0
Include: 10; should extract: 0
Include: ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0); should extract: 1
Include: 0; should extract: 0
Include: 8; should extract: 0
Include: 1; should extract: 0
Include: 0; should extract: 0
Include: 0; should extract: 0
Include: 7; should extract: 0
Include: 8; should extract: 0
Include: 0; should extract: 0
Include: 0; should extract: 0
Include: 7; should extract: 0
Include: 56; should extract: 0
Include: 0; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: 392; should extract: 0
Include: 0; should extract: 0
Include: 0; should extract: 0
Include: 4; should extract: 0
Include: 392; should extract: 0
Include: 0; should extract: 0
Include: 0; should extract: 0
Include: 4; should extract: 0
Include: 1568; should extract: 0
Include: 0; should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: 6272; should extract: 0
Include: 0; should extract: 0
Include: 0; should extract: 0
Include: 16; should extract: 0
Include: 6272; should extract: 0
Include: 0; should extract: 0
Include: 0; should extract: 0
Include: 4; should extract: 0
Include: 100352; should extract: 0
Include: 0; should extract: 0
Include: 0; should extract: 0
Include: (P.extent.1/3600); should extract: 0
Include: P.extent.1; should extract: 0
Include: 3600; should extract: 0
Include: 401408; should extract: 0
Include: 0; should extract: 0
Include: (uint64)0; should extract: 0
Canonical form without lets ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
0: ((halide_buffer_t *))Out.buffer, 0
1: ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), 1
2: (uint64)0, 0
3: ((void *))reinterpret((uint64)0), 1
4: ((halide_device_interface_t *))reinterpret((uint64)0), 1
5: 2, 0
6: 32, 0
7: 10, 0
8: 0, 0
9: 8, 0
10: 1, 0
11: 7, 0
12: 56, 0
13: 392, 0
14: 4, 0
15: 1568, 0
16: 6272, 0
17: 16, 0
18: 100352, 0
19: P.extent.1, 0
20: 3600, 0
21: (P.extent.1/3600), 0
22: 401408, 0
23: ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), 1
24: ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0), 1
With variables ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
With lets: ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)



Input to CSE (uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)
After removing lets: (uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)
Include: (uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer); should extract: 1
Include: ((buffer_t *))P.buffer; should extract: 0
Canonical form without lets (uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)
0: ((buffer_t *))P.buffer, 0
1: (uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer), 1
With variables (uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)
With lets: (uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)



Input to CSE ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
After removing lets: ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
Include: ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0); should extract: 1
Include: ((halide_buffer_t *))P.buffer; should extract: 0
Include: ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer); should extract: 1
Include: ((halide_buffer_t *))P.buffer; should extract: 0
Include: ((void *))reinterpret((uint64)0); should extract: 1
Include: (uint64)0; should extract: 0
Include: (uint64)0; should extract: 0
Include: ((halide_device_interface_t *))reinterpret((uint64)0); should extract: 1
Include: (uint64)0; should extract: 0
Include: 2; should extract: 0
Include: 32; should extract: 0
Include: 2; should extract: 0
Include: ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0); should extract: 1
Include: P.min.0; should extract: 0
Include: P.extent.0; should extract: 0
Include: 1; should extract: 0
Include: 0; should extract: 0
Include: P.min.1; should extract: 0
Include: P.extent.1; should extract: 0
Include: P.extent.0; should extract: 0
Include: 0; should extract: 0
Include: (uint64)0; should extract: 0
Canonical form without lets ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
0: ((halide_buffer_t *))P.buffer, 0
1: ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), 1
2: (uint64)0, 0
3: ((void *))reinterpret((uint64)0), 1
4: ((halide_device_interface_t *))reinterpret((uint64)0), 1
5: 2, 0
6: 32, 0
7: P.min.0, 0
8: P.extent.0, 0
9: 1, 0
10: 0, 0
11: P.min.1, 0
12: P.extent.1, 0
13: ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), 1
14: ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0), 1
With variables ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
With lets: ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)



Input to CSE (uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)
After removing lets: (uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)
Include: (uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer); should extract: 1
Include: ((buffer_t *))W.buffer; should extract: 0
Canonical form without lets (uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)
0: ((buffer_t *))W.buffer, 0
1: (uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer), 1
With variables (uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)
With lets: (uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)



Input to CSE ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
After removing lets: ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
Include: ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0); should extract: 1
Include: ((halide_buffer_t *))W.buffer; should extract: 0
Include: ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer); should extract: 1
Include: ((halide_buffer_t *))W.buffer; should extract: 0
Include: ((void *))reinterpret((uint64)0); should extract: 1
Include: (uint64)0; should extract: 0
Include: (uint64)0; should extract: 0
Include: ((halide_device_interface_t *))reinterpret((uint64)0); should extract: 1
Include: (uint64)0; should extract: 0
Include: 2; should extract: 0
Include: 32; should extract: 0
Include: 2; should extract: 0
Include: ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0); should extract: 1
Include: W.min.0; should extract: 0
Include: W.extent.0; should extract: 0
Include: 1; should extract: 0
Include: 0; should extract: 0
Include: W.min.1; should extract: 0
Include: W.extent.1; should extract: 0
Include: W.extent.0; should extract: 0
Include: 0; should extract: 0
Include: (uint64)0; should extract: 0
Canonical form without lets ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
0: ((halide_buffer_t *))W.buffer, 0
1: ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), 1
2: (uint64)0, 0
3: ((void *))reinterpret((uint64)0), 1
4: ((halide_device_interface_t *))reinterpret((uint64)0), 1
5: 2, 0
6: 32, 0
7: W.min.0, 0
8: W.extent.0, 0
9: 1, 0
10: 0, 0
11: W.min.1, 0
12: W.extent.1, 0
13: ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), 1
14: ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0), 1
With variables ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
With lets: ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)



Input to CSE ((uint32)Out.type == (uint32)73730)
After removing lets: ((uint32)Out.type == (uint32)73730)
Include: ((uint32)Out.type == (uint32)73730); should extract: 1
Include: (uint32)Out.type; should extract: 0
Include: (uint32)73730; should extract: 0
Canonical form without lets ((uint32)Out.type == (uint32)73730)
0: (uint32)Out.type, 0
1: (uint32)73730, 0
2: ((uint32)Out.type == (uint32)73730), 1
With variables ((uint32)Out.type == (uint32)73730)
With lets: ((uint32)Out.type == (uint32)73730)



Input to CSE halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730)
After removing lets: halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730)
Include: halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730); should extract: 1
Include: "Output buffer Out"; should extract: 0
Include: (uint32)Out.type; should extract: 0
Include: (uint32)73730; should extract: 0
Canonical form without lets halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730)
0: "Output buffer Out", 0
1: (uint32)Out.type, 0
2: (uint32)73730, 0
3: halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730), 1
With variables halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730)
With lets: halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730)



Input to CSE (Out.dimensions == 10)
After removing lets: (Out.dimensions == 10)
Include: (Out.dimensions == 10); should extract: 1
Include: Out.dimensions; should extract: 0
Include: 10; should extract: 0
Canonical form without lets (Out.dimensions == 10)
0: Out.dimensions, 0
1: 10, 0
2: (Out.dimensions == 10), 1
With variables (Out.dimensions == 10)
With lets: (Out.dimensions == 10)



Input to CSE halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10)
After removing lets: halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10)
Include: halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10); should extract: 1
Include: "Output buffer Out"; should extract: 0
Include: Out.dimensions; should extract: 0
Include: 10; should extract: 0
Canonical form without lets halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10)
0: "Output buffer Out", 0
1: Out.dimensions, 0
2: 10, 0
3: halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10), 1
With variables halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10)
With lets: halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10)



Input to CSE ((uint32)P.type == (uint32)73730)
After removing lets: ((uint32)P.type == (uint32)73730)
Include: ((uint32)P.type == (uint32)73730); should extract: 1
Include: (uint32)P.type; should extract: 0
Include: (uint32)73730; should extract: 0
Canonical form without lets ((uint32)P.type == (uint32)73730)
0: (uint32)P.type, 0
1: (uint32)73730, 0
2: ((uint32)P.type == (uint32)73730), 1
With variables ((uint32)P.type == (uint32)73730)
With lets: ((uint32)P.type == (uint32)73730)



Input to CSE halide_error_bad_type("Input buffer P", (uint32)P.type, (uint32)73730)
After removing lets: halide_error_bad_type("Input buffer P", (uint32)P.type, (uint32)73730)
Include: halide_error_bad_type("Input buffer P", (uint32)P.type, (uint32)73730); should extract: 1
Include: "Input buffer P"; should extract: 0
Include: (uint32)P.type; should extract: 0
Include: (uint32)73730; should extract: 0
Canonical form without lets halide_error_bad_type("Input buffer P", (uint32)P.type, (uint32)73730)
0: "Input buffer P", 0
1: (uint32)P.type, 0
2: (uint32)73730, 0
3: halide_error_bad_type("Input buffer P", (uint32)P.type, (uint32)73730), 1
With variables halide_error_bad_type("Input buffer P", (uint32)P.type, (uint32)73730)
With lets: halide_error_bad_type("Input buffer P", (uint32)P.type, (uint32)73730)



Input to CSE (P.dimensions == 2)
After removing lets: (P.dimensions == 2)
Include: (P.dimensions == 2); should extract: 1
Include: P.dimensions; should extract: 0
Include: 2; should extract: 0
Canonical form without lets (P.dimensions == 2)
0: P.dimensions, 0
1: 2, 0
2: (P.dimensions == 2), 1
With variables (P.dimensions == 2)
With lets: (P.dimensions == 2)



Input to CSE halide_error_bad_dimensions("Input buffer P", P.dimensions, 2)
After removing lets: halide_error_bad_dimensions("Input buffer P", P.dimensions, 2)
Include: halide_error_bad_dimensions("Input buffer P", P.dimensions, 2); should extract: 1
Include: "Input buffer P"; should extract: 0
Include: P.dimensions; should extract: 0
Include: 2; should extract: 0
Canonical form without lets halide_error_bad_dimensions("Input buffer P", P.dimensions, 2)
0: "Input buffer P", 0
1: P.dimensions, 0
2: 2, 0
3: halide_error_bad_dimensions("Input buffer P", P.dimensions, 2), 1
With variables halide_error_bad_dimensions("Input buffer P", P.dimensions, 2)
With lets: halide_error_bad_dimensions("Input buffer P", P.dimensions, 2)



Input to CSE ((uint32)W.type == (uint32)73730)
After removing lets: ((uint32)W.type == (uint32)73730)
Include: ((uint32)W.type == (uint32)73730); should extract: 1
Include: (uint32)W.type; should extract: 0
Include: (uint32)73730; should extract: 0
Canonical form without lets ((uint32)W.type == (uint32)73730)
0: (uint32)W.type, 0
1: (uint32)73730, 0
2: ((uint32)W.type == (uint32)73730), 1
With variables ((uint32)W.type == (uint32)73730)
With lets: ((uint32)W.type == (uint32)73730)



Input to CSE halide_error_bad_type("Input buffer W", (uint32)W.type, (uint32)73730)
After removing lets: halide_error_bad_type("Input buffer W", (uint32)W.type, (uint32)73730)
Include: halide_error_bad_type("Input buffer W", (uint32)W.type, (uint32)73730); should extract: 1
Include: "Input buffer W"; should extract: 0
Include: (uint32)W.type; should extract: 0
Include: (uint32)73730; should extract: 0
Canonical form without lets halide_error_bad_type("Input buffer W", (uint32)W.type, (uint32)73730)
0: "Input buffer W", 0
1: (uint32)W.type, 0
2: (uint32)73730, 0
3: halide_error_bad_type("Input buffer W", (uint32)W.type, (uint32)73730), 1
With variables halide_error_bad_type("Input buffer W", (uint32)W.type, (uint32)73730)
With lets: halide_error_bad_type("Input buffer W", (uint32)W.type, (uint32)73730)



Input to CSE (W.dimensions == 2)
After removing lets: (W.dimensions == 2)
Include: (W.dimensions == 2); should extract: 1
Include: W.dimensions; should extract: 0
Include: 2; should extract: 0
Canonical form without lets (W.dimensions == 2)
0: W.dimensions, 0
1: 2, 0
2: (W.dimensions == 2), 1
With variables (W.dimensions == 2)
With lets: (W.dimensions == 2)



Input to CSE halide_error_bad_dimensions("Input buffer W", W.dimensions, 2)
After removing lets: halide_error_bad_dimensions("Input buffer W", W.dimensions, 2)
Include: halide_error_bad_dimensions("Input buffer W", W.dimensions, 2); should extract: 1
Include: "Input buffer W"; should extract: 0
Include: W.dimensions; should extract: 0
Include: 2; should extract: 0
Canonical form without lets halide_error_bad_dimensions("Input buffer W", W.dimensions, 2)
0: "Input buffer W", 0
1: W.dimensions, 0
2: 2, 0
3: halide_error_bad_dimensions("Input buffer W", W.dimensions, 2), 1
With variables halide_error_bad_dimensions("Input buffer W", W.dimensions, 2)
With lets: halide_error_bad_dimensions("Input buffer W", W.dimensions, 2)



Input to CSE ((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0)))
After removing lets: ((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0)))
Include: ((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))); should extract: 1
Include: (Out.min.0 <= 0); should extract: 1
Include: Out.min.0; should extract: 0
Include: 0; should extract: 0
Include: (8 <= (Out.extent.0 + Out.min.0)); should extract: 1
Include: 8; should extract: 0
Include: (Out.extent.0 + Out.min.0); should extract: 1
Include: Out.extent.0; should extract: 0
Include: Out.min.0; should extract: 0
Canonical form without lets ((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0)))
0: Out.min.0, 0
1: 0, 0
2: (Out.min.0 <= 0), 1
3: 8, 0
4: Out.extent.0, 0
5: (Out.extent.0 + Out.min.0), 1
6: (8 <= (Out.extent.0 + Out.min.0)), 1
7: ((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), 1
With variables ((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0)))
With lets: ((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0)))



Input to CSE halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1))
After removing lets: halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1))
Include: halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)); should extract: 1
Include: "Output buffer Out"; should extract: 0
Include: 0; should extract: 0
Include: 0; should extract: 0
Include: 7; should extract: 0
Include: Out.min.0; should extract: 0
Include: ((Out.extent.0 + Out.min.0) + -1); should extract: 0
Include: (Out.extent.0 + Out.min.0); should extract: 1
Include: Out.extent.0; should extract: 0
Include: Out.min.0; should extract: 0
Include: -1; should extract: 0
Canonical form without lets halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1))
0: "Output buffer Out", 0
1: 0, 0
2: 7, 0
3: Out.min.0, 0
4: Out.extent.0, 0
5: (Out.extent.0 + Out.min.0), 1
6: -1, 0
7: ((Out.extent.0 + Out.min.0) + -1), 0
8: halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)), 1
With variables halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1))
With lets: halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1))



Input to CSE (0 <= Out.extent.0)
After removing lets: (0 <= Out.extent.0)
Include: (0 <= Out.extent.0); should extract: 1
Include: 0; should extract: 0
Include: Out.extent.0; should extract: 0
Canonical form without lets (0 <= Out.extent.0)
0: 0, 0
1: Out.extent.0, 0
2: (0 <= Out.extent.0), 1
With variables (0 <= Out.extent.0)
With lets: (0 <= Out.extent.0)



Input to CSE halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0)
After removing lets: halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0)
Include: halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0); should extract: 1
Include: "Output buffer Out"; should extract: 0
Include: 0; should extract: 0
Include: Out.extent.0; should extract: 0
Canonical form without lets halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0)
0: "Output buffer Out", 0
1: 0, 0
2: Out.extent.0, 0
3: halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0), 1
With variables halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0)
With lets: halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0)



Input to CSE ((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1)))
After removing lets: ((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1)))
Include: ((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))); should extract: 1
Include: (Out.min.1 <= 0); should extract: 1
Include: Out.min.1; should extract: 0
Include: 0; should extract: 0
Include: (7 <= (Out.extent.1 + Out.min.1)); should extract: 1
Include: 7; should extract: 0
Include: (Out.extent.1 + Out.min.1); should extract: 1
Include: Out.extent.1; should extract: 0
Include: Out.min.1; should extract: 0
Canonical form without lets ((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1)))
0: Out.min.1, 0
1: 0, 0
2: (Out.min.1 <= 0), 1
3: 7, 0
4: Out.extent.1, 0
5: (Out.extent.1 + Out.min.1), 1
6: (7 <= (Out.extent.1 + Out.min.1)), 1
7: ((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), 1
With variables ((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1)))
With lets: ((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1)))



Input to CSE halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1))
After removing lets: halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1))
Include: halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)); should extract: 1
Include: "Output buffer Out"; should extract: 0
Include: 1; should extract: 0
Include: 0; should extract: 0
Include: 6; should extract: 0
Include: Out.min.1; should extract: 0
Include: ((Out.extent.1 + Out.min.1) + -1); should extract: 0
Include: (Out.extent.1 + Out.min.1); should extract: 1
Include: Out.extent.1; should extract: 0
Include: Out.min.1; should extract: 0
Include: -1; should extract: 0
Canonical form without lets halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1))
0: "Output buffer Out", 0
1: 1, 0
2: 0, 0
3: 6, 0
4: Out.min.1, 0
5: Out.extent.1, 0
6: (Out.extent.1 + Out.min.1), 1
7: -1, 0
8: ((Out.extent.1 + Out.min.1) + -1), 0
9: halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)), 1
With variables halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1))
With lets: halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1))



Input to CSE (0 <= Out.extent.1)
After removing lets: (0 <= Out.extent.1)
Include: (0 <= Out.extent.1); should extract: 1
Include: 0; should extract: 0
Include: Out.extent.1; should extract: 0
Canonical form without lets (0 <= Out.extent.1)
0: 0, 0
1: Out.extent.1, 0
2: (0 <= Out.extent.1), 1
With variables (0 <= Out.extent.1)
With lets: (0 <= Out.extent.1)



Input to CSE halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1)
After removing lets: halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1)
Include: halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1); should extract: 1
Include: "Output buffer Out"; should extract: 0
Include: 1; should extract: 0
Include: Out.extent.1; should extract: 0
Canonical form without lets halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1)
0: "Output buffer Out", 0
1: 1, 0
2: Out.extent.1, 0
3: halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1), 1
With variables halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1)
With lets: halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1)



Input to CSE ((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2)))
After removing lets: ((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2)))
Include: ((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))); should extract: 1
Include: (Out.min.2 <= 0); should extract: 1
Include: Out.min.2; should extract: 0
Include: 0; should extract: 0
Include: (7 <= (Out.extent.2 + Out.min.2)); should extract: 1
Include: 7; should extract: 0
Include: (Out.extent.2 + Out.min.2); should extract: 1
Include: Out.extent.2; should extract: 0
Include: Out.min.2; should extract: 0
Canonical form without lets ((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2)))
0: Out.min.2, 0
1: 0, 0
2: (Out.min.2 <= 0), 1
3: 7, 0
4: Out.extent.2, 0
5: (Out.extent.2 + Out.min.2), 1
6: (7 <= (Out.extent.2 + Out.min.2)), 1
7: ((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), 1
With variables ((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2)))
With lets: ((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2)))



Input to CSE halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1))
After removing lets: halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1))
Include: halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)); should extract: 1
Include: "Output buffer Out"; should extract: 0
Include: 2; should extract: 0
Include: 0; should extract: 0
Include: 6; should extract: 0
Include: Out.min.2; should extract: 0
Include: ((Out.extent.2 + Out.min.2) + -1); should extract: 0
Include: (Out.extent.2 + Out.min.2); should extract: 1
Include: Out.extent.2; should extract: 0
Include: Out.min.2; should extract: 0
Include: -1; should extract: 0
Canonical form without lets halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1))
0: "Output buffer Out", 0
1: 2, 0
2: 0, 0
3: 6, 0
4: Out.min.2, 0
5: Out.extent.2, 0
6: (Out.extent.2 + Out.min.2), 1
7: -1, 0
8: ((Out.extent.2 + Out.min.2) + -1), 0
9: halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)), 1
With variables halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1))
With lets: halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1))



Input to CSE (0 <= Out.extent.2)
After removing lets: (0 <= Out.extent.2)
Include: (0 <= Out.extent.2); should extract: 1
Include: 0; should extract: 0
Include: Out.extent.2; should extract: 0
Canonical form without lets (0 <= Out.extent.2)
0: 0, 0
1: Out.extent.2, 0
2: (0 <= Out.extent.2), 1
With variables (0 <= Out.extent.2)
With lets: (0 <= Out.extent.2)



Input to CSE halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2)
After removing lets: halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2)
Include: halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2); should extract: 1
Include: "Output buffer Out"; should extract: 0
Include: 2; should extract: 0
Include: Out.extent.2; should extract: 0
Canonical form without lets halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2)
0: "Output buffer Out", 0
1: 2, 0
2: Out.extent.2, 0
3: halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2), 1
With variables halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2)
With lets: halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2)



Input to CSE ((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3)))
After removing lets: ((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3)))
Include: ((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))); should extract: 1
Include: (Out.min.3 <= 0); should extract: 1
Include: Out.min.3; should extract: 0
Include: 0; should extract: 0
Include: (1 <= (Out.extent.3 + Out.min.3)); should extract: 1
Include: 1; should extract: 0
Include: (Out.extent.3 + Out.min.3); should extract: 1
Include: Out.extent.3; should extract: 0
Include: Out.min.3; should extract: 0
Canonical form without lets ((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3)))
0: Out.min.3, 0
1: 0, 0
2: (Out.min.3 <= 0), 1
3: 1, 0
4: Out.extent.3, 0
5: (Out.extent.3 + Out.min.3), 1
6: (1 <= (Out.extent.3 + Out.min.3)), 1
7: ((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), 1
With variables ((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3)))
With lets: ((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3)))



Input to CSE halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1))
After removing lets: halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1))
Include: halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)); should extract: 1
Include: "Output buffer Out"; should extract: 0
Include: 3; should extract: 0
Include: 0; should extract: 0
Include: 0; should extract: 0
Include: Out.min.3; should extract: 0
Include: ((Out.extent.3 + Out.min.3) + -1); should extract: 0
Include: (Out.extent.3 + Out.min.3); should extract: 1
Include: Out.extent.3; should extract: 0
Include: Out.min.3; should extract: 0
Include: -1; should extract: 0
Canonical form without lets halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1))
0: "Output buffer Out", 0
1: 3, 0
2: 0, 0
3: Out.min.3, 0
4: Out.extent.3, 0
5: (Out.extent.3 + Out.min.3), 1
6: -1, 0
7: ((Out.extent.3 + Out.min.3) + -1), 0
8: halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)), 1
With variables halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1))
With lets: halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1))



Input to CSE (0 <= Out.extent.3)
After removing lets: (0 <= Out.extent.3)
Include: (0 <= Out.extent.3); should extract: 1
Include: 0; should extract: 0
Include: Out.extent.3; should extract: 0
Canonical form without lets (0 <= Out.extent.3)
0: 0, 0
1: Out.extent.3, 0
2: (0 <= Out.extent.3), 1
With variables (0 <= Out.extent.3)
With lets: (0 <= Out.extent.3)



Input to CSE halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3)
After removing lets: halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3)
Include: halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3); should extract: 1
Include: "Output buffer Out"; should extract: 0
Include: 3; should extract: 0
Include: Out.extent.3; should extract: 0
Canonical form without lets halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3)
0: "Output buffer Out", 0
1: 3, 0
2: Out.extent.3, 0
3: halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3), 1
With variables halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3)
With lets: halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3)



Input to CSE ((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4)))
After removing lets: ((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4)))
Include: ((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))); should extract: 1
Include: (Out.min.4 <= 0); should extract: 1
Include: Out.min.4; should extract: 0
Include: 0; should extract: 0
Include: (4 <= (Out.extent.4 + Out.min.4)); should extract: 1
Include: 4; should extract: 0
Include: (Out.extent.4 + Out.min.4); should extract: 1
Include: Out.extent.4; should extract: 0
Include: Out.min.4; should extract: 0
Canonical form without lets ((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4)))
0: Out.min.4, 0
1: 0, 0
2: (Out.min.4 <= 0), 1
3: 4, 0
4: Out.extent.4, 0
5: (Out.extent.4 + Out.min.4), 1
6: (4 <= (Out.extent.4 + Out.min.4)), 1
7: ((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), 1
With variables ((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4)))
With lets: ((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4)))



Input to CSE halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1))
After removing lets: halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1))
Include: halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)); should extract: 1
Include: "Output buffer Out"; should extract: 0
Include: 4; should extract: 0
Include: 0; should extract: 0
Include: 3; should extract: 0
Include: Out.min.4; should extract: 0
Include: ((Out.extent.4 + Out.min.4) + -1); should extract: 0
Include: (Out.extent.4 + Out.min.4); should extract: 1
Include: Out.extent.4; should extract: 0
Include: Out.min.4; should extract: 0
Include: -1; should extract: 0
Canonical form without lets halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1))
0: "Output buffer Out", 0
1: 4, 0
2: 0, 0
3: 3, 0
4: Out.min.4, 0
5: Out.extent.4, 0
6: (Out.extent.4 + Out.min.4), 1
7: -1, 0
8: ((Out.extent.4 + Out.min.4) + -1), 0
9: halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)), 1
With variables halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1))
With lets: halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1))



Input to CSE (0 <= Out.extent.4)
After removing lets: (0 <= Out.extent.4)
Include: (0 <= Out.extent.4); should extract: 1
Include: 0; should extract: 0
Include: Out.extent.4; should extract: 0
Canonical form without lets (0 <= Out.extent.4)
0: 0, 0
1: Out.extent.4, 0
2: (0 <= Out.extent.4), 1
With variables (0 <= Out.extent.4)
With lets: (0 <= Out.extent.4)



Input to CSE halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4)
After removing lets: halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4)
Include: halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4); should extract: 1
Include: "Output buffer Out"; should extract: 0
Include: 4; should extract: 0
Include: Out.extent.4; should extract: 0
Canonical form without lets halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4)
0: "Output buffer Out", 0
1: 4, 0
2: Out.extent.4, 0
3: halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4), 1
With variables halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4)
With lets: halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4)



Input to CSE ((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5)))
After removing lets: ((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5)))
Include: ((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))); should extract: 1
Include: (Out.min.5 <= 0); should extract: 1
Include: Out.min.5; should extract: 0
Include: 0; should extract: 0
Include: (4 <= (Out.extent.5 + Out.min.5)); should extract: 1
Include: 4; should extract: 0
Include: (Out.extent.5 + Out.min.5); should extract: 1
Include: Out.extent.5; should extract: 0
Include: Out.min.5; should extract: 0
Canonical form without lets ((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5)))
0: Out.min.5, 0
1: 0, 0
2: (Out.min.5 <= 0), 1
3: 4, 0
4: Out.extent.5, 0
5: (Out.extent.5 + Out.min.5), 1
6: (4 <= (Out.extent.5 + Out.min.5)), 1
7: ((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), 1
With variables ((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5)))
With lets: ((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5)))



Input to CSE halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1))
After removing lets: halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1))
Include: halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)); should extract: 1
Include: "Output buffer Out"; should extract: 0
Include: 5; should extract: 0
Include: 0; should extract: 0
Include: 3; should extract: 0
Include: Out.min.5; should extract: 0
Include: ((Out.extent.5 + Out.min.5) + -1); should extract: 0
Include: (Out.extent.5 + Out.min.5); should extract: 1
Include: Out.extent.5; should extract: 0
Include: Out.min.5; should extract: 0
Include: -1; should extract: 0
Canonical form without lets halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1))
0: "Output buffer Out", 0
1: 5, 0
2: 0, 0
3: 3, 0
4: Out.min.5, 0
5: Out.extent.5, 0
6: (Out.extent.5 + Out.min.5), 1
7: -1, 0
8: ((Out.extent.5 + Out.min.5) + -1), 0
9: halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)), 1
With variables halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1))
With lets: halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1))



Input to CSE (0 <= Out.extent.5)
After removing lets: (0 <= Out.extent.5)
Include: (0 <= Out.extent.5); should extract: 1
Include: 0; should extract: 0
Include: Out.extent.5; should extract: 0
Canonical form without lets (0 <= Out.extent.5)
0: 0, 0
1: Out.extent.5, 0
2: (0 <= Out.extent.5), 1
With variables (0 <= Out.extent.5)
With lets: (0 <= Out.extent.5)



Input to CSE halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5)
After removing lets: halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5)
Include: halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5); should extract: 1
Include: "Output buffer Out"; should extract: 0
Include: 5; should extract: 0
Include: Out.extent.5; should extract: 0
Canonical form without lets halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5)
0: "Output buffer Out", 0
1: 5, 0
2: Out.extent.5, 0
3: halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5), 1
With variables halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5)
With lets: halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5)



Input to CSE ((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6)))
After removing lets: ((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6)))
Include: ((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))); should extract: 1
Include: (Out.min.6 <= 0); should extract: 1
Include: Out.min.6; should extract: 0
Include: 0; should extract: 0
Include: (1 <= (Out.extent.6 + Out.min.6)); should extract: 1
Include: 1; should extract: 0
Include: (Out.extent.6 + Out.min.6); should extract: 1
Include: Out.extent.6; should extract: 0
Include: Out.min.6; should extract: 0
Canonical form without lets ((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6)))
0: Out.min.6, 0
1: 0, 0
2: (Out.min.6 <= 0), 1
3: 1, 0
4: Out.extent.6, 0
5: (Out.extent.6 + Out.min.6), 1
6: (1 <= (Out.extent.6 + Out.min.6)), 1
7: ((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), 1
With variables ((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6)))
With lets: ((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6)))



Input to CSE halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1))
After removing lets: halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1))
Include: halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)); should extract: 1
Include: "Output buffer Out"; should extract: 0
Include: 6; should extract: 0
Include: 0; should extract: 0
Include: 0; should extract: 0
Include: Out.min.6; should extract: 0
Include: ((Out.extent.6 + Out.min.6) + -1); should extract: 0
Include: (Out.extent.6 + Out.min.6); should extract: 1
Include: Out.extent.6; should extract: 0
Include: Out.min.6; should extract: 0
Include: -1; should extract: 0
Canonical form without lets halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1))
0: "Output buffer Out", 0
1: 6, 0
2: 0, 0
3: Out.min.6, 0
4: Out.extent.6, 0
5: (Out.extent.6 + Out.min.6), 1
6: -1, 0
7: ((Out.extent.6 + Out.min.6) + -1), 0
8: halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)), 1
With variables halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1))
With lets: halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1))



Input to CSE (0 <= Out.extent.6)
After removing lets: (0 <= Out.extent.6)
Include: (0 <= Out.extent.6); should extract: 1
Include: 0; should extract: 0
Include: Out.extent.6; should extract: 0
Canonical form without lets (0 <= Out.extent.6)
0: 0, 0
1: Out.extent.6, 0
2: (0 <= Out.extent.6), 1
With variables (0 <= Out.extent.6)
With lets: (0 <= Out.extent.6)



Input to CSE halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6)
After removing lets: halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6)
Include: halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6); should extract: 1
Include: "Output buffer Out"; should extract: 0
Include: 6; should extract: 0
Include: Out.extent.6; should extract: 0
Canonical form without lets halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6)
0: "Output buffer Out", 0
1: 6, 0
2: Out.extent.6, 0
3: halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6), 1
With variables halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6)
With lets: halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6)



Input to CSE ((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7)))
After removing lets: ((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7)))
Include: ((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))); should extract: 1
Include: (Out.min.7 <= 0); should extract: 1
Include: Out.min.7; should extract: 0
Include: 0; should extract: 0
Include: (16 <= (Out.extent.7 + Out.min.7)); should extract: 1
Include: 16; should extract: 0
Include: (Out.extent.7 + Out.min.7); should extract: 1
Include: Out.extent.7; should extract: 0
Include: Out.min.7; should extract: 0
Canonical form without lets ((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7)))
0: Out.min.7, 0
1: 0, 0
2: (Out.min.7 <= 0), 1
3: 16, 0
4: Out.extent.7, 0
5: (Out.extent.7 + Out.min.7), 1
6: (16 <= (Out.extent.7 + Out.min.7)), 1
7: ((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), 1
With variables ((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7)))
With lets: ((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7)))



Input to CSE halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1))
After removing lets: halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1))
Include: halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)); should extract: 1
Include: "Output buffer Out"; should extract: 0
Include: 7; should extract: 0
Include: 0; should extract: 0
Include: 15; should extract: 0
Include: Out.min.7; should extract: 0
Include: ((Out.extent.7 + Out.min.7) + -1); should extract: 0
Include: (Out.extent.7 + Out.min.7); should extract: 1
Include: Out.extent.7; should extract: 0
Include: Out.min.7; should extract: 0
Include: -1; should extract: 0
Canonical form without lets halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1))
0: "Output buffer Out", 0
1: 7, 0
2: 0, 0
3: 15, 0
4: Out.min.7, 0
5: Out.extent.7, 0
6: (Out.extent.7 + Out.min.7), 1
7: -1, 0
8: ((Out.extent.7 + Out.min.7) + -1), 0
9: halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)), 1
With variables halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1))
With lets: halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1))



Input to CSE (0 <= Out.extent.7)
After removing lets: (0 <= Out.extent.7)
Include: (0 <= Out.extent.7); should extract: 1
Include: 0; should extract: 0
Include: Out.extent.7; should extract: 0
Canonical form without lets (0 <= Out.extent.7)
0: 0, 0
1: Out.extent.7, 0
2: (0 <= Out.extent.7), 1
With variables (0 <= Out.extent.7)
With lets: (0 <= Out.extent.7)



Input to CSE halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7)
After removing lets: halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7)
Include: halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7); should extract: 1
Include: "Output buffer Out"; should extract: 0
Include: 7; should extract: 0
Include: Out.extent.7; should extract: 0
Canonical form without lets halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7)
0: "Output buffer Out", 0
1: 7, 0
2: Out.extent.7, 0
3: halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7), 1
With variables halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7)
With lets: halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7)



Input to CSE ((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8)))
After removing lets: ((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8)))
Include: ((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))); should extract: 1
Include: (Out.min.8 <= 0); should extract: 1
Include: Out.min.8; should extract: 0
Include: 0; should extract: 0
Include: (4 <= (Out.extent.8 + Out.min.8)); should extract: 1
Include: 4; should extract: 0
Include: (Out.extent.8 + Out.min.8); should extract: 1
Include: Out.extent.8; should extract: 0
Include: Out.min.8; should extract: 0
Canonical form without lets ((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8)))
0: Out.min.8, 0
1: 0, 0
2: (Out.min.8 <= 0), 1
3: 4, 0
4: Out.extent.8, 0
5: (Out.extent.8 + Out.min.8), 1
6: (4 <= (Out.extent.8 + Out.min.8)), 1
7: ((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), 1
With variables ((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8)))
With lets: ((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8)))



Input to CSE halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1))
After removing lets: halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1))
Include: halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)); should extract: 1
Include: "Output buffer Out"; should extract: 0
Include: 8; should extract: 0
Include: 0; should extract: 0
Include: 3; should extract: 0
Include: Out.min.8; should extract: 0
Include: ((Out.extent.8 + Out.min.8) + -1); should extract: 0
Include: (Out.extent.8 + Out.min.8); should extract: 1
Include: Out.extent.8; should extract: 0
Include: Out.min.8; should extract: 0
Include: -1; should extract: 0
Canonical form without lets halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1))
0: "Output buffer Out", 0
1: 8, 0
2: 0, 0
3: 3, 0
4: Out.min.8, 0
5: Out.extent.8, 0
6: (Out.extent.8 + Out.min.8), 1
7: -1, 0
8: ((Out.extent.8 + Out.min.8) + -1), 0
9: halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)), 1
With variables halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1))
With lets: halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1))



Input to CSE (0 <= Out.extent.8)
After removing lets: (0 <= Out.extent.8)
Include: (0 <= Out.extent.8); should extract: 1
Include: 0; should extract: 0
Include: Out.extent.8; should extract: 0
Canonical form without lets (0 <= Out.extent.8)
0: 0, 0
1: Out.extent.8, 0
2: (0 <= Out.extent.8), 1
With variables (0 <= Out.extent.8)
With lets: (0 <= Out.extent.8)



Input to CSE halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8)
After removing lets: halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8)
Include: halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8); should extract: 1
Include: "Output buffer Out"; should extract: 0
Include: 8; should extract: 0
Include: Out.extent.8; should extract: 0
Canonical form without lets halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8)
0: "Output buffer Out", 0
1: 8, 0
2: Out.extent.8, 0
3: halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8), 1
With variables halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8)
With lets: halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8)



Input to CSE ((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9)))
After removing lets: ((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9)))
Include: ((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))); should extract: 1
Include: (Out.min.9 <= 0); should extract: 1
Include: Out.min.9; should extract: 0
Include: 0; should extract: 0
Include: ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9)); should extract: 1
Include: (P.extent.1/3600); should extract: 0
Include: P.extent.1; should extract: 0
Include: 3600; should extract: 0
Include: (Out.extent.9 + Out.min.9); should extract: 1
Include: Out.extent.9; should extract: 0
Include: Out.min.9; should extract: 0
Canonical form without lets ((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9)))
0: Out.min.9, 0
1: 0, 0
2: (Out.min.9 <= 0), 1
3: P.extent.1, 0
4: 3600, 0
5: (P.extent.1/3600), 0
6: Out.extent.9, 0
7: (Out.extent.9 + Out.min.9), 1
8: ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9)), 1
9: ((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), 1
With variables ((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9)))
With lets: ((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9)))



Input to CSE halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1))
After removing lets: halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1))
Include: halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)); should extract: 1
Include: "Output buffer Out"; should extract: 0
Include: 9; should extract: 0
Include: 0; should extract: 0
Include: ((P.extent.1/3600) + -1); should extract: 0
Include: (P.extent.1/3600); should extract: 0
Include: P.extent.1; should extract: 0
Include: 3600; should extract: 0
Include: -1; should extract: 0
Include: Out.min.9; should extract: 0
Include: ((Out.extent.9 + Out.min.9) + -1); should extract: 0
Include: (Out.extent.9 + Out.min.9); should extract: 1
Include: Out.extent.9; should extract: 0
Include: Out.min.9; should extract: 0
Include: -1; should extract: 0
Canonical form without lets halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1))
0: "Output buffer Out", 0
1: 9, 0
2: 0, 0
3: P.extent.1, 0
4: 3600, 0
5: (P.extent.1/3600), 0
6: -1, 0
7: ((P.extent.1/3600) + -1), 0
8: Out.min.9, 0
9: Out.extent.9, 0
10: (Out.extent.9 + Out.min.9), 1
11: ((Out.extent.9 + Out.min.9) + -1), 0
12: halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)), 1
With variables halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1))
With lets: halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1))



Input to CSE (0 <= Out.extent.9)
After removing lets: (0 <= Out.extent.9)
Include: (0 <= Out.extent.9); should extract: 1
Include: 0; should extract: 0
Include: Out.extent.9; should extract: 0
Canonical form without lets (0 <= Out.extent.9)
0: 0, 0
1: Out.extent.9, 0
2: (0 <= Out.extent.9), 1
With variables (0 <= Out.extent.9)
With lets: (0 <= Out.extent.9)



Input to CSE halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9)
After removing lets: halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9)
Include: halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9); should extract: 1
Include: "Output buffer Out"; should extract: 0
Include: 9; should extract: 0
Include: Out.extent.9; should extract: 0
Canonical form without lets halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9)
0: "Output buffer Out", 0
1: 9, 0
2: Out.extent.9, 0
3: halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9), 1
With variables halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9)
With lets: halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9)



Input to CSE (0 <= P.extent.0)
After removing lets: (0 <= P.extent.0)
Include: (0 <= P.extent.0); should extract: 1
Include: 0; should extract: 0
Include: P.extent.0; should extract: 0
Canonical form without lets (0 <= P.extent.0)
0: 0, 0
1: P.extent.0, 0
2: (0 <= P.extent.0), 1
With variables (0 <= P.extent.0)
With lets: (0 <= P.extent.0)



Input to CSE halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0)
After removing lets: halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0)
Include: halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0); should extract: 1
Include: "Input buffer P"; should extract: 0
Include: 0; should extract: 0
Include: P.extent.0; should extract: 0
Canonical form without lets halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0)
0: "Input buffer P", 0
1: 0, 0
2: P.extent.0, 0
3: halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0), 1
With variables halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0)
With lets: halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0)



Input to CSE (0 <= P.extent.1)
After removing lets: (0 <= P.extent.1)
Include: (0 <= P.extent.1); should extract: 1
Include: 0; should extract: 0
Include: P.extent.1; should extract: 0
Canonical form without lets (0 <= P.extent.1)
0: 0, 0
1: P.extent.1, 0
2: (0 <= P.extent.1), 1
With variables (0 <= P.extent.1)
With lets: (0 <= P.extent.1)



Input to CSE halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1)
After removing lets: halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1)
Include: halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1); should extract: 1
Include: "Input buffer P"; should extract: 0
Include: 1; should extract: 0
Include: P.extent.1; should extract: 0
Canonical form without lets halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1)
0: "Input buffer P", 0
1: 1, 0
2: P.extent.1, 0
3: halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1), 1
With variables halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1)
With lets: halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1)



Input to CSE (0 <= W.extent.0)
After removing lets: (0 <= W.extent.0)
Include: (0 <= W.extent.0); should extract: 1
Include: 0; should extract: 0
Include: W.extent.0; should extract: 0
Canonical form without lets (0 <= W.extent.0)
0: 0, 0
1: W.extent.0, 0
2: (0 <= W.extent.0), 1
With variables (0 <= W.extent.0)
With lets: (0 <= W.extent.0)



Input to CSE halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0)
After removing lets: halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0)
Include: halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0); should extract: 1
Include: "Input buffer W"; should extract: 0
Include: 0; should extract: 0
Include: W.extent.0; should extract: 0
Canonical form without lets halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0)
0: "Input buffer W", 0
1: 0, 0
2: W.extent.0, 0
3: halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0), 1
With variables halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0)
With lets: halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0)



Input to CSE (0 <= W.extent.1)
After removing lets: (0 <= W.extent.1)
Include: (0 <= W.extent.1); should extract: 1
Include: 0; should extract: 0
Include: W.extent.1; should extract: 0
Canonical form without lets (0 <= W.extent.1)
0: 0, 0
1: W.extent.1, 0
2: (0 <= W.extent.1), 1
With variables (0 <= W.extent.1)
With lets: (0 <= W.extent.1)



Input to CSE halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1)
After removing lets: halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1)
Include: halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1); should extract: 1
Include: "Input buffer W"; should extract: 0
Include: 1; should extract: 0
Include: W.extent.1; should extract: 0
Canonical form without lets halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1)
0: "Input buffer W", 0
1: 1, 0
2: W.extent.1, 0
3: halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1), 1
With variables halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1)
With lets: halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1)



Input to CSE (Out.stride.0 == 1)
After removing lets: (Out.stride.0 == 1)
Include: (Out.stride.0 == 1); should extract: 1
Include: Out.stride.0; should extract: 0
Include: 1; should extract: 0
Canonical form without lets (Out.stride.0 == 1)
0: Out.stride.0, 0
1: 1, 0
2: (Out.stride.0 == 1), 1
With variables (Out.stride.0 == 1)
With lets: (Out.stride.0 == 1)



Input to CSE halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1)
After removing lets: halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1)
Include: halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1); should extract: 1
Include: "Out.stride.0"; should extract: 0
Include: Out.stride.0; should extract: 0
Include: "1"; should extract: 0
Include: 1; should extract: 0
Canonical form without lets halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1)
0: "Out.stride.0", 0
1: Out.stride.0, 0
2: "1", 0
3: 1, 0
4: halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1), 1
With variables halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1)
With lets: halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1)



Input to CSE (P.stride.0 == 1)
After removing lets: (P.stride.0 == 1)
Include: (P.stride.0 == 1); should extract: 1
Include: P.stride.0; should extract: 0
Include: 1; should extract: 0
Canonical form without lets (P.stride.0 == 1)
0: P.stride.0, 0
1: 1, 0
2: (P.stride.0 == 1), 1
With variables (P.stride.0 == 1)
With lets: (P.stride.0 == 1)



Input to CSE halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1)
After removing lets: halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1)
Include: halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1); should extract: 1
Include: "P.stride.0"; should extract: 0
Include: P.stride.0; should extract: 0
Include: "1"; should extract: 0
Include: 1; should extract: 0
Canonical form without lets halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1)
0: "P.stride.0", 0
1: P.stride.0, 0
2: "1", 0
3: 1, 0
4: halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1), 1
With variables halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1)
With lets: halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1)



Input to CSE (W.stride.0 == 1)
After removing lets: (W.stride.0 == 1)
Include: (W.stride.0 == 1); should extract: 1
Include: W.stride.0; should extract: 0
Include: 1; should extract: 0
Canonical form without lets (W.stride.0 == 1)
0: W.stride.0, 0
1: 1, 0
2: (W.stride.0 == 1), 1
With variables (W.stride.0 == 1)
With lets: (W.stride.0 == 1)



Input to CSE halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1)
After removing lets: halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1)
Include: halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1); should extract: 1
Include: "W.stride.0"; should extract: 0
Include: W.stride.0; should extract: 0
Include: "1"; should extract: 0
Include: 1; should extract: 0
Canonical form without lets halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1)
0: "W.stride.0", 0
1: W.stride.0, 0
2: "1", 0
3: 1, 0
4: halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1), 1
With variables halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1)
With lets: halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1)



Input to CSE (int64(Out.extent.1)*int64(Out.extent.0))
After removing lets: (int64(Out.extent.1)*int64(Out.extent.0))
Include: (int64(Out.extent.1)*int64(Out.extent.0)); should extract: 1
Include: int64(Out.extent.1); should extract: 0
Include: Out.extent.1; should extract: 0
Include: int64(Out.extent.0); should extract: 0
Include: Out.extent.0; should extract: 0
Canonical form without lets (int64(Out.extent.1)*int64(Out.extent.0))
0: Out.extent.1, 0
1: int64(Out.extent.1), 0
2: Out.extent.0, 0
3: int64(Out.extent.0), 0
4: (int64(Out.extent.1)*int64(Out.extent.0)), 1
With variables (int64(Out.extent.1)*int64(Out.extent.0))
With lets: (int64(Out.extent.1)*int64(Out.extent.0))



Input to CSE ((int64)Out.total_extent.1*int64(Out.extent.2))
After removing lets: ((int64)Out.total_extent.1*int64(Out.extent.2))
Include: ((int64)Out.total_extent.1*int64(Out.extent.2)); should extract: 1
Include: (int64)Out.total_extent.1; should extract: 0
Include: int64(Out.extent.2); should extract: 0
Include: Out.extent.2; should extract: 0
Canonical form without lets ((int64)Out.total_extent.1*int64(Out.extent.2))
0: (int64)Out.total_extent.1, 0
1: Out.extent.2, 0
2: int64(Out.extent.2), 0
3: ((int64)Out.total_extent.1*int64(Out.extent.2)), 1
With variables ((int64)Out.total_extent.1*int64(Out.extent.2))
With lets: ((int64)Out.total_extent.1*int64(Out.extent.2))



Input to CSE ((int64)Out.total_extent.2*int64(Out.extent.3))
After removing lets: ((int64)Out.total_extent.2*int64(Out.extent.3))
Include: ((int64)Out.total_extent.2*int64(Out.extent.3)); should extract: 1
Include: (int64)Out.total_extent.2; should extract: 0
Include: int64(Out.extent.3); should extract: 0
Include: Out.extent.3; should extract: 0
Canonical form without lets ((int64)Out.total_extent.2*int64(Out.extent.3))
0: (int64)Out.total_extent.2, 0
1: Out.extent.3, 0
2: int64(Out.extent.3), 0
3: ((int64)Out.total_extent.2*int64(Out.extent.3)), 1
With variables ((int64)Out.total_extent.2*int64(Out.extent.3))
With lets: ((int64)Out.total_extent.2*int64(Out.extent.3))



Input to CSE ((int64)Out.total_extent.3*int64(Out.extent.4))
After removing lets: ((int64)Out.total_extent.3*int64(Out.extent.4))
Include: ((int64)Out.total_extent.3*int64(Out.extent.4)); should extract: 1
Include: (int64)Out.total_extent.3; should extract: 0
Include: int64(Out.extent.4); should extract: 0
Include: Out.extent.4; should extract: 0
Canonical form without lets ((int64)Out.total_extent.3*int64(Out.extent.4))
0: (int64)Out.total_extent.3, 0
1: Out.extent.4, 0
2: int64(Out.extent.4), 0
3: ((int64)Out.total_extent.3*int64(Out.extent.4)), 1
With variables ((int64)Out.total_extent.3*int64(Out.extent.4))
With lets: ((int64)Out.total_extent.3*int64(Out.extent.4))



Input to CSE ((int64)Out.total_extent.4*int64(Out.extent.5))
After removing lets: ((int64)Out.total_extent.4*int64(Out.extent.5))
Include: ((int64)Out.total_extent.4*int64(Out.extent.5)); should extract: 1
Include: (int64)Out.total_extent.4; should extract: 0
Include: int64(Out.extent.5); should extract: 0
Include: Out.extent.5; should extract: 0
Canonical form without lets ((int64)Out.total_extent.4*int64(Out.extent.5))
0: (int64)Out.total_extent.4, 0
1: Out.extent.5, 0
2: int64(Out.extent.5), 0
3: ((int64)Out.total_extent.4*int64(Out.extent.5)), 1
With variables ((int64)Out.total_extent.4*int64(Out.extent.5))
With lets: ((int64)Out.total_extent.4*int64(Out.extent.5))



Input to CSE ((int64)Out.total_extent.5*int64(Out.extent.6))
After removing lets: ((int64)Out.total_extent.5*int64(Out.extent.6))
Include: ((int64)Out.total_extent.5*int64(Out.extent.6)); should extract: 1
Include: (int64)Out.total_extent.5; should extract: 0
Include: int64(Out.extent.6); should extract: 0
Include: Out.extent.6; should extract: 0
Canonical form without lets ((int64)Out.total_extent.5*int64(Out.extent.6))
0: (int64)Out.total_extent.5, 0
1: Out.extent.6, 0
2: int64(Out.extent.6), 0
3: ((int64)Out.total_extent.5*int64(Out.extent.6)), 1
With variables ((int64)Out.total_extent.5*int64(Out.extent.6))
With lets: ((int64)Out.total_extent.5*int64(Out.extent.6))



Input to CSE ((int64)Out.total_extent.6*int64(Out.extent.7))
After removing lets: ((int64)Out.total_extent.6*int64(Out.extent.7))
Include: ((int64)Out.total_extent.6*int64(Out.extent.7)); should extract: 1
Include: (int64)Out.total_extent.6; should extract: 0
Include: int64(Out.extent.7); should extract: 0
Include: Out.extent.7; should extract: 0
Canonical form without lets ((int64)Out.total_extent.6*int64(Out.extent.7))
0: (int64)Out.total_extent.6, 0
1: Out.extent.7, 0
2: int64(Out.extent.7), 0
3: ((int64)Out.total_extent.6*int64(Out.extent.7)), 1
With variables ((int64)Out.total_extent.6*int64(Out.extent.7))
With lets: ((int64)Out.total_extent.6*int64(Out.extent.7))



Input to CSE ((int64)Out.total_extent.7*int64(Out.extent.8))
After removing lets: ((int64)Out.total_extent.7*int64(Out.extent.8))
Include: ((int64)Out.total_extent.7*int64(Out.extent.8)); should extract: 1
Include: (int64)Out.total_extent.7; should extract: 0
Include: int64(Out.extent.8); should extract: 0
Include: Out.extent.8; should extract: 0
Canonical form without lets ((int64)Out.total_extent.7*int64(Out.extent.8))
0: (int64)Out.total_extent.7, 0
1: Out.extent.8, 0
2: int64(Out.extent.8), 0
3: ((int64)Out.total_extent.7*int64(Out.extent.8)), 1
With variables ((int64)Out.total_extent.7*int64(Out.extent.8))
With lets: ((int64)Out.total_extent.7*int64(Out.extent.8))



Input to CSE ((int64)Out.total_extent.8*int64(Out.extent.9))
After removing lets: ((int64)Out.total_extent.8*int64(Out.extent.9))
Include: ((int64)Out.total_extent.8*int64(Out.extent.9)); should extract: 1
Include: (int64)Out.total_extent.8; should extract: 0
Include: int64(Out.extent.9); should extract: 0
Include: Out.extent.9; should extract: 0
Canonical form without lets ((int64)Out.total_extent.8*int64(Out.extent.9))
0: (int64)Out.total_extent.8, 0
1: Out.extent.9, 0
2: int64(Out.extent.9), 0
3: ((int64)Out.total_extent.8*int64(Out.extent.9)), 1
With variables ((int64)Out.total_extent.8*int64(Out.extent.9))
With lets: ((int64)Out.total_extent.8*int64(Out.extent.9))



Input to CSE (int64(P.extent.1)*int64(P.extent.0))
After removing lets: (int64(P.extent.1)*int64(P.extent.0))
Include: (int64(P.extent.1)*int64(P.extent.0)); should extract: 1
Include: int64(P.extent.1); should extract: 0
Include: P.extent.1; should extract: 0
Include: int64(P.extent.0); should extract: 0
Include: P.extent.0; should extract: 0
Canonical form without lets (int64(P.extent.1)*int64(P.extent.0))
0: P.extent.1, 0
1: int64(P.extent.1), 0
2: P.extent.0, 0
3: int64(P.extent.0), 0
4: (int64(P.extent.1)*int64(P.extent.0)), 1
With variables (int64(P.extent.1)*int64(P.extent.0))
With lets: (int64(P.extent.1)*int64(P.extent.0))



Input to CSE (int64(W.extent.1)*int64(W.extent.0))
After removing lets: (int64(W.extent.1)*int64(W.extent.0))
Include: (int64(W.extent.1)*int64(W.extent.0)); should extract: 1
Include: int64(W.extent.1); should extract: 0
Include: W.extent.1; should extract: 0
Include: int64(W.extent.0); should extract: 0
Include: W.extent.0; should extract: 0
Canonical form without lets (int64(W.extent.1)*int64(W.extent.0))
0: W.extent.1, 0
1: int64(W.extent.1), 0
2: W.extent.0, 0
3: int64(W.extent.0), 0
4: (int64(W.extent.1)*int64(W.extent.0)), 1
With variables (int64(W.extent.1)*int64(W.extent.0))
With lets: (int64(W.extent.1)*int64(W.extent.0))



Input to CSE ((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647)
After removing lets: ((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647)
Include: ((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647); should extract: 1
Include: (uint64)abs(int64(Out.extent.0)); should extract: 1
Include: int64(Out.extent.0); should extract: 0
Include: Out.extent.0; should extract: 0
Include: (uint64)2147483647; should extract: 0
Canonical form without lets ((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647)
0: Out.extent.0, 0
1: int64(Out.extent.0), 0
2: (uint64)abs(int64(Out.extent.0)), 1
3: (uint64)2147483647, 0
4: ((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), 1
With variables ((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647)
With lets: ((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647)



Input to CSE halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647)
After removing lets: halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647)
Include: halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647); should extract: 1
Include: "Out"; should extract: 0
Include: (uint64)abs(int64(Out.extent.0)); should extract: 1
Include: int64(Out.extent.0); should extract: 0
Include: Out.extent.0; should extract: 0
Include: (uint64)2147483647; should extract: 0
Canonical form without lets halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647)
0: "Out", 0
1: Out.extent.0, 0
2: int64(Out.extent.0), 0
3: (uint64)abs(int64(Out.extent.0)), 1
4: (uint64)2147483647, 0
5: halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647), 1
With variables halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647)
With lets: halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647)



Input to CSE ((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647)
After removing lets: ((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647)
Include: ((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647); should extract: 1
Include: (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))); should extract: 1
Include: (int64(Out.extent.1)*int64(Out.stride.1)); should extract: 1
Include: int64(Out.extent.1); should extract: 0
Include: Out.extent.1; should extract: 0
Include: int64(Out.stride.1); should extract: 0
Include: Out.stride.1; should extract: 0
Include: (uint64)2147483647; should extract: 0
Canonical form without lets ((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647)
0: Out.extent.1, 0
1: int64(Out.extent.1), 0
2: Out.stride.1, 0
3: int64(Out.stride.1), 0
4: (int64(Out.extent.1)*int64(Out.stride.1)), 1
5: (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), 1
6: (uint64)2147483647, 0
7: ((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), 1
With variables ((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647)
With lets: ((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647)



Input to CSE halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647)
After removing lets: halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647)
Include: halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647); should extract: 1
Include: "Out"; should extract: 0
Include: (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))); should extract: 1
Include: (int64(Out.extent.1)*int64(Out.stride.1)); should extract: 1
Include: int64(Out.extent.1); should extract: 0
Include: Out.extent.1; should extract: 0
Include: int64(Out.stride.1); should extract: 0
Include: Out.stride.1; should extract: 0
Include: (uint64)2147483647; should extract: 0
Canonical form without lets halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647)
0: "Out", 0
1: Out.extent.1, 0
2: int64(Out.extent.1), 0
3: Out.stride.1, 0
4: int64(Out.stride.1), 0
5: (int64(Out.extent.1)*int64(Out.stride.1)), 1
6: (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), 1
7: (uint64)2147483647, 0
8: halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647), 1
With variables halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647)
With lets: halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647)



Input to CSE ((int64)Out.total_extent.1 <= (int64)2147483647)
After removing lets: ((int64)Out.total_extent.1 <= (int64)2147483647)
Include: ((int64)Out.total_extent.1 <= (int64)2147483647); should extract: 1
Include: (int64)Out.total_extent.1; should extract: 0
Include: (int64)2147483647; should extract: 0
Canonical form without lets ((int64)Out.total_extent.1 <= (int64)2147483647)
0: (int64)Out.total_extent.1, 0
1: (int64)2147483647, 0
2: ((int64)Out.total_extent.1 <= (int64)2147483647), 1
With variables ((int64)Out.total_extent.1 <= (int64)2147483647)
With lets: ((int64)Out.total_extent.1 <= (int64)2147483647)



Input to CSE halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.1, (int64)2147483647)
After removing lets: halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.1, (int64)2147483647)
Include: halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.1, (int64)2147483647); should extract: 1
Include: "Out"; should extract: 0
Include: (int64)Out.total_extent.1; should extract: 0
Include: (int64)2147483647; should extract: 0
Canonical form without lets halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.1, (int64)2147483647)
0: "Out", 0
1: (int64)Out.total_extent.1, 0
2: (int64)2147483647, 0
3: halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.1, (int64)2147483647), 1
With variables halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.1, (int64)2147483647)
With lets: halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.1, (int64)2147483647)



Input to CSE ((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647)
After removing lets: ((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647)
Include: ((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647); should extract: 1
Include: (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))); should extract: 1
Include: (int64(Out.extent.2)*int64(Out.stride.2)); should extract: 1
Include: int64(Out.extent.2); should extract: 0
Include: Out.extent.2; should extract: 0
Include: int64(Out.stride.2); should extract: 0
Include: Out.stride.2; should extract: 0
Include: (uint64)2147483647; should extract: 0
Canonical form without lets ((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647)
0: Out.extent.2, 0
1: int64(Out.extent.2), 0
2: Out.stride.2, 0
3: int64(Out.stride.2), 0
4: (int64(Out.extent.2)*int64(Out.stride.2)), 1
5: (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), 1
6: (uint64)2147483647, 0
7: ((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), 1
With variables ((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647)
With lets: ((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647)



Input to CSE halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647)
After removing lets: halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647)
Include: halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647); should extract: 1
Include: "Out"; should extract: 0
Include: (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))); should extract: 1
Include: (int64(Out.extent.2)*int64(Out.stride.2)); should extract: 1
Include: int64(Out.extent.2); should extract: 0
Include: Out.extent.2; should extract: 0
Include: int64(Out.stride.2); should extract: 0
Include: Out.stride.2; should extract: 0
Include: (uint64)2147483647; should extract: 0
Canonical form without lets halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647)
0: "Out", 0
1: Out.extent.2, 0
2: int64(Out.extent.2), 0
3: Out.stride.2, 0
4: int64(Out.stride.2), 0
5: (int64(Out.extent.2)*int64(Out.stride.2)), 1
6: (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), 1
7: (uint64)2147483647, 0
8: halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647), 1
With variables halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647)
With lets: halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647)



Input to CSE ((int64)Out.total_extent.2 <= (int64)2147483647)
After removing lets: ((int64)Out.total_extent.2 <= (int64)2147483647)
Include: ((int64)Out.total_extent.2 <= (int64)2147483647); should extract: 1
Include: (int64)Out.total_extent.2; should extract: 0
Include: (int64)2147483647; should extract: 0
Canonical form without lets ((int64)Out.total_extent.2 <= (int64)2147483647)
0: (int64)Out.total_extent.2, 0
1: (int64)2147483647, 0
2: ((int64)Out.total_extent.2 <= (int64)2147483647), 1
With variables ((int64)Out.total_extent.2 <= (int64)2147483647)
With lets: ((int64)Out.total_extent.2 <= (int64)2147483647)



Input to CSE halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.2, (int64)2147483647)
After removing lets: halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.2, (int64)2147483647)
Include: halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.2, (int64)2147483647); should extract: 1
Include: "Out"; should extract: 0
Include: (int64)Out.total_extent.2; should extract: 0
Include: (int64)2147483647; should extract: 0
Canonical form without lets halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.2, (int64)2147483647)
0: "Out", 0
1: (int64)Out.total_extent.2, 0
2: (int64)2147483647, 0
3: halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.2, (int64)2147483647), 1
With variables halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.2, (int64)2147483647)
With lets: halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.2, (int64)2147483647)



Input to CSE ((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647)
After removing lets: ((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647)
Include: ((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647); should extract: 1
Include: (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))); should extract: 1
Include: (int64(Out.extent.3)*int64(Out.stride.3)); should extract: 1
Include: int64(Out.extent.3); should extract: 0
Include: Out.extent.3; should extract: 0
Include: int64(Out.stride.3); should extract: 0
Include: Out.stride.3; should extract: 0
Include: (uint64)2147483647; should extract: 0
Canonical form without lets ((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647)
0: Out.extent.3, 0
1: int64(Out.extent.3), 0
2: Out.stride.3, 0
3: int64(Out.stride.3), 0
4: (int64(Out.extent.3)*int64(Out.stride.3)), 1
5: (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), 1
6: (uint64)2147483647, 0
7: ((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), 1
With variables ((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647)
With lets: ((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647)



Input to CSE halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647)
After removing lets: halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647)
Include: halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647); should extract: 1
Include: "Out"; should extract: 0
Include: (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))); should extract: 1
Include: (int64(Out.extent.3)*int64(Out.stride.3)); should extract: 1
Include: int64(Out.extent.3); should extract: 0
Include: Out.extent.3; should extract: 0
Include: int64(Out.stride.3); should extract: 0
Include: Out.stride.3; should extract: 0
Include: (uint64)2147483647; should extract: 0
Canonical form without lets halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647)
0: "Out", 0
1: Out.extent.3, 0
2: int64(Out.extent.3), 0
3: Out.stride.3, 0
4: int64(Out.stride.3), 0
5: (int64(Out.extent.3)*int64(Out.stride.3)), 1
6: (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), 1
7: (uint64)2147483647, 0
8: halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647), 1
With variables halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647)
With lets: halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647)



Input to CSE ((int64)Out.total_extent.3 <= (int64)2147483647)
After removing lets: ((int64)Out.total_extent.3 <= (int64)2147483647)
Include: ((int64)Out.total_extent.3 <= (int64)2147483647); should extract: 1
Include: (int64)Out.total_extent.3; should extract: 0
Include: (int64)2147483647; should extract: 0
Canonical form without lets ((int64)Out.total_extent.3 <= (int64)2147483647)
0: (int64)Out.total_extent.3, 0
1: (int64)2147483647, 0
2: ((int64)Out.total_extent.3 <= (int64)2147483647), 1
With variables ((int64)Out.total_extent.3 <= (int64)2147483647)
With lets: ((int64)Out.total_extent.3 <= (int64)2147483647)



Input to CSE halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.3, (int64)2147483647)
After removing lets: halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.3, (int64)2147483647)
Include: halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.3, (int64)2147483647); should extract: 1
Include: "Out"; should extract: 0
Include: (int64)Out.total_extent.3; should extract: 0
Include: (int64)2147483647; should extract: 0
Canonical form without lets halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.3, (int64)2147483647)
0: "Out", 0
1: (int64)Out.total_extent.3, 0
2: (int64)2147483647, 0
3: halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.3, (int64)2147483647), 1
With variables halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.3, (int64)2147483647)
With lets: halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.3, (int64)2147483647)



Input to CSE ((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647)
After removing lets: ((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647)
Include: ((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647); should extract: 1
Include: (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))); should extract: 1
Include: (int64(Out.extent.4)*int64(Out.stride.4)); should extract: 1
Include: int64(Out.extent.4); should extract: 0
Include: Out.extent.4; should extract: 0
Include: int64(Out.stride.4); should extract: 0
Include: Out.stride.4; should extract: 0
Include: (uint64)2147483647; should extract: 0
Canonical form without lets ((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647)
0: Out.extent.4, 0
1: int64(Out.extent.4), 0
2: Out.stride.4, 0
3: int64(Out.stride.4), 0
4: (int64(Out.extent.4)*int64(Out.stride.4)), 1
5: (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), 1
6: (uint64)2147483647, 0
7: ((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), 1
With variables ((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647)
With lets: ((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647)



Input to CSE halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647)
After removing lets: halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647)
Include: halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647); should extract: 1
Include: "Out"; should extract: 0
Include: (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))); should extract: 1
Include: (int64(Out.extent.4)*int64(Out.stride.4)); should extract: 1
Include: int64(Out.extent.4); should extract: 0
Include: Out.extent.4; should extract: 0
Include: int64(Out.stride.4); should extract: 0
Include: Out.stride.4; should extract: 0
Include: (uint64)2147483647; should extract: 0
Canonical form without lets halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647)
0: "Out", 0
1: Out.extent.4, 0
2: int64(Out.extent.4), 0
3: Out.stride.4, 0
4: int64(Out.stride.4), 0
5: (int64(Out.extent.4)*int64(Out.stride.4)), 1
6: (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), 1
7: (uint64)2147483647, 0
8: halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647), 1
With variables halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647)
With lets: halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647)



Input to CSE ((int64)Out.total_extent.4 <= (int64)2147483647)
After removing lets: ((int64)Out.total_extent.4 <= (int64)2147483647)
Include: ((int64)Out.total_extent.4 <= (int64)2147483647); should extract: 1
Include: (int64)Out.total_extent.4; should extract: 0
Include: (int64)2147483647; should extract: 0
Canonical form without lets ((int64)Out.total_extent.4 <= (int64)2147483647)
0: (int64)Out.total_extent.4, 0
1: (int64)2147483647, 0
2: ((int64)Out.total_extent.4 <= (int64)2147483647), 1
With variables ((int64)Out.total_extent.4 <= (int64)2147483647)
With lets: ((int64)Out.total_extent.4 <= (int64)2147483647)



Input to CSE halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.4, (int64)2147483647)
After removing lets: halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.4, (int64)2147483647)
Include: halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.4, (int64)2147483647); should extract: 1
Include: "Out"; should extract: 0
Include: (int64)Out.total_extent.4; should extract: 0
Include: (int64)2147483647; should extract: 0
Canonical form without lets halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.4, (int64)2147483647)
0: "Out", 0
1: (int64)Out.total_extent.4, 0
2: (int64)2147483647, 0
3: halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.4, (int64)2147483647), 1
With variables halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.4, (int64)2147483647)
With lets: halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.4, (int64)2147483647)



Input to CSE ((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647)
After removing lets: ((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647)
Include: ((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647); should extract: 1
Include: (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))); should extract: 1
Include: (int64(Out.extent.5)*int64(Out.stride.5)); should extract: 1
Include: int64(Out.extent.5); should extract: 0
Include: Out.extent.5; should extract: 0
Include: int64(Out.stride.5); should extract: 0
Include: Out.stride.5; should extract: 0
Include: (uint64)2147483647; should extract: 0
Canonical form without lets ((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647)
0: Out.extent.5, 0
1: int64(Out.extent.5), 0
2: Out.stride.5, 0
3: int64(Out.stride.5), 0
4: (int64(Out.extent.5)*int64(Out.stride.5)), 1
5: (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), 1
6: (uint64)2147483647, 0
7: ((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), 1
With variables ((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647)
With lets: ((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647)



Input to CSE halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647)
After removing lets: halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647)
Include: halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647); should extract: 1
Include: "Out"; should extract: 0
Include: (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))); should extract: 1
Include: (int64(Out.extent.5)*int64(Out.stride.5)); should extract: 1
Include: int64(Out.extent.5); should extract: 0
Include: Out.extent.5; should extract: 0
Include: int64(Out.stride.5); should extract: 0
Include: Out.stride.5; should extract: 0
Include: (uint64)2147483647; should extract: 0
Canonical form without lets halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647)
0: "Out", 0
1: Out.extent.5, 0
2: int64(Out.extent.5), 0
3: Out.stride.5, 0
4: int64(Out.stride.5), 0
5: (int64(Out.extent.5)*int64(Out.stride.5)), 1
6: (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), 1
7: (uint64)2147483647, 0
8: halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647), 1
With variables halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647)
With lets: halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647)



Input to CSE ((int64)Out.total_extent.5 <= (int64)2147483647)
After removing lets: ((int64)Out.total_extent.5 <= (int64)2147483647)
Include: ((int64)Out.total_extent.5 <= (int64)2147483647); should extract: 1
Include: (int64)Out.total_extent.5; should extract: 0
Include: (int64)2147483647; should extract: 0
Canonical form without lets ((int64)Out.total_extent.5 <= (int64)2147483647)
0: (int64)Out.total_extent.5, 0
1: (int64)2147483647, 0
2: ((int64)Out.total_extent.5 <= (int64)2147483647), 1
With variables ((int64)Out.total_extent.5 <= (int64)2147483647)
With lets: ((int64)Out.total_extent.5 <= (int64)2147483647)



Input to CSE halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.5, (int64)2147483647)
After removing lets: halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.5, (int64)2147483647)
Include: halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.5, (int64)2147483647); should extract: 1
Include: "Out"; should extract: 0
Include: (int64)Out.total_extent.5; should extract: 0
Include: (int64)2147483647; should extract: 0
Canonical form without lets halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.5, (int64)2147483647)
0: "Out", 0
1: (int64)Out.total_extent.5, 0
2: (int64)2147483647, 0
3: halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.5, (int64)2147483647), 1
With variables halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.5, (int64)2147483647)
With lets: halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.5, (int64)2147483647)



Input to CSE ((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647)
After removing lets: ((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647)
Include: ((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647); should extract: 1
Include: (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))); should extract: 1
Include: (int64(Out.extent.6)*int64(Out.stride.6)); should extract: 1
Include: int64(Out.extent.6); should extract: 0
Include: Out.extent.6; should extract: 0
Include: int64(Out.stride.6); should extract: 0
Include: Out.stride.6; should extract: 0
Include: (uint64)2147483647; should extract: 0
Canonical form without lets ((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647)
0: Out.extent.6, 0
1: int64(Out.extent.6), 0
2: Out.stride.6, 0
3: int64(Out.stride.6), 0
4: (int64(Out.extent.6)*int64(Out.stride.6)), 1
5: (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), 1
6: (uint64)2147483647, 0
7: ((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), 1
With variables ((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647)
With lets: ((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647)



Input to CSE halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647)
After removing lets: halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647)
Include: halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647); should extract: 1
Include: "Out"; should extract: 0
Include: (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))); should extract: 1
Include: (int64(Out.extent.6)*int64(Out.stride.6)); should extract: 1
Include: int64(Out.extent.6); should extract: 0
Include: Out.extent.6; should extract: 0
Include: int64(Out.stride.6); should extract: 0
Include: Out.stride.6; should extract: 0
Include: (uint64)2147483647; should extract: 0
Canonical form without lets halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647)
0: "Out", 0
1: Out.extent.6, 0
2: int64(Out.extent.6), 0
3: Out.stride.6, 0
4: int64(Out.stride.6), 0
5: (int64(Out.extent.6)*int64(Out.stride.6)), 1
6: (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), 1
7: (uint64)2147483647, 0
8: halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647), 1
With variables halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647)
With lets: halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647)



Input to CSE ((int64)Out.total_extent.6 <= (int64)2147483647)
After removing lets: ((int64)Out.total_extent.6 <= (int64)2147483647)
Include: ((int64)Out.total_extent.6 <= (int64)2147483647); should extract: 1
Include: (int64)Out.total_extent.6; should extract: 0
Include: (int64)2147483647; should extract: 0
Canonical form without lets ((int64)Out.total_extent.6 <= (int64)2147483647)
0: (int64)Out.total_extent.6, 0
1: (int64)2147483647, 0
2: ((int64)Out.total_extent.6 <= (int64)2147483647), 1
With variables ((int64)Out.total_extent.6 <= (int64)2147483647)
With lets: ((int64)Out.total_extent.6 <= (int64)2147483647)



Input to CSE halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.6, (int64)2147483647)
After removing lets: halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.6, (int64)2147483647)
Include: halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.6, (int64)2147483647); should extract: 1
Include: "Out"; should extract: 0
Include: (int64)Out.total_extent.6; should extract: 0
Include: (int64)2147483647; should extract: 0
Canonical form without lets halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.6, (int64)2147483647)
0: "Out", 0
1: (int64)Out.total_extent.6, 0
2: (int64)2147483647, 0
3: halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.6, (int64)2147483647), 1
With variables halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.6, (int64)2147483647)
With lets: halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.6, (int64)2147483647)



Input to CSE ((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647)
After removing lets: ((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647)
Include: ((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647); should extract: 1
Include: (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))); should extract: 1
Include: (int64(Out.extent.7)*int64(Out.stride.7)); should extract: 1
Include: int64(Out.extent.7); should extract: 0
Include: Out.extent.7; should extract: 0
Include: int64(Out.stride.7); should extract: 0
Include: Out.stride.7; should extract: 0
Include: (uint64)2147483647; should extract: 0
Canonical form without lets ((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647)
0: Out.extent.7, 0
1: int64(Out.extent.7), 0
2: Out.stride.7, 0
3: int64(Out.stride.7), 0
4: (int64(Out.extent.7)*int64(Out.stride.7)), 1
5: (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), 1
6: (uint64)2147483647, 0
7: ((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), 1
With variables ((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647)
With lets: ((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647)



Input to CSE halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647)
After removing lets: halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647)
Include: halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647); should extract: 1
Include: "Out"; should extract: 0
Include: (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))); should extract: 1
Include: (int64(Out.extent.7)*int64(Out.stride.7)); should extract: 1
Include: int64(Out.extent.7); should extract: 0
Include: Out.extent.7; should extract: 0
Include: int64(Out.stride.7); should extract: 0
Include: Out.stride.7; should extract: 0
Include: (uint64)2147483647; should extract: 0
Canonical form without lets halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647)
0: "Out", 0
1: Out.extent.7, 0
2: int64(Out.extent.7), 0
3: Out.stride.7, 0
4: int64(Out.stride.7), 0
5: (int64(Out.extent.7)*int64(Out.stride.7)), 1
6: (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), 1
7: (uint64)2147483647, 0
8: halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647), 1
With variables halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647)
With lets: halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647)



Input to CSE ((int64)Out.total_extent.7 <= (int64)2147483647)
After removing lets: ((int64)Out.total_extent.7 <= (int64)2147483647)
Include: ((int64)Out.total_extent.7 <= (int64)2147483647); should extract: 1
Include: (int64)Out.total_extent.7; should extract: 0
Include: (int64)2147483647; should extract: 0
Canonical form without lets ((int64)Out.total_extent.7 <= (int64)2147483647)
0: (int64)Out.total_extent.7, 0
1: (int64)2147483647, 0
2: ((int64)Out.total_extent.7 <= (int64)2147483647), 1
With variables ((int64)Out.total_extent.7 <= (int64)2147483647)
With lets: ((int64)Out.total_extent.7 <= (int64)2147483647)



Input to CSE halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.7, (int64)2147483647)
After removing lets: halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.7, (int64)2147483647)
Include: halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.7, (int64)2147483647); should extract: 1
Include: "Out"; should extract: 0
Include: (int64)Out.total_extent.7; should extract: 0
Include: (int64)2147483647; should extract: 0
Canonical form without lets halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.7, (int64)2147483647)
0: "Out", 0
1: (int64)Out.total_extent.7, 0
2: (int64)2147483647, 0
3: halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.7, (int64)2147483647), 1
With variables halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.7, (int64)2147483647)
With lets: halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.7, (int64)2147483647)



Input to CSE ((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647)
After removing lets: ((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647)
Include: ((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647); should extract: 1
Include: (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))); should extract: 1
Include: (int64(Out.extent.8)*int64(Out.stride.8)); should extract: 1
Include: int64(Out.extent.8); should extract: 0
Include: Out.extent.8; should extract: 0
Include: int64(Out.stride.8); should extract: 0
Include: Out.stride.8; should extract: 0
Include: (uint64)2147483647; should extract: 0
Canonical form without lets ((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647)
0: Out.extent.8, 0
1: int64(Out.extent.8), 0
2: Out.stride.8, 0
3: int64(Out.stride.8), 0
4: (int64(Out.extent.8)*int64(Out.stride.8)), 1
5: (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), 1
6: (uint64)2147483647, 0
7: ((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), 1
With variables ((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647)
With lets: ((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647)



Input to CSE halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647)
After removing lets: halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647)
Include: halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647); should extract: 1
Include: "Out"; should extract: 0
Include: (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))); should extract: 1
Include: (int64(Out.extent.8)*int64(Out.stride.8)); should extract: 1
Include: int64(Out.extent.8); should extract: 0
Include: Out.extent.8; should extract: 0
Include: int64(Out.stride.8); should extract: 0
Include: Out.stride.8; should extract: 0
Include: (uint64)2147483647; should extract: 0
Canonical form without lets halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647)
0: "Out", 0
1: Out.extent.8, 0
2: int64(Out.extent.8), 0
3: Out.stride.8, 0
4: int64(Out.stride.8), 0
5: (int64(Out.extent.8)*int64(Out.stride.8)), 1
6: (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), 1
7: (uint64)2147483647, 0
8: halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647), 1
With variables halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647)
With lets: halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647)



Input to CSE ((int64)Out.total_extent.8 <= (int64)2147483647)
After removing lets: ((int64)Out.total_extent.8 <= (int64)2147483647)
Include: ((int64)Out.total_extent.8 <= (int64)2147483647); should extract: 1
Include: (int64)Out.total_extent.8; should extract: 0
Include: (int64)2147483647; should extract: 0
Canonical form without lets ((int64)Out.total_extent.8 <= (int64)2147483647)
0: (int64)Out.total_extent.8, 0
1: (int64)2147483647, 0
2: ((int64)Out.total_extent.8 <= (int64)2147483647), 1
With variables ((int64)Out.total_extent.8 <= (int64)2147483647)
With lets: ((int64)Out.total_extent.8 <= (int64)2147483647)



Input to CSE halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.8, (int64)2147483647)
After removing lets: halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.8, (int64)2147483647)
Include: halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.8, (int64)2147483647); should extract: 1
Include: "Out"; should extract: 0
Include: (int64)Out.total_extent.8; should extract: 0
Include: (int64)2147483647; should extract: 0
Canonical form without lets halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.8, (int64)2147483647)
0: "Out", 0
1: (int64)Out.total_extent.8, 0
2: (int64)2147483647, 0
3: halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.8, (int64)2147483647), 1
With variables halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.8, (int64)2147483647)
With lets: halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.8, (int64)2147483647)



Input to CSE ((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647)
After removing lets: ((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647)
Include: ((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647); should extract: 1
Include: (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))); should extract: 1
Include: (int64(Out.extent.9)*int64(Out.stride.9)); should extract: 1
Include: int64(Out.extent.9); should extract: 0
Include: Out.extent.9; should extract: 0
Include: int64(Out.stride.9); should extract: 0
Include: Out.stride.9; should extract: 0
Include: (uint64)2147483647; should extract: 0
Canonical form without lets ((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647)
0: Out.extent.9, 0
1: int64(Out.extent.9), 0
2: Out.stride.9, 0
3: int64(Out.stride.9), 0
4: (int64(Out.extent.9)*int64(Out.stride.9)), 1
5: (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), 1
6: (uint64)2147483647, 0
7: ((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), 1
With variables ((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647)
With lets: ((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647)



Input to CSE halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647)
After removing lets: halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647)
Include: halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647); should extract: 1
Include: "Out"; should extract: 0
Include: (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))); should extract: 1
Include: (int64(Out.extent.9)*int64(Out.stride.9)); should extract: 1
Include: int64(Out.extent.9); should extract: 0
Include: Out.extent.9; should extract: 0
Include: int64(Out.stride.9); should extract: 0
Include: Out.stride.9; should extract: 0
Include: (uint64)2147483647; should extract: 0
Canonical form without lets halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647)
0: "Out", 0
1: Out.extent.9, 0
2: int64(Out.extent.9), 0
3: Out.stride.9, 0
4: int64(Out.stride.9), 0
5: (int64(Out.extent.9)*int64(Out.stride.9)), 1
6: (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), 1
7: (uint64)2147483647, 0
8: halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647), 1
With variables halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647)
With lets: halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647)



Input to CSE ((int64)Out.total_extent.9 <= (int64)2147483647)
After removing lets: ((int64)Out.total_extent.9 <= (int64)2147483647)
Include: ((int64)Out.total_extent.9 <= (int64)2147483647); should extract: 1
Include: (int64)Out.total_extent.9; should extract: 0
Include: (int64)2147483647; should extract: 0
Canonical form without lets ((int64)Out.total_extent.9 <= (int64)2147483647)
0: (int64)Out.total_extent.9, 0
1: (int64)2147483647, 0
2: ((int64)Out.total_extent.9 <= (int64)2147483647), 1
With variables ((int64)Out.total_extent.9 <= (int64)2147483647)
With lets: ((int64)Out.total_extent.9 <= (int64)2147483647)



Input to CSE halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.9, (int64)2147483647)
After removing lets: halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.9, (int64)2147483647)
Include: halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.9, (int64)2147483647); should extract: 1
Include: "Out"; should extract: 0
Include: (int64)Out.total_extent.9; should extract: 0
Include: (int64)2147483647; should extract: 0
Canonical form without lets halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.9, (int64)2147483647)
0: "Out", 0
1: (int64)Out.total_extent.9, 0
2: (int64)2147483647, 0
3: halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.9, (int64)2147483647), 1
With variables halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.9, (int64)2147483647)
With lets: halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.9, (int64)2147483647)



Input to CSE ((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647)
After removing lets: ((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647)
Include: ((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647); should extract: 1
Include: (uint64)abs(int64(P.extent.0)); should extract: 1
Include: int64(P.extent.0); should extract: 0
Include: P.extent.0; should extract: 0
Include: (uint64)2147483647; should extract: 0
Canonical form without lets ((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647)
0: P.extent.0, 0
1: int64(P.extent.0), 0
2: (uint64)abs(int64(P.extent.0)), 1
3: (uint64)2147483647, 0
4: ((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), 1
With variables ((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647)
With lets: ((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647)



Input to CSE halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647)
After removing lets: halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647)
Include: halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647); should extract: 1
Include: "P"; should extract: 0
Include: (uint64)abs(int64(P.extent.0)); should extract: 1
Include: int64(P.extent.0); should extract: 0
Include: P.extent.0; should extract: 0
Include: (uint64)2147483647; should extract: 0
Canonical form without lets halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647)
0: "P", 0
1: P.extent.0, 0
2: int64(P.extent.0), 0
3: (uint64)abs(int64(P.extent.0)), 1
4: (uint64)2147483647, 0
5: halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647), 1
With variables halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647)
With lets: halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647)



Input to CSE ((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647)
After removing lets: ((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647)
Include: ((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647); should extract: 1
Include: (uint64)abs((int64(P.extent.1)*int64(P.stride.1))); should extract: 1
Include: (int64(P.extent.1)*int64(P.stride.1)); should extract: 1
Include: int64(P.extent.1); should extract: 0
Include: P.extent.1; should extract: 0
Include: int64(P.stride.1); should extract: 0
Include: P.stride.1; should extract: 0
Include: (uint64)2147483647; should extract: 0
Canonical form without lets ((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647)
0: P.extent.1, 0
1: int64(P.extent.1), 0
2: P.stride.1, 0
3: int64(P.stride.1), 0
4: (int64(P.extent.1)*int64(P.stride.1)), 1
5: (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), 1
6: (uint64)2147483647, 0
7: ((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), 1
With variables ((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647)
With lets: ((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647)



Input to CSE halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647)
After removing lets: halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647)
Include: halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647); should extract: 1
Include: "P"; should extract: 0
Include: (uint64)abs((int64(P.extent.1)*int64(P.stride.1))); should extract: 1
Include: (int64(P.extent.1)*int64(P.stride.1)); should extract: 1
Include: int64(P.extent.1); should extract: 0
Include: P.extent.1; should extract: 0
Include: int64(P.stride.1); should extract: 0
Include: P.stride.1; should extract: 0
Include: (uint64)2147483647; should extract: 0
Canonical form without lets halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647)
0: "P", 0
1: P.extent.1, 0
2: int64(P.extent.1), 0
3: P.stride.1, 0
4: int64(P.stride.1), 0
5: (int64(P.extent.1)*int64(P.stride.1)), 1
6: (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), 1
7: (uint64)2147483647, 0
8: halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647), 1
With variables halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647)
With lets: halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647)



Input to CSE ((int64)P.total_extent.1 <= (int64)2147483647)
After removing lets: ((int64)P.total_extent.1 <= (int64)2147483647)
Include: ((int64)P.total_extent.1 <= (int64)2147483647); should extract: 1
Include: (int64)P.total_extent.1; should extract: 0
Include: (int64)2147483647; should extract: 0
Canonical form without lets ((int64)P.total_extent.1 <= (int64)2147483647)
0: (int64)P.total_extent.1, 0
1: (int64)2147483647, 0
2: ((int64)P.total_extent.1 <= (int64)2147483647), 1
With variables ((int64)P.total_extent.1 <= (int64)2147483647)
With lets: ((int64)P.total_extent.1 <= (int64)2147483647)



Input to CSE halide_error_buffer_extents_too_large("P", (int64)P.total_extent.1, (int64)2147483647)
After removing lets: halide_error_buffer_extents_too_large("P", (int64)P.total_extent.1, (int64)2147483647)
Include: halide_error_buffer_extents_too_large("P", (int64)P.total_extent.1, (int64)2147483647); should extract: 1
Include: "P"; should extract: 0
Include: (int64)P.total_extent.1; should extract: 0
Include: (int64)2147483647; should extract: 0
Canonical form without lets halide_error_buffer_extents_too_large("P", (int64)P.total_extent.1, (int64)2147483647)
0: "P", 0
1: (int64)P.total_extent.1, 0
2: (int64)2147483647, 0
3: halide_error_buffer_extents_too_large("P", (int64)P.total_extent.1, (int64)2147483647), 1
With variables halide_error_buffer_extents_too_large("P", (int64)P.total_extent.1, (int64)2147483647)
With lets: halide_error_buffer_extents_too_large("P", (int64)P.total_extent.1, (int64)2147483647)



Input to CSE ((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647)
After removing lets: ((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647)
Include: ((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647); should extract: 1
Include: (uint64)abs(int64(W.extent.0)); should extract: 1
Include: int64(W.extent.0); should extract: 0
Include: W.extent.0; should extract: 0
Include: (uint64)2147483647; should extract: 0
Canonical form without lets ((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647)
0: W.extent.0, 0
1: int64(W.extent.0), 0
2: (uint64)abs(int64(W.extent.0)), 1
3: (uint64)2147483647, 0
4: ((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), 1
With variables ((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647)
With lets: ((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647)



Input to CSE halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647)
After removing lets: halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647)
Include: halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647); should extract: 1
Include: "W"; should extract: 0
Include: (uint64)abs(int64(W.extent.0)); should extract: 1
Include: int64(W.extent.0); should extract: 0
Include: W.extent.0; should extract: 0
Include: (uint64)2147483647; should extract: 0
Canonical form without lets halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647)
0: "W", 0
1: W.extent.0, 0
2: int64(W.extent.0), 0
3: (uint64)abs(int64(W.extent.0)), 1
4: (uint64)2147483647, 0
5: halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647), 1
With variables halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647)
With lets: halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647)



Input to CSE ((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647)
After removing lets: ((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647)
Include: ((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647); should extract: 1
Include: (uint64)abs((int64(W.extent.1)*int64(W.stride.1))); should extract: 1
Include: (int64(W.extent.1)*int64(W.stride.1)); should extract: 1
Include: int64(W.extent.1); should extract: 0
Include: W.extent.1; should extract: 0
Include: int64(W.stride.1); should extract: 0
Include: W.stride.1; should extract: 0
Include: (uint64)2147483647; should extract: 0
Canonical form without lets ((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647)
0: W.extent.1, 0
1: int64(W.extent.1), 0
2: W.stride.1, 0
3: int64(W.stride.1), 0
4: (int64(W.extent.1)*int64(W.stride.1)), 1
5: (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), 1
6: (uint64)2147483647, 0
7: ((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), 1
With variables ((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647)
With lets: ((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647)



Input to CSE halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647)
After removing lets: halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647)
Include: halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647); should extract: 1
Include: "W"; should extract: 0
Include: (uint64)abs((int64(W.extent.1)*int64(W.stride.1))); should extract: 1
Include: (int64(W.extent.1)*int64(W.stride.1)); should extract: 1
Include: int64(W.extent.1); should extract: 0
Include: W.extent.1; should extract: 0
Include: int64(W.stride.1); should extract: 0
Include: W.stride.1; should extract: 0
Include: (uint64)2147483647; should extract: 0
Canonical form without lets halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647)
0: "W", 0
1: W.extent.1, 0
2: int64(W.extent.1), 0
3: W.stride.1, 0
4: int64(W.stride.1), 0
5: (int64(W.extent.1)*int64(W.stride.1)), 1
6: (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), 1
7: (uint64)2147483647, 0
8: halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647), 1
With variables halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647)
With lets: halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647)



Input to CSE ((int64)W.total_extent.1 <= (int64)2147483647)
After removing lets: ((int64)W.total_extent.1 <= (int64)2147483647)
Include: ((int64)W.total_extent.1 <= (int64)2147483647); should extract: 1
Include: (int64)W.total_extent.1; should extract: 0
Include: (int64)2147483647; should extract: 0
Canonical form without lets ((int64)W.total_extent.1 <= (int64)2147483647)
0: (int64)W.total_extent.1, 0
1: (int64)2147483647, 0
2: ((int64)W.total_extent.1 <= (int64)2147483647), 1
With variables ((int64)W.total_extent.1 <= (int64)2147483647)
With lets: ((int64)W.total_extent.1 <= (int64)2147483647)



Input to CSE halide_error_buffer_extents_too_large("W", (int64)W.total_extent.1, (int64)2147483647)
After removing lets: halide_error_buffer_extents_too_large("W", (int64)W.total_extent.1, (int64)2147483647)
Include: halide_error_buffer_extents_too_large("W", (int64)W.total_extent.1, (int64)2147483647); should extract: 1
Include: "W"; should extract: 0
Include: (int64)W.total_extent.1; should extract: 0
Include: (int64)2147483647; should extract: 0
Canonical form without lets halide_error_buffer_extents_too_large("W", (int64)W.total_extent.1, (int64)2147483647)
0: "W", 0
1: (int64)W.total_extent.1, 0
2: (int64)2147483647, 0
3: halide_error_buffer_extents_too_large("W", (int64)W.total_extent.1, (int64)2147483647), 1
With variables halide_error_buffer_extents_too_large("W", (int64)W.total_extent.1, (int64)2147483647)
With lets: halide_error_buffer_extents_too_large("W", (int64)W.total_extent.1, (int64)2147483647)



Input to CSE (P.extent.1/3600)
After removing lets: (P.extent.1/3600)
Include: (P.extent.1/3600); should extract: 0
Include: P.extent.1; should extract: 0
Include: 3600; should extract: 0
Canonical form without lets (P.extent.1/3600)
0: P.extent.1, 0
1: 3600, 0
2: (P.extent.1/3600), 0
With variables (P.extent.1/3600)
With lets: (P.extent.1/3600)



Input to CSE (((A.s0.mk*8) + A.s0.ci)*36)
After removing lets: (((A.s0.mk*8) + A.s0.ci)*36)
Include: (((A.s0.mk*8) + A.s0.ci)*36); should extract: 0
Include: ((A.s0.mk*8) + A.s0.ci); should extract: 1
Include: (A.s0.mk*8); should extract: 0
Include: A.s0.mk; should extract: 0
Include: 8; should extract: 0
Include: A.s0.ci; should extract: 0
Include: 36; should extract: 0
Canonical form without lets (((A.s0.mk*8) + A.s0.ci)*36)
0: A.s0.mk, 0
1: 8, 0
2: (A.s0.mk*8), 0
3: A.s0.ci, 0
4: ((A.s0.mk*8) + A.s0.ci), 1
5: 36, 0
6: (((A.s0.mk*8) + A.s0.ci)*36), 0
With variables (((A.s0.mk*8) + A.s0.ci)*36)
With lets: (((A.s0.mk*8) + A.s0.ci)*36)



Input to CSE (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
After removing lets: (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
Include: (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8); should extract: 0
Include: ((.__thread_id_x*4) + A.s0.co.__block_id_x); should extract: 1
Include: (.__thread_id_x*4); should extract: 0
Include: .__thread_id_x; should extract: 0
Include: 4; should extract: 0
Include: A.s0.co.__block_id_x; should extract: 0
Include: 8; should extract: 0
Canonical form without lets (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
0: .__thread_id_x, 0
1: 4, 0
2: (.__thread_id_x*4), 0
3: A.s0.co.__block_id_x, 0
4: ((.__thread_id_x*4) + A.s0.co.__block_id_x), 1
5: 8, 0
6: (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8), 0
With variables (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
With lets: (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)



Input to CSE (float32)cm_load_2d(((void *))W, var.W_im.load.addr.0, var.W_im.load.addr.1, ((void *))W_im_buf, ramp(0, 1, 288), 8, 36)
After removing lets: (float32)cm_load_2d(((void *))W, var.W_im.load.addr.0, var.W_im.load.addr.1, ((void *))W_im_buf, ramp(0, 1, 288), 8, 36)
Include: (float32)cm_load_2d(((void *))W, var.W_im.load.addr.0, var.W_im.load.addr.1, ((void *))W_im_buf, ramp(0, 1, 288), 8, 36); should extract: 1
Include: ((void *))W; should extract: 0
Include: var.W_im.load.addr.0; should extract: 0
Include: var.W_im.load.addr.1; should extract: 0
Include: ((void *))W_im_buf; should extract: 0
Include: ramp(0, 1, 288); should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: 8; should extract: 0
Include: 36; should extract: 0
Canonical form without lets (float32)cm_load_2d(((void *))W, var.W_im.load.addr.0, var.W_im.load.addr.1, ((void *))W_im_buf, ramp(0, 1, 288), 8, 36)
0: ((void *))W, 0
1: var.W_im.load.addr.0, 0
2: var.W_im.load.addr.1, 0
3: ((void *))W_im_buf, 0
4: 0, 0
5: 1, 0
6: ramp(0, 1, 288), 0
7: 8, 0
8: 36, 0
9: (float32)cm_load_2d(((void *))W, var.W_im.load.addr.0, var.W_im.load.addr.1, ((void *))W_im_buf, ramp(0, 1, 288), 8, 36), 1
With variables (float32)cm_load_2d(((void *))W, var.W_im.load.addr.0, var.W_im.load.addr.1, ((void *))W_im_buf, ramp(0, 1, 288), 8, 36)
With lets: (float32)cm_load_2d(((void *))W, var.W_im.load.addr.0, var.W_im.load.addr.1, ((void *))W_im_buf, ramp(0, 1, 288), 8, 36)



Input to CSE ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
After removing lets: ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
Include: ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30)); should extract: 1
Include: (A.s0.n.__block_id_z*225); should extract: 0
Include: A.s0.n.__block_id_z; should extract: 0
Include: 225; should extract: 0
Include: (A.s0.yy_xx*30); should extract: 0
Include: A.s0.yy_xx; should extract: 0
Include: 30; should extract: 0
Canonical form without lets ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
0: A.s0.n.__block_id_z, 0
1: 225, 0
2: (A.s0.n.__block_id_z*225), 0
3: A.s0.yy_xx, 0
4: 30, 0
5: (A.s0.yy_xx*30), 0
6: ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30)), 1
With variables ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
With lets: ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))



Input to CSE (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
After removing lets: (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
Include: (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4); should extract: 0
Include: ((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci))); should extract: 1
Include: (A.s0.nn.__block_id_y*128); should extract: 0
Include: A.s0.nn.__block_id_y; should extract: 0
Include: 128; should extract: 0
Include: ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)); should extract: 1
Include: (.__thread_id_y*32); should extract: 0
Include: .__thread_id_y; should extract: 0
Include: 32; should extract: 0
Include: ((A.s0.mk*8) + A.s0.ci); should extract: 1
Include: (A.s0.mk*8); should extract: 0
Include: A.s0.mk; should extract: 0
Include: 8; should extract: 0
Include: A.s0.ci; should extract: 0
Include: 4; should extract: 0
Canonical form without lets (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
0: A.s0.nn.__block_id_y, 0
1: 128, 0
2: (A.s0.nn.__block_id_y*128), 0
3: .__thread_id_y, 0
4: 32, 0
5: (.__thread_id_y*32), 0
6: A.s0.mk, 0
7: 8, 0
8: (A.s0.mk*8), 0
9: A.s0.ci, 0
10: ((A.s0.mk*8) + A.s0.ci), 1
11: ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)), 1
12: ((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci))), 1
13: 4, 0
14: (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4), 0
With variables (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
With lets: (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)



Input to CSE (float32)cm_load_2d(((void *))P, var.P_im.load.addr.0, var.P_im.load.addr.1, ((void *))P_im_buf, ramp(0, 1, 180), 4, 45)
After removing lets: (float32)cm_load_2d(((void *))P, var.P_im.load.addr.0, var.P_im.load.addr.1, ((void *))P_im_buf, ramp(0, 1, 180), 4, 45)
Include: (float32)cm_load_2d(((void *))P, var.P_im.load.addr.0, var.P_im.load.addr.1, ((void *))P_im_buf, ramp(0, 1, 180), 4, 45); should extract: 1
Include: ((void *))P; should extract: 0
Include: var.P_im.load.addr.0; should extract: 0
Include: var.P_im.load.addr.1; should extract: 0
Include: ((void *))P_im_buf; should extract: 0
Include: ramp(0, 1, 180); should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: 4; should extract: 0
Include: 45; should extract: 0
Canonical form without lets (float32)cm_load_2d(((void *))P, var.P_im.load.addr.0, var.P_im.load.addr.1, ((void *))P_im_buf, ramp(0, 1, 180), 4, 45)
0: ((void *))P, 0
1: var.P_im.load.addr.0, 0
2: var.P_im.load.addr.1, 0
3: ((void *))P_im_buf, 0
4: 0, 0
5: 1, 0
6: ramp(0, 1, 180), 0
7: 4, 0
8: 45, 0
9: (float32)cm_load_2d(((void *))P, var.P_im.load.addr.0, var.P_im.load.addr.1, ((void *))P_im_buf, ramp(0, 1, 180), 4, 45), 1
With variables (float32)cm_load_2d(((void *))P, var.P_im.load.addr.0, var.P_im.load.addr.1, ((void *))P_im_buf, ramp(0, 1, 180), 4, 45)
With lets: (float32)cm_load_2d(((void *))P, var.P_im.load.addr.0, var.P_im.load.addr.1, ((void *))P_im_buf, ramp(0, 1, 180), 4, 45)



Input to CSE ((let t5.x8 = (float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] in t5.x8) + ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
After removing lets: ((float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
Include: ((float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)]))); should extract: 1
Include: (float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)]; should extract: 1
Include: x8((uint1)1); should extract: 0
Include: (uint1)1; should extract: 0
Include: ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8); should extract: 0
Include: (((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8); should extract: 0
Include: ((A.s0.yy_xx*7) + A.s0.yyy_xxx); should extract: 1
Include: (A.s0.yy_xx*7); should extract: 0
Include: A.s0.yy_xx; should extract: 0
Include: 7; should extract: 0
Include: A.s0.yyy_xxx; should extract: 0
Include: 8; should extract: 0
Include: 1; should extract: 0
Include: ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])); should extract: 1
Include: (float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]; should extract: 1
Include: x8((uint1)1); should extract: 0
Include: (uint1)1; should extract: 0
Include: ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8); should extract: 0
Include: (((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8); should extract: 0
Include: ((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii)); should extract: 1
Include: (A.s0.kx*12); should extract: 0
Include: A.s0.kx; should extract: 0
Include: 12; should extract: 0
Include: ((A.s0.ky*4) + A.s0.cii); should extract: 1
Include: (A.s0.ky*4); should extract: 0
Include: A.s0.ky; should extract: 0
Include: 4; should extract: 0
Include: A.s0.cii; should extract: 0
Include: 8; should extract: 0
Include: 1; should extract: 0
Include: x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)]); should extract: 1
Include: (float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)]; should extract: 1
Include: (uint1)1; should extract: 0
Include: ((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii); should extract: 1
Include: (((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4); should extract: 0
Include: ((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky)); should extract: 1
Include: (A.s0.kx*15); should extract: 0
Include: A.s0.kx; should extract: 0
Include: 15; should extract: 0
Include: ((A.s0.yyy_xxx*2) + A.s0.ky); should extract: 1
Include: (A.s0.yyy_xxx*2); should extract: 0
Include: A.s0.yyy_xxx; should extract: 0
Include: 2; should extract: 0
Include: A.s0.ky; should extract: 0
Include: 4; should extract: 0
Include: A.s0.cii; should extract: 0
Canonical form without lets ((float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
0: (uint1)1, 0
1: x8((uint1)1), 0
2: A.s0.yy_xx, 0
3: 7, 0
4: (A.s0.yy_xx*7), 0
5: A.s0.yyy_xxx, 0
6: ((A.s0.yy_xx*7) + A.s0.yyy_xxx), 1
7: 8, 0
8: (((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 0
9: 1, 0
10: ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8), 0
11: (float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)], 1
12: A.s0.kx, 0
13: 12, 0
14: (A.s0.kx*12), 0
15: A.s0.ky, 0
16: 4, 0
17: (A.s0.ky*4), 0
18: A.s0.cii, 0
19: ((A.s0.ky*4) + A.s0.cii), 1
20: ((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii)), 1
21: (((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 0
22: ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8), 0
23: (float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)], 1
24: 15, 0
25: (A.s0.kx*15), 0
26: 2, 0
27: (A.s0.yyy_xxx*2), 0
28: ((A.s0.yyy_xxx*2) + A.s0.ky), 1
29: ((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky)), 1
30: (((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4), 0
31: ((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii), 1
32: (float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)], 1
33: x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)]), 1
34: ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])), 1
35: ((float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)]))), 1
With variables ((float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
With lets: ((float32x8)C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + ((float32x8)W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8((float32)P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))



Input to CSE ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8)
After removing lets: ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8)
Include: ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8); should extract: 0
Include: (((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8); should extract: 0
Include: ((A.s0.yy_xx*7) + A.s0.yyy_xxx); should extract: 1
Include: (A.s0.yy_xx*7); should extract: 0
Include: A.s0.yy_xx; should extract: 0
Include: 7; should extract: 0
Include: A.s0.yyy_xxx; should extract: 0
Include: 8; should extract: 0
Include: 1; should extract: 0
Canonical form without lets ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8)
0: A.s0.yy_xx, 0
1: 7, 0
2: (A.s0.yy_xx*7), 0
3: A.s0.yyy_xxx, 0
4: ((A.s0.yy_xx*7) + A.s0.yyy_xxx), 1
5: 8, 0
6: (((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 0
7: 1, 0
8: ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8), 0
With variables ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8)
With lets: ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8)



Input to CSE (A.s0.n.__block_id_z*49)
After removing lets: (A.s0.n.__block_id_z*49)
Include: (A.s0.n.__block_id_z*49); should extract: 0
Include: A.s0.n.__block_id_z; should extract: 0
Include: 49; should extract: 0
Canonical form without lets (A.s0.n.__block_id_z*49)
0: A.s0.n.__block_id_z, 0
1: 49, 0
2: (A.s0.n.__block_id_z*49), 0
With variables (A.s0.n.__block_id_z*49)
With lets: (A.s0.n.__block_id_z*49)



Input to CSE (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
After removing lets: (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
Include: (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8); should extract: 0
Include: ((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x))); should extract: 1
Include: (A.s0.nn.__block_id_y*64); should extract: 0
Include: A.s0.nn.__block_id_y; should extract: 0
Include: 64; should extract: 0
Include: ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)); should extract: 1
Include: (.__thread_id_y*16); should extract: 0
Include: .__thread_id_y; should extract: 0
Include: 16; should extract: 0
Include: ((.__thread_id_x*4) + A.s0.co.__block_id_x); should extract: 1
Include: (.__thread_id_x*4); should extract: 0
Include: .__thread_id_x; should extract: 0
Include: 4; should extract: 0
Include: A.s0.co.__block_id_x; should extract: 0
Include: 8; should extract: 0
Canonical form without lets (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
0: A.s0.nn.__block_id_y, 0
1: 64, 0
2: (A.s0.nn.__block_id_y*64), 0
3: .__thread_id_y, 0
4: 16, 0
5: (.__thread_id_y*16), 0
6: .__thread_id_x, 0
7: 4, 0
8: (.__thread_id_x*4), 0
9: A.s0.co.__block_id_x, 0
10: ((.__thread_id_x*4) + A.s0.co.__block_id_x), 1
11: ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)), 1
12: ((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x))), 1
13: 8, 0
14: (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8), 0
With variables (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
With lets: (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)



Input to CSE (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, ((void *))C, ramp(0, 1, 392), 8, 49, "deserializer")
After removing lets: (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, ((void *))C, ramp(0, 1, 392), 8, 49, "deserializer")
Include: (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, ((void *))C, ramp(0, 1, 392), 8, 49, "deserializer"); should extract: 1
Include: ((void *))Out; should extract: 0
Include: var.Out.store.addr.0; should extract: 0
Include: var.Out.store.addr.1; should extract: 0
Include: ((void *))C; should extract: 0
Include: ramp(0, 1, 392); should extract: 0
Include: 0; should extract: 0
Include: 1; should extract: 0
Include: 8; should extract: 0
Include: 49; should extract: 0
Include: "deserializer"; should extract: 0
Canonical form without lets (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, ((void *))C, ramp(0, 1, 392), 8, 49, "deserializer")
0: ((void *))Out, 0
1: var.Out.store.addr.0, 0
2: var.Out.store.addr.1, 0
3: ((void *))C, 0
4: 0, 0
5: 1, 0
6: ramp(0, 1, 392), 0
7: 8, 0
8: 49, 0
9: "deserializer", 0
10: (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, ((void *))C, ramp(0, 1, 392), 8, 49, "deserializer"), 1
With variables (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, ((void *))C, ramp(0, 1, 392), 8, 49, "deserializer")
With lets: (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, ((void *))C, ramp(0, 1, 392), 8, 49, "deserializer")
Lowering after CSE:
assert(((uint64)reinterpret(((buffer_t *))W.buffer) != (uint64)0), halide_error_buffer_argument_is_null("W"))
assert(((uint64)reinterpret(((buffer_t *))P.buffer) != (uint64)0), halide_error_buffer_argument_is_null("P"))
assert(((uint64)reinterpret(((buffer_t *))Out.buffer) != (uint64)0), halide_error_buffer_argument_is_null("Out"))
let Out = ((void *))_halide_buffer_get_host(((buffer_t *))Out.buffer)
let Out.type = (uint32)_halide_buffer_get_type(((buffer_t *))Out.buffer)
let Out.dimensions = _halide_buffer_get_dimensions(((buffer_t *))Out.buffer)
let Out.min.0 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 0)
let Out.extent.0 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0)
let Out.stride.0 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0)
let Out.min.1 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 1)
let Out.extent.1 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1)
let Out.stride.1 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1)
let Out.min.2 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 2)
let Out.extent.2 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2)
let Out.stride.2 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2)
let Out.min.3 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 3)
let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3)
let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3)
let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4)
let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)
let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert((Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   allocate __shared[uint8 * 0] in GPUShared if (uint1)0
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate B[float32 * 392]
     allocate A[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
     free A
     free B
    }
   }
   free __shared
  }
 }
}


Matching compute patterns...
Lowering after matching patterns:
assert(((uint64)reinterpret(((buffer_t *))W.buffer) != (uint64)0), halide_error_buffer_argument_is_null("W"))
assert(((uint64)reinterpret(((buffer_t *))P.buffer) != (uint64)0), halide_error_buffer_argument_is_null("P"))
assert(((uint64)reinterpret(((buffer_t *))Out.buffer) != (uint64)0), halide_error_buffer_argument_is_null("Out"))
let Out = ((void *))_halide_buffer_get_host(((buffer_t *))Out.buffer)
let Out.type = (uint32)_halide_buffer_get_type(((buffer_t *))Out.buffer)
let Out.dimensions = _halide_buffer_get_dimensions(((buffer_t *))Out.buffer)
let Out.min.0 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 0)
let Out.extent.0 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0)
let Out.stride.0 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0)
let Out.min.1 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 1)
let Out.extent.1 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1)
let Out.stride.1 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1)
let Out.min.2 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 2)
let Out.extent.2 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2)
let Out.stride.2 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2)
let Out.min.3 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 3)
let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3)
let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3)
let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4)
let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)
let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert((Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   allocate __shared[uint8 * 0] in GPUShared if (uint1)0
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate B[float32 * 392]
     allocate A[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
     free A
     free B
    }
   }
   free __shared
  }
 }
}


Lowering unsafe promises...
Lowering after lowering unsafe promises:
assert(((uint64)reinterpret(((buffer_t *))W.buffer) != (uint64)0), halide_error_buffer_argument_is_null("W"))
assert(((uint64)reinterpret(((buffer_t *))P.buffer) != (uint64)0), halide_error_buffer_argument_is_null("P"))
assert(((uint64)reinterpret(((buffer_t *))Out.buffer) != (uint64)0), halide_error_buffer_argument_is_null("Out"))
let Out = ((void *))_halide_buffer_get_host(((buffer_t *))Out.buffer)
let Out.type = (uint32)_halide_buffer_get_type(((buffer_t *))Out.buffer)
let Out.dimensions = _halide_buffer_get_dimensions(((buffer_t *))Out.buffer)
let Out.min.0 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 0)
let Out.extent.0 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0)
let Out.stride.0 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0)
let Out.min.1 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 1)
let Out.extent.1 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1)
let Out.stride.1 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1)
let Out.min.2 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 2)
let Out.extent.2 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2)
let Out.stride.2 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2)
let Out.min.3 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 3)
let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3)
let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3)
let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4)
let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)
let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert((Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   allocate __shared[uint8 * 0] in GPUShared if (uint1)0
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate B[float32 * 392]
     allocate A[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
     free A
     free B
    }
   }
   free __shared
  }
 }
}


Removing dead allocationss and dimensions...
simplify let Out = ((void *))_halide_buffer_get_host(((buffer_t *))Out.buffer) in...
simplify let Out.type = (uint32)_halide_buffer_get_type(((buffer_t *))Out.buffer) in...
simplify let Out.dimensions = _halide_buffer_get_dimensions(((buffer_t *))Out.buffer) in...
simplify let Out.min.0 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 0) in...
simplify let Out.extent.0 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0) in...
simplify let Out.stride.0 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0) in...
simplify let Out.min.1 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 1) in...
simplify let Out.extent.1 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1) in...
simplify let Out.stride.1 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1) in...
simplify let Out.min.2 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 2) in...
simplify let Out.extent.2 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2) in...
simplify let Out.stride.2 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2) in...
simplify let Out.min.3 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 3) in...
simplify let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3) in...
simplify let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3) in...
simplify let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4) in...
simplify let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4) in...
simplify let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4) in...
simplify let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5) in...
simplify let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5) in...
simplify let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5) in...
simplify let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6) in...
simplify let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6) in...
simplify let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6) in...
simplify let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7) in...
simplify let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7) in...
simplify let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7) in...
simplify let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8) in...
simplify let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8) in...
simplify let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8) in...
simplify let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9) in...
simplify let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9) in...
simplify let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9) in...
simplify let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer) in...
simplify let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer) in...
simplify let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer) in...
simplify let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0) in...
simplify let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0) in...
simplify let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0) in...
simplify let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1) in...
simplify let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1) in...
simplify let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1) in...
simplify let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer) in...
simplify let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer) in...
simplify let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer) in...
simplify let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0) in...
simplify let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0) in...
simplify let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0) in...
simplify let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1) in...
simplify let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1) in...
simplify let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1) in...
simplify let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0)) in...
simplify let Out.total_extent.2 = ((int64)Out.total_extent.1*int64(Out.extent.2)) in...
simplify let Out.total_extent.3 = ((int64)Out.total_extent.2*int64(Out.extent.3)) in...
simplify let Out.total_extent.4 = ((int64)Out.total_extent.3*int64(Out.extent.4)) in...
simplify let Out.total_extent.5 = ((int64)Out.total_extent.4*int64(Out.extent.5)) in...
simplify let Out.total_extent.6 = ((int64)Out.total_extent.5*int64(Out.extent.6)) in...
simplify let Out.total_extent.7 = ((int64)Out.total_extent.6*int64(Out.extent.7)) in...
simplify let Out.total_extent.8 = ((int64)Out.total_extent.7*int64(Out.extent.8)) in...
simplify let Out.total_extent.9 = ((int64)Out.total_extent.8*int64(Out.extent.9)) in...
simplify let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0)) in...
simplify let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0)) in...
simplify let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36) in...
simplify let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8) in...
simplify let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30)) in...
simplify let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4) in...
simplify let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49) in...
simplify let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8) in...
Lowering after final simplification:
assert(((uint64)reinterpret(((buffer_t *))W.buffer) != (uint64)0), halide_error_buffer_argument_is_null("W"))
assert(((uint64)reinterpret(((buffer_t *))P.buffer) != (uint64)0), halide_error_buffer_argument_is_null("P"))
assert(((uint64)reinterpret(((buffer_t *))Out.buffer) != (uint64)0), halide_error_buffer_argument_is_null("Out"))
let Out = ((void *))_halide_buffer_get_host(((buffer_t *))Out.buffer)
let Out.type = (uint32)_halide_buffer_get_type(((buffer_t *))Out.buffer)
let Out.dimensions = _halide_buffer_get_dimensions(((buffer_t *))Out.buffer)
let Out.min.0 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 0)
let Out.extent.0 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0)
let Out.stride.0 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0)
let Out.min.1 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 1)
let Out.extent.1 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1)
let Out.stride.1 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1)
let Out.min.2 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 2)
let Out.extent.2 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2)
let Out.stride.2 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2)
let Out.min.3 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 3)
let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3)
let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3)
let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4)
let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)
let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert((Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}


Promoting channels...
Lowering after channel promotion:
assert(((uint64)reinterpret(((buffer_t *))W.buffer) != (uint64)0), halide_error_buffer_argument_is_null("W"))
assert(((uint64)reinterpret(((buffer_t *))P.buffer) != (uint64)0), halide_error_buffer_argument_is_null("P"))
assert(((uint64)reinterpret(((buffer_t *))Out.buffer) != (uint64)0), halide_error_buffer_argument_is_null("Out"))
let Out = ((void *))_halide_buffer_get_host(((buffer_t *))Out.buffer)
let Out.type = (uint32)_halide_buffer_get_type(((buffer_t *))Out.buffer)
let Out.dimensions = _halide_buffer_get_dimensions(((buffer_t *))Out.buffer)
let Out.min.0 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 0)
let Out.extent.0 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0)
let Out.stride.0 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0)
let Out.min.1 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 1)
let Out.extent.1 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1)
let Out.stride.1 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1)
let Out.min.2 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 2)
let Out.extent.2 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2)
let Out.stride.2 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2)
let Out.min.3 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 3)
let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3)
let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3)
let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4)
let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)
let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert((Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}


Flatten triangular loop...
Lowering after triangular loop optimizing:
assert(((uint64)reinterpret(((buffer_t *))W.buffer) != (uint64)0), halide_error_buffer_argument_is_null("W"))
assert(((uint64)reinterpret(((buffer_t *))P.buffer) != (uint64)0), halide_error_buffer_argument_is_null("P"))
assert(((uint64)reinterpret(((buffer_t *))Out.buffer) != (uint64)0), halide_error_buffer_argument_is_null("Out"))
let Out = ((void *))_halide_buffer_get_host(((buffer_t *))Out.buffer)
let Out.type = (uint32)_halide_buffer_get_type(((buffer_t *))Out.buffer)
let Out.dimensions = _halide_buffer_get_dimensions(((buffer_t *))Out.buffer)
let Out.min.0 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 0)
let Out.extent.0 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0)
let Out.stride.0 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0)
let Out.min.1 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 1)
let Out.extent.1 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1)
let Out.stride.1 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1)
let Out.min.2 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 2)
let Out.extent.2 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2)
let Out.stride.2 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2)
let Out.min.3 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 3)
let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3)
let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3)
let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4)
let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)
let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert((Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}


Late fuse...
Lowering after late fuse:
assert(((uint64)reinterpret(((buffer_t *))W.buffer) != (uint64)0), halide_error_buffer_argument_is_null("W"))
assert(((uint64)reinterpret(((buffer_t *))P.buffer) != (uint64)0), halide_error_buffer_argument_is_null("P"))
assert(((uint64)reinterpret(((buffer_t *))Out.buffer) != (uint64)0), halide_error_buffer_argument_is_null("Out"))
let Out = ((void *))_halide_buffer_get_host(((buffer_t *))Out.buffer)
let Out.type = (uint32)_halide_buffer_get_type(((buffer_t *))Out.buffer)
let Out.dimensions = _halide_buffer_get_dimensions(((buffer_t *))Out.buffer)
let Out.min.0 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 0)
let Out.extent.0 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0)
let Out.stride.0 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0)
let Out.min.1 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 1)
let Out.extent.1 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1)
let Out.stride.1 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1)
let Out.min.2 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 2)
let Out.extent.2 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2)
let Out.stride.2 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2)
let Out.min.3 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 3)
let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3)
let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3)
let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4)
let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)
let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert((Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}


Creating overlay scheduler...
Overlay main body mutating...
Cannot find inferred args of function A...
simplify let Out = ((void *))_halide_buffer_get_host(((buffer_t *))Out.buffer) in...
simplify let Out.type = (uint32)_halide_buffer_get_type(((buffer_t *))Out.buffer) in...
simplify let Out.dimensions = _halide_buffer_get_dimensions(((buffer_t *))Out.buffer) in...
simplify let Out.min.0 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 0) in...
simplify let Out.extent.0 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0) in...
simplify let Out.stride.0 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0) in...
simplify let Out.min.1 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 1) in...
simplify let Out.extent.1 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1) in...
simplify let Out.stride.1 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1) in...
simplify let Out.min.2 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 2) in...
simplify let Out.extent.2 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2) in...
simplify let Out.stride.2 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2) in...
simplify let Out.min.3 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 3) in...
simplify let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3) in...
simplify let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3) in...
simplify let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4) in...
simplify let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4) in...
simplify let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4) in...
simplify let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5) in...
simplify let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5) in...
simplify let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5) in...
simplify let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6) in...
simplify let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6) in...
simplify let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6) in...
simplify let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7) in...
simplify let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7) in...
simplify let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7) in...
simplify let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8) in...
simplify let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8) in...
simplify let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8) in...
simplify let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9) in...
simplify let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9) in...
simplify let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9) in...
simplify let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer) in...
simplify let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer) in...
simplify let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer) in...
simplify let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0) in...
simplify let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0) in...
simplify let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0) in...
simplify let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1) in...
simplify let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1) in...
simplify let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1) in...
simplify let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer) in...
simplify let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer) in...
simplify let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer) in...
simplify let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0) in...
simplify let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0) in...
simplify let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0) in...
simplify let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1) in...
simplify let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1) in...
simplify let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1) in...
simplify let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0)) in...
simplify let Out.total_extent.2 = ((int64)Out.total_extent.1*int64(Out.extent.2)) in...
simplify let Out.total_extent.3 = ((int64)Out.total_extent.2*int64(Out.extent.3)) in...
simplify let Out.total_extent.4 = ((int64)Out.total_extent.3*int64(Out.extent.4)) in...
simplify let Out.total_extent.5 = ((int64)Out.total_extent.4*int64(Out.extent.5)) in...
simplify let Out.total_extent.6 = ((int64)Out.total_extent.5*int64(Out.extent.6)) in...
simplify let Out.total_extent.7 = ((int64)Out.total_extent.6*int64(Out.extent.7)) in...
simplify let Out.total_extent.8 = ((int64)Out.total_extent.7*int64(Out.extent.8)) in...
simplify let Out.total_extent.9 = ((int64)Out.total_extent.8*int64(Out.extent.9)) in...
simplify let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0)) in...
simplify let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0)) in...
simplify let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36) in...
simplify let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8) in...
simplify let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30)) in...
simplify let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4) in...
simplify let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49) in...
simplify let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8) in...
Lowering after creating overlay scheduler:
assert(((uint64)reinterpret(((buffer_t *))W.buffer) != (uint64)0), halide_error_buffer_argument_is_null("W"))
assert(((uint64)reinterpret(((buffer_t *))P.buffer) != (uint64)0), halide_error_buffer_argument_is_null("P"))
assert(((uint64)reinterpret(((buffer_t *))Out.buffer) != (uint64)0), halide_error_buffer_argument_is_null("Out"))
let Out = ((void *))_halide_buffer_get_host(((buffer_t *))Out.buffer)
let Out.type = (uint32)_halide_buffer_get_type(((buffer_t *))Out.buffer)
let Out.dimensions = _halide_buffer_get_dimensions(((buffer_t *))Out.buffer)
let Out.min.0 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 0)
let Out.extent.0 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0)
let Out.stride.0 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0)
let Out.min.1 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 1)
let Out.extent.1 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1)
let Out.stride.1 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1)
let Out.min.2 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 2)
let Out.extent.2 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2)
let Out.stride.2 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2)
let Out.min.3 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 3)
let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3)
let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3)
let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4)
let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)
let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert((Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}


Skipping Hexagon offload...
Remove lets...
Lowering after removing lets:
assert(((uint64)reinterpret(((buffer_t *))W.buffer) != (uint64)0), halide_error_buffer_argument_is_null("W"))
assert(((uint64)reinterpret(((buffer_t *))P.buffer) != (uint64)0), halide_error_buffer_argument_is_null("P"))
assert(((uint64)reinterpret(((buffer_t *))Out.buffer) != (uint64)0), halide_error_buffer_argument_is_null("Out"))
let Out = ((void *))_halide_buffer_get_host(((buffer_t *))Out.buffer)
let Out.type = (uint32)_halide_buffer_get_type(((buffer_t *))Out.buffer)
let Out.dimensions = _halide_buffer_get_dimensions(((buffer_t *))Out.buffer)
let Out.min.0 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 0)
let Out.extent.0 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0)
let Out.stride.0 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0)
let Out.min.1 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 1)
let Out.extent.1 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1)
let Out.stride.1 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1)
let Out.min.2 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 2)
let Out.extent.2 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2)
let Out.stride.2 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2)
let Out.min.3 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 3)
let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3)
let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3)
let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4)
let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)
let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert((Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Module.compile(): dev_src capsule
Constructing CM device codegen
Target triple of initial module: x86_64--linux-gnu
CM device codegen init_module
Generating llvm bitcode prolog for function capsule...
Generating llvm bitcode for function capsule...
Codegen: assert(((uint64)reinterpret(((buffer_t *))W.buffer) != (uint64)0), halide_error_buffer_argument_is_null("W"))

Codegen: uint1, ((uint64)reinterpret(((buffer_t *))W.buffer) != (uint64)0)
Codegen: uint1, !((uint64)reinterpret(((buffer_t *))W.buffer) == (uint64)0)
Codegen: uint1, ((uint64)reinterpret(((buffer_t *))W.buffer) == (uint64)0)
Codegen: uint64, (uint64)reinterpret(((buffer_t *))W.buffer)
Codegen: (buffer_t *), ((buffer_t *))W.buffer
Codegen: uint64, (uint64)0
Codegen: int32, halide_error_buffer_argument_is_null("W")
Codegen: (char *), "W"
Adding user_context to halide_error_buffer_argument_is_null args
Found halide_error_buffer_argument_is_null
Codegen: assert(((uint64)reinterpret(((buffer_t *))P.buffer) != (uint64)0), halide_error_buffer_argument_is_null("P"))

Codegen: uint1, ((uint64)reinterpret(((buffer_t *))P.buffer) != (uint64)0)
Codegen: uint1, !((uint64)reinterpret(((buffer_t *))P.buffer) == (uint64)0)
Codegen: uint1, ((uint64)reinterpret(((buffer_t *))P.buffer) == (uint64)0)
Codegen: uint64, (uint64)reinterpret(((buffer_t *))P.buffer)
Codegen: (buffer_t *), ((buffer_t *))P.buffer
Codegen: uint64, (uint64)0
Codegen: int32, halide_error_buffer_argument_is_null("P")
Codegen: (char *), "P"
Adding user_context to halide_error_buffer_argument_is_null args
Found halide_error_buffer_argument_is_null
Codegen: assert(((uint64)reinterpret(((buffer_t *))Out.buffer) != (uint64)0), halide_error_buffer_argument_is_null("Out"))

Codegen: uint1, ((uint64)reinterpret(((buffer_t *))Out.buffer) != (uint64)0)
Codegen: uint1, !((uint64)reinterpret(((buffer_t *))Out.buffer) == (uint64)0)
Codegen: uint1, ((uint64)reinterpret(((buffer_t *))Out.buffer) == (uint64)0)
Codegen: uint64, (uint64)reinterpret(((buffer_t *))Out.buffer)
Codegen: (buffer_t *), ((buffer_t *))Out.buffer
Codegen: uint64, (uint64)0
Codegen: int32, halide_error_buffer_argument_is_null("Out")
Codegen: (char *), "Out"
Adding user_context to halide_error_buffer_argument_is_null args
Found halide_error_buffer_argument_is_null
Codegen: let Out = ((void *))_halide_buffer_get_host(((buffer_t *))Out.buffer)
let Out.type = (uint32)_halide_buffer_get_type(((buffer_t *))Out.buffer)
let Out.dimensions = _halide_buffer_get_dimensions(((buffer_t *))Out.buffer)
let Out.min.0 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 0)
let Out.extent.0 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0)
let Out.stride.0 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0)
let Out.min.1 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 1)
let Out.extent.1 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1)
let Out.stride.1 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1)
let Out.min.2 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 2)
let Out.extent.2 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2)
let Out.stride.2 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2)
let Out.min.3 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 3)
let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3)
let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3)
let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4)
let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)
let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert((Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: (void *), ((void *))_halide_buffer_get_host(((buffer_t *))Out.buffer)
Codegen: (buffer_t *), ((buffer_t *))Out.buffer
Found _halide_buffer_get_host
Codegen: let Out.type = (uint32)_halide_buffer_get_type(((buffer_t *))Out.buffer)
let Out.dimensions = _halide_buffer_get_dimensions(((buffer_t *))Out.buffer)
let Out.min.0 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 0)
let Out.extent.0 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0)
let Out.stride.0 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0)
let Out.min.1 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 1)
let Out.extent.1 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1)
let Out.stride.1 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1)
let Out.min.2 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 2)
let Out.extent.2 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2)
let Out.stride.2 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2)
let Out.min.3 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 3)
let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3)
let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3)
let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4)
let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)
let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert((Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: uint32, (uint32)_halide_buffer_get_type(((buffer_t *))Out.buffer)
Codegen: (buffer_t *), ((buffer_t *))Out.buffer
Found _halide_buffer_get_type
Codegen: let Out.dimensions = _halide_buffer_get_dimensions(((buffer_t *))Out.buffer)
let Out.min.0 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 0)
let Out.extent.0 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0)
let Out.stride.0 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0)
let Out.min.1 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 1)
let Out.extent.1 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1)
let Out.stride.1 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1)
let Out.min.2 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 2)
let Out.extent.2 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2)
let Out.stride.2 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2)
let Out.min.3 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 3)
let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3)
let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3)
let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4)
let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)
let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int32, _halide_buffer_get_dimensions(((buffer_t *))Out.buffer)
Codegen: (buffer_t *), ((buffer_t *))Out.buffer
Found _halide_buffer_get_dimensions
Codegen: let Out.min.0 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 0)
let Out.extent.0 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0)
let Out.stride.0 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0)
let Out.min.1 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 1)
let Out.extent.1 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1)
let Out.stride.1 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1)
let Out.min.2 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 2)
let Out.extent.2 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2)
let Out.stride.2 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2)
let Out.min.3 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 3)
let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3)
let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3)
let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4)
let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)
let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int32, _halide_buffer_get_min(((buffer_t *))Out.buffer, 0)
Codegen: (buffer_t *), ((buffer_t *))Out.buffer
Codegen: int32, 0
Found _halide_buffer_get_min
Codegen: let Out.extent.0 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0)
let Out.stride.0 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0)
let Out.min.1 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 1)
let Out.extent.1 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1)
let Out.stride.1 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1)
let Out.min.2 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 2)
let Out.extent.2 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2)
let Out.stride.2 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2)
let Out.min.3 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 3)
let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3)
let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3)
let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4)
let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)
let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int32, _halide_buffer_get_extent(((buffer_t *))Out.buffer, 0)
Codegen: (buffer_t *), ((buffer_t *))Out.buffer
Codegen: int32, 0
Found _halide_buffer_get_extent
Codegen: let Out.stride.0 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0)
let Out.min.1 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 1)
let Out.extent.1 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1)
let Out.stride.1 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1)
let Out.min.2 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 2)
let Out.extent.2 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2)
let Out.stride.2 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2)
let Out.min.3 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 3)
let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3)
let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3)
let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4)
let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)
let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int32, _halide_buffer_get_stride(((buffer_t *))Out.buffer, 0)
Codegen: (buffer_t *), ((buffer_t *))Out.buffer
Codegen: int32, 0
Found _halide_buffer_get_stride
Codegen: let Out.min.1 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 1)
let Out.extent.1 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1)
let Out.stride.1 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1)
let Out.min.2 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 2)
let Out.extent.2 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2)
let Out.stride.2 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2)
let Out.min.3 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 3)
let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3)
let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3)
let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4)
let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)
let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int32, _halide_buffer_get_min(((buffer_t *))Out.buffer, 1)
Codegen: (buffer_t *), ((buffer_t *))Out.buffer
Codegen: int32, 1
Found _halide_buffer_get_min
Codegen: let Out.extent.1 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1)
let Out.stride.1 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1)
let Out.min.2 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 2)
let Out.extent.2 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2)
let Out.stride.2 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2)
let Out.min.3 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 3)
let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3)
let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3)
let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4)
let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)
let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int32, _halide_buffer_get_extent(((buffer_t *))Out.buffer, 1)
Codegen: (buffer_t *), ((buffer_t *))Out.buffer
Codegen: int32, 1
Found _halide_buffer_get_extent
Codegen: let Out.stride.1 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1)
let Out.min.2 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 2)
let Out.extent.2 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2)
let Out.stride.2 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2)
let Out.min.3 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 3)
let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3)
let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3)
let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4)
let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)
let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int32, _halide_buffer_get_stride(((buffer_t *))Out.buffer, 1)
Codegen: (buffer_t *), ((buffer_t *))Out.buffer
Codegen: int32, 1
Found _halide_buffer_get_stride
Codegen: let Out.min.2 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 2)
let Out.extent.2 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2)
let Out.stride.2 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2)
let Out.min.3 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 3)
let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3)
let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3)
let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4)
let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)
let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int32, _halide_buffer_get_min(((buffer_t *))Out.buffer, 2)
Codegen: (buffer_t *), ((buffer_t *))Out.buffer
Codegen: int32, 2
Found _halide_buffer_get_min
Codegen: let Out.extent.2 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2)
let Out.stride.2 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2)
let Out.min.3 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 3)
let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3)
let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3)
let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4)
let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)
let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int32, _halide_buffer_get_extent(((buffer_t *))Out.buffer, 2)
Codegen: (buffer_t *), ((buffer_t *))Out.buffer
Codegen: int32, 2
Found _halide_buffer_get_extent
Codegen: let Out.stride.2 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2)
let Out.min.3 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 3)
let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3)
let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3)
let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4)
let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)
let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int32, _halide_buffer_get_stride(((buffer_t *))Out.buffer, 2)
Codegen: (buffer_t *), ((buffer_t *))Out.buffer
Codegen: int32, 2
Found _halide_buffer_get_stride
Codegen: let Out.min.3 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 3)
let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3)
let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3)
let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4)
let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)
let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int32, _halide_buffer_get_min(((buffer_t *))Out.buffer, 3)
Codegen: (buffer_t *), ((buffer_t *))Out.buffer
Codegen: int32, 3
Found _halide_buffer_get_min
Codegen: let Out.extent.3 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3)
let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3)
let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4)
let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)
let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int32, _halide_buffer_get_extent(((buffer_t *))Out.buffer, 3)
Codegen: (buffer_t *), ((buffer_t *))Out.buffer
Codegen: int32, 3
Found _halide_buffer_get_extent
Codegen: let Out.stride.3 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3)
let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4)
let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)
let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int32, _halide_buffer_get_stride(((buffer_t *))Out.buffer, 3)
Codegen: (buffer_t *), ((buffer_t *))Out.buffer
Codegen: int32, 3
Found _halide_buffer_get_stride
Codegen: let Out.min.4 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 4)
let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)
let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int32, _halide_buffer_get_min(((buffer_t *))Out.buffer, 4)
Codegen: (buffer_t *), ((buffer_t *))Out.buffer
Codegen: int32, 4
Found _halide_buffer_get_min
Codegen: let Out.extent.4 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)
let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int32, _halide_buffer_get_extent(((buffer_t *))Out.buffer, 4)
Codegen: (buffer_t *), ((buffer_t *))Out.buffer
Codegen: int32, 4
Found _halide_buffer_get_extent
Codegen: let Out.stride.4 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int32, _halide_buffer_get_stride(((buffer_t *))Out.buffer, 4)
Codegen: (buffer_t *), ((buffer_t *))Out.buffer
Codegen: int32, 4
Found _halide_buffer_get_stride
Codegen: let Out.min.5 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int32, _halide_buffer_get_min(((buffer_t *))Out.buffer, 5)
Codegen: (buffer_t *), ((buffer_t *))Out.buffer
Codegen: int32, 5
Found _halide_buffer_get_min
Codegen: let Out.extent.5 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int32, _halide_buffer_get_extent(((buffer_t *))Out.buffer, 5)
Codegen: (buffer_t *), ((buffer_t *))Out.buffer
Codegen: int32, 5
Found _halide_buffer_get_extent
Codegen: let Out.stride.5 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int32, _halide_buffer_get_stride(((buffer_t *))Out.buffer, 5)
Codegen: (buffer_t *), ((buffer_t *))Out.buffer
Codegen: int32, 5
Found _halide_buffer_get_stride
Codegen: let Out.min.6 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int32, _halide_buffer_get_min(((buffer_t *))Out.buffer, 6)
Codegen: (buffer_t *), ((buffer_t *))Out.buffer
Codegen: int32, 6
Found _halide_buffer_get_min
Codegen: let Out.extent.6 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int32, _halide_buffer_get_extent(((buffer_t *))Out.buffer, 6)
Codegen: (buffer_t *), ((buffer_t *))Out.buffer
Codegen: int32, 6
Found _halide_buffer_get_extent
Codegen: let Out.stride.6 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int32, _halide_buffer_get_stride(((buffer_t *))Out.buffer, 6)
Codegen: (buffer_t *), ((buffer_t *))Out.buffer
Codegen: int32, 6
Found _halide_buffer_get_stride
Codegen: let Out.min.7 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int32, _halide_buffer_get_min(((buffer_t *))Out.buffer, 7)
Codegen: (buffer_t *), ((buffer_t *))Out.buffer
Codegen: int32, 7
Found _halide_buffer_get_min
Codegen: let Out.extent.7 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int32, _halide_buffer_get_extent(((buffer_t *))Out.buffer, 7)
Codegen: (buffer_t *), ((buffer_t *))Out.buffer
Codegen: int32, 7
Found _halide_buffer_get_extent
Codegen: let Out.stride.7 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int32, _halide_buffer_get_stride(((buffer_t *))Out.buffer, 7)
Codegen: (buffer_t *), ((buffer_t *))Out.buffer
Codegen: int32, 7
Found _halide_buffer_get_stride
Codegen: let Out.min.8 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int32, _halide_buffer_get_min(((buffer_t *))Out.buffer, 8)
Codegen: (buffer_t *), ((buffer_t *))Out.buffer
Codegen: int32, 8
Found _halide_buffer_get_min
Codegen: let Out.extent.8 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int32, _halide_buffer_get_extent(((buffer_t *))Out.buffer, 8)
Codegen: (buffer_t *), ((buffer_t *))Out.buffer
Codegen: int32, 8
Found _halide_buffer_get_extent
Codegen: let Out.stride.8 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int32, _halide_buffer_get_stride(((buffer_t *))Out.buffer, 8)
Codegen: (buffer_t *), ((buffer_t *))Out.buffer
Codegen: int32, 8
Found _halide_buffer_get_stride
Codegen: let Out.min.9 = _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int32, _halide_buffer_get_min(((buffer_t *))Out.buffer, 9)
Codegen: (buffer_t *), ((buffer_t *))Out.buffer
Codegen: int32, 9
Found _halide_buffer_get_min
Codegen: let Out.extent.9 = _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int32, _halide_buffer_get_extent(((buffer_t *))Out.buffer, 9)
Codegen: (buffer_t *), ((buffer_t *))Out.buffer
Codegen: int32, 9
Found _halide_buffer_get_extent
Codegen: let Out.stride.9 = _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int32, _halide_buffer_get_stride(((buffer_t *))Out.buffer, 9)
Codegen: (buffer_t *), ((buffer_t *))Out.buffer
Codegen: int32, 9
Found _halide_buffer_get_stride
Codegen: let P = ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: (void *), ((void *))_halide_buffer_get_host(((buffer_t *))P.buffer)
Codegen: (buffer_t *), ((buffer_t *))P.buffer
Found _halide_buffer_get_host
Codegen: let P.type = (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert((P.type == (uint32)73730), halide_error_bad_type("Input buffer P", P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(((void *))P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: uint32, (uint32)_halide_buffer_get_type(((buffer_t *))P.buffer)
Codegen: (buffer_t *), ((buffer_t *))P.buffer
Found _halide_buffer_get_type
Codegen: let P.dimensions = _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert(((uint32)P.type == (uint32)73730), halide_error_bad_type("Input buffer P", (uint32)P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(((void *))P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int32, _halide_buffer_get_dimensions(((buffer_t *))P.buffer)
Codegen: (buffer_t *), ((buffer_t *))P.buffer
Found _halide_buffer_get_dimensions
Codegen: let P.min.0 = _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert(((uint32)P.type == (uint32)73730), halide_error_bad_type("Input buffer P", (uint32)P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(((void *))P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int32, _halide_buffer_get_min(((buffer_t *))P.buffer, 0)
Codegen: (buffer_t *), ((buffer_t *))P.buffer
Codegen: int32, 0
Found _halide_buffer_get_min
Codegen: let P.extent.0 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert(((uint32)P.type == (uint32)73730), halide_error_bad_type("Input buffer P", (uint32)P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(((void *))P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int32, _halide_buffer_get_extent(((buffer_t *))P.buffer, 0)
Codegen: (buffer_t *), ((buffer_t *))P.buffer
Codegen: int32, 0
Found _halide_buffer_get_extent
Codegen: let P.stride.0 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert(((uint32)P.type == (uint32)73730), halide_error_bad_type("Input buffer P", (uint32)P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(((void *))P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int32, _halide_buffer_get_stride(((buffer_t *))P.buffer, 0)
Codegen: (buffer_t *), ((buffer_t *))P.buffer
Codegen: int32, 0
Found _halide_buffer_get_stride
Codegen: let P.min.1 = _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert(((uint32)P.type == (uint32)73730), halide_error_bad_type("Input buffer P", (uint32)P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(((void *))P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int32, _halide_buffer_get_min(((buffer_t *))P.buffer, 1)
Codegen: (buffer_t *), ((buffer_t *))P.buffer
Codegen: int32, 1
Found _halide_buffer_get_min
Codegen: let P.extent.1 = _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert(((uint32)P.type == (uint32)73730), halide_error_bad_type("Input buffer P", (uint32)P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(((void *))P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int32, _halide_buffer_get_extent(((buffer_t *))P.buffer, 1)
Codegen: (buffer_t *), ((buffer_t *))P.buffer
Codegen: int32, 1
Found _halide_buffer_get_extent
Codegen: let P.stride.1 = _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert(((uint32)P.type == (uint32)73730), halide_error_bad_type("Input buffer P", (uint32)P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(((void *))P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int32, _halide_buffer_get_stride(((buffer_t *))P.buffer, 1)
Codegen: (buffer_t *), ((buffer_t *))P.buffer
Codegen: int32, 1
Found _halide_buffer_get_stride
Codegen: let W = ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert(((uint32)P.type == (uint32)73730), halide_error_bad_type("Input buffer P", (uint32)P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(((void *))P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: (void *), ((void *))_halide_buffer_get_host(((buffer_t *))W.buffer)
Codegen: (buffer_t *), ((buffer_t *))W.buffer
Found _halide_buffer_get_host
Codegen: let W.type = (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert(((uint32)P.type == (uint32)73730), halide_error_bad_type("Input buffer P", (uint32)P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert((W.type == (uint32)73730), halide_error_bad_type("Input buffer W", W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(((void *))W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(((void *))P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: uint32, (uint32)_halide_buffer_get_type(((buffer_t *))W.buffer)
Codegen: (buffer_t *), ((buffer_t *))W.buffer
Found _halide_buffer_get_type
Codegen: let W.dimensions = _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert(((uint32)P.type == (uint32)73730), halide_error_bad_type("Input buffer P", (uint32)P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert(((uint32)W.type == (uint32)73730), halide_error_bad_type("Input buffer W", (uint32)W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(((void *))W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(((void *))P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int32, _halide_buffer_get_dimensions(((buffer_t *))W.buffer)
Codegen: (buffer_t *), ((buffer_t *))W.buffer
Found _halide_buffer_get_dimensions
Codegen: let W.min.0 = _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert(((uint32)P.type == (uint32)73730), halide_error_bad_type("Input buffer P", (uint32)P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert(((uint32)W.type == (uint32)73730), halide_error_bad_type("Input buffer W", (uint32)W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(((void *))W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(((void *))P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int32, _halide_buffer_get_min(((buffer_t *))W.buffer, 0)
Codegen: (buffer_t *), ((buffer_t *))W.buffer
Codegen: int32, 0
Found _halide_buffer_get_min
Codegen: let W.extent.0 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert(((uint32)P.type == (uint32)73730), halide_error_bad_type("Input buffer P", (uint32)P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert(((uint32)W.type == (uint32)73730), halide_error_bad_type("Input buffer W", (uint32)W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(((void *))W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(((void *))P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int32, _halide_buffer_get_extent(((buffer_t *))W.buffer, 0)
Codegen: (buffer_t *), ((buffer_t *))W.buffer
Codegen: int32, 0
Found _halide_buffer_get_extent
Codegen: let W.stride.0 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert(((uint32)P.type == (uint32)73730), halide_error_bad_type("Input buffer P", (uint32)P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert(((uint32)W.type == (uint32)73730), halide_error_bad_type("Input buffer W", (uint32)W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(((void *))W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(((void *))P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int32, _halide_buffer_get_stride(((buffer_t *))W.buffer, 0)
Codegen: (buffer_t *), ((buffer_t *))W.buffer
Codegen: int32, 0
Found _halide_buffer_get_stride
Codegen: let W.min.1 = _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert(((uint32)P.type == (uint32)73730), halide_error_bad_type("Input buffer P", (uint32)P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert(((uint32)W.type == (uint32)73730), halide_error_bad_type("Input buffer W", (uint32)W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(((void *))W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(((void *))P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int32, _halide_buffer_get_min(((buffer_t *))W.buffer, 1)
Codegen: (buffer_t *), ((buffer_t *))W.buffer
Codegen: int32, 1
Found _halide_buffer_get_min
Codegen: let W.extent.1 = _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert(((uint32)P.type == (uint32)73730), halide_error_bad_type("Input buffer P", (uint32)P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert(((uint32)W.type == (uint32)73730), halide_error_bad_type("Input buffer W", (uint32)W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(((void *))W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(((void *))P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int32, _halide_buffer_get_extent(((buffer_t *))W.buffer, 1)
Codegen: (buffer_t *), ((buffer_t *))W.buffer
Codegen: int32, 1
Found _halide_buffer_get_extent
Codegen: let W.stride.1 = _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert(((uint32)P.type == (uint32)73730), halide_error_bad_type("Input buffer P", (uint32)P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert(((uint32)W.type == (uint32)73730), halide_error_bad_type("Input buffer W", (uint32)W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(((void *))W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(((void *))P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int32, _halide_buffer_get_stride(((buffer_t *))W.buffer, 1)
Codegen: (buffer_t *), ((buffer_t *))W.buffer
Codegen: int32, 1
Found _halide_buffer_get_stride
Codegen: if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert(((uint32)P.type == (uint32)73730), halide_error_bad_type("Input buffer P", (uint32)P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert(((uint32)W.type == (uint32)73730), halide_error_bad_type("Input buffer W", (uint32)W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(((void *))W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(((void *))P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
}

Codegen: uint1, (uint1)_halide_buffer_is_bounds_query(((buffer_t *))Out.buffer)
Codegen: (buffer_t *), ((buffer_t *))Out.buffer
Found _halide_buffer_is_bounds_query
Codegen: ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)

Codegen: (halide_buffer_t *), ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))Out.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 10, ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0), (uint64)0)
Codegen: (halide_buffer_t *), ((halide_buffer_t *))Out.buffer
Codegen: (halide_dimension_t *), ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))Out.buffer)
Codegen: (halide_buffer_t *), ((halide_buffer_t *))Out.buffer
Found _halide_buffer_get_shape
Codegen: (void *), ((void *))reinterpret((uint64)0)
Codegen: uint64, (uint64)0
Codegen: uint64, (uint64)0
Codegen: (halide_device_interface_t *), ((halide_device_interface_t *))reinterpret((uint64)0)
Codegen: uint64, (uint64)0
Codegen: int32, 2
Codegen: int32, 32
Codegen: int32, 10
Codegen: (halide_dimension_t *), ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0)
Codegen: int32, 0
Codegen: int32, 8
Codegen: int32, 1
Codegen: int32, 0
Codegen: int32, 0
Codegen: int32, 7
Codegen: int32, 8
Codegen: int32, 0
Codegen: int32, 0
Codegen: int32, 7
Codegen: int32, 56
Codegen: int32, 0
Codegen: int32, 0
Codegen: int32, 1
Codegen: int32, 392
Codegen: int32, 0
Codegen: int32, 0
Codegen: int32, 4
Codegen: int32, 392
Codegen: int32, 0
Codegen: int32, 0
Codegen: int32, 4
Codegen: int32, 1568
Codegen: int32, 0
Codegen: int32, 0
Codegen: int32, 1
Codegen: int32, 6272
Codegen: int32, 0
Codegen: int32, 0
Codegen: int32, 16
Codegen: int32, 6272
Codegen: int32, 0
Codegen: int32, 0
Codegen: int32, 4
Codegen: int32, 100352
Codegen: int32, 0
Codegen: int32, 0
Codegen: int32, (P.extent.1/3600)



Input to CSE ((div_round_to_zero(P.extent.1, 3600) - bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), shift_right(3600, 31))) + bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), bitwise_not(shift_right(3600, 31))))
After removing lets: ((div_round_to_zero(P.extent.1, 3600) - bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), shift_right(3600, 31))) + bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), bitwise_not(shift_right(3600, 31))))
Include: ((div_round_to_zero(P.extent.1, 3600) - bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), shift_right(3600, 31))) + bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), bitwise_not(shift_right(3600, 31)))); should extract: 1
Include: (div_round_to_zero(P.extent.1, 3600) - bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), shift_right(3600, 31))); should extract: 1
Include: div_round_to_zero(P.extent.1, 3600); should extract: 1
Include: P.extent.1; should extract: 0
Include: 3600; should extract: 0
Include: bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), shift_right(3600, 31)); should extract: 1
Include: shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31); should extract: 1
Include: (P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)); should extract: 1
Include: P.extent.1; should extract: 0
Include: (div_round_to_zero(P.extent.1, 3600)*3600); should extract: 0
Include: div_round_to_zero(P.extent.1, 3600); should extract: 1
Include: 3600; should extract: 0
Include: 31; should extract: 0
Include: shift_right(3600, 31); should extract: 1
Include: 3600; should extract: 0
Include: 31; should extract: 0
Include: bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), bitwise_not(shift_right(3600, 31))); should extract: 1
Include: shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31); should extract: 1
Include: bitwise_not(shift_right(3600, 31)); should extract: 1
Include: shift_right(3600, 31); should extract: 1
Canonical form without lets ((div_round_to_zero(P.extent.1, 3600) - bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), shift_right(3600, 31))) + bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), bitwise_not(shift_right(3600, 31))))
0: P.extent.1, 0
1: 3600, 0
2: div_round_to_zero(P.extent.1, 3600), 2
3: (div_round_to_zero(P.extent.1, 3600)*3600), 0
4: (P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 1
5: 31, 0
6: shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), 2
7: shift_right(3600, 31), 2
8: bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), shift_right(3600, 31)), 1
9: (div_round_to_zero(P.extent.1, 3600) - bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), shift_right(3600, 31))), 1
10: bitwise_not(shift_right(3600, 31)), 1
11: bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), bitwise_not(shift_right(3600, 31))), 1
12: ((div_round_to_zero(P.extent.1, 3600) - bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), shift_right(3600, 31))) + bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), bitwise_not(shift_right(3600, 31)))), 1
With variables ((t58 - bitwise_and(t59, t60)) + bitwise_and(t59, bitwise_not(t60)))
With lets: (let t58 = div_round_to_zero(P.extent.1, 3600) in (let t59 = shift_right((P.extent.1 - (t58*3600)), 31) in (let t60 = shift_right(3600, 31) in ((t58 - bitwise_and(t59, t60)) + bitwise_and(t59, bitwise_not(t60))))))
Codegen: int32, (let t58 = div_round_to_zero(P.extent.1, 3600) in (let t59 = shift_right((P.extent.1 - (t58*3600)), 31) in (let t60 = shift_right(3600, 31) in ((t58 - bitwise_and(t59, t60)) + bitwise_and(t59, bitwise_not(t60))))))
Codegen: int32, div_round_to_zero(P.extent.1, 3600)
Codegen: int32, P.extent.1
Codegen: int32, 3600
Codegen: int32, (let t59 = shift_right((P.extent.1 - (t58*3600)), 31) in (let t60 = shift_right(3600, 31) in ((t58 - bitwise_and(t59, t60)) + bitwise_and(t59, bitwise_not(t60)))))
Codegen: int32, shift_right((P.extent.1 - (t58*3600)), 31)
Codegen: int32, (P.extent.1 - (t58*3600))
Codegen: int32, P.extent.1
Codegen: int32, (t58*3600)
Codegen: int32, t58
Codegen: int32, 3600
Codegen: int32, 31



Input to CSE shift_right((P.extent.1 - (t58*3600)), (uint32)31)
After removing lets: shift_right((P.extent.1 - (t58*3600)), (uint32)31)
Include: shift_right((P.extent.1 - (t58*3600)), (uint32)31); should extract: 1
Include: (P.extent.1 - (t58*3600)); should extract: 1
Include: P.extent.1; should extract: 0
Include: (t58*3600); should extract: 0
Include: t58; should extract: 0
Include: 3600; should extract: 0
Include: (uint32)31; should extract: 0
Canonical form without lets shift_right((P.extent.1 - (t58*3600)), (uint32)31)
0: P.extent.1, 0
1: t58, 0
2: 3600, 0
3: (t58*3600), 0
4: (P.extent.1 - (t58*3600)), 1
5: (uint32)31, 0
6: shift_right((P.extent.1 - (t58*3600)), (uint32)31), 1
With variables shift_right((P.extent.1 - (t58*3600)), (uint32)31)
With lets: shift_right((P.extent.1 - (t58*3600)), (uint32)31)
Codegen: int32, shift_right((P.extent.1 - (t58*3600)), (uint32)31)
Codegen: int32, (P.extent.1 - (t58*3600))
Codegen: int32, P.extent.1
Codegen: int32, (t58*3600)
Codegen: int32, t58
Codegen: int32, 3600
Codegen: uint32, (uint32)31
Codegen: int32, (let t60 = shift_right(3600, 31) in ((t58 - bitwise_and(t59, t60)) + bitwise_and(t59, bitwise_not(t60))))
Codegen: int32, shift_right(3600, 31)
Codegen: int32, 3600
Codegen: int32, 31



Input to CSE shift_right(3600, (uint32)31)
After removing lets: shift_right(3600, (uint32)31)
Include: shift_right(3600, (uint32)31); should extract: 1
Include: 3600; should extract: 0
Include: (uint32)31; should extract: 0
Canonical form without lets shift_right(3600, (uint32)31)
0: 3600, 0
1: (uint32)31, 0
2: shift_right(3600, (uint32)31), 1
With variables shift_right(3600, (uint32)31)
With lets: shift_right(3600, (uint32)31)
Codegen: int32, shift_right(3600, (uint32)31)
Codegen: int32, 3600
Codegen: uint32, (uint32)31
Codegen: int32, ((t58 - bitwise_and(t59, t60)) + bitwise_and(t59, bitwise_not(t60)))
Codegen: int32, (t58 - bitwise_and(t59, t60))
Codegen: int32, t58
Codegen: int32, bitwise_and(t59, t60)
Codegen: int32, t59
Codegen: int32, t60
Codegen: int32, bitwise_and(t59, bitwise_not(t60))
Codegen: int32, t59
Codegen: int32, bitwise_not(t60)
Codegen: int32, t60
Codegen: int32, 401408
Codegen: int32, 0
Codegen: uint64, (uint64)0
Found _halide_buffer_init
Pointer casting argument to extern call: ((halide_device_interface_t *))reinterpret((uint64)0)
Pointer casting argument to extern call: ((halide_dimension_t *))make_struct(0, 8, 1, 0, 0, 7, 8, 0, 0, 7, 56, 0, 0, 1, 392, 0, 0, 4, 392, 0, 0, 4, 1568, 0, 0, 1, 6272, 0, 0, 16, 6272, 0, 0, 4, 100352, 0, 0, (P.extent.1/3600), 401408, 0)
Codegen: if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert(((uint32)P.type == (uint32)73730), halide_error_bad_type("Input buffer P", (uint32)P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert(((uint32)W.type == (uint32)73730), halide_error_bad_type("Input buffer W", (uint32)W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(((void *))W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(((void *))P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
}

Codegen: uint1, (uint1)_halide_buffer_is_bounds_query(((buffer_t *))P.buffer)
Codegen: (buffer_t *), ((buffer_t *))P.buffer
Found _halide_buffer_is_bounds_query
Codegen: ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)

Codegen: (halide_buffer_t *), ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))P.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0), (uint64)0)
Codegen: (halide_buffer_t *), ((halide_buffer_t *))P.buffer
Codegen: (halide_dimension_t *), ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))P.buffer)
Codegen: (halide_buffer_t *), ((halide_buffer_t *))P.buffer
Found _halide_buffer_get_shape
Codegen: (void *), ((void *))reinterpret((uint64)0)
Codegen: uint64, (uint64)0
Codegen: uint64, (uint64)0
Codegen: (halide_device_interface_t *), ((halide_device_interface_t *))reinterpret((uint64)0)
Codegen: uint64, (uint64)0
Codegen: int32, 2
Codegen: int32, 32
Codegen: int32, 2
Codegen: (halide_dimension_t *), ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0)
Codegen: int32, P.min.0
Codegen: int32, P.extent.0
Codegen: int32, 1
Codegen: int32, 0
Codegen: int32, P.min.1
Codegen: int32, P.extent.1
Codegen: int32, P.extent.0
Codegen: int32, 0
Codegen: uint64, (uint64)0
Found _halide_buffer_init
Pointer casting argument to extern call: ((halide_device_interface_t *))reinterpret((uint64)0)
Pointer casting argument to extern call: ((halide_dimension_t *))make_struct(P.min.0, P.extent.0, 1, 0, P.min.1, P.extent.1, P.extent.0, 0)
Codegen: if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}
assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert(((uint32)P.type == (uint32)73730), halide_error_bad_type("Input buffer P", (uint32)P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert(((uint32)W.type == (uint32)73730), halide_error_bad_type("Input buffer W", (uint32)W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(((void *))W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(((void *))P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
}

Codegen: uint1, (uint1)_halide_buffer_is_bounds_query(((buffer_t *))W.buffer)
Codegen: (buffer_t *), ((buffer_t *))W.buffer
Found _halide_buffer_is_bounds_query
Codegen: ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)

Codegen: (halide_buffer_t *), ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))W.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 2, 32, 2, ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0), (uint64)0)
Codegen: (halide_buffer_t *), ((halide_buffer_t *))W.buffer
Codegen: (halide_dimension_t *), ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))W.buffer)
Codegen: (halide_buffer_t *), ((halide_buffer_t *))W.buffer
Found _halide_buffer_get_shape
Codegen: (void *), ((void *))reinterpret((uint64)0)
Codegen: uint64, (uint64)0
Codegen: uint64, (uint64)0
Codegen: (halide_device_interface_t *), ((halide_device_interface_t *))reinterpret((uint64)0)
Codegen: uint64, (uint64)0
Codegen: int32, 2
Codegen: int32, 32
Codegen: int32, 2
Codegen: (halide_dimension_t *), ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0)
Codegen: int32, W.min.0
Codegen: int32, W.extent.0
Codegen: int32, 1
Codegen: int32, 0
Codegen: int32, W.min.1
Codegen: int32, W.extent.1
Codegen: int32, W.extent.0
Codegen: int32, 0
Codegen: uint64, (uint64)0
Found _halide_buffer_init
Pointer casting argument to extern call: ((halide_device_interface_t *))reinterpret((uint64)0)
Pointer casting argument to extern call: ((halide_dimension_t *))make_struct(W.min.0, W.extent.0, 1, 0, W.min.1, W.extent.1, W.extent.0, 0)
Codegen: assert(((uint32)Out.type == (uint32)73730), halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730))
assert((Out.dimensions == 10), halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10))
assert(((uint32)P.type == (uint32)73730), halide_error_bad_type("Input buffer P", (uint32)P.type, (uint32)73730))
assert((P.dimensions == 2), halide_error_bad_dimensions("Input buffer P", P.dimensions, 2))
assert(((uint32)W.type == (uint32)73730), halide_error_bad_type("Input buffer W", (uint32)W.type, (uint32)73730))
assert((W.dimensions == 2), halide_error_bad_dimensions("Input buffer W", W.dimensions, 2))
assert(((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1)))
assert((0 <= Out.extent.0), halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0))
assert(((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1)))
assert((0 <= Out.extent.1), halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1))
assert(((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1)))
assert((0 <= Out.extent.2), halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2))
assert(((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1)))
assert((0 <= Out.extent.3), halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3))
assert(((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1)))
assert((0 <= Out.extent.4), halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4))
assert(((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1)))
assert((0 <= Out.extent.5), halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5))
assert(((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1)))
assert((0 <= Out.extent.6), halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6))
assert(((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1)))
assert((0 <= Out.extent.7), halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7))
assert(((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1)))
assert((0 <= Out.extent.8), halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8))
assert(((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1)))
assert((0 <= Out.extent.9), halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9))
assert((0 <= P.extent.0), halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0))
assert((0 <= P.extent.1), halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1))
assert((0 <= W.extent.0), halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0))
assert((0 <= W.extent.1), halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1))
assert((Out.stride.0 == 1), halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1))
assert((P.stride.0 == 1), halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1))
assert((W.stride.0 == 1), halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1))
let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(((void *))W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(((void *))P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int32, int32((uint64)count_trailing_zeros((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint32)Out.type == (uint32)73730)), (int64)0)), (uint64)shift_left(uint64(!(Out.dimensions == 10)), (int64)1)), (uint64)shift_left(uint64(!((uint32)P.type == (uint32)73730)), (int64)2)), (uint64)shift_left(uint64(!(P.dimensions == 2)), (int64)3)), (uint64)shift_left(uint64(!((uint32)W.type == (uint32)73730)), (int64)4)), (uint64)shift_left(uint64(!(W.dimensions == 2)), (int64)5)), (uint64)shift_left(uint64(!((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0)))), (int64)6)), (uint64)shift_left(uint64(!(0 <= Out.extent.0)), (int64)7)), (uint64)shift_left(uint64(!((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1)))), (int64)8)), (uint64)shift_left(uint64(!(0 <= Out.extent.1)), (int64)9)), (uint64)shift_left(uint64(!((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2)))), (int64)10)), (uint64)shift_left(uint64(!(0 <= Out.extent.2)), (int64)11)), (uint64)shift_left(uint64(!((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3)))), (int64)12)), (uint64)shift_left(uint64(!(0 <= Out.extent.3)), (int64)13)), (uint64)shift_left(uint64(!((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4)))), (int64)14)), (uint64)shift_left(uint64(!(0 <= Out.extent.4)), (int64)15)), (uint64)shift_left(uint64(!((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5)))), (int64)16)), (uint64)shift_left(uint64(!(0 <= Out.extent.5)), (int64)17)), (uint64)shift_left(uint64(!((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6)))), (int64)18)), (uint64)shift_left(uint64(!(0 <= Out.extent.6)), (int64)19)), (uint64)shift_left(uint64(!((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7)))), (int64)20)), (uint64)shift_left(uint64(!(0 <= Out.extent.7)), (int64)21)), (uint64)shift_left(uint64(!((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8)))), (int64)22)), (uint64)shift_left(uint64(!(0 <= Out.extent.8)), (int64)23)), (uint64)shift_left(uint64(!((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9)))), (int64)24)), (uint64)shift_left(uint64(!(0 <= Out.extent.9)), (int64)25)), (uint64)shift_left(uint64(!(0 <= P.extent.0)), (int64)26)), (uint64)shift_left(uint64(!(0 <= P.extent.1)), (int64)27)), (uint64)shift_left(uint64(!(0 <= W.extent.0)), (int64)28)), (uint64)shift_left(uint64(!(0 <= W.extent.1)), (int64)29)), (uint64)shift_left(uint64(!(Out.stride.0 == 1)), (int64)30)), (uint64)shift_left(uint64(!(P.stride.0 == 1)), (int64)31)), (uint64)shift_left(uint64(!(W.stride.0 == 1)), (int64)32))))
Codegen: uint64, (uint64)count_trailing_zeros((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint32)Out.type == (uint32)73730)), (int64)0)), (uint64)shift_left(uint64(!(Out.dimensions == 10)), (int64)1)), (uint64)shift_left(uint64(!((uint32)P.type == (uint32)73730)), (int64)2)), (uint64)shift_left(uint64(!(P.dimensions == 2)), (int64)3)), (uint64)shift_left(uint64(!((uint32)W.type == (uint32)73730)), (int64)4)), (uint64)shift_left(uint64(!(W.dimensions == 2)), (int64)5)), (uint64)shift_left(uint64(!((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0)))), (int64)6)), (uint64)shift_left(uint64(!(0 <= Out.extent.0)), (int64)7)), (uint64)shift_left(uint64(!((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1)))), (int64)8)), (uint64)shift_left(uint64(!(0 <= Out.extent.1)), (int64)9)), (uint64)shift_left(uint64(!((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2)))), (int64)10)), (uint64)shift_left(uint64(!(0 <= Out.extent.2)), (int64)11)), (uint64)shift_left(uint64(!((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3)))), (int64)12)), (uint64)shift_left(uint64(!(0 <= Out.extent.3)), (int64)13)), (uint64)shift_left(uint64(!((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4)))), (int64)14)), (uint64)shift_left(uint64(!(0 <= Out.extent.4)), (int64)15)), (uint64)shift_left(uint64(!((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5)))), (int64)16)), (uint64)shift_left(uint64(!(0 <= Out.extent.5)), (int64)17)), (uint64)shift_left(uint64(!((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6)))), (int64)18)), (uint64)shift_left(uint64(!(0 <= Out.extent.6)), (int64)19)), (uint64)shift_left(uint64(!((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7)))), (int64)20)), (uint64)shift_left(uint64(!(0 <= Out.extent.7)), (int64)21)), (uint64)shift_left(uint64(!((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8)))), (int64)22)), (uint64)shift_left(uint64(!(0 <= Out.extent.8)), (int64)23)), (uint64)shift_left(uint64(!((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9)))), (int64)24)), (uint64)shift_left(uint64(!(0 <= Out.extent.9)), (int64)25)), (uint64)shift_left(uint64(!(0 <= P.extent.0)), (int64)26)), (uint64)shift_left(uint64(!(0 <= P.extent.1)), (int64)27)), (uint64)shift_left(uint64(!(0 <= W.extent.0)), (int64)28)), (uint64)shift_left(uint64(!(0 <= W.extent.1)), (int64)29)), (uint64)shift_left(uint64(!(Out.stride.0 == 1)), (int64)30)), (uint64)shift_left(uint64(!(P.stride.0 == 1)), (int64)31)), (uint64)shift_left(uint64(!(W.stride.0 == 1)), (int64)32)))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint32)Out.type == (uint32)73730)), (int64)0)), (uint64)shift_left(uint64(!(Out.dimensions == 10)), (int64)1)), (uint64)shift_left(uint64(!((uint32)P.type == (uint32)73730)), (int64)2)), (uint64)shift_left(uint64(!(P.dimensions == 2)), (int64)3)), (uint64)shift_left(uint64(!((uint32)W.type == (uint32)73730)), (int64)4)), (uint64)shift_left(uint64(!(W.dimensions == 2)), (int64)5)), (uint64)shift_left(uint64(!((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0)))), (int64)6)), (uint64)shift_left(uint64(!(0 <= Out.extent.0)), (int64)7)), (uint64)shift_left(uint64(!((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1)))), (int64)8)), (uint64)shift_left(uint64(!(0 <= Out.extent.1)), (int64)9)), (uint64)shift_left(uint64(!((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2)))), (int64)10)), (uint64)shift_left(uint64(!(0 <= Out.extent.2)), (int64)11)), (uint64)shift_left(uint64(!((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3)))), (int64)12)), (uint64)shift_left(uint64(!(0 <= Out.extent.3)), (int64)13)), (uint64)shift_left(uint64(!((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4)))), (int64)14)), (uint64)shift_left(uint64(!(0 <= Out.extent.4)), (int64)15)), (uint64)shift_left(uint64(!((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5)))), (int64)16)), (uint64)shift_left(uint64(!(0 <= Out.extent.5)), (int64)17)), (uint64)shift_left(uint64(!((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6)))), (int64)18)), (uint64)shift_left(uint64(!(0 <= Out.extent.6)), (int64)19)), (uint64)shift_left(uint64(!((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7)))), (int64)20)), (uint64)shift_left(uint64(!(0 <= Out.extent.7)), (int64)21)), (uint64)shift_left(uint64(!((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8)))), (int64)22)), (uint64)shift_left(uint64(!(0 <= Out.extent.8)), (int64)23)), (uint64)shift_left(uint64(!((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9)))), (int64)24)), (uint64)shift_left(uint64(!(0 <= Out.extent.9)), (int64)25)), (uint64)shift_left(uint64(!(0 <= P.extent.0)), (int64)26)), (uint64)shift_left(uint64(!(0 <= P.extent.1)), (int64)27)), (uint64)shift_left(uint64(!(0 <= W.extent.0)), (int64)28)), (uint64)shift_left(uint64(!(0 <= W.extent.1)), (int64)29)), (uint64)shift_left(uint64(!(Out.stride.0 == 1)), (int64)30)), (uint64)shift_left(uint64(!(P.stride.0 == 1)), (int64)31)), (uint64)shift_left(uint64(!(W.stride.0 == 1)), (int64)32))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint32)Out.type == (uint32)73730)), (int64)0)), (uint64)shift_left(uint64(!(Out.dimensions == 10)), (int64)1)), (uint64)shift_left(uint64(!((uint32)P.type == (uint32)73730)), (int64)2)), (uint64)shift_left(uint64(!(P.dimensions == 2)), (int64)3)), (uint64)shift_left(uint64(!((uint32)W.type == (uint32)73730)), (int64)4)), (uint64)shift_left(uint64(!(W.dimensions == 2)), (int64)5)), (uint64)shift_left(uint64(!((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0)))), (int64)6)), (uint64)shift_left(uint64(!(0 <= Out.extent.0)), (int64)7)), (uint64)shift_left(uint64(!((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1)))), (int64)8)), (uint64)shift_left(uint64(!(0 <= Out.extent.1)), (int64)9)), (uint64)shift_left(uint64(!((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2)))), (int64)10)), (uint64)shift_left(uint64(!(0 <= Out.extent.2)), (int64)11)), (uint64)shift_left(uint64(!((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3)))), (int64)12)), (uint64)shift_left(uint64(!(0 <= Out.extent.3)), (int64)13)), (uint64)shift_left(uint64(!((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4)))), (int64)14)), (uint64)shift_left(uint64(!(0 <= Out.extent.4)), (int64)15)), (uint64)shift_left(uint64(!((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5)))), (int64)16)), (uint64)shift_left(uint64(!(0 <= Out.extent.5)), (int64)17)), (uint64)shift_left(uint64(!((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6)))), (int64)18)), (uint64)shift_left(uint64(!(0 <= Out.extent.6)), (int64)19)), (uint64)shift_left(uint64(!((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7)))), (int64)20)), (uint64)shift_left(uint64(!(0 <= Out.extent.7)), (int64)21)), (uint64)shift_left(uint64(!((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8)))), (int64)22)), (uint64)shift_left(uint64(!(0 <= Out.extent.8)), (int64)23)), (uint64)shift_left(uint64(!((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9)))), (int64)24)), (uint64)shift_left(uint64(!(0 <= Out.extent.9)), (int64)25)), (uint64)shift_left(uint64(!(0 <= P.extent.0)), (int64)26)), (uint64)shift_left(uint64(!(0 <= P.extent.1)), (int64)27)), (uint64)shift_left(uint64(!(0 <= W.extent.0)), (int64)28)), (uint64)shift_left(uint64(!(0 <= W.extent.1)), (int64)29)), (uint64)shift_left(uint64(!(Out.stride.0 == 1)), (int64)30)), (uint64)shift_left(uint64(!(P.stride.0 == 1)), (int64)31))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint32)Out.type == (uint32)73730)), (int64)0)), (uint64)shift_left(uint64(!(Out.dimensions == 10)), (int64)1)), (uint64)shift_left(uint64(!((uint32)P.type == (uint32)73730)), (int64)2)), (uint64)shift_left(uint64(!(P.dimensions == 2)), (int64)3)), (uint64)shift_left(uint64(!((uint32)W.type == (uint32)73730)), (int64)4)), (uint64)shift_left(uint64(!(W.dimensions == 2)), (int64)5)), (uint64)shift_left(uint64(!((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0)))), (int64)6)), (uint64)shift_left(uint64(!(0 <= Out.extent.0)), (int64)7)), (uint64)shift_left(uint64(!((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1)))), (int64)8)), (uint64)shift_left(uint64(!(0 <= Out.extent.1)), (int64)9)), (uint64)shift_left(uint64(!((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2)))), (int64)10)), (uint64)shift_left(uint64(!(0 <= Out.extent.2)), (int64)11)), (uint64)shift_left(uint64(!((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3)))), (int64)12)), (uint64)shift_left(uint64(!(0 <= Out.extent.3)), (int64)13)), (uint64)shift_left(uint64(!((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4)))), (int64)14)), (uint64)shift_left(uint64(!(0 <= Out.extent.4)), (int64)15)), (uint64)shift_left(uint64(!((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5)))), (int64)16)), (uint64)shift_left(uint64(!(0 <= Out.extent.5)), (int64)17)), (uint64)shift_left(uint64(!((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6)))), (int64)18)), (uint64)shift_left(uint64(!(0 <= Out.extent.6)), (int64)19)), (uint64)shift_left(uint64(!((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7)))), (int64)20)), (uint64)shift_left(uint64(!(0 <= Out.extent.7)), (int64)21)), (uint64)shift_left(uint64(!((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8)))), (int64)22)), (uint64)shift_left(uint64(!(0 <= Out.extent.8)), (int64)23)), (uint64)shift_left(uint64(!((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9)))), (int64)24)), (uint64)shift_left(uint64(!(0 <= Out.extent.9)), (int64)25)), (uint64)shift_left(uint64(!(0 <= P.extent.0)), (int64)26)), (uint64)shift_left(uint64(!(0 <= P.extent.1)), (int64)27)), (uint64)shift_left(uint64(!(0 <= W.extent.0)), (int64)28)), (uint64)shift_left(uint64(!(0 <= W.extent.1)), (int64)29)), (uint64)shift_left(uint64(!(Out.stride.0 == 1)), (int64)30))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint32)Out.type == (uint32)73730)), (int64)0)), (uint64)shift_left(uint64(!(Out.dimensions == 10)), (int64)1)), (uint64)shift_left(uint64(!((uint32)P.type == (uint32)73730)), (int64)2)), (uint64)shift_left(uint64(!(P.dimensions == 2)), (int64)3)), (uint64)shift_left(uint64(!((uint32)W.type == (uint32)73730)), (int64)4)), (uint64)shift_left(uint64(!(W.dimensions == 2)), (int64)5)), (uint64)shift_left(uint64(!((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0)))), (int64)6)), (uint64)shift_left(uint64(!(0 <= Out.extent.0)), (int64)7)), (uint64)shift_left(uint64(!((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1)))), (int64)8)), (uint64)shift_left(uint64(!(0 <= Out.extent.1)), (int64)9)), (uint64)shift_left(uint64(!((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2)))), (int64)10)), (uint64)shift_left(uint64(!(0 <= Out.extent.2)), (int64)11)), (uint64)shift_left(uint64(!((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3)))), (int64)12)), (uint64)shift_left(uint64(!(0 <= Out.extent.3)), (int64)13)), (uint64)shift_left(uint64(!((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4)))), (int64)14)), (uint64)shift_left(uint64(!(0 <= Out.extent.4)), (int64)15)), (uint64)shift_left(uint64(!((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5)))), (int64)16)), (uint64)shift_left(uint64(!(0 <= Out.extent.5)), (int64)17)), (uint64)shift_left(uint64(!((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6)))), (int64)18)), (uint64)shift_left(uint64(!(0 <= Out.extent.6)), (int64)19)), (uint64)shift_left(uint64(!((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7)))), (int64)20)), (uint64)shift_left(uint64(!(0 <= Out.extent.7)), (int64)21)), (uint64)shift_left(uint64(!((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8)))), (int64)22)), (uint64)shift_left(uint64(!(0 <= Out.extent.8)), (int64)23)), (uint64)shift_left(uint64(!((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9)))), (int64)24)), (uint64)shift_left(uint64(!(0 <= Out.extent.9)), (int64)25)), (uint64)shift_left(uint64(!(0 <= P.extent.0)), (int64)26)), (uint64)shift_left(uint64(!(0 <= P.extent.1)), (int64)27)), (uint64)shift_left(uint64(!(0 <= W.extent.0)), (int64)28)), (uint64)shift_left(uint64(!(0 <= W.extent.1)), (int64)29))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint32)Out.type == (uint32)73730)), (int64)0)), (uint64)shift_left(uint64(!(Out.dimensions == 10)), (int64)1)), (uint64)shift_left(uint64(!((uint32)P.type == (uint32)73730)), (int64)2)), (uint64)shift_left(uint64(!(P.dimensions == 2)), (int64)3)), (uint64)shift_left(uint64(!((uint32)W.type == (uint32)73730)), (int64)4)), (uint64)shift_left(uint64(!(W.dimensions == 2)), (int64)5)), (uint64)shift_left(uint64(!((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0)))), (int64)6)), (uint64)shift_left(uint64(!(0 <= Out.extent.0)), (int64)7)), (uint64)shift_left(uint64(!((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1)))), (int64)8)), (uint64)shift_left(uint64(!(0 <= Out.extent.1)), (int64)9)), (uint64)shift_left(uint64(!((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2)))), (int64)10)), (uint64)shift_left(uint64(!(0 <= Out.extent.2)), (int64)11)), (uint64)shift_left(uint64(!((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3)))), (int64)12)), (uint64)shift_left(uint64(!(0 <= Out.extent.3)), (int64)13)), (uint64)shift_left(uint64(!((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4)))), (int64)14)), (uint64)shift_left(uint64(!(0 <= Out.extent.4)), (int64)15)), (uint64)shift_left(uint64(!((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5)))), (int64)16)), (uint64)shift_left(uint64(!(0 <= Out.extent.5)), (int64)17)), (uint64)shift_left(uint64(!((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6)))), (int64)18)), (uint64)shift_left(uint64(!(0 <= Out.extent.6)), (int64)19)), (uint64)shift_left(uint64(!((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7)))), (int64)20)), (uint64)shift_left(uint64(!(0 <= Out.extent.7)), (int64)21)), (uint64)shift_left(uint64(!((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8)))), (int64)22)), (uint64)shift_left(uint64(!(0 <= Out.extent.8)), (int64)23)), (uint64)shift_left(uint64(!((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9)))), (int64)24)), (uint64)shift_left(uint64(!(0 <= Out.extent.9)), (int64)25)), (uint64)shift_left(uint64(!(0 <= P.extent.0)), (int64)26)), (uint64)shift_left(uint64(!(0 <= P.extent.1)), (int64)27)), (uint64)shift_left(uint64(!(0 <= W.extent.0)), (int64)28))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint32)Out.type == (uint32)73730)), (int64)0)), (uint64)shift_left(uint64(!(Out.dimensions == 10)), (int64)1)), (uint64)shift_left(uint64(!((uint32)P.type == (uint32)73730)), (int64)2)), (uint64)shift_left(uint64(!(P.dimensions == 2)), (int64)3)), (uint64)shift_left(uint64(!((uint32)W.type == (uint32)73730)), (int64)4)), (uint64)shift_left(uint64(!(W.dimensions == 2)), (int64)5)), (uint64)shift_left(uint64(!((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0)))), (int64)6)), (uint64)shift_left(uint64(!(0 <= Out.extent.0)), (int64)7)), (uint64)shift_left(uint64(!((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1)))), (int64)8)), (uint64)shift_left(uint64(!(0 <= Out.extent.1)), (int64)9)), (uint64)shift_left(uint64(!((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2)))), (int64)10)), (uint64)shift_left(uint64(!(0 <= Out.extent.2)), (int64)11)), (uint64)shift_left(uint64(!((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3)))), (int64)12)), (uint64)shift_left(uint64(!(0 <= Out.extent.3)), (int64)13)), (uint64)shift_left(uint64(!((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4)))), (int64)14)), (uint64)shift_left(uint64(!(0 <= Out.extent.4)), (int64)15)), (uint64)shift_left(uint64(!((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5)))), (int64)16)), (uint64)shift_left(uint64(!(0 <= Out.extent.5)), (int64)17)), (uint64)shift_left(uint64(!((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6)))), (int64)18)), (uint64)shift_left(uint64(!(0 <= Out.extent.6)), (int64)19)), (uint64)shift_left(uint64(!((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7)))), (int64)20)), (uint64)shift_left(uint64(!(0 <= Out.extent.7)), (int64)21)), (uint64)shift_left(uint64(!((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8)))), (int64)22)), (uint64)shift_left(uint64(!(0 <= Out.extent.8)), (int64)23)), (uint64)shift_left(uint64(!((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9)))), (int64)24)), (uint64)shift_left(uint64(!(0 <= Out.extent.9)), (int64)25)), (uint64)shift_left(uint64(!(0 <= P.extent.0)), (int64)26)), (uint64)shift_left(uint64(!(0 <= P.extent.1)), (int64)27))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint32)Out.type == (uint32)73730)), (int64)0)), (uint64)shift_left(uint64(!(Out.dimensions == 10)), (int64)1)), (uint64)shift_left(uint64(!((uint32)P.type == (uint32)73730)), (int64)2)), (uint64)shift_left(uint64(!(P.dimensions == 2)), (int64)3)), (uint64)shift_left(uint64(!((uint32)W.type == (uint32)73730)), (int64)4)), (uint64)shift_left(uint64(!(W.dimensions == 2)), (int64)5)), (uint64)shift_left(uint64(!((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0)))), (int64)6)), (uint64)shift_left(uint64(!(0 <= Out.extent.0)), (int64)7)), (uint64)shift_left(uint64(!((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1)))), (int64)8)), (uint64)shift_left(uint64(!(0 <= Out.extent.1)), (int64)9)), (uint64)shift_left(uint64(!((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2)))), (int64)10)), (uint64)shift_left(uint64(!(0 <= Out.extent.2)), (int64)11)), (uint64)shift_left(uint64(!((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3)))), (int64)12)), (uint64)shift_left(uint64(!(0 <= Out.extent.3)), (int64)13)), (uint64)shift_left(uint64(!((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4)))), (int64)14)), (uint64)shift_left(uint64(!(0 <= Out.extent.4)), (int64)15)), (uint64)shift_left(uint64(!((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5)))), (int64)16)), (uint64)shift_left(uint64(!(0 <= Out.extent.5)), (int64)17)), (uint64)shift_left(uint64(!((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6)))), (int64)18)), (uint64)shift_left(uint64(!(0 <= Out.extent.6)), (int64)19)), (uint64)shift_left(uint64(!((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7)))), (int64)20)), (uint64)shift_left(uint64(!(0 <= Out.extent.7)), (int64)21)), (uint64)shift_left(uint64(!((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8)))), (int64)22)), (uint64)shift_left(uint64(!(0 <= Out.extent.8)), (int64)23)), (uint64)shift_left(uint64(!((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9)))), (int64)24)), (uint64)shift_left(uint64(!(0 <= Out.extent.9)), (int64)25)), (uint64)shift_left(uint64(!(0 <= P.extent.0)), (int64)26))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint32)Out.type == (uint32)73730)), (int64)0)), (uint64)shift_left(uint64(!(Out.dimensions == 10)), (int64)1)), (uint64)shift_left(uint64(!((uint32)P.type == (uint32)73730)), (int64)2)), (uint64)shift_left(uint64(!(P.dimensions == 2)), (int64)3)), (uint64)shift_left(uint64(!((uint32)W.type == (uint32)73730)), (int64)4)), (uint64)shift_left(uint64(!(W.dimensions == 2)), (int64)5)), (uint64)shift_left(uint64(!((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0)))), (int64)6)), (uint64)shift_left(uint64(!(0 <= Out.extent.0)), (int64)7)), (uint64)shift_left(uint64(!((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1)))), (int64)8)), (uint64)shift_left(uint64(!(0 <= Out.extent.1)), (int64)9)), (uint64)shift_left(uint64(!((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2)))), (int64)10)), (uint64)shift_left(uint64(!(0 <= Out.extent.2)), (int64)11)), (uint64)shift_left(uint64(!((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3)))), (int64)12)), (uint64)shift_left(uint64(!(0 <= Out.extent.3)), (int64)13)), (uint64)shift_left(uint64(!((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4)))), (int64)14)), (uint64)shift_left(uint64(!(0 <= Out.extent.4)), (int64)15)), (uint64)shift_left(uint64(!((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5)))), (int64)16)), (uint64)shift_left(uint64(!(0 <= Out.extent.5)), (int64)17)), (uint64)shift_left(uint64(!((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6)))), (int64)18)), (uint64)shift_left(uint64(!(0 <= Out.extent.6)), (int64)19)), (uint64)shift_left(uint64(!((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7)))), (int64)20)), (uint64)shift_left(uint64(!(0 <= Out.extent.7)), (int64)21)), (uint64)shift_left(uint64(!((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8)))), (int64)22)), (uint64)shift_left(uint64(!(0 <= Out.extent.8)), (int64)23)), (uint64)shift_left(uint64(!((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9)))), (int64)24)), (uint64)shift_left(uint64(!(0 <= Out.extent.9)), (int64)25))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint32)Out.type == (uint32)73730)), (int64)0)), (uint64)shift_left(uint64(!(Out.dimensions == 10)), (int64)1)), (uint64)shift_left(uint64(!((uint32)P.type == (uint32)73730)), (int64)2)), (uint64)shift_left(uint64(!(P.dimensions == 2)), (int64)3)), (uint64)shift_left(uint64(!((uint32)W.type == (uint32)73730)), (int64)4)), (uint64)shift_left(uint64(!(W.dimensions == 2)), (int64)5)), (uint64)shift_left(uint64(!((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0)))), (int64)6)), (uint64)shift_left(uint64(!(0 <= Out.extent.0)), (int64)7)), (uint64)shift_left(uint64(!((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1)))), (int64)8)), (uint64)shift_left(uint64(!(0 <= Out.extent.1)), (int64)9)), (uint64)shift_left(uint64(!((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2)))), (int64)10)), (uint64)shift_left(uint64(!(0 <= Out.extent.2)), (int64)11)), (uint64)shift_left(uint64(!((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3)))), (int64)12)), (uint64)shift_left(uint64(!(0 <= Out.extent.3)), (int64)13)), (uint64)shift_left(uint64(!((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4)))), (int64)14)), (uint64)shift_left(uint64(!(0 <= Out.extent.4)), (int64)15)), (uint64)shift_left(uint64(!((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5)))), (int64)16)), (uint64)shift_left(uint64(!(0 <= Out.extent.5)), (int64)17)), (uint64)shift_left(uint64(!((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6)))), (int64)18)), (uint64)shift_left(uint64(!(0 <= Out.extent.6)), (int64)19)), (uint64)shift_left(uint64(!((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7)))), (int64)20)), (uint64)shift_left(uint64(!(0 <= Out.extent.7)), (int64)21)), (uint64)shift_left(uint64(!((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8)))), (int64)22)), (uint64)shift_left(uint64(!(0 <= Out.extent.8)), (int64)23)), (uint64)shift_left(uint64(!((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9)))), (int64)24))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint32)Out.type == (uint32)73730)), (int64)0)), (uint64)shift_left(uint64(!(Out.dimensions == 10)), (int64)1)), (uint64)shift_left(uint64(!((uint32)P.type == (uint32)73730)), (int64)2)), (uint64)shift_left(uint64(!(P.dimensions == 2)), (int64)3)), (uint64)shift_left(uint64(!((uint32)W.type == (uint32)73730)), (int64)4)), (uint64)shift_left(uint64(!(W.dimensions == 2)), (int64)5)), (uint64)shift_left(uint64(!((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0)))), (int64)6)), (uint64)shift_left(uint64(!(0 <= Out.extent.0)), (int64)7)), (uint64)shift_left(uint64(!((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1)))), (int64)8)), (uint64)shift_left(uint64(!(0 <= Out.extent.1)), (int64)9)), (uint64)shift_left(uint64(!((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2)))), (int64)10)), (uint64)shift_left(uint64(!(0 <= Out.extent.2)), (int64)11)), (uint64)shift_left(uint64(!((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3)))), (int64)12)), (uint64)shift_left(uint64(!(0 <= Out.extent.3)), (int64)13)), (uint64)shift_left(uint64(!((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4)))), (int64)14)), (uint64)shift_left(uint64(!(0 <= Out.extent.4)), (int64)15)), (uint64)shift_left(uint64(!((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5)))), (int64)16)), (uint64)shift_left(uint64(!(0 <= Out.extent.5)), (int64)17)), (uint64)shift_left(uint64(!((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6)))), (int64)18)), (uint64)shift_left(uint64(!(0 <= Out.extent.6)), (int64)19)), (uint64)shift_left(uint64(!((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7)))), (int64)20)), (uint64)shift_left(uint64(!(0 <= Out.extent.7)), (int64)21)), (uint64)shift_left(uint64(!((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8)))), (int64)22)), (uint64)shift_left(uint64(!(0 <= Out.extent.8)), (int64)23))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint32)Out.type == (uint32)73730)), (int64)0)), (uint64)shift_left(uint64(!(Out.dimensions == 10)), (int64)1)), (uint64)shift_left(uint64(!((uint32)P.type == (uint32)73730)), (int64)2)), (uint64)shift_left(uint64(!(P.dimensions == 2)), (int64)3)), (uint64)shift_left(uint64(!((uint32)W.type == (uint32)73730)), (int64)4)), (uint64)shift_left(uint64(!(W.dimensions == 2)), (int64)5)), (uint64)shift_left(uint64(!((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0)))), (int64)6)), (uint64)shift_left(uint64(!(0 <= Out.extent.0)), (int64)7)), (uint64)shift_left(uint64(!((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1)))), (int64)8)), (uint64)shift_left(uint64(!(0 <= Out.extent.1)), (int64)9)), (uint64)shift_left(uint64(!((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2)))), (int64)10)), (uint64)shift_left(uint64(!(0 <= Out.extent.2)), (int64)11)), (uint64)shift_left(uint64(!((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3)))), (int64)12)), (uint64)shift_left(uint64(!(0 <= Out.extent.3)), (int64)13)), (uint64)shift_left(uint64(!((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4)))), (int64)14)), (uint64)shift_left(uint64(!(0 <= Out.extent.4)), (int64)15)), (uint64)shift_left(uint64(!((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5)))), (int64)16)), (uint64)shift_left(uint64(!(0 <= Out.extent.5)), (int64)17)), (uint64)shift_left(uint64(!((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6)))), (int64)18)), (uint64)shift_left(uint64(!(0 <= Out.extent.6)), (int64)19)), (uint64)shift_left(uint64(!((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7)))), (int64)20)), (uint64)shift_left(uint64(!(0 <= Out.extent.7)), (int64)21)), (uint64)shift_left(uint64(!((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8)))), (int64)22))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint32)Out.type == (uint32)73730)), (int64)0)), (uint64)shift_left(uint64(!(Out.dimensions == 10)), (int64)1)), (uint64)shift_left(uint64(!((uint32)P.type == (uint32)73730)), (int64)2)), (uint64)shift_left(uint64(!(P.dimensions == 2)), (int64)3)), (uint64)shift_left(uint64(!((uint32)W.type == (uint32)73730)), (int64)4)), (uint64)shift_left(uint64(!(W.dimensions == 2)), (int64)5)), (uint64)shift_left(uint64(!((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0)))), (int64)6)), (uint64)shift_left(uint64(!(0 <= Out.extent.0)), (int64)7)), (uint64)shift_left(uint64(!((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1)))), (int64)8)), (uint64)shift_left(uint64(!(0 <= Out.extent.1)), (int64)9)), (uint64)shift_left(uint64(!((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2)))), (int64)10)), (uint64)shift_left(uint64(!(0 <= Out.extent.2)), (int64)11)), (uint64)shift_left(uint64(!((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3)))), (int64)12)), (uint64)shift_left(uint64(!(0 <= Out.extent.3)), (int64)13)), (uint64)shift_left(uint64(!((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4)))), (int64)14)), (uint64)shift_left(uint64(!(0 <= Out.extent.4)), (int64)15)), (uint64)shift_left(uint64(!((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5)))), (int64)16)), (uint64)shift_left(uint64(!(0 <= Out.extent.5)), (int64)17)), (uint64)shift_left(uint64(!((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6)))), (int64)18)), (uint64)shift_left(uint64(!(0 <= Out.extent.6)), (int64)19)), (uint64)shift_left(uint64(!((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7)))), (int64)20)), (uint64)shift_left(uint64(!(0 <= Out.extent.7)), (int64)21))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint32)Out.type == (uint32)73730)), (int64)0)), (uint64)shift_left(uint64(!(Out.dimensions == 10)), (int64)1)), (uint64)shift_left(uint64(!((uint32)P.type == (uint32)73730)), (int64)2)), (uint64)shift_left(uint64(!(P.dimensions == 2)), (int64)3)), (uint64)shift_left(uint64(!((uint32)W.type == (uint32)73730)), (int64)4)), (uint64)shift_left(uint64(!(W.dimensions == 2)), (int64)5)), (uint64)shift_left(uint64(!((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0)))), (int64)6)), (uint64)shift_left(uint64(!(0 <= Out.extent.0)), (int64)7)), (uint64)shift_left(uint64(!((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1)))), (int64)8)), (uint64)shift_left(uint64(!(0 <= Out.extent.1)), (int64)9)), (uint64)shift_left(uint64(!((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2)))), (int64)10)), (uint64)shift_left(uint64(!(0 <= Out.extent.2)), (int64)11)), (uint64)shift_left(uint64(!((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3)))), (int64)12)), (uint64)shift_left(uint64(!(0 <= Out.extent.3)), (int64)13)), (uint64)shift_left(uint64(!((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4)))), (int64)14)), (uint64)shift_left(uint64(!(0 <= Out.extent.4)), (int64)15)), (uint64)shift_left(uint64(!((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5)))), (int64)16)), (uint64)shift_left(uint64(!(0 <= Out.extent.5)), (int64)17)), (uint64)shift_left(uint64(!((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6)))), (int64)18)), (uint64)shift_left(uint64(!(0 <= Out.extent.6)), (int64)19)), (uint64)shift_left(uint64(!((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7)))), (int64)20))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint32)Out.type == (uint32)73730)), (int64)0)), (uint64)shift_left(uint64(!(Out.dimensions == 10)), (int64)1)), (uint64)shift_left(uint64(!((uint32)P.type == (uint32)73730)), (int64)2)), (uint64)shift_left(uint64(!(P.dimensions == 2)), (int64)3)), (uint64)shift_left(uint64(!((uint32)W.type == (uint32)73730)), (int64)4)), (uint64)shift_left(uint64(!(W.dimensions == 2)), (int64)5)), (uint64)shift_left(uint64(!((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0)))), (int64)6)), (uint64)shift_left(uint64(!(0 <= Out.extent.0)), (int64)7)), (uint64)shift_left(uint64(!((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1)))), (int64)8)), (uint64)shift_left(uint64(!(0 <= Out.extent.1)), (int64)9)), (uint64)shift_left(uint64(!((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2)))), (int64)10)), (uint64)shift_left(uint64(!(0 <= Out.extent.2)), (int64)11)), (uint64)shift_left(uint64(!((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3)))), (int64)12)), (uint64)shift_left(uint64(!(0 <= Out.extent.3)), (int64)13)), (uint64)shift_left(uint64(!((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4)))), (int64)14)), (uint64)shift_left(uint64(!(0 <= Out.extent.4)), (int64)15)), (uint64)shift_left(uint64(!((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5)))), (int64)16)), (uint64)shift_left(uint64(!(0 <= Out.extent.5)), (int64)17)), (uint64)shift_left(uint64(!((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6)))), (int64)18)), (uint64)shift_left(uint64(!(0 <= Out.extent.6)), (int64)19))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint32)Out.type == (uint32)73730)), (int64)0)), (uint64)shift_left(uint64(!(Out.dimensions == 10)), (int64)1)), (uint64)shift_left(uint64(!((uint32)P.type == (uint32)73730)), (int64)2)), (uint64)shift_left(uint64(!(P.dimensions == 2)), (int64)3)), (uint64)shift_left(uint64(!((uint32)W.type == (uint32)73730)), (int64)4)), (uint64)shift_left(uint64(!(W.dimensions == 2)), (int64)5)), (uint64)shift_left(uint64(!((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0)))), (int64)6)), (uint64)shift_left(uint64(!(0 <= Out.extent.0)), (int64)7)), (uint64)shift_left(uint64(!((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1)))), (int64)8)), (uint64)shift_left(uint64(!(0 <= Out.extent.1)), (int64)9)), (uint64)shift_left(uint64(!((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2)))), (int64)10)), (uint64)shift_left(uint64(!(0 <= Out.extent.2)), (int64)11)), (uint64)shift_left(uint64(!((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3)))), (int64)12)), (uint64)shift_left(uint64(!(0 <= Out.extent.3)), (int64)13)), (uint64)shift_left(uint64(!((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4)))), (int64)14)), (uint64)shift_left(uint64(!(0 <= Out.extent.4)), (int64)15)), (uint64)shift_left(uint64(!((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5)))), (int64)16)), (uint64)shift_left(uint64(!(0 <= Out.extent.5)), (int64)17)), (uint64)shift_left(uint64(!((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6)))), (int64)18))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint32)Out.type == (uint32)73730)), (int64)0)), (uint64)shift_left(uint64(!(Out.dimensions == 10)), (int64)1)), (uint64)shift_left(uint64(!((uint32)P.type == (uint32)73730)), (int64)2)), (uint64)shift_left(uint64(!(P.dimensions == 2)), (int64)3)), (uint64)shift_left(uint64(!((uint32)W.type == (uint32)73730)), (int64)4)), (uint64)shift_left(uint64(!(W.dimensions == 2)), (int64)5)), (uint64)shift_left(uint64(!((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0)))), (int64)6)), (uint64)shift_left(uint64(!(0 <= Out.extent.0)), (int64)7)), (uint64)shift_left(uint64(!((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1)))), (int64)8)), (uint64)shift_left(uint64(!(0 <= Out.extent.1)), (int64)9)), (uint64)shift_left(uint64(!((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2)))), (int64)10)), (uint64)shift_left(uint64(!(0 <= Out.extent.2)), (int64)11)), (uint64)shift_left(uint64(!((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3)))), (int64)12)), (uint64)shift_left(uint64(!(0 <= Out.extent.3)), (int64)13)), (uint64)shift_left(uint64(!((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4)))), (int64)14)), (uint64)shift_left(uint64(!(0 <= Out.extent.4)), (int64)15)), (uint64)shift_left(uint64(!((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5)))), (int64)16)), (uint64)shift_left(uint64(!(0 <= Out.extent.5)), (int64)17))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint32)Out.type == (uint32)73730)), (int64)0)), (uint64)shift_left(uint64(!(Out.dimensions == 10)), (int64)1)), (uint64)shift_left(uint64(!((uint32)P.type == (uint32)73730)), (int64)2)), (uint64)shift_left(uint64(!(P.dimensions == 2)), (int64)3)), (uint64)shift_left(uint64(!((uint32)W.type == (uint32)73730)), (int64)4)), (uint64)shift_left(uint64(!(W.dimensions == 2)), (int64)5)), (uint64)shift_left(uint64(!((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0)))), (int64)6)), (uint64)shift_left(uint64(!(0 <= Out.extent.0)), (int64)7)), (uint64)shift_left(uint64(!((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1)))), (int64)8)), (uint64)shift_left(uint64(!(0 <= Out.extent.1)), (int64)9)), (uint64)shift_left(uint64(!((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2)))), (int64)10)), (uint64)shift_left(uint64(!(0 <= Out.extent.2)), (int64)11)), (uint64)shift_left(uint64(!((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3)))), (int64)12)), (uint64)shift_left(uint64(!(0 <= Out.extent.3)), (int64)13)), (uint64)shift_left(uint64(!((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4)))), (int64)14)), (uint64)shift_left(uint64(!(0 <= Out.extent.4)), (int64)15)), (uint64)shift_left(uint64(!((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5)))), (int64)16))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint32)Out.type == (uint32)73730)), (int64)0)), (uint64)shift_left(uint64(!(Out.dimensions == 10)), (int64)1)), (uint64)shift_left(uint64(!((uint32)P.type == (uint32)73730)), (int64)2)), (uint64)shift_left(uint64(!(P.dimensions == 2)), (int64)3)), (uint64)shift_left(uint64(!((uint32)W.type == (uint32)73730)), (int64)4)), (uint64)shift_left(uint64(!(W.dimensions == 2)), (int64)5)), (uint64)shift_left(uint64(!((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0)))), (int64)6)), (uint64)shift_left(uint64(!(0 <= Out.extent.0)), (int64)7)), (uint64)shift_left(uint64(!((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1)))), (int64)8)), (uint64)shift_left(uint64(!(0 <= Out.extent.1)), (int64)9)), (uint64)shift_left(uint64(!((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2)))), (int64)10)), (uint64)shift_left(uint64(!(0 <= Out.extent.2)), (int64)11)), (uint64)shift_left(uint64(!((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3)))), (int64)12)), (uint64)shift_left(uint64(!(0 <= Out.extent.3)), (int64)13)), (uint64)shift_left(uint64(!((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4)))), (int64)14)), (uint64)shift_left(uint64(!(0 <= Out.extent.4)), (int64)15))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint32)Out.type == (uint32)73730)), (int64)0)), (uint64)shift_left(uint64(!(Out.dimensions == 10)), (int64)1)), (uint64)shift_left(uint64(!((uint32)P.type == (uint32)73730)), (int64)2)), (uint64)shift_left(uint64(!(P.dimensions == 2)), (int64)3)), (uint64)shift_left(uint64(!((uint32)W.type == (uint32)73730)), (int64)4)), (uint64)shift_left(uint64(!(W.dimensions == 2)), (int64)5)), (uint64)shift_left(uint64(!((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0)))), (int64)6)), (uint64)shift_left(uint64(!(0 <= Out.extent.0)), (int64)7)), (uint64)shift_left(uint64(!((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1)))), (int64)8)), (uint64)shift_left(uint64(!(0 <= Out.extent.1)), (int64)9)), (uint64)shift_left(uint64(!((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2)))), (int64)10)), (uint64)shift_left(uint64(!(0 <= Out.extent.2)), (int64)11)), (uint64)shift_left(uint64(!((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3)))), (int64)12)), (uint64)shift_left(uint64(!(0 <= Out.extent.3)), (int64)13)), (uint64)shift_left(uint64(!((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4)))), (int64)14))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint32)Out.type == (uint32)73730)), (int64)0)), (uint64)shift_left(uint64(!(Out.dimensions == 10)), (int64)1)), (uint64)shift_left(uint64(!((uint32)P.type == (uint32)73730)), (int64)2)), (uint64)shift_left(uint64(!(P.dimensions == 2)), (int64)3)), (uint64)shift_left(uint64(!((uint32)W.type == (uint32)73730)), (int64)4)), (uint64)shift_left(uint64(!(W.dimensions == 2)), (int64)5)), (uint64)shift_left(uint64(!((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0)))), (int64)6)), (uint64)shift_left(uint64(!(0 <= Out.extent.0)), (int64)7)), (uint64)shift_left(uint64(!((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1)))), (int64)8)), (uint64)shift_left(uint64(!(0 <= Out.extent.1)), (int64)9)), (uint64)shift_left(uint64(!((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2)))), (int64)10)), (uint64)shift_left(uint64(!(0 <= Out.extent.2)), (int64)11)), (uint64)shift_left(uint64(!((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3)))), (int64)12)), (uint64)shift_left(uint64(!(0 <= Out.extent.3)), (int64)13))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint32)Out.type == (uint32)73730)), (int64)0)), (uint64)shift_left(uint64(!(Out.dimensions == 10)), (int64)1)), (uint64)shift_left(uint64(!((uint32)P.type == (uint32)73730)), (int64)2)), (uint64)shift_left(uint64(!(P.dimensions == 2)), (int64)3)), (uint64)shift_left(uint64(!((uint32)W.type == (uint32)73730)), (int64)4)), (uint64)shift_left(uint64(!(W.dimensions == 2)), (int64)5)), (uint64)shift_left(uint64(!((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0)))), (int64)6)), (uint64)shift_left(uint64(!(0 <= Out.extent.0)), (int64)7)), (uint64)shift_left(uint64(!((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1)))), (int64)8)), (uint64)shift_left(uint64(!(0 <= Out.extent.1)), (int64)9)), (uint64)shift_left(uint64(!((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2)))), (int64)10)), (uint64)shift_left(uint64(!(0 <= Out.extent.2)), (int64)11)), (uint64)shift_left(uint64(!((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3)))), (int64)12))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint32)Out.type == (uint32)73730)), (int64)0)), (uint64)shift_left(uint64(!(Out.dimensions == 10)), (int64)1)), (uint64)shift_left(uint64(!((uint32)P.type == (uint32)73730)), (int64)2)), (uint64)shift_left(uint64(!(P.dimensions == 2)), (int64)3)), (uint64)shift_left(uint64(!((uint32)W.type == (uint32)73730)), (int64)4)), (uint64)shift_left(uint64(!(W.dimensions == 2)), (int64)5)), (uint64)shift_left(uint64(!((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0)))), (int64)6)), (uint64)shift_left(uint64(!(0 <= Out.extent.0)), (int64)7)), (uint64)shift_left(uint64(!((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1)))), (int64)8)), (uint64)shift_left(uint64(!(0 <= Out.extent.1)), (int64)9)), (uint64)shift_left(uint64(!((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2)))), (int64)10)), (uint64)shift_left(uint64(!(0 <= Out.extent.2)), (int64)11))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint32)Out.type == (uint32)73730)), (int64)0)), (uint64)shift_left(uint64(!(Out.dimensions == 10)), (int64)1)), (uint64)shift_left(uint64(!((uint32)P.type == (uint32)73730)), (int64)2)), (uint64)shift_left(uint64(!(P.dimensions == 2)), (int64)3)), (uint64)shift_left(uint64(!((uint32)W.type == (uint32)73730)), (int64)4)), (uint64)shift_left(uint64(!(W.dimensions == 2)), (int64)5)), (uint64)shift_left(uint64(!((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0)))), (int64)6)), (uint64)shift_left(uint64(!(0 <= Out.extent.0)), (int64)7)), (uint64)shift_left(uint64(!((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1)))), (int64)8)), (uint64)shift_left(uint64(!(0 <= Out.extent.1)), (int64)9)), (uint64)shift_left(uint64(!((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2)))), (int64)10))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint32)Out.type == (uint32)73730)), (int64)0)), (uint64)shift_left(uint64(!(Out.dimensions == 10)), (int64)1)), (uint64)shift_left(uint64(!((uint32)P.type == (uint32)73730)), (int64)2)), (uint64)shift_left(uint64(!(P.dimensions == 2)), (int64)3)), (uint64)shift_left(uint64(!((uint32)W.type == (uint32)73730)), (int64)4)), (uint64)shift_left(uint64(!(W.dimensions == 2)), (int64)5)), (uint64)shift_left(uint64(!((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0)))), (int64)6)), (uint64)shift_left(uint64(!(0 <= Out.extent.0)), (int64)7)), (uint64)shift_left(uint64(!((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1)))), (int64)8)), (uint64)shift_left(uint64(!(0 <= Out.extent.1)), (int64)9))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint32)Out.type == (uint32)73730)), (int64)0)), (uint64)shift_left(uint64(!(Out.dimensions == 10)), (int64)1)), (uint64)shift_left(uint64(!((uint32)P.type == (uint32)73730)), (int64)2)), (uint64)shift_left(uint64(!(P.dimensions == 2)), (int64)3)), (uint64)shift_left(uint64(!((uint32)W.type == (uint32)73730)), (int64)4)), (uint64)shift_left(uint64(!(W.dimensions == 2)), (int64)5)), (uint64)shift_left(uint64(!((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0)))), (int64)6)), (uint64)shift_left(uint64(!(0 <= Out.extent.0)), (int64)7)), (uint64)shift_left(uint64(!((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1)))), (int64)8))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint32)Out.type == (uint32)73730)), (int64)0)), (uint64)shift_left(uint64(!(Out.dimensions == 10)), (int64)1)), (uint64)shift_left(uint64(!((uint32)P.type == (uint32)73730)), (int64)2)), (uint64)shift_left(uint64(!(P.dimensions == 2)), (int64)3)), (uint64)shift_left(uint64(!((uint32)W.type == (uint32)73730)), (int64)4)), (uint64)shift_left(uint64(!(W.dimensions == 2)), (int64)5)), (uint64)shift_left(uint64(!((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0)))), (int64)6)), (uint64)shift_left(uint64(!(0 <= Out.extent.0)), (int64)7))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint32)Out.type == (uint32)73730)), (int64)0)), (uint64)shift_left(uint64(!(Out.dimensions == 10)), (int64)1)), (uint64)shift_left(uint64(!((uint32)P.type == (uint32)73730)), (int64)2)), (uint64)shift_left(uint64(!(P.dimensions == 2)), (int64)3)), (uint64)shift_left(uint64(!((uint32)W.type == (uint32)73730)), (int64)4)), (uint64)shift_left(uint64(!(W.dimensions == 2)), (int64)5)), (uint64)shift_left(uint64(!((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0)))), (int64)6))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint32)Out.type == (uint32)73730)), (int64)0)), (uint64)shift_left(uint64(!(Out.dimensions == 10)), (int64)1)), (uint64)shift_left(uint64(!((uint32)P.type == (uint32)73730)), (int64)2)), (uint64)shift_left(uint64(!(P.dimensions == 2)), (int64)3)), (uint64)shift_left(uint64(!((uint32)W.type == (uint32)73730)), (int64)4)), (uint64)shift_left(uint64(!(W.dimensions == 2)), (int64)5))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint32)Out.type == (uint32)73730)), (int64)0)), (uint64)shift_left(uint64(!(Out.dimensions == 10)), (int64)1)), (uint64)shift_left(uint64(!((uint32)P.type == (uint32)73730)), (int64)2)), (uint64)shift_left(uint64(!(P.dimensions == 2)), (int64)3)), (uint64)shift_left(uint64(!((uint32)W.type == (uint32)73730)), (int64)4))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint32)Out.type == (uint32)73730)), (int64)0)), (uint64)shift_left(uint64(!(Out.dimensions == 10)), (int64)1)), (uint64)shift_left(uint64(!((uint32)P.type == (uint32)73730)), (int64)2)), (uint64)shift_left(uint64(!(P.dimensions == 2)), (int64)3))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint32)Out.type == (uint32)73730)), (int64)0)), (uint64)shift_left(uint64(!(Out.dimensions == 10)), (int64)1)), (uint64)shift_left(uint64(!((uint32)P.type == (uint32)73730)), (int64)2))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint32)Out.type == (uint32)73730)), (int64)0)), (uint64)shift_left(uint64(!(Out.dimensions == 10)), (int64)1))
Codegen: uint64, (uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint32)Out.type == (uint32)73730)), (int64)0))
Codegen: uint64, (uint64)shift_left((uint64)1, (int64)63)
Codegen: uint64, (uint64)1
Codegen: int64, (int64)63



Input to CSE (uint64)shift_left((uint64)1, (uint64)63)
After removing lets: (uint64)shift_left((uint64)1, (uint64)63)
Include: (uint64)shift_left((uint64)1, (uint64)63); should extract: 1
Include: (uint64)1; should extract: 0
Include: (uint64)63; should extract: 0
Canonical form without lets (uint64)shift_left((uint64)1, (uint64)63)
0: (uint64)1, 0
1: (uint64)63, 0
2: (uint64)shift_left((uint64)1, (uint64)63), 1
With variables (uint64)shift_left((uint64)1, (uint64)63)
With lets: (uint64)shift_left((uint64)1, (uint64)63)
Codegen: uint64, (uint64)shift_left((uint64)1, (uint64)63)
Codegen: uint64, (uint64)1
Codegen: uint64, (uint64)63
Codegen: uint64, (uint64)shift_left(uint64(!((uint32)Out.type == (uint32)73730)), (int64)0)
Codegen: uint64, uint64(!((uint32)Out.type == (uint32)73730))
Codegen: uint1, !((uint32)Out.type == (uint32)73730)
Codegen: uint1, ((uint32)Out.type == (uint32)73730)
Codegen: uint32, (uint32)Out.type
Codegen: uint32, (uint32)73730
Codegen: int64, (int64)0



Input to CSE (uint64)shift_left(uint64(!((uint32)Out.type == (uint32)73730)), (uint64)0)
After removing lets: (uint64)shift_left(uint64(!((uint32)Out.type == (uint32)73730)), (uint64)0)
Include: (uint64)shift_left(uint64(!((uint32)Out.type == (uint32)73730)), (uint64)0); should extract: 1
Include: uint64(!((uint32)Out.type == (uint32)73730)); should extract: 1
Include: !((uint32)Out.type == (uint32)73730); should extract: 1
Include: ((uint32)Out.type == (uint32)73730); should extract: 1
Include: (uint32)Out.type; should extract: 0
Include: (uint32)73730; should extract: 0
Include: (uint64)0; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!((uint32)Out.type == (uint32)73730)), (uint64)0)
0: (uint32)Out.type, 0
1: (uint32)73730, 0
2: ((uint32)Out.type == (uint32)73730), 1
3: !((uint32)Out.type == (uint32)73730), 1
4: uint64(!((uint32)Out.type == (uint32)73730)), 1
5: (uint64)0, 0
6: (uint64)shift_left(uint64(!((uint32)Out.type == (uint32)73730)), (uint64)0), 1
With variables (uint64)shift_left(uint64(!((uint32)Out.type == (uint32)73730)), (uint64)0)
With lets: (uint64)shift_left(uint64(!((uint32)Out.type == (uint32)73730)), (uint64)0)
Codegen: uint64, (uint64)shift_left(uint64(!((uint32)Out.type == (uint32)73730)), (uint64)0)
Codegen: uint64, uint64(!((uint32)Out.type == (uint32)73730))
Codegen: uint1, !((uint32)Out.type == (uint32)73730)
Codegen: uint1, ((uint32)Out.type == (uint32)73730)
Codegen: uint32, (uint32)Out.type
Codegen: uint32, (uint32)73730
Codegen: uint64, (uint64)0
Codegen: uint64, (uint64)shift_left(uint64(!(Out.dimensions == 10)), (int64)1)
Codegen: uint64, uint64(!(Out.dimensions == 10))
Codegen: uint1, !(Out.dimensions == 10)
Codegen: uint1, (Out.dimensions == 10)
Codegen: int32, Out.dimensions
Codegen: int32, 10
Codegen: int64, (int64)1



Input to CSE (uint64)shift_left(uint64(!(Out.dimensions == 10)), (uint64)1)
After removing lets: (uint64)shift_left(uint64(!(Out.dimensions == 10)), (uint64)1)
Include: (uint64)shift_left(uint64(!(Out.dimensions == 10)), (uint64)1); should extract: 1
Include: uint64(!(Out.dimensions == 10)); should extract: 1
Include: !(Out.dimensions == 10); should extract: 1
Include: (Out.dimensions == 10); should extract: 1
Include: Out.dimensions; should extract: 0
Include: 10; should extract: 0
Include: (uint64)1; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!(Out.dimensions == 10)), (uint64)1)
0: Out.dimensions, 0
1: 10, 0
2: (Out.dimensions == 10), 1
3: !(Out.dimensions == 10), 1
4: uint64(!(Out.dimensions == 10)), 1
5: (uint64)1, 0
6: (uint64)shift_left(uint64(!(Out.dimensions == 10)), (uint64)1), 1
With variables (uint64)shift_left(uint64(!(Out.dimensions == 10)), (uint64)1)
With lets: (uint64)shift_left(uint64(!(Out.dimensions == 10)), (uint64)1)
Codegen: uint64, (uint64)shift_left(uint64(!(Out.dimensions == 10)), (uint64)1)
Codegen: uint64, uint64(!(Out.dimensions == 10))
Codegen: uint1, !(Out.dimensions == 10)
Codegen: uint1, (Out.dimensions == 10)
Codegen: int32, Out.dimensions
Codegen: int32, 10
Codegen: uint64, (uint64)1
Codegen: uint64, (uint64)shift_left(uint64(!((uint32)P.type == (uint32)73730)), (int64)2)
Codegen: uint64, uint64(!((uint32)P.type == (uint32)73730))
Codegen: uint1, !((uint32)P.type == (uint32)73730)
Codegen: uint1, ((uint32)P.type == (uint32)73730)
Codegen: uint32, (uint32)P.type
Codegen: uint32, (uint32)73730
Codegen: int64, (int64)2



Input to CSE (uint64)shift_left(uint64(!((uint32)P.type == (uint32)73730)), (uint64)2)
After removing lets: (uint64)shift_left(uint64(!((uint32)P.type == (uint32)73730)), (uint64)2)
Include: (uint64)shift_left(uint64(!((uint32)P.type == (uint32)73730)), (uint64)2); should extract: 1
Include: uint64(!((uint32)P.type == (uint32)73730)); should extract: 1
Include: !((uint32)P.type == (uint32)73730); should extract: 1
Include: ((uint32)P.type == (uint32)73730); should extract: 1
Include: (uint32)P.type; should extract: 0
Include: (uint32)73730; should extract: 0
Include: (uint64)2; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!((uint32)P.type == (uint32)73730)), (uint64)2)
0: (uint32)P.type, 0
1: (uint32)73730, 0
2: ((uint32)P.type == (uint32)73730), 1
3: !((uint32)P.type == (uint32)73730), 1
4: uint64(!((uint32)P.type == (uint32)73730)), 1
5: (uint64)2, 0
6: (uint64)shift_left(uint64(!((uint32)P.type == (uint32)73730)), (uint64)2), 1
With variables (uint64)shift_left(uint64(!((uint32)P.type == (uint32)73730)), (uint64)2)
With lets: (uint64)shift_left(uint64(!((uint32)P.type == (uint32)73730)), (uint64)2)
Codegen: uint64, (uint64)shift_left(uint64(!((uint32)P.type == (uint32)73730)), (uint64)2)
Codegen: uint64, uint64(!((uint32)P.type == (uint32)73730))
Codegen: uint1, !((uint32)P.type == (uint32)73730)
Codegen: uint1, ((uint32)P.type == (uint32)73730)
Codegen: uint32, (uint32)P.type
Codegen: uint32, (uint32)73730
Codegen: uint64, (uint64)2
Codegen: uint64, (uint64)shift_left(uint64(!(P.dimensions == 2)), (int64)3)
Codegen: uint64, uint64(!(P.dimensions == 2))
Codegen: uint1, !(P.dimensions == 2)
Codegen: uint1, (P.dimensions == 2)
Codegen: int32, P.dimensions
Codegen: int32, 2
Codegen: int64, (int64)3



Input to CSE (uint64)shift_left(uint64(!(P.dimensions == 2)), (uint64)3)
After removing lets: (uint64)shift_left(uint64(!(P.dimensions == 2)), (uint64)3)
Include: (uint64)shift_left(uint64(!(P.dimensions == 2)), (uint64)3); should extract: 1
Include: uint64(!(P.dimensions == 2)); should extract: 1
Include: !(P.dimensions == 2); should extract: 1
Include: (P.dimensions == 2); should extract: 1
Include: P.dimensions; should extract: 0
Include: 2; should extract: 0
Include: (uint64)3; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!(P.dimensions == 2)), (uint64)3)
0: P.dimensions, 0
1: 2, 0
2: (P.dimensions == 2), 1
3: !(P.dimensions == 2), 1
4: uint64(!(P.dimensions == 2)), 1
5: (uint64)3, 0
6: (uint64)shift_left(uint64(!(P.dimensions == 2)), (uint64)3), 1
With variables (uint64)shift_left(uint64(!(P.dimensions == 2)), (uint64)3)
With lets: (uint64)shift_left(uint64(!(P.dimensions == 2)), (uint64)3)
Codegen: uint64, (uint64)shift_left(uint64(!(P.dimensions == 2)), (uint64)3)
Codegen: uint64, uint64(!(P.dimensions == 2))
Codegen: uint1, !(P.dimensions == 2)
Codegen: uint1, (P.dimensions == 2)
Codegen: int32, P.dimensions
Codegen: int32, 2
Codegen: uint64, (uint64)3
Codegen: uint64, (uint64)shift_left(uint64(!((uint32)W.type == (uint32)73730)), (int64)4)
Codegen: uint64, uint64(!((uint32)W.type == (uint32)73730))
Codegen: uint1, !((uint32)W.type == (uint32)73730)
Codegen: uint1, ((uint32)W.type == (uint32)73730)
Codegen: uint32, (uint32)W.type
Codegen: uint32, (uint32)73730
Codegen: int64, (int64)4



Input to CSE (uint64)shift_left(uint64(!((uint32)W.type == (uint32)73730)), (uint64)4)
After removing lets: (uint64)shift_left(uint64(!((uint32)W.type == (uint32)73730)), (uint64)4)
Include: (uint64)shift_left(uint64(!((uint32)W.type == (uint32)73730)), (uint64)4); should extract: 1
Include: uint64(!((uint32)W.type == (uint32)73730)); should extract: 1
Include: !((uint32)W.type == (uint32)73730); should extract: 1
Include: ((uint32)W.type == (uint32)73730); should extract: 1
Include: (uint32)W.type; should extract: 0
Include: (uint32)73730; should extract: 0
Include: (uint64)4; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!((uint32)W.type == (uint32)73730)), (uint64)4)
0: (uint32)W.type, 0
1: (uint32)73730, 0
2: ((uint32)W.type == (uint32)73730), 1
3: !((uint32)W.type == (uint32)73730), 1
4: uint64(!((uint32)W.type == (uint32)73730)), 1
5: (uint64)4, 0
6: (uint64)shift_left(uint64(!((uint32)W.type == (uint32)73730)), (uint64)4), 1
With variables (uint64)shift_left(uint64(!((uint32)W.type == (uint32)73730)), (uint64)4)
With lets: (uint64)shift_left(uint64(!((uint32)W.type == (uint32)73730)), (uint64)4)
Codegen: uint64, (uint64)shift_left(uint64(!((uint32)W.type == (uint32)73730)), (uint64)4)
Codegen: uint64, uint64(!((uint32)W.type == (uint32)73730))
Codegen: uint1, !((uint32)W.type == (uint32)73730)
Codegen: uint1, ((uint32)W.type == (uint32)73730)
Codegen: uint32, (uint32)W.type
Codegen: uint32, (uint32)73730
Codegen: uint64, (uint64)4
Codegen: uint64, (uint64)shift_left(uint64(!(W.dimensions == 2)), (int64)5)
Codegen: uint64, uint64(!(W.dimensions == 2))
Codegen: uint1, !(W.dimensions == 2)
Codegen: uint1, (W.dimensions == 2)
Codegen: int32, W.dimensions
Codegen: int32, 2
Codegen: int64, (int64)5



Input to CSE (uint64)shift_left(uint64(!(W.dimensions == 2)), (uint64)5)
After removing lets: (uint64)shift_left(uint64(!(W.dimensions == 2)), (uint64)5)
Include: (uint64)shift_left(uint64(!(W.dimensions == 2)), (uint64)5); should extract: 1
Include: uint64(!(W.dimensions == 2)); should extract: 1
Include: !(W.dimensions == 2); should extract: 1
Include: (W.dimensions == 2); should extract: 1
Include: W.dimensions; should extract: 0
Include: 2; should extract: 0
Include: (uint64)5; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!(W.dimensions == 2)), (uint64)5)
0: W.dimensions, 0
1: 2, 0
2: (W.dimensions == 2), 1
3: !(W.dimensions == 2), 1
4: uint64(!(W.dimensions == 2)), 1
5: (uint64)5, 0
6: (uint64)shift_left(uint64(!(W.dimensions == 2)), (uint64)5), 1
With variables (uint64)shift_left(uint64(!(W.dimensions == 2)), (uint64)5)
With lets: (uint64)shift_left(uint64(!(W.dimensions == 2)), (uint64)5)
Codegen: uint64, (uint64)shift_left(uint64(!(W.dimensions == 2)), (uint64)5)
Codegen: uint64, uint64(!(W.dimensions == 2))
Codegen: uint1, !(W.dimensions == 2)
Codegen: uint1, (W.dimensions == 2)
Codegen: int32, W.dimensions
Codegen: int32, 2
Codegen: uint64, (uint64)5
Codegen: uint64, (uint64)shift_left(uint64(!((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0)))), (int64)6)
Codegen: uint64, uint64(!((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))))
Codegen: uint1, !((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0)))
Codegen: uint1, ((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0)))
Codegen: uint1, (Out.min.0 <= 0)
Codegen: uint1, !(Out.min.0 > 0)
Codegen: uint1, (Out.min.0 > 0)
Codegen: int32, Out.min.0
Codegen: int32, 0
Codegen: uint1, (8 <= (Out.extent.0 + Out.min.0))
Codegen: uint1, !(8 > (Out.extent.0 + Out.min.0))
Codegen: uint1, (8 > (Out.extent.0 + Out.min.0))
Codegen: int32, 8
Codegen: int32, (Out.extent.0 + Out.min.0)
Codegen: int32, Out.extent.0
Codegen: int32, Out.min.0
Codegen: int64, (int64)6



Input to CSE (uint64)shift_left(uint64(!((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0)))), (uint64)6)
After removing lets: (uint64)shift_left(uint64(!((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0)))), (uint64)6)
Include: (uint64)shift_left(uint64(!((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0)))), (uint64)6); should extract: 1
Include: uint64(!((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0)))); should extract: 1
Include: !((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))); should extract: 1
Include: ((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))); should extract: 1
Include: (Out.min.0 <= 0); should extract: 1
Include: Out.min.0; should extract: 0
Include: 0; should extract: 0
Include: (8 <= (Out.extent.0 + Out.min.0)); should extract: 1
Include: 8; should extract: 0
Include: (Out.extent.0 + Out.min.0); should extract: 1
Include: Out.extent.0; should extract: 0
Include: Out.min.0; should extract: 0
Include: (uint64)6; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0)))), (uint64)6)
0: Out.min.0, 0
1: 0, 0
2: (Out.min.0 <= 0), 1
3: 8, 0
4: Out.extent.0, 0
5: (Out.extent.0 + Out.min.0), 1
6: (8 <= (Out.extent.0 + Out.min.0)), 1
7: ((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), 1
8: !((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))), 1
9: uint64(!((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0)))), 1
10: (uint64)6, 0
11: (uint64)shift_left(uint64(!((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0)))), (uint64)6), 1
With variables (uint64)shift_left(uint64(!((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0)))), (uint64)6)
With lets: (uint64)shift_left(uint64(!((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0)))), (uint64)6)
Codegen: uint64, (uint64)shift_left(uint64(!((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0)))), (uint64)6)
Codegen: uint64, uint64(!((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0))))
Codegen: uint1, !((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0)))
Codegen: uint1, ((Out.min.0 <= 0) && (8 <= (Out.extent.0 + Out.min.0)))
Codegen: uint1, (Out.min.0 <= 0)
Codegen: uint1, !(Out.min.0 > 0)
Codegen: uint1, (Out.min.0 > 0)
Codegen: int32, Out.min.0
Codegen: int32, 0
Codegen: uint1, (8 <= (Out.extent.0 + Out.min.0))
Codegen: uint1, !(8 > (Out.extent.0 + Out.min.0))
Codegen: uint1, (8 > (Out.extent.0 + Out.min.0))
Codegen: int32, 8
Codegen: int32, (Out.extent.0 + Out.min.0)
Codegen: int32, Out.extent.0
Codegen: int32, Out.min.0
Codegen: uint64, (uint64)6
Codegen: uint64, (uint64)shift_left(uint64(!(0 <= Out.extent.0)), (int64)7)
Codegen: uint64, uint64(!(0 <= Out.extent.0))
Codegen: uint1, !(0 <= Out.extent.0)
Codegen: uint1, (0 <= Out.extent.0)
Codegen: uint1, !(0 > Out.extent.0)
Codegen: uint1, (0 > Out.extent.0)
Codegen: int32, 0
Codegen: int32, Out.extent.0
Codegen: int64, (int64)7



Input to CSE (uint64)shift_left(uint64(!(0 <= Out.extent.0)), (uint64)7)
After removing lets: (uint64)shift_left(uint64(!(0 <= Out.extent.0)), (uint64)7)
Include: (uint64)shift_left(uint64(!(0 <= Out.extent.0)), (uint64)7); should extract: 1
Include: uint64(!(0 <= Out.extent.0)); should extract: 1
Include: !(0 <= Out.extent.0); should extract: 1
Include: (0 <= Out.extent.0); should extract: 1
Include: 0; should extract: 0
Include: Out.extent.0; should extract: 0
Include: (uint64)7; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!(0 <= Out.extent.0)), (uint64)7)
0: 0, 0
1: Out.extent.0, 0
2: (0 <= Out.extent.0), 1
3: !(0 <= Out.extent.0), 1
4: uint64(!(0 <= Out.extent.0)), 1
5: (uint64)7, 0
6: (uint64)shift_left(uint64(!(0 <= Out.extent.0)), (uint64)7), 1
With variables (uint64)shift_left(uint64(!(0 <= Out.extent.0)), (uint64)7)
With lets: (uint64)shift_left(uint64(!(0 <= Out.extent.0)), (uint64)7)
Codegen: uint64, (uint64)shift_left(uint64(!(0 <= Out.extent.0)), (uint64)7)
Codegen: uint64, uint64(!(0 <= Out.extent.0))
Codegen: uint1, !(0 <= Out.extent.0)
Codegen: uint1, (0 <= Out.extent.0)
Codegen: uint1, !(0 > Out.extent.0)
Codegen: uint1, (0 > Out.extent.0)
Codegen: int32, 0
Codegen: int32, Out.extent.0
Codegen: uint64, (uint64)7
Codegen: uint64, (uint64)shift_left(uint64(!((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1)))), (int64)8)
Codegen: uint64, uint64(!((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))))
Codegen: uint1, !((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1)))
Codegen: uint1, ((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1)))
Codegen: uint1, (Out.min.1 <= 0)
Codegen: uint1, !(Out.min.1 > 0)
Codegen: uint1, (Out.min.1 > 0)
Codegen: int32, Out.min.1
Codegen: int32, 0
Codegen: uint1, (7 <= (Out.extent.1 + Out.min.1))
Codegen: uint1, !(7 > (Out.extent.1 + Out.min.1))
Codegen: uint1, (7 > (Out.extent.1 + Out.min.1))
Codegen: int32, 7
Codegen: int32, (Out.extent.1 + Out.min.1)
Codegen: int32, Out.extent.1
Codegen: int32, Out.min.1
Codegen: int64, (int64)8



Input to CSE (uint64)shift_left(uint64(!((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1)))), (uint64)8)
After removing lets: (uint64)shift_left(uint64(!((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1)))), (uint64)8)
Include: (uint64)shift_left(uint64(!((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1)))), (uint64)8); should extract: 1
Include: uint64(!((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1)))); should extract: 1
Include: !((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))); should extract: 1
Include: ((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))); should extract: 1
Include: (Out.min.1 <= 0); should extract: 1
Include: Out.min.1; should extract: 0
Include: 0; should extract: 0
Include: (7 <= (Out.extent.1 + Out.min.1)); should extract: 1
Include: 7; should extract: 0
Include: (Out.extent.1 + Out.min.1); should extract: 1
Include: Out.extent.1; should extract: 0
Include: Out.min.1; should extract: 0
Include: (uint64)8; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1)))), (uint64)8)
0: Out.min.1, 0
1: 0, 0
2: (Out.min.1 <= 0), 1
3: 7, 0
4: Out.extent.1, 0
5: (Out.extent.1 + Out.min.1), 1
6: (7 <= (Out.extent.1 + Out.min.1)), 1
7: ((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), 1
8: !((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))), 1
9: uint64(!((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1)))), 1
10: (uint64)8, 0
11: (uint64)shift_left(uint64(!((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1)))), (uint64)8), 1
With variables (uint64)shift_left(uint64(!((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1)))), (uint64)8)
With lets: (uint64)shift_left(uint64(!((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1)))), (uint64)8)
Codegen: uint64, (uint64)shift_left(uint64(!((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1)))), (uint64)8)
Codegen: uint64, uint64(!((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1))))
Codegen: uint1, !((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1)))
Codegen: uint1, ((Out.min.1 <= 0) && (7 <= (Out.extent.1 + Out.min.1)))
Codegen: uint1, (Out.min.1 <= 0)
Codegen: uint1, !(Out.min.1 > 0)
Codegen: uint1, (Out.min.1 > 0)
Codegen: int32, Out.min.1
Codegen: int32, 0
Codegen: uint1, (7 <= (Out.extent.1 + Out.min.1))
Codegen: uint1, !(7 > (Out.extent.1 + Out.min.1))
Codegen: uint1, (7 > (Out.extent.1 + Out.min.1))
Codegen: int32, 7
Codegen: int32, (Out.extent.1 + Out.min.1)
Codegen: int32, Out.extent.1
Codegen: int32, Out.min.1
Codegen: uint64, (uint64)8
Codegen: uint64, (uint64)shift_left(uint64(!(0 <= Out.extent.1)), (int64)9)
Codegen: uint64, uint64(!(0 <= Out.extent.1))
Codegen: uint1, !(0 <= Out.extent.1)
Codegen: uint1, (0 <= Out.extent.1)
Codegen: uint1, !(0 > Out.extent.1)
Codegen: uint1, (0 > Out.extent.1)
Codegen: int32, 0
Codegen: int32, Out.extent.1
Codegen: int64, (int64)9



Input to CSE (uint64)shift_left(uint64(!(0 <= Out.extent.1)), (uint64)9)
After removing lets: (uint64)shift_left(uint64(!(0 <= Out.extent.1)), (uint64)9)
Include: (uint64)shift_left(uint64(!(0 <= Out.extent.1)), (uint64)9); should extract: 1
Include: uint64(!(0 <= Out.extent.1)); should extract: 1
Include: !(0 <= Out.extent.1); should extract: 1
Include: (0 <= Out.extent.1); should extract: 1
Include: 0; should extract: 0
Include: Out.extent.1; should extract: 0
Include: (uint64)9; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!(0 <= Out.extent.1)), (uint64)9)
0: 0, 0
1: Out.extent.1, 0
2: (0 <= Out.extent.1), 1
3: !(0 <= Out.extent.1), 1
4: uint64(!(0 <= Out.extent.1)), 1
5: (uint64)9, 0
6: (uint64)shift_left(uint64(!(0 <= Out.extent.1)), (uint64)9), 1
With variables (uint64)shift_left(uint64(!(0 <= Out.extent.1)), (uint64)9)
With lets: (uint64)shift_left(uint64(!(0 <= Out.extent.1)), (uint64)9)
Codegen: uint64, (uint64)shift_left(uint64(!(0 <= Out.extent.1)), (uint64)9)
Codegen: uint64, uint64(!(0 <= Out.extent.1))
Codegen: uint1, !(0 <= Out.extent.1)
Codegen: uint1, (0 <= Out.extent.1)
Codegen: uint1, !(0 > Out.extent.1)
Codegen: uint1, (0 > Out.extent.1)
Codegen: int32, 0
Codegen: int32, Out.extent.1
Codegen: uint64, (uint64)9
Codegen: uint64, (uint64)shift_left(uint64(!((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2)))), (int64)10)
Codegen: uint64, uint64(!((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))))
Codegen: uint1, !((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2)))
Codegen: uint1, ((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2)))
Codegen: uint1, (Out.min.2 <= 0)
Codegen: uint1, !(Out.min.2 > 0)
Codegen: uint1, (Out.min.2 > 0)
Codegen: int32, Out.min.2
Codegen: int32, 0
Codegen: uint1, (7 <= (Out.extent.2 + Out.min.2))
Codegen: uint1, !(7 > (Out.extent.2 + Out.min.2))
Codegen: uint1, (7 > (Out.extent.2 + Out.min.2))
Codegen: int32, 7
Codegen: int32, (Out.extent.2 + Out.min.2)
Codegen: int32, Out.extent.2
Codegen: int32, Out.min.2
Codegen: int64, (int64)10



Input to CSE (uint64)shift_left(uint64(!((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2)))), (uint64)10)
After removing lets: (uint64)shift_left(uint64(!((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2)))), (uint64)10)
Include: (uint64)shift_left(uint64(!((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2)))), (uint64)10); should extract: 1
Include: uint64(!((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2)))); should extract: 1
Include: !((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))); should extract: 1
Include: ((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))); should extract: 1
Include: (Out.min.2 <= 0); should extract: 1
Include: Out.min.2; should extract: 0
Include: 0; should extract: 0
Include: (7 <= (Out.extent.2 + Out.min.2)); should extract: 1
Include: 7; should extract: 0
Include: (Out.extent.2 + Out.min.2); should extract: 1
Include: Out.extent.2; should extract: 0
Include: Out.min.2; should extract: 0
Include: (uint64)10; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2)))), (uint64)10)
0: Out.min.2, 0
1: 0, 0
2: (Out.min.2 <= 0), 1
3: 7, 0
4: Out.extent.2, 0
5: (Out.extent.2 + Out.min.2), 1
6: (7 <= (Out.extent.2 + Out.min.2)), 1
7: ((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), 1
8: !((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))), 1
9: uint64(!((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2)))), 1
10: (uint64)10, 0
11: (uint64)shift_left(uint64(!((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2)))), (uint64)10), 1
With variables (uint64)shift_left(uint64(!((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2)))), (uint64)10)
With lets: (uint64)shift_left(uint64(!((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2)))), (uint64)10)
Codegen: uint64, (uint64)shift_left(uint64(!((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2)))), (uint64)10)
Codegen: uint64, uint64(!((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2))))
Codegen: uint1, !((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2)))
Codegen: uint1, ((Out.min.2 <= 0) && (7 <= (Out.extent.2 + Out.min.2)))
Codegen: uint1, (Out.min.2 <= 0)
Codegen: uint1, !(Out.min.2 > 0)
Codegen: uint1, (Out.min.2 > 0)
Codegen: int32, Out.min.2
Codegen: int32, 0
Codegen: uint1, (7 <= (Out.extent.2 + Out.min.2))
Codegen: uint1, !(7 > (Out.extent.2 + Out.min.2))
Codegen: uint1, (7 > (Out.extent.2 + Out.min.2))
Codegen: int32, 7
Codegen: int32, (Out.extent.2 + Out.min.2)
Codegen: int32, Out.extent.2
Codegen: int32, Out.min.2
Codegen: uint64, (uint64)10
Codegen: uint64, (uint64)shift_left(uint64(!(0 <= Out.extent.2)), (int64)11)
Codegen: uint64, uint64(!(0 <= Out.extent.2))
Codegen: uint1, !(0 <= Out.extent.2)
Codegen: uint1, (0 <= Out.extent.2)
Codegen: uint1, !(0 > Out.extent.2)
Codegen: uint1, (0 > Out.extent.2)
Codegen: int32, 0
Codegen: int32, Out.extent.2
Codegen: int64, (int64)11



Input to CSE (uint64)shift_left(uint64(!(0 <= Out.extent.2)), (uint64)11)
After removing lets: (uint64)shift_left(uint64(!(0 <= Out.extent.2)), (uint64)11)
Include: (uint64)shift_left(uint64(!(0 <= Out.extent.2)), (uint64)11); should extract: 1
Include: uint64(!(0 <= Out.extent.2)); should extract: 1
Include: !(0 <= Out.extent.2); should extract: 1
Include: (0 <= Out.extent.2); should extract: 1
Include: 0; should extract: 0
Include: Out.extent.2; should extract: 0
Include: (uint64)11; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!(0 <= Out.extent.2)), (uint64)11)
0: 0, 0
1: Out.extent.2, 0
2: (0 <= Out.extent.2), 1
3: !(0 <= Out.extent.2), 1
4: uint64(!(0 <= Out.extent.2)), 1
5: (uint64)11, 0
6: (uint64)shift_left(uint64(!(0 <= Out.extent.2)), (uint64)11), 1
With variables (uint64)shift_left(uint64(!(0 <= Out.extent.2)), (uint64)11)
With lets: (uint64)shift_left(uint64(!(0 <= Out.extent.2)), (uint64)11)
Codegen: uint64, (uint64)shift_left(uint64(!(0 <= Out.extent.2)), (uint64)11)
Codegen: uint64, uint64(!(0 <= Out.extent.2))
Codegen: uint1, !(0 <= Out.extent.2)
Codegen: uint1, (0 <= Out.extent.2)
Codegen: uint1, !(0 > Out.extent.2)
Codegen: uint1, (0 > Out.extent.2)
Codegen: int32, 0
Codegen: int32, Out.extent.2
Codegen: uint64, (uint64)11
Codegen: uint64, (uint64)shift_left(uint64(!((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3)))), (int64)12)
Codegen: uint64, uint64(!((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))))
Codegen: uint1, !((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3)))
Codegen: uint1, ((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3)))
Codegen: uint1, (Out.min.3 <= 0)
Codegen: uint1, !(Out.min.3 > 0)
Codegen: uint1, (Out.min.3 > 0)
Codegen: int32, Out.min.3
Codegen: int32, 0
Codegen: uint1, (1 <= (Out.extent.3 + Out.min.3))
Codegen: uint1, !(1 > (Out.extent.3 + Out.min.3))
Codegen: uint1, (1 > (Out.extent.3 + Out.min.3))
Codegen: int32, 1
Codegen: int32, (Out.extent.3 + Out.min.3)
Codegen: int32, Out.extent.3
Codegen: int32, Out.min.3
Codegen: int64, (int64)12



Input to CSE (uint64)shift_left(uint64(!((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3)))), (uint64)12)
After removing lets: (uint64)shift_left(uint64(!((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3)))), (uint64)12)
Include: (uint64)shift_left(uint64(!((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3)))), (uint64)12); should extract: 1
Include: uint64(!((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3)))); should extract: 1
Include: !((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))); should extract: 1
Include: ((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))); should extract: 1
Include: (Out.min.3 <= 0); should extract: 1
Include: Out.min.3; should extract: 0
Include: 0; should extract: 0
Include: (1 <= (Out.extent.3 + Out.min.3)); should extract: 1
Include: 1; should extract: 0
Include: (Out.extent.3 + Out.min.3); should extract: 1
Include: Out.extent.3; should extract: 0
Include: Out.min.3; should extract: 0
Include: (uint64)12; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3)))), (uint64)12)
0: Out.min.3, 0
1: 0, 0
2: (Out.min.3 <= 0), 1
3: 1, 0
4: Out.extent.3, 0
5: (Out.extent.3 + Out.min.3), 1
6: (1 <= (Out.extent.3 + Out.min.3)), 1
7: ((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), 1
8: !((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))), 1
9: uint64(!((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3)))), 1
10: (uint64)12, 0
11: (uint64)shift_left(uint64(!((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3)))), (uint64)12), 1
With variables (uint64)shift_left(uint64(!((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3)))), (uint64)12)
With lets: (uint64)shift_left(uint64(!((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3)))), (uint64)12)
Codegen: uint64, (uint64)shift_left(uint64(!((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3)))), (uint64)12)
Codegen: uint64, uint64(!((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3))))
Codegen: uint1, !((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3)))
Codegen: uint1, ((Out.min.3 <= 0) && (1 <= (Out.extent.3 + Out.min.3)))
Codegen: uint1, (Out.min.3 <= 0)
Codegen: uint1, !(Out.min.3 > 0)
Codegen: uint1, (Out.min.3 > 0)
Codegen: int32, Out.min.3
Codegen: int32, 0
Codegen: uint1, (1 <= (Out.extent.3 + Out.min.3))
Codegen: uint1, !(1 > (Out.extent.3 + Out.min.3))
Codegen: uint1, (1 > (Out.extent.3 + Out.min.3))
Codegen: int32, 1
Codegen: int32, (Out.extent.3 + Out.min.3)
Codegen: int32, Out.extent.3
Codegen: int32, Out.min.3
Codegen: uint64, (uint64)12
Codegen: uint64, (uint64)shift_left(uint64(!(0 <= Out.extent.3)), (int64)13)
Codegen: uint64, uint64(!(0 <= Out.extent.3))
Codegen: uint1, !(0 <= Out.extent.3)
Codegen: uint1, (0 <= Out.extent.3)
Codegen: uint1, !(0 > Out.extent.3)
Codegen: uint1, (0 > Out.extent.3)
Codegen: int32, 0
Codegen: int32, Out.extent.3
Codegen: int64, (int64)13



Input to CSE (uint64)shift_left(uint64(!(0 <= Out.extent.3)), (uint64)13)
After removing lets: (uint64)shift_left(uint64(!(0 <= Out.extent.3)), (uint64)13)
Include: (uint64)shift_left(uint64(!(0 <= Out.extent.3)), (uint64)13); should extract: 1
Include: uint64(!(0 <= Out.extent.3)); should extract: 1
Include: !(0 <= Out.extent.3); should extract: 1
Include: (0 <= Out.extent.3); should extract: 1
Include: 0; should extract: 0
Include: Out.extent.3; should extract: 0
Include: (uint64)13; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!(0 <= Out.extent.3)), (uint64)13)
0: 0, 0
1: Out.extent.3, 0
2: (0 <= Out.extent.3), 1
3: !(0 <= Out.extent.3), 1
4: uint64(!(0 <= Out.extent.3)), 1
5: (uint64)13, 0
6: (uint64)shift_left(uint64(!(0 <= Out.extent.3)), (uint64)13), 1
With variables (uint64)shift_left(uint64(!(0 <= Out.extent.3)), (uint64)13)
With lets: (uint64)shift_left(uint64(!(0 <= Out.extent.3)), (uint64)13)
Codegen: uint64, (uint64)shift_left(uint64(!(0 <= Out.extent.3)), (uint64)13)
Codegen: uint64, uint64(!(0 <= Out.extent.3))
Codegen: uint1, !(0 <= Out.extent.3)
Codegen: uint1, (0 <= Out.extent.3)
Codegen: uint1, !(0 > Out.extent.3)
Codegen: uint1, (0 > Out.extent.3)
Codegen: int32, 0
Codegen: int32, Out.extent.3
Codegen: uint64, (uint64)13
Codegen: uint64, (uint64)shift_left(uint64(!((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4)))), (int64)14)
Codegen: uint64, uint64(!((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))))
Codegen: uint1, !((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4)))
Codegen: uint1, ((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4)))
Codegen: uint1, (Out.min.4 <= 0)
Codegen: uint1, !(Out.min.4 > 0)
Codegen: uint1, (Out.min.4 > 0)
Codegen: int32, Out.min.4
Codegen: int32, 0
Codegen: uint1, (4 <= (Out.extent.4 + Out.min.4))
Codegen: uint1, !(4 > (Out.extent.4 + Out.min.4))
Codegen: uint1, (4 > (Out.extent.4 + Out.min.4))
Codegen: int32, 4
Codegen: int32, (Out.extent.4 + Out.min.4)
Codegen: int32, Out.extent.4
Codegen: int32, Out.min.4
Codegen: int64, (int64)14



Input to CSE (uint64)shift_left(uint64(!((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4)))), (uint64)14)
After removing lets: (uint64)shift_left(uint64(!((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4)))), (uint64)14)
Include: (uint64)shift_left(uint64(!((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4)))), (uint64)14); should extract: 1
Include: uint64(!((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4)))); should extract: 1
Include: !((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))); should extract: 1
Include: ((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))); should extract: 1
Include: (Out.min.4 <= 0); should extract: 1
Include: Out.min.4; should extract: 0
Include: 0; should extract: 0
Include: (4 <= (Out.extent.4 + Out.min.4)); should extract: 1
Include: 4; should extract: 0
Include: (Out.extent.4 + Out.min.4); should extract: 1
Include: Out.extent.4; should extract: 0
Include: Out.min.4; should extract: 0
Include: (uint64)14; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4)))), (uint64)14)
0: Out.min.4, 0
1: 0, 0
2: (Out.min.4 <= 0), 1
3: 4, 0
4: Out.extent.4, 0
5: (Out.extent.4 + Out.min.4), 1
6: (4 <= (Out.extent.4 + Out.min.4)), 1
7: ((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), 1
8: !((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))), 1
9: uint64(!((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4)))), 1
10: (uint64)14, 0
11: (uint64)shift_left(uint64(!((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4)))), (uint64)14), 1
With variables (uint64)shift_left(uint64(!((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4)))), (uint64)14)
With lets: (uint64)shift_left(uint64(!((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4)))), (uint64)14)
Codegen: uint64, (uint64)shift_left(uint64(!((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4)))), (uint64)14)
Codegen: uint64, uint64(!((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4))))
Codegen: uint1, !((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4)))
Codegen: uint1, ((Out.min.4 <= 0) && (4 <= (Out.extent.4 + Out.min.4)))
Codegen: uint1, (Out.min.4 <= 0)
Codegen: uint1, !(Out.min.4 > 0)
Codegen: uint1, (Out.min.4 > 0)
Codegen: int32, Out.min.4
Codegen: int32, 0
Codegen: uint1, (4 <= (Out.extent.4 + Out.min.4))
Codegen: uint1, !(4 > (Out.extent.4 + Out.min.4))
Codegen: uint1, (4 > (Out.extent.4 + Out.min.4))
Codegen: int32, 4
Codegen: int32, (Out.extent.4 + Out.min.4)
Codegen: int32, Out.extent.4
Codegen: int32, Out.min.4
Codegen: uint64, (uint64)14
Codegen: uint64, (uint64)shift_left(uint64(!(0 <= Out.extent.4)), (int64)15)
Codegen: uint64, uint64(!(0 <= Out.extent.4))
Codegen: uint1, !(0 <= Out.extent.4)
Codegen: uint1, (0 <= Out.extent.4)
Codegen: uint1, !(0 > Out.extent.4)
Codegen: uint1, (0 > Out.extent.4)
Codegen: int32, 0
Codegen: int32, Out.extent.4
Codegen: int64, (int64)15



Input to CSE (uint64)shift_left(uint64(!(0 <= Out.extent.4)), (uint64)15)
After removing lets: (uint64)shift_left(uint64(!(0 <= Out.extent.4)), (uint64)15)
Include: (uint64)shift_left(uint64(!(0 <= Out.extent.4)), (uint64)15); should extract: 1
Include: uint64(!(0 <= Out.extent.4)); should extract: 1
Include: !(0 <= Out.extent.4); should extract: 1
Include: (0 <= Out.extent.4); should extract: 1
Include: 0; should extract: 0
Include: Out.extent.4; should extract: 0
Include: (uint64)15; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!(0 <= Out.extent.4)), (uint64)15)
0: 0, 0
1: Out.extent.4, 0
2: (0 <= Out.extent.4), 1
3: !(0 <= Out.extent.4), 1
4: uint64(!(0 <= Out.extent.4)), 1
5: (uint64)15, 0
6: (uint64)shift_left(uint64(!(0 <= Out.extent.4)), (uint64)15), 1
With variables (uint64)shift_left(uint64(!(0 <= Out.extent.4)), (uint64)15)
With lets: (uint64)shift_left(uint64(!(0 <= Out.extent.4)), (uint64)15)
Codegen: uint64, (uint64)shift_left(uint64(!(0 <= Out.extent.4)), (uint64)15)
Codegen: uint64, uint64(!(0 <= Out.extent.4))
Codegen: uint1, !(0 <= Out.extent.4)
Codegen: uint1, (0 <= Out.extent.4)
Codegen: uint1, !(0 > Out.extent.4)
Codegen: uint1, (0 > Out.extent.4)
Codegen: int32, 0
Codegen: int32, Out.extent.4
Codegen: uint64, (uint64)15
Codegen: uint64, (uint64)shift_left(uint64(!((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5)))), (int64)16)
Codegen: uint64, uint64(!((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))))
Codegen: uint1, !((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5)))
Codegen: uint1, ((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5)))
Codegen: uint1, (Out.min.5 <= 0)
Codegen: uint1, !(Out.min.5 > 0)
Codegen: uint1, (Out.min.5 > 0)
Codegen: int32, Out.min.5
Codegen: int32, 0
Codegen: uint1, (4 <= (Out.extent.5 + Out.min.5))
Codegen: uint1, !(4 > (Out.extent.5 + Out.min.5))
Codegen: uint1, (4 > (Out.extent.5 + Out.min.5))
Codegen: int32, 4
Codegen: int32, (Out.extent.5 + Out.min.5)
Codegen: int32, Out.extent.5
Codegen: int32, Out.min.5
Codegen: int64, (int64)16



Input to CSE (uint64)shift_left(uint64(!((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5)))), (uint64)16)
After removing lets: (uint64)shift_left(uint64(!((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5)))), (uint64)16)
Include: (uint64)shift_left(uint64(!((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5)))), (uint64)16); should extract: 1
Include: uint64(!((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5)))); should extract: 1
Include: !((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))); should extract: 1
Include: ((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))); should extract: 1
Include: (Out.min.5 <= 0); should extract: 1
Include: Out.min.5; should extract: 0
Include: 0; should extract: 0
Include: (4 <= (Out.extent.5 + Out.min.5)); should extract: 1
Include: 4; should extract: 0
Include: (Out.extent.5 + Out.min.5); should extract: 1
Include: Out.extent.5; should extract: 0
Include: Out.min.5; should extract: 0
Include: (uint64)16; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5)))), (uint64)16)
0: Out.min.5, 0
1: 0, 0
2: (Out.min.5 <= 0), 1
3: 4, 0
4: Out.extent.5, 0
5: (Out.extent.5 + Out.min.5), 1
6: (4 <= (Out.extent.5 + Out.min.5)), 1
7: ((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), 1
8: !((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))), 1
9: uint64(!((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5)))), 1
10: (uint64)16, 0
11: (uint64)shift_left(uint64(!((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5)))), (uint64)16), 1
With variables (uint64)shift_left(uint64(!((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5)))), (uint64)16)
With lets: (uint64)shift_left(uint64(!((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5)))), (uint64)16)
Codegen: uint64, (uint64)shift_left(uint64(!((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5)))), (uint64)16)
Codegen: uint64, uint64(!((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5))))
Codegen: uint1, !((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5)))
Codegen: uint1, ((Out.min.5 <= 0) && (4 <= (Out.extent.5 + Out.min.5)))
Codegen: uint1, (Out.min.5 <= 0)
Codegen: uint1, !(Out.min.5 > 0)
Codegen: uint1, (Out.min.5 > 0)
Codegen: int32, Out.min.5
Codegen: int32, 0
Codegen: uint1, (4 <= (Out.extent.5 + Out.min.5))
Codegen: uint1, !(4 > (Out.extent.5 + Out.min.5))
Codegen: uint1, (4 > (Out.extent.5 + Out.min.5))
Codegen: int32, 4
Codegen: int32, (Out.extent.5 + Out.min.5)
Codegen: int32, Out.extent.5
Codegen: int32, Out.min.5
Codegen: uint64, (uint64)16
Codegen: uint64, (uint64)shift_left(uint64(!(0 <= Out.extent.5)), (int64)17)
Codegen: uint64, uint64(!(0 <= Out.extent.5))
Codegen: uint1, !(0 <= Out.extent.5)
Codegen: uint1, (0 <= Out.extent.5)
Codegen: uint1, !(0 > Out.extent.5)
Codegen: uint1, (0 > Out.extent.5)
Codegen: int32, 0
Codegen: int32, Out.extent.5
Codegen: int64, (int64)17



Input to CSE (uint64)shift_left(uint64(!(0 <= Out.extent.5)), (uint64)17)
After removing lets: (uint64)shift_left(uint64(!(0 <= Out.extent.5)), (uint64)17)
Include: (uint64)shift_left(uint64(!(0 <= Out.extent.5)), (uint64)17); should extract: 1
Include: uint64(!(0 <= Out.extent.5)); should extract: 1
Include: !(0 <= Out.extent.5); should extract: 1
Include: (0 <= Out.extent.5); should extract: 1
Include: 0; should extract: 0
Include: Out.extent.5; should extract: 0
Include: (uint64)17; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!(0 <= Out.extent.5)), (uint64)17)
0: 0, 0
1: Out.extent.5, 0
2: (0 <= Out.extent.5), 1
3: !(0 <= Out.extent.5), 1
4: uint64(!(0 <= Out.extent.5)), 1
5: (uint64)17, 0
6: (uint64)shift_left(uint64(!(0 <= Out.extent.5)), (uint64)17), 1
With variables (uint64)shift_left(uint64(!(0 <= Out.extent.5)), (uint64)17)
With lets: (uint64)shift_left(uint64(!(0 <= Out.extent.5)), (uint64)17)
Codegen: uint64, (uint64)shift_left(uint64(!(0 <= Out.extent.5)), (uint64)17)
Codegen: uint64, uint64(!(0 <= Out.extent.5))
Codegen: uint1, !(0 <= Out.extent.5)
Codegen: uint1, (0 <= Out.extent.5)
Codegen: uint1, !(0 > Out.extent.5)
Codegen: uint1, (0 > Out.extent.5)
Codegen: int32, 0
Codegen: int32, Out.extent.5
Codegen: uint64, (uint64)17
Codegen: uint64, (uint64)shift_left(uint64(!((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6)))), (int64)18)
Codegen: uint64, uint64(!((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))))
Codegen: uint1, !((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6)))
Codegen: uint1, ((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6)))
Codegen: uint1, (Out.min.6 <= 0)
Codegen: uint1, !(Out.min.6 > 0)
Codegen: uint1, (Out.min.6 > 0)
Codegen: int32, Out.min.6
Codegen: int32, 0
Codegen: uint1, (1 <= (Out.extent.6 + Out.min.6))
Codegen: uint1, !(1 > (Out.extent.6 + Out.min.6))
Codegen: uint1, (1 > (Out.extent.6 + Out.min.6))
Codegen: int32, 1
Codegen: int32, (Out.extent.6 + Out.min.6)
Codegen: int32, Out.extent.6
Codegen: int32, Out.min.6
Codegen: int64, (int64)18



Input to CSE (uint64)shift_left(uint64(!((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6)))), (uint64)18)
After removing lets: (uint64)shift_left(uint64(!((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6)))), (uint64)18)
Include: (uint64)shift_left(uint64(!((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6)))), (uint64)18); should extract: 1
Include: uint64(!((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6)))); should extract: 1
Include: !((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))); should extract: 1
Include: ((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))); should extract: 1
Include: (Out.min.6 <= 0); should extract: 1
Include: Out.min.6; should extract: 0
Include: 0; should extract: 0
Include: (1 <= (Out.extent.6 + Out.min.6)); should extract: 1
Include: 1; should extract: 0
Include: (Out.extent.6 + Out.min.6); should extract: 1
Include: Out.extent.6; should extract: 0
Include: Out.min.6; should extract: 0
Include: (uint64)18; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6)))), (uint64)18)
0: Out.min.6, 0
1: 0, 0
2: (Out.min.6 <= 0), 1
3: 1, 0
4: Out.extent.6, 0
5: (Out.extent.6 + Out.min.6), 1
6: (1 <= (Out.extent.6 + Out.min.6)), 1
7: ((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), 1
8: !((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))), 1
9: uint64(!((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6)))), 1
10: (uint64)18, 0
11: (uint64)shift_left(uint64(!((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6)))), (uint64)18), 1
With variables (uint64)shift_left(uint64(!((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6)))), (uint64)18)
With lets: (uint64)shift_left(uint64(!((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6)))), (uint64)18)
Codegen: uint64, (uint64)shift_left(uint64(!((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6)))), (uint64)18)
Codegen: uint64, uint64(!((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6))))
Codegen: uint1, !((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6)))
Codegen: uint1, ((Out.min.6 <= 0) && (1 <= (Out.extent.6 + Out.min.6)))
Codegen: uint1, (Out.min.6 <= 0)
Codegen: uint1, !(Out.min.6 > 0)
Codegen: uint1, (Out.min.6 > 0)
Codegen: int32, Out.min.6
Codegen: int32, 0
Codegen: uint1, (1 <= (Out.extent.6 + Out.min.6))
Codegen: uint1, !(1 > (Out.extent.6 + Out.min.6))
Codegen: uint1, (1 > (Out.extent.6 + Out.min.6))
Codegen: int32, 1
Codegen: int32, (Out.extent.6 + Out.min.6)
Codegen: int32, Out.extent.6
Codegen: int32, Out.min.6
Codegen: uint64, (uint64)18
Codegen: uint64, (uint64)shift_left(uint64(!(0 <= Out.extent.6)), (int64)19)
Codegen: uint64, uint64(!(0 <= Out.extent.6))
Codegen: uint1, !(0 <= Out.extent.6)
Codegen: uint1, (0 <= Out.extent.6)
Codegen: uint1, !(0 > Out.extent.6)
Codegen: uint1, (0 > Out.extent.6)
Codegen: int32, 0
Codegen: int32, Out.extent.6
Codegen: int64, (int64)19



Input to CSE (uint64)shift_left(uint64(!(0 <= Out.extent.6)), (uint64)19)
After removing lets: (uint64)shift_left(uint64(!(0 <= Out.extent.6)), (uint64)19)
Include: (uint64)shift_left(uint64(!(0 <= Out.extent.6)), (uint64)19); should extract: 1
Include: uint64(!(0 <= Out.extent.6)); should extract: 1
Include: !(0 <= Out.extent.6); should extract: 1
Include: (0 <= Out.extent.6); should extract: 1
Include: 0; should extract: 0
Include: Out.extent.6; should extract: 0
Include: (uint64)19; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!(0 <= Out.extent.6)), (uint64)19)
0: 0, 0
1: Out.extent.6, 0
2: (0 <= Out.extent.6), 1
3: !(0 <= Out.extent.6), 1
4: uint64(!(0 <= Out.extent.6)), 1
5: (uint64)19, 0
6: (uint64)shift_left(uint64(!(0 <= Out.extent.6)), (uint64)19), 1
With variables (uint64)shift_left(uint64(!(0 <= Out.extent.6)), (uint64)19)
With lets: (uint64)shift_left(uint64(!(0 <= Out.extent.6)), (uint64)19)
Codegen: uint64, (uint64)shift_left(uint64(!(0 <= Out.extent.6)), (uint64)19)
Codegen: uint64, uint64(!(0 <= Out.extent.6))
Codegen: uint1, !(0 <= Out.extent.6)
Codegen: uint1, (0 <= Out.extent.6)
Codegen: uint1, !(0 > Out.extent.6)
Codegen: uint1, (0 > Out.extent.6)
Codegen: int32, 0
Codegen: int32, Out.extent.6
Codegen: uint64, (uint64)19
Codegen: uint64, (uint64)shift_left(uint64(!((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7)))), (int64)20)
Codegen: uint64, uint64(!((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))))
Codegen: uint1, !((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7)))
Codegen: uint1, ((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7)))
Codegen: uint1, (Out.min.7 <= 0)
Codegen: uint1, !(Out.min.7 > 0)
Codegen: uint1, (Out.min.7 > 0)
Codegen: int32, Out.min.7
Codegen: int32, 0
Codegen: uint1, (16 <= (Out.extent.7 + Out.min.7))
Codegen: uint1, !(16 > (Out.extent.7 + Out.min.7))
Codegen: uint1, (16 > (Out.extent.7 + Out.min.7))
Codegen: int32, 16
Codegen: int32, (Out.extent.7 + Out.min.7)
Codegen: int32, Out.extent.7
Codegen: int32, Out.min.7
Codegen: int64, (int64)20



Input to CSE (uint64)shift_left(uint64(!((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7)))), (uint64)20)
After removing lets: (uint64)shift_left(uint64(!((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7)))), (uint64)20)
Include: (uint64)shift_left(uint64(!((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7)))), (uint64)20); should extract: 1
Include: uint64(!((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7)))); should extract: 1
Include: !((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))); should extract: 1
Include: ((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))); should extract: 1
Include: (Out.min.7 <= 0); should extract: 1
Include: Out.min.7; should extract: 0
Include: 0; should extract: 0
Include: (16 <= (Out.extent.7 + Out.min.7)); should extract: 1
Include: 16; should extract: 0
Include: (Out.extent.7 + Out.min.7); should extract: 1
Include: Out.extent.7; should extract: 0
Include: Out.min.7; should extract: 0
Include: (uint64)20; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7)))), (uint64)20)
0: Out.min.7, 0
1: 0, 0
2: (Out.min.7 <= 0), 1
3: 16, 0
4: Out.extent.7, 0
5: (Out.extent.7 + Out.min.7), 1
6: (16 <= (Out.extent.7 + Out.min.7)), 1
7: ((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), 1
8: !((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))), 1
9: uint64(!((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7)))), 1
10: (uint64)20, 0
11: (uint64)shift_left(uint64(!((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7)))), (uint64)20), 1
With variables (uint64)shift_left(uint64(!((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7)))), (uint64)20)
With lets: (uint64)shift_left(uint64(!((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7)))), (uint64)20)
Codegen: uint64, (uint64)shift_left(uint64(!((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7)))), (uint64)20)
Codegen: uint64, uint64(!((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7))))
Codegen: uint1, !((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7)))
Codegen: uint1, ((Out.min.7 <= 0) && (16 <= (Out.extent.7 + Out.min.7)))
Codegen: uint1, (Out.min.7 <= 0)
Codegen: uint1, !(Out.min.7 > 0)
Codegen: uint1, (Out.min.7 > 0)
Codegen: int32, Out.min.7
Codegen: int32, 0
Codegen: uint1, (16 <= (Out.extent.7 + Out.min.7))
Codegen: uint1, !(16 > (Out.extent.7 + Out.min.7))
Codegen: uint1, (16 > (Out.extent.7 + Out.min.7))
Codegen: int32, 16
Codegen: int32, (Out.extent.7 + Out.min.7)
Codegen: int32, Out.extent.7
Codegen: int32, Out.min.7
Codegen: uint64, (uint64)20
Codegen: uint64, (uint64)shift_left(uint64(!(0 <= Out.extent.7)), (int64)21)
Codegen: uint64, uint64(!(0 <= Out.extent.7))
Codegen: uint1, !(0 <= Out.extent.7)
Codegen: uint1, (0 <= Out.extent.7)
Codegen: uint1, !(0 > Out.extent.7)
Codegen: uint1, (0 > Out.extent.7)
Codegen: int32, 0
Codegen: int32, Out.extent.7
Codegen: int64, (int64)21



Input to CSE (uint64)shift_left(uint64(!(0 <= Out.extent.7)), (uint64)21)
After removing lets: (uint64)shift_left(uint64(!(0 <= Out.extent.7)), (uint64)21)
Include: (uint64)shift_left(uint64(!(0 <= Out.extent.7)), (uint64)21); should extract: 1
Include: uint64(!(0 <= Out.extent.7)); should extract: 1
Include: !(0 <= Out.extent.7); should extract: 1
Include: (0 <= Out.extent.7); should extract: 1
Include: 0; should extract: 0
Include: Out.extent.7; should extract: 0
Include: (uint64)21; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!(0 <= Out.extent.7)), (uint64)21)
0: 0, 0
1: Out.extent.7, 0
2: (0 <= Out.extent.7), 1
3: !(0 <= Out.extent.7), 1
4: uint64(!(0 <= Out.extent.7)), 1
5: (uint64)21, 0
6: (uint64)shift_left(uint64(!(0 <= Out.extent.7)), (uint64)21), 1
With variables (uint64)shift_left(uint64(!(0 <= Out.extent.7)), (uint64)21)
With lets: (uint64)shift_left(uint64(!(0 <= Out.extent.7)), (uint64)21)
Codegen: uint64, (uint64)shift_left(uint64(!(0 <= Out.extent.7)), (uint64)21)
Codegen: uint64, uint64(!(0 <= Out.extent.7))
Codegen: uint1, !(0 <= Out.extent.7)
Codegen: uint1, (0 <= Out.extent.7)
Codegen: uint1, !(0 > Out.extent.7)
Codegen: uint1, (0 > Out.extent.7)
Codegen: int32, 0
Codegen: int32, Out.extent.7
Codegen: uint64, (uint64)21
Codegen: uint64, (uint64)shift_left(uint64(!((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8)))), (int64)22)
Codegen: uint64, uint64(!((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))))
Codegen: uint1, !((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8)))
Codegen: uint1, ((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8)))
Codegen: uint1, (Out.min.8 <= 0)
Codegen: uint1, !(Out.min.8 > 0)
Codegen: uint1, (Out.min.8 > 0)
Codegen: int32, Out.min.8
Codegen: int32, 0
Codegen: uint1, (4 <= (Out.extent.8 + Out.min.8))
Codegen: uint1, !(4 > (Out.extent.8 + Out.min.8))
Codegen: uint1, (4 > (Out.extent.8 + Out.min.8))
Codegen: int32, 4
Codegen: int32, (Out.extent.8 + Out.min.8)
Codegen: int32, Out.extent.8
Codegen: int32, Out.min.8
Codegen: int64, (int64)22



Input to CSE (uint64)shift_left(uint64(!((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8)))), (uint64)22)
After removing lets: (uint64)shift_left(uint64(!((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8)))), (uint64)22)
Include: (uint64)shift_left(uint64(!((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8)))), (uint64)22); should extract: 1
Include: uint64(!((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8)))); should extract: 1
Include: !((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))); should extract: 1
Include: ((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))); should extract: 1
Include: (Out.min.8 <= 0); should extract: 1
Include: Out.min.8; should extract: 0
Include: 0; should extract: 0
Include: (4 <= (Out.extent.8 + Out.min.8)); should extract: 1
Include: 4; should extract: 0
Include: (Out.extent.8 + Out.min.8); should extract: 1
Include: Out.extent.8; should extract: 0
Include: Out.min.8; should extract: 0
Include: (uint64)22; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8)))), (uint64)22)
0: Out.min.8, 0
1: 0, 0
2: (Out.min.8 <= 0), 1
3: 4, 0
4: Out.extent.8, 0
5: (Out.extent.8 + Out.min.8), 1
6: (4 <= (Out.extent.8 + Out.min.8)), 1
7: ((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), 1
8: !((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))), 1
9: uint64(!((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8)))), 1
10: (uint64)22, 0
11: (uint64)shift_left(uint64(!((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8)))), (uint64)22), 1
With variables (uint64)shift_left(uint64(!((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8)))), (uint64)22)
With lets: (uint64)shift_left(uint64(!((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8)))), (uint64)22)
Codegen: uint64, (uint64)shift_left(uint64(!((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8)))), (uint64)22)
Codegen: uint64, uint64(!((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8))))
Codegen: uint1, !((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8)))
Codegen: uint1, ((Out.min.8 <= 0) && (4 <= (Out.extent.8 + Out.min.8)))
Codegen: uint1, (Out.min.8 <= 0)
Codegen: uint1, !(Out.min.8 > 0)
Codegen: uint1, (Out.min.8 > 0)
Codegen: int32, Out.min.8
Codegen: int32, 0
Codegen: uint1, (4 <= (Out.extent.8 + Out.min.8))
Codegen: uint1, !(4 > (Out.extent.8 + Out.min.8))
Codegen: uint1, (4 > (Out.extent.8 + Out.min.8))
Codegen: int32, 4
Codegen: int32, (Out.extent.8 + Out.min.8)
Codegen: int32, Out.extent.8
Codegen: int32, Out.min.8
Codegen: uint64, (uint64)22
Codegen: uint64, (uint64)shift_left(uint64(!(0 <= Out.extent.8)), (int64)23)
Codegen: uint64, uint64(!(0 <= Out.extent.8))
Codegen: uint1, !(0 <= Out.extent.8)
Codegen: uint1, (0 <= Out.extent.8)
Codegen: uint1, !(0 > Out.extent.8)
Codegen: uint1, (0 > Out.extent.8)
Codegen: int32, 0
Codegen: int32, Out.extent.8
Codegen: int64, (int64)23



Input to CSE (uint64)shift_left(uint64(!(0 <= Out.extent.8)), (uint64)23)
After removing lets: (uint64)shift_left(uint64(!(0 <= Out.extent.8)), (uint64)23)
Include: (uint64)shift_left(uint64(!(0 <= Out.extent.8)), (uint64)23); should extract: 1
Include: uint64(!(0 <= Out.extent.8)); should extract: 1
Include: !(0 <= Out.extent.8); should extract: 1
Include: (0 <= Out.extent.8); should extract: 1
Include: 0; should extract: 0
Include: Out.extent.8; should extract: 0
Include: (uint64)23; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!(0 <= Out.extent.8)), (uint64)23)
0: 0, 0
1: Out.extent.8, 0
2: (0 <= Out.extent.8), 1
3: !(0 <= Out.extent.8), 1
4: uint64(!(0 <= Out.extent.8)), 1
5: (uint64)23, 0
6: (uint64)shift_left(uint64(!(0 <= Out.extent.8)), (uint64)23), 1
With variables (uint64)shift_left(uint64(!(0 <= Out.extent.8)), (uint64)23)
With lets: (uint64)shift_left(uint64(!(0 <= Out.extent.8)), (uint64)23)
Codegen: uint64, (uint64)shift_left(uint64(!(0 <= Out.extent.8)), (uint64)23)
Codegen: uint64, uint64(!(0 <= Out.extent.8))
Codegen: uint1, !(0 <= Out.extent.8)
Codegen: uint1, (0 <= Out.extent.8)
Codegen: uint1, !(0 > Out.extent.8)
Codegen: uint1, (0 > Out.extent.8)
Codegen: int32, 0
Codegen: int32, Out.extent.8
Codegen: uint64, (uint64)23
Codegen: uint64, (uint64)shift_left(uint64(!((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9)))), (int64)24)
Codegen: uint64, uint64(!((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))))
Codegen: uint1, !((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9)))
Codegen: uint1, ((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9)))
Codegen: uint1, (Out.min.9 <= 0)
Codegen: uint1, !(Out.min.9 > 0)
Codegen: uint1, (Out.min.9 > 0)
Codegen: int32, Out.min.9
Codegen: int32, 0
Codegen: uint1, ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))
Codegen: uint1, !((P.extent.1/3600) > (Out.extent.9 + Out.min.9))
Codegen: uint1, ((P.extent.1/3600) > (Out.extent.9 + Out.min.9))
Codegen: int32, (P.extent.1/3600)



Input to CSE ((div_round_to_zero(P.extent.1, 3600) - bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), shift_right(3600, 31))) + bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), bitwise_not(shift_right(3600, 31))))
After removing lets: ((div_round_to_zero(P.extent.1, 3600) - bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), shift_right(3600, 31))) + bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), bitwise_not(shift_right(3600, 31))))
Include: ((div_round_to_zero(P.extent.1, 3600) - bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), shift_right(3600, 31))) + bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), bitwise_not(shift_right(3600, 31)))); should extract: 1
Include: (div_round_to_zero(P.extent.1, 3600) - bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), shift_right(3600, 31))); should extract: 1
Include: div_round_to_zero(P.extent.1, 3600); should extract: 1
Include: P.extent.1; should extract: 0
Include: 3600; should extract: 0
Include: bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), shift_right(3600, 31)); should extract: 1
Include: shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31); should extract: 1
Include: (P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)); should extract: 1
Include: P.extent.1; should extract: 0
Include: (div_round_to_zero(P.extent.1, 3600)*3600); should extract: 0
Include: div_round_to_zero(P.extent.1, 3600); should extract: 1
Include: 3600; should extract: 0
Include: 31; should extract: 0
Include: shift_right(3600, 31); should extract: 1
Include: 3600; should extract: 0
Include: 31; should extract: 0
Include: bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), bitwise_not(shift_right(3600, 31))); should extract: 1
Include: shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31); should extract: 1
Include: bitwise_not(shift_right(3600, 31)); should extract: 1
Include: shift_right(3600, 31); should extract: 1
Canonical form without lets ((div_round_to_zero(P.extent.1, 3600) - bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), shift_right(3600, 31))) + bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), bitwise_not(shift_right(3600, 31))))
0: P.extent.1, 0
1: 3600, 0
2: div_round_to_zero(P.extent.1, 3600), 2
3: (div_round_to_zero(P.extent.1, 3600)*3600), 0
4: (P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 1
5: 31, 0
6: shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), 2
7: shift_right(3600, 31), 2
8: bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), shift_right(3600, 31)), 1
9: (div_round_to_zero(P.extent.1, 3600) - bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), shift_right(3600, 31))), 1
10: bitwise_not(shift_right(3600, 31)), 1
11: bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), bitwise_not(shift_right(3600, 31))), 1
12: ((div_round_to_zero(P.extent.1, 3600) - bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), shift_right(3600, 31))) + bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), bitwise_not(shift_right(3600, 31)))), 1
With variables ((t61 - bitwise_and(t62, t63)) + bitwise_and(t62, bitwise_not(t63)))
With lets: (let t61 = div_round_to_zero(P.extent.1, 3600) in (let t62 = shift_right((P.extent.1 - (t61*3600)), 31) in (let t63 = shift_right(3600, 31) in ((t61 - bitwise_and(t62, t63)) + bitwise_and(t62, bitwise_not(t63))))))
Codegen: int32, (let t61 = div_round_to_zero(P.extent.1, 3600) in (let t62 = shift_right((P.extent.1 - (t61*3600)), 31) in (let t63 = shift_right(3600, 31) in ((t61 - bitwise_and(t62, t63)) + bitwise_and(t62, bitwise_not(t63))))))
Codegen: int32, div_round_to_zero(P.extent.1, 3600)
Codegen: int32, P.extent.1
Codegen: int32, 3600
Codegen: int32, (let t62 = shift_right((P.extent.1 - (t61*3600)), 31) in (let t63 = shift_right(3600, 31) in ((t61 - bitwise_and(t62, t63)) + bitwise_and(t62, bitwise_not(t63)))))
Codegen: int32, shift_right((P.extent.1 - (t61*3600)), 31)
Codegen: int32, (P.extent.1 - (t61*3600))
Codegen: int32, P.extent.1
Codegen: int32, (t61*3600)
Codegen: int32, t61
Codegen: int32, 3600
Codegen: int32, 31



Input to CSE shift_right((P.extent.1 - (t61*3600)), (uint32)31)
After removing lets: shift_right((P.extent.1 - (t61*3600)), (uint32)31)
Include: shift_right((P.extent.1 - (t61*3600)), (uint32)31); should extract: 1
Include: (P.extent.1 - (t61*3600)); should extract: 1
Include: P.extent.1; should extract: 0
Include: (t61*3600); should extract: 0
Include: t61; should extract: 0
Include: 3600; should extract: 0
Include: (uint32)31; should extract: 0
Canonical form without lets shift_right((P.extent.1 - (t61*3600)), (uint32)31)
0: P.extent.1, 0
1: t61, 0
2: 3600, 0
3: (t61*3600), 0
4: (P.extent.1 - (t61*3600)), 1
5: (uint32)31, 0
6: shift_right((P.extent.1 - (t61*3600)), (uint32)31), 1
With variables shift_right((P.extent.1 - (t61*3600)), (uint32)31)
With lets: shift_right((P.extent.1 - (t61*3600)), (uint32)31)
Codegen: int32, shift_right((P.extent.1 - (t61*3600)), (uint32)31)
Codegen: int32, (P.extent.1 - (t61*3600))
Codegen: int32, P.extent.1
Codegen: int32, (t61*3600)
Codegen: int32, t61
Codegen: int32, 3600
Codegen: uint32, (uint32)31
Codegen: int32, (let t63 = shift_right(3600, 31) in ((t61 - bitwise_and(t62, t63)) + bitwise_and(t62, bitwise_not(t63))))
Codegen: int32, shift_right(3600, 31)
Codegen: int32, 3600
Codegen: int32, 31



Input to CSE shift_right(3600, (uint32)31)
After removing lets: shift_right(3600, (uint32)31)
Include: shift_right(3600, (uint32)31); should extract: 1
Include: 3600; should extract: 0
Include: (uint32)31; should extract: 0
Canonical form without lets shift_right(3600, (uint32)31)
0: 3600, 0
1: (uint32)31, 0
2: shift_right(3600, (uint32)31), 1
With variables shift_right(3600, (uint32)31)
With lets: shift_right(3600, (uint32)31)
Codegen: int32, shift_right(3600, (uint32)31)
Codegen: int32, 3600
Codegen: uint32, (uint32)31
Codegen: int32, ((t61 - bitwise_and(t62, t63)) + bitwise_and(t62, bitwise_not(t63)))
Codegen: int32, (t61 - bitwise_and(t62, t63))
Codegen: int32, t61
Codegen: int32, bitwise_and(t62, t63)
Codegen: int32, t62
Codegen: int32, t63
Codegen: int32, bitwise_and(t62, bitwise_not(t63))
Codegen: int32, t62
Codegen: int32, bitwise_not(t63)
Codegen: int32, t63
Codegen: int32, (Out.extent.9 + Out.min.9)
Codegen: int32, Out.extent.9
Codegen: int32, Out.min.9
Codegen: int64, (int64)24



Input to CSE (uint64)shift_left(uint64(!((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9)))), (uint64)24)
After removing lets: (uint64)shift_left(uint64(!((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9)))), (uint64)24)
Include: (uint64)shift_left(uint64(!((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9)))), (uint64)24); should extract: 1
Include: uint64(!((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9)))); should extract: 1
Include: !((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))); should extract: 1
Include: ((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))); should extract: 1
Include: (Out.min.9 <= 0); should extract: 1
Include: Out.min.9; should extract: 0
Include: 0; should extract: 0
Include: ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9)); should extract: 1
Include: (P.extent.1/3600); should extract: 0
Include: P.extent.1; should extract: 0
Include: 3600; should extract: 0
Include: (Out.extent.9 + Out.min.9); should extract: 1
Include: Out.extent.9; should extract: 0
Include: Out.min.9; should extract: 0
Include: (uint64)24; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9)))), (uint64)24)
0: Out.min.9, 0
1: 0, 0
2: (Out.min.9 <= 0), 1
3: P.extent.1, 0
4: 3600, 0
5: (P.extent.1/3600), 0
6: Out.extent.9, 0
7: (Out.extent.9 + Out.min.9), 1
8: ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9)), 1
9: ((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), 1
10: !((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))), 1
11: uint64(!((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9)))), 1
12: (uint64)24, 0
13: (uint64)shift_left(uint64(!((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9)))), (uint64)24), 1
With variables (uint64)shift_left(uint64(!((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9)))), (uint64)24)
With lets: (uint64)shift_left(uint64(!((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9)))), (uint64)24)
Codegen: uint64, (uint64)shift_left(uint64(!((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9)))), (uint64)24)
Codegen: uint64, uint64(!((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))))
Codegen: uint1, !((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9)))
Codegen: uint1, ((Out.min.9 <= 0) && ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9)))
Codegen: uint1, (Out.min.9 <= 0)
Codegen: uint1, !(Out.min.9 > 0)
Codegen: uint1, (Out.min.9 > 0)
Codegen: int32, Out.min.9
Codegen: int32, 0
Codegen: uint1, ((P.extent.1/3600) <= (Out.extent.9 + Out.min.9))
Codegen: uint1, !((P.extent.1/3600) > (Out.extent.9 + Out.min.9))
Codegen: uint1, ((P.extent.1/3600) > (Out.extent.9 + Out.min.9))
Codegen: int32, (P.extent.1/3600)



Input to CSE ((div_round_to_zero(P.extent.1, 3600) - bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), shift_right(3600, 31))) + bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), bitwise_not(shift_right(3600, 31))))
After removing lets: ((div_round_to_zero(P.extent.1, 3600) - bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), shift_right(3600, 31))) + bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), bitwise_not(shift_right(3600, 31))))
Include: ((div_round_to_zero(P.extent.1, 3600) - bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), shift_right(3600, 31))) + bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), bitwise_not(shift_right(3600, 31)))); should extract: 1
Include: (div_round_to_zero(P.extent.1, 3600) - bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), shift_right(3600, 31))); should extract: 1
Include: div_round_to_zero(P.extent.1, 3600); should extract: 1
Include: P.extent.1; should extract: 0
Include: 3600; should extract: 0
Include: bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), shift_right(3600, 31)); should extract: 1
Include: shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31); should extract: 1
Include: (P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)); should extract: 1
Include: P.extent.1; should extract: 0
Include: (div_round_to_zero(P.extent.1, 3600)*3600); should extract: 0
Include: div_round_to_zero(P.extent.1, 3600); should extract: 1
Include: 3600; should extract: 0
Include: 31; should extract: 0
Include: shift_right(3600, 31); should extract: 1
Include: 3600; should extract: 0
Include: 31; should extract: 0
Include: bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), bitwise_not(shift_right(3600, 31))); should extract: 1
Include: shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31); should extract: 1
Include: bitwise_not(shift_right(3600, 31)); should extract: 1
Include: shift_right(3600, 31); should extract: 1
Canonical form without lets ((div_round_to_zero(P.extent.1, 3600) - bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), shift_right(3600, 31))) + bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), bitwise_not(shift_right(3600, 31))))
0: P.extent.1, 0
1: 3600, 0
2: div_round_to_zero(P.extent.1, 3600), 2
3: (div_round_to_zero(P.extent.1, 3600)*3600), 0
4: (P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 1
5: 31, 0
6: shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), 2
7: shift_right(3600, 31), 2
8: bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), shift_right(3600, 31)), 1
9: (div_round_to_zero(P.extent.1, 3600) - bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), shift_right(3600, 31))), 1
10: bitwise_not(shift_right(3600, 31)), 1
11: bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), bitwise_not(shift_right(3600, 31))), 1
12: ((div_round_to_zero(P.extent.1, 3600) - bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), shift_right(3600, 31))) + bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), bitwise_not(shift_right(3600, 31)))), 1
With variables ((t64 - bitwise_and(t65, t66)) + bitwise_and(t65, bitwise_not(t66)))
With lets: (let t64 = div_round_to_zero(P.extent.1, 3600) in (let t65 = shift_right((P.extent.1 - (t64*3600)), 31) in (let t66 = shift_right(3600, 31) in ((t64 - bitwise_and(t65, t66)) + bitwise_and(t65, bitwise_not(t66))))))
Codegen: int32, (let t64 = div_round_to_zero(P.extent.1, 3600) in (let t65 = shift_right((P.extent.1 - (t64*3600)), 31) in (let t66 = shift_right(3600, 31) in ((t64 - bitwise_and(t65, t66)) + bitwise_and(t65, bitwise_not(t66))))))
Codegen: int32, div_round_to_zero(P.extent.1, 3600)
Codegen: int32, P.extent.1
Codegen: int32, 3600
Codegen: int32, (let t65 = shift_right((P.extent.1 - (t64*3600)), 31) in (let t66 = shift_right(3600, 31) in ((t64 - bitwise_and(t65, t66)) + bitwise_and(t65, bitwise_not(t66)))))
Codegen: int32, shift_right((P.extent.1 - (t64*3600)), 31)
Codegen: int32, (P.extent.1 - (t64*3600))
Codegen: int32, P.extent.1
Codegen: int32, (t64*3600)
Codegen: int32, t64
Codegen: int32, 3600
Codegen: int32, 31



Input to CSE shift_right((P.extent.1 - (t64*3600)), (uint32)31)
After removing lets: shift_right((P.extent.1 - (t64*3600)), (uint32)31)
Include: shift_right((P.extent.1 - (t64*3600)), (uint32)31); should extract: 1
Include: (P.extent.1 - (t64*3600)); should extract: 1
Include: P.extent.1; should extract: 0
Include: (t64*3600); should extract: 0
Include: t64; should extract: 0
Include: 3600; should extract: 0
Include: (uint32)31; should extract: 0
Canonical form without lets shift_right((P.extent.1 - (t64*3600)), (uint32)31)
0: P.extent.1, 0
1: t64, 0
2: 3600, 0
3: (t64*3600), 0
4: (P.extent.1 - (t64*3600)), 1
5: (uint32)31, 0
6: shift_right((P.extent.1 - (t64*3600)), (uint32)31), 1
With variables shift_right((P.extent.1 - (t64*3600)), (uint32)31)
With lets: shift_right((P.extent.1 - (t64*3600)), (uint32)31)
Codegen: int32, shift_right((P.extent.1 - (t64*3600)), (uint32)31)
Codegen: int32, (P.extent.1 - (t64*3600))
Codegen: int32, P.extent.1
Codegen: int32, (t64*3600)
Codegen: int32, t64
Codegen: int32, 3600
Codegen: uint32, (uint32)31
Codegen: int32, (let t66 = shift_right(3600, 31) in ((t64 - bitwise_and(t65, t66)) + bitwise_and(t65, bitwise_not(t66))))
Codegen: int32, shift_right(3600, 31)
Codegen: int32, 3600
Codegen: int32, 31



Input to CSE shift_right(3600, (uint32)31)
After removing lets: shift_right(3600, (uint32)31)
Include: shift_right(3600, (uint32)31); should extract: 1
Include: 3600; should extract: 0
Include: (uint32)31; should extract: 0
Canonical form without lets shift_right(3600, (uint32)31)
0: 3600, 0
1: (uint32)31, 0
2: shift_right(3600, (uint32)31), 1
With variables shift_right(3600, (uint32)31)
With lets: shift_right(3600, (uint32)31)
Codegen: int32, shift_right(3600, (uint32)31)
Codegen: int32, 3600
Codegen: uint32, (uint32)31
Codegen: int32, ((t64 - bitwise_and(t65, t66)) + bitwise_and(t65, bitwise_not(t66)))
Codegen: int32, (t64 - bitwise_and(t65, t66))
Codegen: int32, t64
Codegen: int32, bitwise_and(t65, t66)
Codegen: int32, t65
Codegen: int32, t66
Codegen: int32, bitwise_and(t65, bitwise_not(t66))
Codegen: int32, t65
Codegen: int32, bitwise_not(t66)
Codegen: int32, t66
Codegen: int32, (Out.extent.9 + Out.min.9)
Codegen: int32, Out.extent.9
Codegen: int32, Out.min.9
Codegen: uint64, (uint64)24
Codegen: uint64, (uint64)shift_left(uint64(!(0 <= Out.extent.9)), (int64)25)
Codegen: uint64, uint64(!(0 <= Out.extent.9))
Codegen: uint1, !(0 <= Out.extent.9)
Codegen: uint1, (0 <= Out.extent.9)
Codegen: uint1, !(0 > Out.extent.9)
Codegen: uint1, (0 > Out.extent.9)
Codegen: int32, 0
Codegen: int32, Out.extent.9
Codegen: int64, (int64)25



Input to CSE (uint64)shift_left(uint64(!(0 <= Out.extent.9)), (uint64)25)
After removing lets: (uint64)shift_left(uint64(!(0 <= Out.extent.9)), (uint64)25)
Include: (uint64)shift_left(uint64(!(0 <= Out.extent.9)), (uint64)25); should extract: 1
Include: uint64(!(0 <= Out.extent.9)); should extract: 1
Include: !(0 <= Out.extent.9); should extract: 1
Include: (0 <= Out.extent.9); should extract: 1
Include: 0; should extract: 0
Include: Out.extent.9; should extract: 0
Include: (uint64)25; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!(0 <= Out.extent.9)), (uint64)25)
0: 0, 0
1: Out.extent.9, 0
2: (0 <= Out.extent.9), 1
3: !(0 <= Out.extent.9), 1
4: uint64(!(0 <= Out.extent.9)), 1
5: (uint64)25, 0
6: (uint64)shift_left(uint64(!(0 <= Out.extent.9)), (uint64)25), 1
With variables (uint64)shift_left(uint64(!(0 <= Out.extent.9)), (uint64)25)
With lets: (uint64)shift_left(uint64(!(0 <= Out.extent.9)), (uint64)25)
Codegen: uint64, (uint64)shift_left(uint64(!(0 <= Out.extent.9)), (uint64)25)
Codegen: uint64, uint64(!(0 <= Out.extent.9))
Codegen: uint1, !(0 <= Out.extent.9)
Codegen: uint1, (0 <= Out.extent.9)
Codegen: uint1, !(0 > Out.extent.9)
Codegen: uint1, (0 > Out.extent.9)
Codegen: int32, 0
Codegen: int32, Out.extent.9
Codegen: uint64, (uint64)25
Codegen: uint64, (uint64)shift_left(uint64(!(0 <= P.extent.0)), (int64)26)
Codegen: uint64, uint64(!(0 <= P.extent.0))
Codegen: uint1, !(0 <= P.extent.0)
Codegen: uint1, (0 <= P.extent.0)
Codegen: uint1, !(0 > P.extent.0)
Codegen: uint1, (0 > P.extent.0)
Codegen: int32, 0
Codegen: int32, P.extent.0
Codegen: int64, (int64)26



Input to CSE (uint64)shift_left(uint64(!(0 <= P.extent.0)), (uint64)26)
After removing lets: (uint64)shift_left(uint64(!(0 <= P.extent.0)), (uint64)26)
Include: (uint64)shift_left(uint64(!(0 <= P.extent.0)), (uint64)26); should extract: 1
Include: uint64(!(0 <= P.extent.0)); should extract: 1
Include: !(0 <= P.extent.0); should extract: 1
Include: (0 <= P.extent.0); should extract: 1
Include: 0; should extract: 0
Include: P.extent.0; should extract: 0
Include: (uint64)26; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!(0 <= P.extent.0)), (uint64)26)
0: 0, 0
1: P.extent.0, 0
2: (0 <= P.extent.0), 1
3: !(0 <= P.extent.0), 1
4: uint64(!(0 <= P.extent.0)), 1
5: (uint64)26, 0
6: (uint64)shift_left(uint64(!(0 <= P.extent.0)), (uint64)26), 1
With variables (uint64)shift_left(uint64(!(0 <= P.extent.0)), (uint64)26)
With lets: (uint64)shift_left(uint64(!(0 <= P.extent.0)), (uint64)26)
Codegen: uint64, (uint64)shift_left(uint64(!(0 <= P.extent.0)), (uint64)26)
Codegen: uint64, uint64(!(0 <= P.extent.0))
Codegen: uint1, !(0 <= P.extent.0)
Codegen: uint1, (0 <= P.extent.0)
Codegen: uint1, !(0 > P.extent.0)
Codegen: uint1, (0 > P.extent.0)
Codegen: int32, 0
Codegen: int32, P.extent.0
Codegen: uint64, (uint64)26
Codegen: uint64, (uint64)shift_left(uint64(!(0 <= P.extent.1)), (int64)27)
Codegen: uint64, uint64(!(0 <= P.extent.1))
Codegen: uint1, !(0 <= P.extent.1)
Codegen: uint1, (0 <= P.extent.1)
Codegen: uint1, !(0 > P.extent.1)
Codegen: uint1, (0 > P.extent.1)
Codegen: int32, 0
Codegen: int32, P.extent.1
Codegen: int64, (int64)27



Input to CSE (uint64)shift_left(uint64(!(0 <= P.extent.1)), (uint64)27)
After removing lets: (uint64)shift_left(uint64(!(0 <= P.extent.1)), (uint64)27)
Include: (uint64)shift_left(uint64(!(0 <= P.extent.1)), (uint64)27); should extract: 1
Include: uint64(!(0 <= P.extent.1)); should extract: 1
Include: !(0 <= P.extent.1); should extract: 1
Include: (0 <= P.extent.1); should extract: 1
Include: 0; should extract: 0
Include: P.extent.1; should extract: 0
Include: (uint64)27; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!(0 <= P.extent.1)), (uint64)27)
0: 0, 0
1: P.extent.1, 0
2: (0 <= P.extent.1), 1
3: !(0 <= P.extent.1), 1
4: uint64(!(0 <= P.extent.1)), 1
5: (uint64)27, 0
6: (uint64)shift_left(uint64(!(0 <= P.extent.1)), (uint64)27), 1
With variables (uint64)shift_left(uint64(!(0 <= P.extent.1)), (uint64)27)
With lets: (uint64)shift_left(uint64(!(0 <= P.extent.1)), (uint64)27)
Codegen: uint64, (uint64)shift_left(uint64(!(0 <= P.extent.1)), (uint64)27)
Codegen: uint64, uint64(!(0 <= P.extent.1))
Codegen: uint1, !(0 <= P.extent.1)
Codegen: uint1, (0 <= P.extent.1)
Codegen: uint1, !(0 > P.extent.1)
Codegen: uint1, (0 > P.extent.1)
Codegen: int32, 0
Codegen: int32, P.extent.1
Codegen: uint64, (uint64)27
Codegen: uint64, (uint64)shift_left(uint64(!(0 <= W.extent.0)), (int64)28)
Codegen: uint64, uint64(!(0 <= W.extent.0))
Codegen: uint1, !(0 <= W.extent.0)
Codegen: uint1, (0 <= W.extent.0)
Codegen: uint1, !(0 > W.extent.0)
Codegen: uint1, (0 > W.extent.0)
Codegen: int32, 0
Codegen: int32, W.extent.0
Codegen: int64, (int64)28



Input to CSE (uint64)shift_left(uint64(!(0 <= W.extent.0)), (uint64)28)
After removing lets: (uint64)shift_left(uint64(!(0 <= W.extent.0)), (uint64)28)
Include: (uint64)shift_left(uint64(!(0 <= W.extent.0)), (uint64)28); should extract: 1
Include: uint64(!(0 <= W.extent.0)); should extract: 1
Include: !(0 <= W.extent.0); should extract: 1
Include: (0 <= W.extent.0); should extract: 1
Include: 0; should extract: 0
Include: W.extent.0; should extract: 0
Include: (uint64)28; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!(0 <= W.extent.0)), (uint64)28)
0: 0, 0
1: W.extent.0, 0
2: (0 <= W.extent.0), 1
3: !(0 <= W.extent.0), 1
4: uint64(!(0 <= W.extent.0)), 1
5: (uint64)28, 0
6: (uint64)shift_left(uint64(!(0 <= W.extent.0)), (uint64)28), 1
With variables (uint64)shift_left(uint64(!(0 <= W.extent.0)), (uint64)28)
With lets: (uint64)shift_left(uint64(!(0 <= W.extent.0)), (uint64)28)
Codegen: uint64, (uint64)shift_left(uint64(!(0 <= W.extent.0)), (uint64)28)
Codegen: uint64, uint64(!(0 <= W.extent.0))
Codegen: uint1, !(0 <= W.extent.0)
Codegen: uint1, (0 <= W.extent.0)
Codegen: uint1, !(0 > W.extent.0)
Codegen: uint1, (0 > W.extent.0)
Codegen: int32, 0
Codegen: int32, W.extent.0
Codegen: uint64, (uint64)28
Codegen: uint64, (uint64)shift_left(uint64(!(0 <= W.extent.1)), (int64)29)
Codegen: uint64, uint64(!(0 <= W.extent.1))
Codegen: uint1, !(0 <= W.extent.1)
Codegen: uint1, (0 <= W.extent.1)
Codegen: uint1, !(0 > W.extent.1)
Codegen: uint1, (0 > W.extent.1)
Codegen: int32, 0
Codegen: int32, W.extent.1
Codegen: int64, (int64)29



Input to CSE (uint64)shift_left(uint64(!(0 <= W.extent.1)), (uint64)29)
After removing lets: (uint64)shift_left(uint64(!(0 <= W.extent.1)), (uint64)29)
Include: (uint64)shift_left(uint64(!(0 <= W.extent.1)), (uint64)29); should extract: 1
Include: uint64(!(0 <= W.extent.1)); should extract: 1
Include: !(0 <= W.extent.1); should extract: 1
Include: (0 <= W.extent.1); should extract: 1
Include: 0; should extract: 0
Include: W.extent.1; should extract: 0
Include: (uint64)29; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!(0 <= W.extent.1)), (uint64)29)
0: 0, 0
1: W.extent.1, 0
2: (0 <= W.extent.1), 1
3: !(0 <= W.extent.1), 1
4: uint64(!(0 <= W.extent.1)), 1
5: (uint64)29, 0
6: (uint64)shift_left(uint64(!(0 <= W.extent.1)), (uint64)29), 1
With variables (uint64)shift_left(uint64(!(0 <= W.extent.1)), (uint64)29)
With lets: (uint64)shift_left(uint64(!(0 <= W.extent.1)), (uint64)29)
Codegen: uint64, (uint64)shift_left(uint64(!(0 <= W.extent.1)), (uint64)29)
Codegen: uint64, uint64(!(0 <= W.extent.1))
Codegen: uint1, !(0 <= W.extent.1)
Codegen: uint1, (0 <= W.extent.1)
Codegen: uint1, !(0 > W.extent.1)
Codegen: uint1, (0 > W.extent.1)
Codegen: int32, 0
Codegen: int32, W.extent.1
Codegen: uint64, (uint64)29
Codegen: uint64, (uint64)shift_left(uint64(!(Out.stride.0 == 1)), (int64)30)
Codegen: uint64, uint64(!(Out.stride.0 == 1))
Codegen: uint1, !(Out.stride.0 == 1)
Codegen: uint1, (Out.stride.0 == 1)
Codegen: int32, Out.stride.0
Codegen: int32, 1
Codegen: int64, (int64)30



Input to CSE (uint64)shift_left(uint64(!(Out.stride.0 == 1)), (uint64)30)
After removing lets: (uint64)shift_left(uint64(!(Out.stride.0 == 1)), (uint64)30)
Include: (uint64)shift_left(uint64(!(Out.stride.0 == 1)), (uint64)30); should extract: 1
Include: uint64(!(Out.stride.0 == 1)); should extract: 1
Include: !(Out.stride.0 == 1); should extract: 1
Include: (Out.stride.0 == 1); should extract: 1
Include: Out.stride.0; should extract: 0
Include: 1; should extract: 0
Include: (uint64)30; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!(Out.stride.0 == 1)), (uint64)30)
0: Out.stride.0, 0
1: 1, 0
2: (Out.stride.0 == 1), 1
3: !(Out.stride.0 == 1), 1
4: uint64(!(Out.stride.0 == 1)), 1
5: (uint64)30, 0
6: (uint64)shift_left(uint64(!(Out.stride.0 == 1)), (uint64)30), 1
With variables (uint64)shift_left(uint64(!(Out.stride.0 == 1)), (uint64)30)
With lets: (uint64)shift_left(uint64(!(Out.stride.0 == 1)), (uint64)30)
Codegen: uint64, (uint64)shift_left(uint64(!(Out.stride.0 == 1)), (uint64)30)
Codegen: uint64, uint64(!(Out.stride.0 == 1))
Codegen: uint1, !(Out.stride.0 == 1)
Codegen: uint1, (Out.stride.0 == 1)
Codegen: int32, Out.stride.0
Codegen: int32, 1
Codegen: uint64, (uint64)30
Codegen: uint64, (uint64)shift_left(uint64(!(P.stride.0 == 1)), (int64)31)
Codegen: uint64, uint64(!(P.stride.0 == 1))
Codegen: uint1, !(P.stride.0 == 1)
Codegen: uint1, (P.stride.0 == 1)
Codegen: int32, P.stride.0
Codegen: int32, 1
Codegen: int64, (int64)31



Input to CSE (uint64)shift_left(uint64(!(P.stride.0 == 1)), (uint64)31)
After removing lets: (uint64)shift_left(uint64(!(P.stride.0 == 1)), (uint64)31)
Include: (uint64)shift_left(uint64(!(P.stride.0 == 1)), (uint64)31); should extract: 1
Include: uint64(!(P.stride.0 == 1)); should extract: 1
Include: !(P.stride.0 == 1); should extract: 1
Include: (P.stride.0 == 1); should extract: 1
Include: P.stride.0; should extract: 0
Include: 1; should extract: 0
Include: (uint64)31; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!(P.stride.0 == 1)), (uint64)31)
0: P.stride.0, 0
1: 1, 0
2: (P.stride.0 == 1), 1
3: !(P.stride.0 == 1), 1
4: uint64(!(P.stride.0 == 1)), 1
5: (uint64)31, 0
6: (uint64)shift_left(uint64(!(P.stride.0 == 1)), (uint64)31), 1
With variables (uint64)shift_left(uint64(!(P.stride.0 == 1)), (uint64)31)
With lets: (uint64)shift_left(uint64(!(P.stride.0 == 1)), (uint64)31)
Codegen: uint64, (uint64)shift_left(uint64(!(P.stride.0 == 1)), (uint64)31)
Codegen: uint64, uint64(!(P.stride.0 == 1))
Codegen: uint1, !(P.stride.0 == 1)
Codegen: uint1, (P.stride.0 == 1)
Codegen: int32, P.stride.0
Codegen: int32, 1
Codegen: uint64, (uint64)31
Codegen: uint64, (uint64)shift_left(uint64(!(W.stride.0 == 1)), (int64)32)
Codegen: uint64, uint64(!(W.stride.0 == 1))
Codegen: uint1, !(W.stride.0 == 1)
Codegen: uint1, (W.stride.0 == 1)
Codegen: int32, W.stride.0
Codegen: int32, 1
Codegen: int64, (int64)32



Input to CSE (uint64)shift_left(uint64(!(W.stride.0 == 1)), (uint64)32)
After removing lets: (uint64)shift_left(uint64(!(W.stride.0 == 1)), (uint64)32)
Include: (uint64)shift_left(uint64(!(W.stride.0 == 1)), (uint64)32); should extract: 1
Include: uint64(!(W.stride.0 == 1)); should extract: 1
Include: !(W.stride.0 == 1); should extract: 1
Include: (W.stride.0 == 1); should extract: 1
Include: W.stride.0; should extract: 0
Include: 1; should extract: 0
Include: (uint64)32; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!(W.stride.0 == 1)), (uint64)32)
0: W.stride.0, 0
1: 1, 0
2: (W.stride.0 == 1), 1
3: !(W.stride.0 == 1), 1
4: uint64(!(W.stride.0 == 1)), 1
5: (uint64)32, 0
6: (uint64)shift_left(uint64(!(W.stride.0 == 1)), (uint64)32), 1
With variables (uint64)shift_left(uint64(!(W.stride.0 == 1)), (uint64)32)
With lets: (uint64)shift_left(uint64(!(W.stride.0 == 1)), (uint64)32)
Codegen: uint64, (uint64)shift_left(uint64(!(W.stride.0 == 1)), (uint64)32)
Codegen: uint64, uint64(!(W.stride.0 == 1))
Codegen: uint1, !(W.stride.0 == 1)
Codegen: uint1, (W.stride.0 == 1)
Codegen: int32, W.stride.0
Codegen: int32, 1
Codegen: uint64, (uint64)32
Codegen: int32, halide_error_bad_type("Output buffer Out", (uint32)Out.type, (uint32)73730)
Codegen: (char *), "Output buffer Out"
Codegen: uint32, (uint32)Out.type
Codegen: uint32, (uint32)73730
Adding user_context to halide_error_bad_type args
Found halide_error_bad_type
Codegen: int32, halide_error_bad_dimensions("Output buffer Out", Out.dimensions, 10)
Codegen: (char *), "Output buffer Out"
Codegen: int32, Out.dimensions
Codegen: int32, 10
Adding user_context to halide_error_bad_dimensions args
Found halide_error_bad_dimensions
Codegen: int32, halide_error_bad_type("Input buffer P", (uint32)P.type, (uint32)73730)
Codegen: (char *), "Input buffer P"
Codegen: uint32, (uint32)P.type
Codegen: uint32, (uint32)73730
Adding user_context to halide_error_bad_type args
Found halide_error_bad_type
Codegen: int32, halide_error_bad_dimensions("Input buffer P", P.dimensions, 2)
Codegen: (char *), "Input buffer P"
Codegen: int32, P.dimensions
Codegen: int32, 2
Adding user_context to halide_error_bad_dimensions args
Found halide_error_bad_dimensions
Codegen: int32, halide_error_bad_type("Input buffer W", (uint32)W.type, (uint32)73730)
Codegen: (char *), "Input buffer W"
Codegen: uint32, (uint32)W.type
Codegen: uint32, (uint32)73730
Adding user_context to halide_error_bad_type args
Found halide_error_bad_type
Codegen: int32, halide_error_bad_dimensions("Input buffer W", W.dimensions, 2)
Codegen: (char *), "Input buffer W"
Codegen: int32, W.dimensions
Codegen: int32, 2
Adding user_context to halide_error_bad_dimensions args
Found halide_error_bad_dimensions
Codegen: int32, halide_error_access_out_of_bounds("Output buffer Out", 0, 0, 7, Out.min.0, ((Out.extent.0 + Out.min.0) + -1))
Codegen: (char *), "Output buffer Out"
Codegen: int32, 0
Codegen: int32, 0
Codegen: int32, 7
Codegen: int32, Out.min.0
Codegen: int32, ((Out.extent.0 + Out.min.0) + -1)
Codegen: int32, (Out.extent.0 + Out.min.0)
Codegen: int32, Out.extent.0
Codegen: int32, Out.min.0
Codegen: int32, -1
Adding user_context to halide_error_access_out_of_bounds args
Found halide_error_access_out_of_bounds
Codegen: int32, halide_error_buffer_extents_negative("Output buffer Out", 0, Out.extent.0)
Codegen: (char *), "Output buffer Out"
Codegen: int32, 0
Codegen: int32, Out.extent.0
Adding user_context to halide_error_buffer_extents_negative args
Found halide_error_buffer_extents_negative
Codegen: int32, halide_error_access_out_of_bounds("Output buffer Out", 1, 0, 6, Out.min.1, ((Out.extent.1 + Out.min.1) + -1))
Codegen: (char *), "Output buffer Out"
Codegen: int32, 1
Codegen: int32, 0
Codegen: int32, 6
Codegen: int32, Out.min.1
Codegen: int32, ((Out.extent.1 + Out.min.1) + -1)
Codegen: int32, (Out.extent.1 + Out.min.1)
Codegen: int32, Out.extent.1
Codegen: int32, Out.min.1
Codegen: int32, -1
Adding user_context to halide_error_access_out_of_bounds args
Found halide_error_access_out_of_bounds
Codegen: int32, halide_error_buffer_extents_negative("Output buffer Out", 1, Out.extent.1)
Codegen: (char *), "Output buffer Out"
Codegen: int32, 1
Codegen: int32, Out.extent.1
Adding user_context to halide_error_buffer_extents_negative args
Found halide_error_buffer_extents_negative
Codegen: int32, halide_error_access_out_of_bounds("Output buffer Out", 2, 0, 6, Out.min.2, ((Out.extent.2 + Out.min.2) + -1))
Codegen: (char *), "Output buffer Out"
Codegen: int32, 2
Codegen: int32, 0
Codegen: int32, 6
Codegen: int32, Out.min.2
Codegen: int32, ((Out.extent.2 + Out.min.2) + -1)
Codegen: int32, (Out.extent.2 + Out.min.2)
Codegen: int32, Out.extent.2
Codegen: int32, Out.min.2
Codegen: int32, -1
Adding user_context to halide_error_access_out_of_bounds args
Found halide_error_access_out_of_bounds
Codegen: int32, halide_error_buffer_extents_negative("Output buffer Out", 2, Out.extent.2)
Codegen: (char *), "Output buffer Out"
Codegen: int32, 2
Codegen: int32, Out.extent.2
Adding user_context to halide_error_buffer_extents_negative args
Found halide_error_buffer_extents_negative
Codegen: int32, halide_error_access_out_of_bounds("Output buffer Out", 3, 0, 0, Out.min.3, ((Out.extent.3 + Out.min.3) + -1))
Codegen: (char *), "Output buffer Out"
Codegen: int32, 3
Codegen: int32, 0
Codegen: int32, 0
Codegen: int32, Out.min.3
Codegen: int32, ((Out.extent.3 + Out.min.3) + -1)
Codegen: int32, (Out.extent.3 + Out.min.3)
Codegen: int32, Out.extent.3
Codegen: int32, Out.min.3
Codegen: int32, -1
Adding user_context to halide_error_access_out_of_bounds args
Found halide_error_access_out_of_bounds
Codegen: int32, halide_error_buffer_extents_negative("Output buffer Out", 3, Out.extent.3)
Codegen: (char *), "Output buffer Out"
Codegen: int32, 3
Codegen: int32, Out.extent.3
Adding user_context to halide_error_buffer_extents_negative args
Found halide_error_buffer_extents_negative
Codegen: int32, halide_error_access_out_of_bounds("Output buffer Out", 4, 0, 3, Out.min.4, ((Out.extent.4 + Out.min.4) + -1))
Codegen: (char *), "Output buffer Out"
Codegen: int32, 4
Codegen: int32, 0
Codegen: int32, 3
Codegen: int32, Out.min.4
Codegen: int32, ((Out.extent.4 + Out.min.4) + -1)
Codegen: int32, (Out.extent.4 + Out.min.4)
Codegen: int32, Out.extent.4
Codegen: int32, Out.min.4
Codegen: int32, -1
Adding user_context to halide_error_access_out_of_bounds args
Found halide_error_access_out_of_bounds
Codegen: int32, halide_error_buffer_extents_negative("Output buffer Out", 4, Out.extent.4)
Codegen: (char *), "Output buffer Out"
Codegen: int32, 4
Codegen: int32, Out.extent.4
Adding user_context to halide_error_buffer_extents_negative args
Found halide_error_buffer_extents_negative
Codegen: int32, halide_error_access_out_of_bounds("Output buffer Out", 5, 0, 3, Out.min.5, ((Out.extent.5 + Out.min.5) + -1))
Codegen: (char *), "Output buffer Out"
Codegen: int32, 5
Codegen: int32, 0
Codegen: int32, 3
Codegen: int32, Out.min.5
Codegen: int32, ((Out.extent.5 + Out.min.5) + -1)
Codegen: int32, (Out.extent.5 + Out.min.5)
Codegen: int32, Out.extent.5
Codegen: int32, Out.min.5
Codegen: int32, -1
Adding user_context to halide_error_access_out_of_bounds args
Found halide_error_access_out_of_bounds
Codegen: int32, halide_error_buffer_extents_negative("Output buffer Out", 5, Out.extent.5)
Codegen: (char *), "Output buffer Out"
Codegen: int32, 5
Codegen: int32, Out.extent.5
Adding user_context to halide_error_buffer_extents_negative args
Found halide_error_buffer_extents_negative
Codegen: int32, halide_error_access_out_of_bounds("Output buffer Out", 6, 0, 0, Out.min.6, ((Out.extent.6 + Out.min.6) + -1))
Codegen: (char *), "Output buffer Out"
Codegen: int32, 6
Codegen: int32, 0
Codegen: int32, 0
Codegen: int32, Out.min.6
Codegen: int32, ((Out.extent.6 + Out.min.6) + -1)
Codegen: int32, (Out.extent.6 + Out.min.6)
Codegen: int32, Out.extent.6
Codegen: int32, Out.min.6
Codegen: int32, -1
Adding user_context to halide_error_access_out_of_bounds args
Found halide_error_access_out_of_bounds
Codegen: int32, halide_error_buffer_extents_negative("Output buffer Out", 6, Out.extent.6)
Codegen: (char *), "Output buffer Out"
Codegen: int32, 6
Codegen: int32, Out.extent.6
Adding user_context to halide_error_buffer_extents_negative args
Found halide_error_buffer_extents_negative
Codegen: int32, halide_error_access_out_of_bounds("Output buffer Out", 7, 0, 15, Out.min.7, ((Out.extent.7 + Out.min.7) + -1))
Codegen: (char *), "Output buffer Out"
Codegen: int32, 7
Codegen: int32, 0
Codegen: int32, 15
Codegen: int32, Out.min.7
Codegen: int32, ((Out.extent.7 + Out.min.7) + -1)
Codegen: int32, (Out.extent.7 + Out.min.7)
Codegen: int32, Out.extent.7
Codegen: int32, Out.min.7
Codegen: int32, -1
Adding user_context to halide_error_access_out_of_bounds args
Found halide_error_access_out_of_bounds
Codegen: int32, halide_error_buffer_extents_negative("Output buffer Out", 7, Out.extent.7)
Codegen: (char *), "Output buffer Out"
Codegen: int32, 7
Codegen: int32, Out.extent.7
Adding user_context to halide_error_buffer_extents_negative args
Found halide_error_buffer_extents_negative
Codegen: int32, halide_error_access_out_of_bounds("Output buffer Out", 8, 0, 3, Out.min.8, ((Out.extent.8 + Out.min.8) + -1))
Codegen: (char *), "Output buffer Out"
Codegen: int32, 8
Codegen: int32, 0
Codegen: int32, 3
Codegen: int32, Out.min.8
Codegen: int32, ((Out.extent.8 + Out.min.8) + -1)
Codegen: int32, (Out.extent.8 + Out.min.8)
Codegen: int32, Out.extent.8
Codegen: int32, Out.min.8
Codegen: int32, -1
Adding user_context to halide_error_access_out_of_bounds args
Found halide_error_access_out_of_bounds
Codegen: int32, halide_error_buffer_extents_negative("Output buffer Out", 8, Out.extent.8)
Codegen: (char *), "Output buffer Out"
Codegen: int32, 8
Codegen: int32, Out.extent.8
Adding user_context to halide_error_buffer_extents_negative args
Found halide_error_buffer_extents_negative
Codegen: int32, halide_error_access_out_of_bounds("Output buffer Out", 9, 0, ((P.extent.1/3600) + -1), Out.min.9, ((Out.extent.9 + Out.min.9) + -1))
Codegen: (char *), "Output buffer Out"
Codegen: int32, 9
Codegen: int32, 0
Codegen: int32, ((P.extent.1/3600) + -1)
Codegen: int32, (P.extent.1/3600)



Input to CSE ((div_round_to_zero(P.extent.1, 3600) - bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), shift_right(3600, 31))) + bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), bitwise_not(shift_right(3600, 31))))
After removing lets: ((div_round_to_zero(P.extent.1, 3600) - bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), shift_right(3600, 31))) + bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), bitwise_not(shift_right(3600, 31))))
Include: ((div_round_to_zero(P.extent.1, 3600) - bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), shift_right(3600, 31))) + bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), bitwise_not(shift_right(3600, 31)))); should extract: 1
Include: (div_round_to_zero(P.extent.1, 3600) - bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), shift_right(3600, 31))); should extract: 1
Include: div_round_to_zero(P.extent.1, 3600); should extract: 1
Include: P.extent.1; should extract: 0
Include: 3600; should extract: 0
Include: bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), shift_right(3600, 31)); should extract: 1
Include: shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31); should extract: 1
Include: (P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)); should extract: 1
Include: P.extent.1; should extract: 0
Include: (div_round_to_zero(P.extent.1, 3600)*3600); should extract: 0
Include: div_round_to_zero(P.extent.1, 3600); should extract: 1
Include: 3600; should extract: 0
Include: 31; should extract: 0
Include: shift_right(3600, 31); should extract: 1
Include: 3600; should extract: 0
Include: 31; should extract: 0
Include: bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), bitwise_not(shift_right(3600, 31))); should extract: 1
Include: shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31); should extract: 1
Include: bitwise_not(shift_right(3600, 31)); should extract: 1
Include: shift_right(3600, 31); should extract: 1
Canonical form without lets ((div_round_to_zero(P.extent.1, 3600) - bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), shift_right(3600, 31))) + bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), bitwise_not(shift_right(3600, 31))))
0: P.extent.1, 0
1: 3600, 0
2: div_round_to_zero(P.extent.1, 3600), 2
3: (div_round_to_zero(P.extent.1, 3600)*3600), 0
4: (P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 1
5: 31, 0
6: shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), 2
7: shift_right(3600, 31), 2
8: bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), shift_right(3600, 31)), 1
9: (div_round_to_zero(P.extent.1, 3600) - bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), shift_right(3600, 31))), 1
10: bitwise_not(shift_right(3600, 31)), 1
11: bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), bitwise_not(shift_right(3600, 31))), 1
12: ((div_round_to_zero(P.extent.1, 3600) - bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), shift_right(3600, 31))) + bitwise_and(shift_right((P.extent.1 - (div_round_to_zero(P.extent.1, 3600)*3600)), 31), bitwise_not(shift_right(3600, 31)))), 1
With variables ((t67 - bitwise_and(t68, t69)) + bitwise_and(t68, bitwise_not(t69)))
With lets: (let t67 = div_round_to_zero(P.extent.1, 3600) in (let t68 = shift_right((P.extent.1 - (t67*3600)), 31) in (let t69 = shift_right(3600, 31) in ((t67 - bitwise_and(t68, t69)) + bitwise_and(t68, bitwise_not(t69))))))
Codegen: int32, (let t67 = div_round_to_zero(P.extent.1, 3600) in (let t68 = shift_right((P.extent.1 - (t67*3600)), 31) in (let t69 = shift_right(3600, 31) in ((t67 - bitwise_and(t68, t69)) + bitwise_and(t68, bitwise_not(t69))))))
Codegen: int32, div_round_to_zero(P.extent.1, 3600)
Codegen: int32, P.extent.1
Codegen: int32, 3600
Codegen: int32, (let t68 = shift_right((P.extent.1 - (t67*3600)), 31) in (let t69 = shift_right(3600, 31) in ((t67 - bitwise_and(t68, t69)) + bitwise_and(t68, bitwise_not(t69)))))
Codegen: int32, shift_right((P.extent.1 - (t67*3600)), 31)
Codegen: int32, (P.extent.1 - (t67*3600))
Codegen: int32, P.extent.1
Codegen: int32, (t67*3600)
Codegen: int32, t67
Codegen: int32, 3600
Codegen: int32, 31



Input to CSE shift_right((P.extent.1 - (t67*3600)), (uint32)31)
After removing lets: shift_right((P.extent.1 - (t67*3600)), (uint32)31)
Include: shift_right((P.extent.1 - (t67*3600)), (uint32)31); should extract: 1
Include: (P.extent.1 - (t67*3600)); should extract: 1
Include: P.extent.1; should extract: 0
Include: (t67*3600); should extract: 0
Include: t67; should extract: 0
Include: 3600; should extract: 0
Include: (uint32)31; should extract: 0
Canonical form without lets shift_right((P.extent.1 - (t67*3600)), (uint32)31)
0: P.extent.1, 0
1: t67, 0
2: 3600, 0
3: (t67*3600), 0
4: (P.extent.1 - (t67*3600)), 1
5: (uint32)31, 0
6: shift_right((P.extent.1 - (t67*3600)), (uint32)31), 1
With variables shift_right((P.extent.1 - (t67*3600)), (uint32)31)
With lets: shift_right((P.extent.1 - (t67*3600)), (uint32)31)
Codegen: int32, shift_right((P.extent.1 - (t67*3600)), (uint32)31)
Codegen: int32, (P.extent.1 - (t67*3600))
Codegen: int32, P.extent.1
Codegen: int32, (t67*3600)
Codegen: int32, t67
Codegen: int32, 3600
Codegen: uint32, (uint32)31
Codegen: int32, (let t69 = shift_right(3600, 31) in ((t67 - bitwise_and(t68, t69)) + bitwise_and(t68, bitwise_not(t69))))
Codegen: int32, shift_right(3600, 31)
Codegen: int32, 3600
Codegen: int32, 31



Input to CSE shift_right(3600, (uint32)31)
After removing lets: shift_right(3600, (uint32)31)
Include: shift_right(3600, (uint32)31); should extract: 1
Include: 3600; should extract: 0
Include: (uint32)31; should extract: 0
Canonical form without lets shift_right(3600, (uint32)31)
0: 3600, 0
1: (uint32)31, 0
2: shift_right(3600, (uint32)31), 1
With variables shift_right(3600, (uint32)31)
With lets: shift_right(3600, (uint32)31)
Codegen: int32, shift_right(3600, (uint32)31)
Codegen: int32, 3600
Codegen: uint32, (uint32)31
Codegen: int32, ((t67 - bitwise_and(t68, t69)) + bitwise_and(t68, bitwise_not(t69)))
Codegen: int32, (t67 - bitwise_and(t68, t69))
Codegen: int32, t67
Codegen: int32, bitwise_and(t68, t69)
Codegen: int32, t68
Codegen: int32, t69
Codegen: int32, bitwise_and(t68, bitwise_not(t69))
Codegen: int32, t68
Codegen: int32, bitwise_not(t69)
Codegen: int32, t69
Codegen: int32, -1
Codegen: int32, Out.min.9
Codegen: int32, ((Out.extent.9 + Out.min.9) + -1)
Codegen: int32, (Out.extent.9 + Out.min.9)
Codegen: int32, Out.extent.9
Codegen: int32, Out.min.9
Codegen: int32, -1
Adding user_context to halide_error_access_out_of_bounds args
Found halide_error_access_out_of_bounds
Codegen: int32, halide_error_buffer_extents_negative("Output buffer Out", 9, Out.extent.9)
Codegen: (char *), "Output buffer Out"
Codegen: int32, 9
Codegen: int32, Out.extent.9
Adding user_context to halide_error_buffer_extents_negative args
Found halide_error_buffer_extents_negative
Codegen: int32, halide_error_buffer_extents_negative("Input buffer P", 0, P.extent.0)
Codegen: (char *), "Input buffer P"
Codegen: int32, 0
Codegen: int32, P.extent.0
Adding user_context to halide_error_buffer_extents_negative args
Found halide_error_buffer_extents_negative
Codegen: int32, halide_error_buffer_extents_negative("Input buffer P", 1, P.extent.1)
Codegen: (char *), "Input buffer P"
Codegen: int32, 1
Codegen: int32, P.extent.1
Adding user_context to halide_error_buffer_extents_negative args
Found halide_error_buffer_extents_negative
Codegen: int32, halide_error_buffer_extents_negative("Input buffer W", 0, W.extent.0)
Codegen: (char *), "Input buffer W"
Codegen: int32, 0
Codegen: int32, W.extent.0
Adding user_context to halide_error_buffer_extents_negative args
Found halide_error_buffer_extents_negative
Codegen: int32, halide_error_buffer_extents_negative("Input buffer W", 1, W.extent.1)
Codegen: (char *), "Input buffer W"
Codegen: int32, 1
Codegen: int32, W.extent.1
Adding user_context to halide_error_buffer_extents_negative args
Found halide_error_buffer_extents_negative
Codegen: int32, halide_error_constraint_violated("Out.stride.0", Out.stride.0, "1", 1)
Codegen: (char *), "Out.stride.0"
Codegen: int32, Out.stride.0
Codegen: (char *), "1"
Codegen: int32, 1
Adding user_context to halide_error_constraint_violated args
Found halide_error_constraint_violated
Codegen: int32, halide_error_constraint_violated("P.stride.0", P.stride.0, "1", 1)
Codegen: (char *), "P.stride.0"
Codegen: int32, P.stride.0
Codegen: (char *), "1"
Codegen: int32, 1
Adding user_context to halide_error_constraint_violated args
Found halide_error_constraint_violated
Codegen: int32, halide_error_constraint_violated("W.stride.0", W.stride.0, "1", 1)
Codegen: (char *), "W.stride.0"
Codegen: int32, W.stride.0
Codegen: (char *), "1"
Codegen: int32, 1
Adding user_context to halide_error_constraint_violated args
Found halide_error_constraint_violated
Codegen: let Out.total_extent.1 = (int64(Out.extent.1)*int64(Out.extent.0))
let Out.total_extent.2 = (Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert((Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(((void *))W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(((void *))P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int64, (int64(Out.extent.1)*int64(Out.extent.0))
Codegen: int64, int64(Out.extent.1)
Codegen: int32, Out.extent.1
Codegen: int64, int64(Out.extent.0)
Codegen: int32, Out.extent.0
Codegen: let Out.total_extent.2 = ((int64)Out.total_extent.1*int64(Out.extent.2))
let Out.total_extent.3 = (Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert(((int64)Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert((Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(((void *))W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(((void *))P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int64, ((int64)Out.total_extent.1*int64(Out.extent.2))
Codegen: int64, (int64)Out.total_extent.1
Codegen: int64, int64(Out.extent.2)
Codegen: int32, Out.extent.2
Codegen: let Out.total_extent.3 = ((int64)Out.total_extent.2*int64(Out.extent.3))
let Out.total_extent.4 = (Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert(((int64)Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert(((int64)Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert((Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(((void *))W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(((void *))P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int64, ((int64)Out.total_extent.2*int64(Out.extent.3))
Codegen: int64, (int64)Out.total_extent.2
Codegen: int64, int64(Out.extent.3)
Codegen: int32, Out.extent.3
Codegen: let Out.total_extent.4 = ((int64)Out.total_extent.3*int64(Out.extent.4))
let Out.total_extent.5 = (Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert(((int64)Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert(((int64)Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert(((int64)Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert((Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(((void *))W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(((void *))P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int64, ((int64)Out.total_extent.3*int64(Out.extent.4))
Codegen: int64, (int64)Out.total_extent.3
Codegen: int64, int64(Out.extent.4)
Codegen: int32, Out.extent.4
Codegen: let Out.total_extent.5 = ((int64)Out.total_extent.4*int64(Out.extent.5))
let Out.total_extent.6 = (Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert(((int64)Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert(((int64)Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert(((int64)Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert(((int64)Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert((Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(((void *))W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(((void *))P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int64, ((int64)Out.total_extent.4*int64(Out.extent.5))
Codegen: int64, (int64)Out.total_extent.4
Codegen: int64, int64(Out.extent.5)
Codegen: int32, Out.extent.5
Codegen: let Out.total_extent.6 = ((int64)Out.total_extent.5*int64(Out.extent.6))
let Out.total_extent.7 = (Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert(((int64)Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert(((int64)Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert(((int64)Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert(((int64)Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert(((int64)Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert((Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(((void *))W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(((void *))P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int64, ((int64)Out.total_extent.5*int64(Out.extent.6))
Codegen: int64, (int64)Out.total_extent.5
Codegen: int64, int64(Out.extent.6)
Codegen: int32, Out.extent.6
Codegen: let Out.total_extent.7 = ((int64)Out.total_extent.6*int64(Out.extent.7))
let Out.total_extent.8 = (Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert(((int64)Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert(((int64)Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert(((int64)Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert(((int64)Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert(((int64)Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert(((int64)Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert((Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(((void *))W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(((void *))P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int64, ((int64)Out.total_extent.6*int64(Out.extent.7))
Codegen: int64, (int64)Out.total_extent.6
Codegen: int64, int64(Out.extent.7)
Codegen: int32, Out.extent.7
Codegen: let Out.total_extent.8 = ((int64)Out.total_extent.7*int64(Out.extent.8))
let Out.total_extent.9 = (Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert(((int64)Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert(((int64)Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert(((int64)Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert(((int64)Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert(((int64)Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert(((int64)Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert(((int64)Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert((Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(((void *))W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(((void *))P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int64, ((int64)Out.total_extent.7*int64(Out.extent.8))
Codegen: int64, (int64)Out.total_extent.7
Codegen: int64, int64(Out.extent.8)
Codegen: int32, Out.extent.8
Codegen: let Out.total_extent.9 = ((int64)Out.total_extent.8*int64(Out.extent.9))
let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert(((int64)Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert(((int64)Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert(((int64)Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert(((int64)Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert(((int64)Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert(((int64)Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert(((int64)Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert(((int64)Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert((Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(((void *))W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(((void *))P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int64, ((int64)Out.total_extent.8*int64(Out.extent.9))
Codegen: int64, (int64)Out.total_extent.8
Codegen: int64, int64(Out.extent.9)
Codegen: int32, Out.extent.9
Codegen: let P.total_extent.1 = (int64(P.extent.1)*int64(P.extent.0))
let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert(((int64)Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert(((int64)Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert(((int64)Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert(((int64)Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert(((int64)Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert(((int64)Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert(((int64)Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert(((int64)Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert(((int64)Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert((P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(((void *))W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(((void *))P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int64, (int64(P.extent.1)*int64(P.extent.0))
Codegen: int64, int64(P.extent.1)
Codegen: int32, P.extent.1
Codegen: int64, int64(P.extent.0)
Codegen: int32, P.extent.0
Codegen: let W.total_extent.1 = (int64(W.extent.1)*int64(W.extent.0))
assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert(((int64)Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert(((int64)Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert(((int64)Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert(((int64)Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert(((int64)Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert(((int64)Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert(((int64)Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert(((int64)Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert(((int64)Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert(((int64)P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", (int64)P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert((W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(((void *))W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(((void *))P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int64, (int64(W.extent.1)*int64(W.extent.0))
Codegen: int64, int64(W.extent.1)
Codegen: int32, W.extent.1
Codegen: int64, int64(W.extent.0)
Codegen: int32, W.extent.0
Codegen: assert(((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647))
assert(((int64)Out.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.1, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647))
assert(((int64)Out.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.2, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647))
assert(((int64)Out.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.3, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647))
assert(((int64)Out.total_extent.4 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.4, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647))
assert(((int64)Out.total_extent.5 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.5, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647))
assert(((int64)Out.total_extent.6 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.6, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647))
assert(((int64)Out.total_extent.7 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.7, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647))
assert(((int64)Out.total_extent.8 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.8, (int64)2147483647))
assert(((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647))
assert(((int64)Out.total_extent.9 <= (int64)2147483647), halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.9, (int64)2147483647))
assert(((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647))
assert(((int64)P.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("P", (int64)P.total_extent.1, (int64)2147483647))
assert(((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647))
assert(((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647))
assert(((int64)W.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("W", (int64)W.total_extent.1, (int64)2147483647))
gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(((void *))W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(((void *))P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Codegen: int32, int32((uint64)count_trailing_zeros((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647)), (int64)0)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647)), (int64)1)), (uint64)shift_left(uint64(!((int64)Out.total_extent.1 <= (int64)2147483647)), (int64)2)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647)), (int64)3)), (uint64)shift_left(uint64(!((int64)Out.total_extent.2 <= (int64)2147483647)), (int64)4)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647)), (int64)5)), (uint64)shift_left(uint64(!((int64)Out.total_extent.3 <= (int64)2147483647)), (int64)6)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647)), (int64)7)), (uint64)shift_left(uint64(!((int64)Out.total_extent.4 <= (int64)2147483647)), (int64)8)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647)), (int64)9)), (uint64)shift_left(uint64(!((int64)Out.total_extent.5 <= (int64)2147483647)), (int64)10)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647)), (int64)11)), (uint64)shift_left(uint64(!((int64)Out.total_extent.6 <= (int64)2147483647)), (int64)12)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647)), (int64)13)), (uint64)shift_left(uint64(!((int64)Out.total_extent.7 <= (int64)2147483647)), (int64)14)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647)), (int64)15)), (uint64)shift_left(uint64(!((int64)Out.total_extent.8 <= (int64)2147483647)), (int64)16)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647)), (int64)17)), (uint64)shift_left(uint64(!((int64)Out.total_extent.9 <= (int64)2147483647)), (int64)18)), (uint64)shift_left(uint64(!((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647)), (int64)19)), (uint64)shift_left(uint64(!((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647)), (int64)20)), (uint64)shift_left(uint64(!((int64)P.total_extent.1 <= (int64)2147483647)), (int64)21)), (uint64)shift_left(uint64(!((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647)), (int64)22)), (uint64)shift_left(uint64(!((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647)), (int64)23)), (uint64)shift_left(uint64(!((int64)W.total_extent.1 <= (int64)2147483647)), (int64)24))))
Codegen: uint64, (uint64)count_trailing_zeros((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647)), (int64)0)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647)), (int64)1)), (uint64)shift_left(uint64(!((int64)Out.total_extent.1 <= (int64)2147483647)), (int64)2)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647)), (int64)3)), (uint64)shift_left(uint64(!((int64)Out.total_extent.2 <= (int64)2147483647)), (int64)4)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647)), (int64)5)), (uint64)shift_left(uint64(!((int64)Out.total_extent.3 <= (int64)2147483647)), (int64)6)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647)), (int64)7)), (uint64)shift_left(uint64(!((int64)Out.total_extent.4 <= (int64)2147483647)), (int64)8)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647)), (int64)9)), (uint64)shift_left(uint64(!((int64)Out.total_extent.5 <= (int64)2147483647)), (int64)10)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647)), (int64)11)), (uint64)shift_left(uint64(!((int64)Out.total_extent.6 <= (int64)2147483647)), (int64)12)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647)), (int64)13)), (uint64)shift_left(uint64(!((int64)Out.total_extent.7 <= (int64)2147483647)), (int64)14)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647)), (int64)15)), (uint64)shift_left(uint64(!((int64)Out.total_extent.8 <= (int64)2147483647)), (int64)16)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647)), (int64)17)), (uint64)shift_left(uint64(!((int64)Out.total_extent.9 <= (int64)2147483647)), (int64)18)), (uint64)shift_left(uint64(!((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647)), (int64)19)), (uint64)shift_left(uint64(!((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647)), (int64)20)), (uint64)shift_left(uint64(!((int64)P.total_extent.1 <= (int64)2147483647)), (int64)21)), (uint64)shift_left(uint64(!((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647)), (int64)22)), (uint64)shift_left(uint64(!((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647)), (int64)23)), (uint64)shift_left(uint64(!((int64)W.total_extent.1 <= (int64)2147483647)), (int64)24)))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647)), (int64)0)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647)), (int64)1)), (uint64)shift_left(uint64(!((int64)Out.total_extent.1 <= (int64)2147483647)), (int64)2)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647)), (int64)3)), (uint64)shift_left(uint64(!((int64)Out.total_extent.2 <= (int64)2147483647)), (int64)4)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647)), (int64)5)), (uint64)shift_left(uint64(!((int64)Out.total_extent.3 <= (int64)2147483647)), (int64)6)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647)), (int64)7)), (uint64)shift_left(uint64(!((int64)Out.total_extent.4 <= (int64)2147483647)), (int64)8)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647)), (int64)9)), (uint64)shift_left(uint64(!((int64)Out.total_extent.5 <= (int64)2147483647)), (int64)10)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647)), (int64)11)), (uint64)shift_left(uint64(!((int64)Out.total_extent.6 <= (int64)2147483647)), (int64)12)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647)), (int64)13)), (uint64)shift_left(uint64(!((int64)Out.total_extent.7 <= (int64)2147483647)), (int64)14)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647)), (int64)15)), (uint64)shift_left(uint64(!((int64)Out.total_extent.8 <= (int64)2147483647)), (int64)16)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647)), (int64)17)), (uint64)shift_left(uint64(!((int64)Out.total_extent.9 <= (int64)2147483647)), (int64)18)), (uint64)shift_left(uint64(!((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647)), (int64)19)), (uint64)shift_left(uint64(!((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647)), (int64)20)), (uint64)shift_left(uint64(!((int64)P.total_extent.1 <= (int64)2147483647)), (int64)21)), (uint64)shift_left(uint64(!((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647)), (int64)22)), (uint64)shift_left(uint64(!((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647)), (int64)23)), (uint64)shift_left(uint64(!((int64)W.total_extent.1 <= (int64)2147483647)), (int64)24))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647)), (int64)0)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647)), (int64)1)), (uint64)shift_left(uint64(!((int64)Out.total_extent.1 <= (int64)2147483647)), (int64)2)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647)), (int64)3)), (uint64)shift_left(uint64(!((int64)Out.total_extent.2 <= (int64)2147483647)), (int64)4)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647)), (int64)5)), (uint64)shift_left(uint64(!((int64)Out.total_extent.3 <= (int64)2147483647)), (int64)6)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647)), (int64)7)), (uint64)shift_left(uint64(!((int64)Out.total_extent.4 <= (int64)2147483647)), (int64)8)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647)), (int64)9)), (uint64)shift_left(uint64(!((int64)Out.total_extent.5 <= (int64)2147483647)), (int64)10)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647)), (int64)11)), (uint64)shift_left(uint64(!((int64)Out.total_extent.6 <= (int64)2147483647)), (int64)12)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647)), (int64)13)), (uint64)shift_left(uint64(!((int64)Out.total_extent.7 <= (int64)2147483647)), (int64)14)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647)), (int64)15)), (uint64)shift_left(uint64(!((int64)Out.total_extent.8 <= (int64)2147483647)), (int64)16)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647)), (int64)17)), (uint64)shift_left(uint64(!((int64)Out.total_extent.9 <= (int64)2147483647)), (int64)18)), (uint64)shift_left(uint64(!((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647)), (int64)19)), (uint64)shift_left(uint64(!((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647)), (int64)20)), (uint64)shift_left(uint64(!((int64)P.total_extent.1 <= (int64)2147483647)), (int64)21)), (uint64)shift_left(uint64(!((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647)), (int64)22)), (uint64)shift_left(uint64(!((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647)), (int64)23))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647)), (int64)0)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647)), (int64)1)), (uint64)shift_left(uint64(!((int64)Out.total_extent.1 <= (int64)2147483647)), (int64)2)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647)), (int64)3)), (uint64)shift_left(uint64(!((int64)Out.total_extent.2 <= (int64)2147483647)), (int64)4)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647)), (int64)5)), (uint64)shift_left(uint64(!((int64)Out.total_extent.3 <= (int64)2147483647)), (int64)6)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647)), (int64)7)), (uint64)shift_left(uint64(!((int64)Out.total_extent.4 <= (int64)2147483647)), (int64)8)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647)), (int64)9)), (uint64)shift_left(uint64(!((int64)Out.total_extent.5 <= (int64)2147483647)), (int64)10)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647)), (int64)11)), (uint64)shift_left(uint64(!((int64)Out.total_extent.6 <= (int64)2147483647)), (int64)12)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647)), (int64)13)), (uint64)shift_left(uint64(!((int64)Out.total_extent.7 <= (int64)2147483647)), (int64)14)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647)), (int64)15)), (uint64)shift_left(uint64(!((int64)Out.total_extent.8 <= (int64)2147483647)), (int64)16)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647)), (int64)17)), (uint64)shift_left(uint64(!((int64)Out.total_extent.9 <= (int64)2147483647)), (int64)18)), (uint64)shift_left(uint64(!((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647)), (int64)19)), (uint64)shift_left(uint64(!((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647)), (int64)20)), (uint64)shift_left(uint64(!((int64)P.total_extent.1 <= (int64)2147483647)), (int64)21)), (uint64)shift_left(uint64(!((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647)), (int64)22))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647)), (int64)0)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647)), (int64)1)), (uint64)shift_left(uint64(!((int64)Out.total_extent.1 <= (int64)2147483647)), (int64)2)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647)), (int64)3)), (uint64)shift_left(uint64(!((int64)Out.total_extent.2 <= (int64)2147483647)), (int64)4)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647)), (int64)5)), (uint64)shift_left(uint64(!((int64)Out.total_extent.3 <= (int64)2147483647)), (int64)6)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647)), (int64)7)), (uint64)shift_left(uint64(!((int64)Out.total_extent.4 <= (int64)2147483647)), (int64)8)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647)), (int64)9)), (uint64)shift_left(uint64(!((int64)Out.total_extent.5 <= (int64)2147483647)), (int64)10)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647)), (int64)11)), (uint64)shift_left(uint64(!((int64)Out.total_extent.6 <= (int64)2147483647)), (int64)12)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647)), (int64)13)), (uint64)shift_left(uint64(!((int64)Out.total_extent.7 <= (int64)2147483647)), (int64)14)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647)), (int64)15)), (uint64)shift_left(uint64(!((int64)Out.total_extent.8 <= (int64)2147483647)), (int64)16)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647)), (int64)17)), (uint64)shift_left(uint64(!((int64)Out.total_extent.9 <= (int64)2147483647)), (int64)18)), (uint64)shift_left(uint64(!((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647)), (int64)19)), (uint64)shift_left(uint64(!((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647)), (int64)20)), (uint64)shift_left(uint64(!((int64)P.total_extent.1 <= (int64)2147483647)), (int64)21))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647)), (int64)0)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647)), (int64)1)), (uint64)shift_left(uint64(!((int64)Out.total_extent.1 <= (int64)2147483647)), (int64)2)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647)), (int64)3)), (uint64)shift_left(uint64(!((int64)Out.total_extent.2 <= (int64)2147483647)), (int64)4)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647)), (int64)5)), (uint64)shift_left(uint64(!((int64)Out.total_extent.3 <= (int64)2147483647)), (int64)6)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647)), (int64)7)), (uint64)shift_left(uint64(!((int64)Out.total_extent.4 <= (int64)2147483647)), (int64)8)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647)), (int64)9)), (uint64)shift_left(uint64(!((int64)Out.total_extent.5 <= (int64)2147483647)), (int64)10)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647)), (int64)11)), (uint64)shift_left(uint64(!((int64)Out.total_extent.6 <= (int64)2147483647)), (int64)12)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647)), (int64)13)), (uint64)shift_left(uint64(!((int64)Out.total_extent.7 <= (int64)2147483647)), (int64)14)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647)), (int64)15)), (uint64)shift_left(uint64(!((int64)Out.total_extent.8 <= (int64)2147483647)), (int64)16)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647)), (int64)17)), (uint64)shift_left(uint64(!((int64)Out.total_extent.9 <= (int64)2147483647)), (int64)18)), (uint64)shift_left(uint64(!((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647)), (int64)19)), (uint64)shift_left(uint64(!((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647)), (int64)20))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647)), (int64)0)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647)), (int64)1)), (uint64)shift_left(uint64(!((int64)Out.total_extent.1 <= (int64)2147483647)), (int64)2)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647)), (int64)3)), (uint64)shift_left(uint64(!((int64)Out.total_extent.2 <= (int64)2147483647)), (int64)4)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647)), (int64)5)), (uint64)shift_left(uint64(!((int64)Out.total_extent.3 <= (int64)2147483647)), (int64)6)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647)), (int64)7)), (uint64)shift_left(uint64(!((int64)Out.total_extent.4 <= (int64)2147483647)), (int64)8)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647)), (int64)9)), (uint64)shift_left(uint64(!((int64)Out.total_extent.5 <= (int64)2147483647)), (int64)10)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647)), (int64)11)), (uint64)shift_left(uint64(!((int64)Out.total_extent.6 <= (int64)2147483647)), (int64)12)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647)), (int64)13)), (uint64)shift_left(uint64(!((int64)Out.total_extent.7 <= (int64)2147483647)), (int64)14)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647)), (int64)15)), (uint64)shift_left(uint64(!((int64)Out.total_extent.8 <= (int64)2147483647)), (int64)16)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647)), (int64)17)), (uint64)shift_left(uint64(!((int64)Out.total_extent.9 <= (int64)2147483647)), (int64)18)), (uint64)shift_left(uint64(!((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647)), (int64)19))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647)), (int64)0)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647)), (int64)1)), (uint64)shift_left(uint64(!((int64)Out.total_extent.1 <= (int64)2147483647)), (int64)2)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647)), (int64)3)), (uint64)shift_left(uint64(!((int64)Out.total_extent.2 <= (int64)2147483647)), (int64)4)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647)), (int64)5)), (uint64)shift_left(uint64(!((int64)Out.total_extent.3 <= (int64)2147483647)), (int64)6)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647)), (int64)7)), (uint64)shift_left(uint64(!((int64)Out.total_extent.4 <= (int64)2147483647)), (int64)8)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647)), (int64)9)), (uint64)shift_left(uint64(!((int64)Out.total_extent.5 <= (int64)2147483647)), (int64)10)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647)), (int64)11)), (uint64)shift_left(uint64(!((int64)Out.total_extent.6 <= (int64)2147483647)), (int64)12)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647)), (int64)13)), (uint64)shift_left(uint64(!((int64)Out.total_extent.7 <= (int64)2147483647)), (int64)14)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647)), (int64)15)), (uint64)shift_left(uint64(!((int64)Out.total_extent.8 <= (int64)2147483647)), (int64)16)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647)), (int64)17)), (uint64)shift_left(uint64(!((int64)Out.total_extent.9 <= (int64)2147483647)), (int64)18))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647)), (int64)0)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647)), (int64)1)), (uint64)shift_left(uint64(!((int64)Out.total_extent.1 <= (int64)2147483647)), (int64)2)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647)), (int64)3)), (uint64)shift_left(uint64(!((int64)Out.total_extent.2 <= (int64)2147483647)), (int64)4)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647)), (int64)5)), (uint64)shift_left(uint64(!((int64)Out.total_extent.3 <= (int64)2147483647)), (int64)6)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647)), (int64)7)), (uint64)shift_left(uint64(!((int64)Out.total_extent.4 <= (int64)2147483647)), (int64)8)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647)), (int64)9)), (uint64)shift_left(uint64(!((int64)Out.total_extent.5 <= (int64)2147483647)), (int64)10)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647)), (int64)11)), (uint64)shift_left(uint64(!((int64)Out.total_extent.6 <= (int64)2147483647)), (int64)12)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647)), (int64)13)), (uint64)shift_left(uint64(!((int64)Out.total_extent.7 <= (int64)2147483647)), (int64)14)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647)), (int64)15)), (uint64)shift_left(uint64(!((int64)Out.total_extent.8 <= (int64)2147483647)), (int64)16)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647)), (int64)17))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647)), (int64)0)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647)), (int64)1)), (uint64)shift_left(uint64(!((int64)Out.total_extent.1 <= (int64)2147483647)), (int64)2)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647)), (int64)3)), (uint64)shift_left(uint64(!((int64)Out.total_extent.2 <= (int64)2147483647)), (int64)4)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647)), (int64)5)), (uint64)shift_left(uint64(!((int64)Out.total_extent.3 <= (int64)2147483647)), (int64)6)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647)), (int64)7)), (uint64)shift_left(uint64(!((int64)Out.total_extent.4 <= (int64)2147483647)), (int64)8)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647)), (int64)9)), (uint64)shift_left(uint64(!((int64)Out.total_extent.5 <= (int64)2147483647)), (int64)10)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647)), (int64)11)), (uint64)shift_left(uint64(!((int64)Out.total_extent.6 <= (int64)2147483647)), (int64)12)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647)), (int64)13)), (uint64)shift_left(uint64(!((int64)Out.total_extent.7 <= (int64)2147483647)), (int64)14)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647)), (int64)15)), (uint64)shift_left(uint64(!((int64)Out.total_extent.8 <= (int64)2147483647)), (int64)16))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647)), (int64)0)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647)), (int64)1)), (uint64)shift_left(uint64(!((int64)Out.total_extent.1 <= (int64)2147483647)), (int64)2)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647)), (int64)3)), (uint64)shift_left(uint64(!((int64)Out.total_extent.2 <= (int64)2147483647)), (int64)4)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647)), (int64)5)), (uint64)shift_left(uint64(!((int64)Out.total_extent.3 <= (int64)2147483647)), (int64)6)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647)), (int64)7)), (uint64)shift_left(uint64(!((int64)Out.total_extent.4 <= (int64)2147483647)), (int64)8)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647)), (int64)9)), (uint64)shift_left(uint64(!((int64)Out.total_extent.5 <= (int64)2147483647)), (int64)10)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647)), (int64)11)), (uint64)shift_left(uint64(!((int64)Out.total_extent.6 <= (int64)2147483647)), (int64)12)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647)), (int64)13)), (uint64)shift_left(uint64(!((int64)Out.total_extent.7 <= (int64)2147483647)), (int64)14)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647)), (int64)15))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647)), (int64)0)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647)), (int64)1)), (uint64)shift_left(uint64(!((int64)Out.total_extent.1 <= (int64)2147483647)), (int64)2)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647)), (int64)3)), (uint64)shift_left(uint64(!((int64)Out.total_extent.2 <= (int64)2147483647)), (int64)4)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647)), (int64)5)), (uint64)shift_left(uint64(!((int64)Out.total_extent.3 <= (int64)2147483647)), (int64)6)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647)), (int64)7)), (uint64)shift_left(uint64(!((int64)Out.total_extent.4 <= (int64)2147483647)), (int64)8)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647)), (int64)9)), (uint64)shift_left(uint64(!((int64)Out.total_extent.5 <= (int64)2147483647)), (int64)10)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647)), (int64)11)), (uint64)shift_left(uint64(!((int64)Out.total_extent.6 <= (int64)2147483647)), (int64)12)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647)), (int64)13)), (uint64)shift_left(uint64(!((int64)Out.total_extent.7 <= (int64)2147483647)), (int64)14))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647)), (int64)0)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647)), (int64)1)), (uint64)shift_left(uint64(!((int64)Out.total_extent.1 <= (int64)2147483647)), (int64)2)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647)), (int64)3)), (uint64)shift_left(uint64(!((int64)Out.total_extent.2 <= (int64)2147483647)), (int64)4)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647)), (int64)5)), (uint64)shift_left(uint64(!((int64)Out.total_extent.3 <= (int64)2147483647)), (int64)6)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647)), (int64)7)), (uint64)shift_left(uint64(!((int64)Out.total_extent.4 <= (int64)2147483647)), (int64)8)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647)), (int64)9)), (uint64)shift_left(uint64(!((int64)Out.total_extent.5 <= (int64)2147483647)), (int64)10)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647)), (int64)11)), (uint64)shift_left(uint64(!((int64)Out.total_extent.6 <= (int64)2147483647)), (int64)12)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647)), (int64)13))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647)), (int64)0)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647)), (int64)1)), (uint64)shift_left(uint64(!((int64)Out.total_extent.1 <= (int64)2147483647)), (int64)2)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647)), (int64)3)), (uint64)shift_left(uint64(!((int64)Out.total_extent.2 <= (int64)2147483647)), (int64)4)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647)), (int64)5)), (uint64)shift_left(uint64(!((int64)Out.total_extent.3 <= (int64)2147483647)), (int64)6)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647)), (int64)7)), (uint64)shift_left(uint64(!((int64)Out.total_extent.4 <= (int64)2147483647)), (int64)8)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647)), (int64)9)), (uint64)shift_left(uint64(!((int64)Out.total_extent.5 <= (int64)2147483647)), (int64)10)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647)), (int64)11)), (uint64)shift_left(uint64(!((int64)Out.total_extent.6 <= (int64)2147483647)), (int64)12))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647)), (int64)0)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647)), (int64)1)), (uint64)shift_left(uint64(!((int64)Out.total_extent.1 <= (int64)2147483647)), (int64)2)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647)), (int64)3)), (uint64)shift_left(uint64(!((int64)Out.total_extent.2 <= (int64)2147483647)), (int64)4)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647)), (int64)5)), (uint64)shift_left(uint64(!((int64)Out.total_extent.3 <= (int64)2147483647)), (int64)6)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647)), (int64)7)), (uint64)shift_left(uint64(!((int64)Out.total_extent.4 <= (int64)2147483647)), (int64)8)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647)), (int64)9)), (uint64)shift_left(uint64(!((int64)Out.total_extent.5 <= (int64)2147483647)), (int64)10)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647)), (int64)11))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647)), (int64)0)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647)), (int64)1)), (uint64)shift_left(uint64(!((int64)Out.total_extent.1 <= (int64)2147483647)), (int64)2)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647)), (int64)3)), (uint64)shift_left(uint64(!((int64)Out.total_extent.2 <= (int64)2147483647)), (int64)4)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647)), (int64)5)), (uint64)shift_left(uint64(!((int64)Out.total_extent.3 <= (int64)2147483647)), (int64)6)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647)), (int64)7)), (uint64)shift_left(uint64(!((int64)Out.total_extent.4 <= (int64)2147483647)), (int64)8)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647)), (int64)9)), (uint64)shift_left(uint64(!((int64)Out.total_extent.5 <= (int64)2147483647)), (int64)10))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647)), (int64)0)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647)), (int64)1)), (uint64)shift_left(uint64(!((int64)Out.total_extent.1 <= (int64)2147483647)), (int64)2)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647)), (int64)3)), (uint64)shift_left(uint64(!((int64)Out.total_extent.2 <= (int64)2147483647)), (int64)4)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647)), (int64)5)), (uint64)shift_left(uint64(!((int64)Out.total_extent.3 <= (int64)2147483647)), (int64)6)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647)), (int64)7)), (uint64)shift_left(uint64(!((int64)Out.total_extent.4 <= (int64)2147483647)), (int64)8)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647)), (int64)9))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647)), (int64)0)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647)), (int64)1)), (uint64)shift_left(uint64(!((int64)Out.total_extent.1 <= (int64)2147483647)), (int64)2)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647)), (int64)3)), (uint64)shift_left(uint64(!((int64)Out.total_extent.2 <= (int64)2147483647)), (int64)4)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647)), (int64)5)), (uint64)shift_left(uint64(!((int64)Out.total_extent.3 <= (int64)2147483647)), (int64)6)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647)), (int64)7)), (uint64)shift_left(uint64(!((int64)Out.total_extent.4 <= (int64)2147483647)), (int64)8))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647)), (int64)0)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647)), (int64)1)), (uint64)shift_left(uint64(!((int64)Out.total_extent.1 <= (int64)2147483647)), (int64)2)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647)), (int64)3)), (uint64)shift_left(uint64(!((int64)Out.total_extent.2 <= (int64)2147483647)), (int64)4)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647)), (int64)5)), (uint64)shift_left(uint64(!((int64)Out.total_extent.3 <= (int64)2147483647)), (int64)6)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647)), (int64)7))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647)), (int64)0)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647)), (int64)1)), (uint64)shift_left(uint64(!((int64)Out.total_extent.1 <= (int64)2147483647)), (int64)2)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647)), (int64)3)), (uint64)shift_left(uint64(!((int64)Out.total_extent.2 <= (int64)2147483647)), (int64)4)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647)), (int64)5)), (uint64)shift_left(uint64(!((int64)Out.total_extent.3 <= (int64)2147483647)), (int64)6))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647)), (int64)0)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647)), (int64)1)), (uint64)shift_left(uint64(!((int64)Out.total_extent.1 <= (int64)2147483647)), (int64)2)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647)), (int64)3)), (uint64)shift_left(uint64(!((int64)Out.total_extent.2 <= (int64)2147483647)), (int64)4)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647)), (int64)5))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647)), (int64)0)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647)), (int64)1)), (uint64)shift_left(uint64(!((int64)Out.total_extent.1 <= (int64)2147483647)), (int64)2)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647)), (int64)3)), (uint64)shift_left(uint64(!((int64)Out.total_extent.2 <= (int64)2147483647)), (int64)4))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647)), (int64)0)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647)), (int64)1)), (uint64)shift_left(uint64(!((int64)Out.total_extent.1 <= (int64)2147483647)), (int64)2)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647)), (int64)3))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647)), (int64)0)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647)), (int64)1)), (uint64)shift_left(uint64(!((int64)Out.total_extent.1 <= (int64)2147483647)), (int64)2))
Codegen: uint64, (uint64)bitwise_or((uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647)), (int64)0)), (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647)), (int64)1))
Codegen: uint64, (uint64)bitwise_or((uint64)shift_left((uint64)1, (int64)63), (uint64)shift_left(uint64(!((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647)), (int64)0))
Codegen: uint64, (uint64)shift_left((uint64)1, (int64)63)
Codegen: uint64, (uint64)1
Codegen: int64, (int64)63



Input to CSE (uint64)shift_left((uint64)1, (uint64)63)
After removing lets: (uint64)shift_left((uint64)1, (uint64)63)
Include: (uint64)shift_left((uint64)1, (uint64)63); should extract: 1
Include: (uint64)1; should extract: 0
Include: (uint64)63; should extract: 0
Canonical form without lets (uint64)shift_left((uint64)1, (uint64)63)
0: (uint64)1, 0
1: (uint64)63, 0
2: (uint64)shift_left((uint64)1, (uint64)63), 1
With variables (uint64)shift_left((uint64)1, (uint64)63)
With lets: (uint64)shift_left((uint64)1, (uint64)63)
Codegen: uint64, (uint64)shift_left((uint64)1, (uint64)63)
Codegen: uint64, (uint64)1
Codegen: uint64, (uint64)63
Codegen: uint64, (uint64)shift_left(uint64(!((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647)), (int64)0)
Codegen: uint64, uint64(!((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647))
Codegen: uint1, !((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647)
Codegen: uint1, ((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647)
Codegen: uint1, !((uint64)abs(int64(Out.extent.0)) > (uint64)2147483647)
Codegen: uint1, ((uint64)abs(int64(Out.extent.0)) > (uint64)2147483647)
Codegen: uint64, (uint64)abs(int64(Out.extent.0))
Codegen: int64, (let x0 = int64(Out.extent.0) in select((x0 >= (int64)0), x0, ((int64)0 - x0)))
Codegen: int64, int64(Out.extent.0)
Codegen: int32, Out.extent.0
Codegen: int64, select(((int64)x0 >= (int64)0), (int64)x0, ((int64)0 - (int64)x0))
Codegen: uint1, ((int64)x0 >= (int64)0)
Codegen: uint1, !((int64)0 > (int64)x0)
Codegen: uint1, ((int64)0 > (int64)x0)
Codegen: int64, (int64)0
Codegen: int64, (int64)x0
Codegen: int64, (int64)x0
Codegen: int64, ((int64)0 - (int64)x0)
Codegen: int64, (int64)0
Codegen: int64, (int64)x0
Codegen: uint64, (uint64)2147483647
Codegen: int64, (int64)0



Input to CSE (uint64)shift_left(uint64(!((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647)), (uint64)0)
After removing lets: (uint64)shift_left(uint64(!((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647)), (uint64)0)
Include: (uint64)shift_left(uint64(!((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647)), (uint64)0); should extract: 1
Include: uint64(!((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647)); should extract: 1
Include: !((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647); should extract: 1
Include: ((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647); should extract: 1
Include: (uint64)abs(int64(Out.extent.0)); should extract: 1
Include: int64(Out.extent.0); should extract: 0
Include: Out.extent.0; should extract: 0
Include: (uint64)2147483647; should extract: 0
Include: (uint64)0; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647)), (uint64)0)
0: Out.extent.0, 0
1: int64(Out.extent.0), 0
2: (uint64)abs(int64(Out.extent.0)), 1
3: (uint64)2147483647, 0
4: ((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), 1
5: !((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647), 1
6: uint64(!((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647)), 1
7: (uint64)0, 0
8: (uint64)shift_left(uint64(!((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647)), (uint64)0), 1
With variables (uint64)shift_left(uint64(!((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647)), (uint64)0)
With lets: (uint64)shift_left(uint64(!((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647)), (uint64)0)
Codegen: uint64, (uint64)shift_left(uint64(!((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647)), (uint64)0)
Codegen: uint64, uint64(!((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647))
Codegen: uint1, !((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647)
Codegen: uint1, ((uint64)abs(int64(Out.extent.0)) <= (uint64)2147483647)
Codegen: uint1, !((uint64)abs(int64(Out.extent.0)) > (uint64)2147483647)
Codegen: uint1, ((uint64)abs(int64(Out.extent.0)) > (uint64)2147483647)
Codegen: uint64, (uint64)abs(int64(Out.extent.0))
Codegen: int64, (let x1 = int64(Out.extent.0) in select((x1 >= (int64)0), x1, ((int64)0 - x1)))
Codegen: int64, int64(Out.extent.0)
Codegen: int32, Out.extent.0
Codegen: int64, select(((int64)x1 >= (int64)0), (int64)x1, ((int64)0 - (int64)x1))
Codegen: uint1, ((int64)x1 >= (int64)0)
Codegen: uint1, !((int64)0 > (int64)x1)
Codegen: uint1, ((int64)0 > (int64)x1)
Codegen: int64, (int64)0
Codegen: int64, (int64)x1
Codegen: int64, (int64)x1
Codegen: int64, ((int64)0 - (int64)x1)
Codegen: int64, (int64)0
Codegen: int64, (int64)x1
Codegen: uint64, (uint64)2147483647
Codegen: uint64, (uint64)0
Codegen: uint64, (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647)), (int64)1)
Codegen: uint64, uint64(!((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647))
Codegen: uint1, !((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647)
Codegen: uint1, ((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647)
Codegen: uint1, !((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) > (uint64)2147483647)
Codegen: uint1, ((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) > (uint64)2147483647)
Codegen: uint64, (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1)))
Codegen: int64, (let x2 = (int64(Out.extent.1)*int64(Out.stride.1)) in select((x2 >= (int64)0), x2, ((int64)0 - x2)))
Codegen: int64, (int64(Out.extent.1)*int64(Out.stride.1))
Codegen: int64, int64(Out.extent.1)
Codegen: int32, Out.extent.1
Codegen: int64, int64(Out.stride.1)
Codegen: int32, Out.stride.1
Codegen: int64, select(((int64)x2 >= (int64)0), (int64)x2, ((int64)0 - (int64)x2))
Codegen: uint1, ((int64)x2 >= (int64)0)
Codegen: uint1, !((int64)0 > (int64)x2)
Codegen: uint1, ((int64)0 > (int64)x2)
Codegen: int64, (int64)0
Codegen: int64, (int64)x2
Codegen: int64, (int64)x2
Codegen: int64, ((int64)0 - (int64)x2)
Codegen: int64, (int64)0
Codegen: int64, (int64)x2
Codegen: uint64, (uint64)2147483647
Codegen: int64, (int64)1



Input to CSE (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647)), (uint64)1)
After removing lets: (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647)), (uint64)1)
Include: (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647)), (uint64)1); should extract: 1
Include: uint64(!((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647)); should extract: 1
Include: !((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647); should extract: 1
Include: ((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647); should extract: 1
Include: (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))); should extract: 1
Include: (int64(Out.extent.1)*int64(Out.stride.1)); should extract: 1
Include: int64(Out.extent.1); should extract: 0
Include: Out.extent.1; should extract: 0
Include: int64(Out.stride.1); should extract: 0
Include: Out.stride.1; should extract: 0
Include: (uint64)2147483647; should extract: 0
Include: (uint64)1; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647)), (uint64)1)
0: Out.extent.1, 0
1: int64(Out.extent.1), 0
2: Out.stride.1, 0
3: int64(Out.stride.1), 0
4: (int64(Out.extent.1)*int64(Out.stride.1)), 1
5: (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), 1
6: (uint64)2147483647, 0
7: ((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), 1
8: !((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647), 1
9: uint64(!((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647)), 1
10: (uint64)1, 0
11: (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647)), (uint64)1), 1
With variables (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647)), (uint64)1)
With lets: (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647)), (uint64)1)
Codegen: uint64, (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647)), (uint64)1)
Codegen: uint64, uint64(!((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647))
Codegen: uint1, !((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647)
Codegen: uint1, ((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) <= (uint64)2147483647)
Codegen: uint1, !((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) > (uint64)2147483647)
Codegen: uint1, ((uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))) > (uint64)2147483647)
Codegen: uint64, (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1)))
Codegen: int64, (let x3 = (int64(Out.extent.1)*int64(Out.stride.1)) in select((x3 >= (int64)0), x3, ((int64)0 - x3)))
Codegen: int64, (int64(Out.extent.1)*int64(Out.stride.1))
Codegen: int64, int64(Out.extent.1)
Codegen: int32, Out.extent.1
Codegen: int64, int64(Out.stride.1)
Codegen: int32, Out.stride.1
Codegen: int64, select(((int64)x3 >= (int64)0), (int64)x3, ((int64)0 - (int64)x3))
Codegen: uint1, ((int64)x3 >= (int64)0)
Codegen: uint1, !((int64)0 > (int64)x3)
Codegen: uint1, ((int64)0 > (int64)x3)
Codegen: int64, (int64)0
Codegen: int64, (int64)x3
Codegen: int64, (int64)x3
Codegen: int64, ((int64)0 - (int64)x3)
Codegen: int64, (int64)0
Codegen: int64, (int64)x3
Codegen: uint64, (uint64)2147483647
Codegen: uint64, (uint64)1
Codegen: uint64, (uint64)shift_left(uint64(!((int64)Out.total_extent.1 <= (int64)2147483647)), (int64)2)
Codegen: uint64, uint64(!((int64)Out.total_extent.1 <= (int64)2147483647))
Codegen: uint1, !((int64)Out.total_extent.1 <= (int64)2147483647)
Codegen: uint1, ((int64)Out.total_extent.1 <= (int64)2147483647)
Codegen: uint1, !((int64)Out.total_extent.1 > (int64)2147483647)
Codegen: uint1, ((int64)Out.total_extent.1 > (int64)2147483647)
Codegen: int64, (int64)Out.total_extent.1
Codegen: int64, (int64)2147483647
Codegen: int64, (int64)2



Input to CSE (uint64)shift_left(uint64(!((int64)Out.total_extent.1 <= (int64)2147483647)), (uint64)2)
After removing lets: (uint64)shift_left(uint64(!((int64)Out.total_extent.1 <= (int64)2147483647)), (uint64)2)
Include: (uint64)shift_left(uint64(!((int64)Out.total_extent.1 <= (int64)2147483647)), (uint64)2); should extract: 1
Include: uint64(!((int64)Out.total_extent.1 <= (int64)2147483647)); should extract: 1
Include: !((int64)Out.total_extent.1 <= (int64)2147483647); should extract: 1
Include: ((int64)Out.total_extent.1 <= (int64)2147483647); should extract: 1
Include: (int64)Out.total_extent.1; should extract: 0
Include: (int64)2147483647; should extract: 0
Include: (uint64)2; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!((int64)Out.total_extent.1 <= (int64)2147483647)), (uint64)2)
0: (int64)Out.total_extent.1, 0
1: (int64)2147483647, 0
2: ((int64)Out.total_extent.1 <= (int64)2147483647), 1
3: !((int64)Out.total_extent.1 <= (int64)2147483647), 1
4: uint64(!((int64)Out.total_extent.1 <= (int64)2147483647)), 1
5: (uint64)2, 0
6: (uint64)shift_left(uint64(!((int64)Out.total_extent.1 <= (int64)2147483647)), (uint64)2), 1
With variables (uint64)shift_left(uint64(!((int64)Out.total_extent.1 <= (int64)2147483647)), (uint64)2)
With lets: (uint64)shift_left(uint64(!((int64)Out.total_extent.1 <= (int64)2147483647)), (uint64)2)
Codegen: uint64, (uint64)shift_left(uint64(!((int64)Out.total_extent.1 <= (int64)2147483647)), (uint64)2)
Codegen: uint64, uint64(!((int64)Out.total_extent.1 <= (int64)2147483647))
Codegen: uint1, !((int64)Out.total_extent.1 <= (int64)2147483647)
Codegen: uint1, ((int64)Out.total_extent.1 <= (int64)2147483647)
Codegen: uint1, !((int64)Out.total_extent.1 > (int64)2147483647)
Codegen: uint1, ((int64)Out.total_extent.1 > (int64)2147483647)
Codegen: int64, (int64)Out.total_extent.1
Codegen: int64, (int64)2147483647
Codegen: uint64, (uint64)2
Codegen: uint64, (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647)), (int64)3)
Codegen: uint64, uint64(!((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647))
Codegen: uint1, !((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647)
Codegen: uint1, ((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647)
Codegen: uint1, !((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) > (uint64)2147483647)
Codegen: uint1, ((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) > (uint64)2147483647)
Codegen: uint64, (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2)))
Codegen: int64, (let x4 = (int64(Out.extent.2)*int64(Out.stride.2)) in select((x4 >= (int64)0), x4, ((int64)0 - x4)))
Codegen: int64, (int64(Out.extent.2)*int64(Out.stride.2))
Codegen: int64, int64(Out.extent.2)
Codegen: int32, Out.extent.2
Codegen: int64, int64(Out.stride.2)
Codegen: int32, Out.stride.2
Codegen: int64, select(((int64)x4 >= (int64)0), (int64)x4, ((int64)0 - (int64)x4))
Codegen: uint1, ((int64)x4 >= (int64)0)
Codegen: uint1, !((int64)0 > (int64)x4)
Codegen: uint1, ((int64)0 > (int64)x4)
Codegen: int64, (int64)0
Codegen: int64, (int64)x4
Codegen: int64, (int64)x4
Codegen: int64, ((int64)0 - (int64)x4)
Codegen: int64, (int64)0
Codegen: int64, (int64)x4
Codegen: uint64, (uint64)2147483647
Codegen: int64, (int64)3



Input to CSE (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647)), (uint64)3)
After removing lets: (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647)), (uint64)3)
Include: (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647)), (uint64)3); should extract: 1
Include: uint64(!((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647)); should extract: 1
Include: !((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647); should extract: 1
Include: ((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647); should extract: 1
Include: (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))); should extract: 1
Include: (int64(Out.extent.2)*int64(Out.stride.2)); should extract: 1
Include: int64(Out.extent.2); should extract: 0
Include: Out.extent.2; should extract: 0
Include: int64(Out.stride.2); should extract: 0
Include: Out.stride.2; should extract: 0
Include: (uint64)2147483647; should extract: 0
Include: (uint64)3; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647)), (uint64)3)
0: Out.extent.2, 0
1: int64(Out.extent.2), 0
2: Out.stride.2, 0
3: int64(Out.stride.2), 0
4: (int64(Out.extent.2)*int64(Out.stride.2)), 1
5: (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), 1
6: (uint64)2147483647, 0
7: ((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), 1
8: !((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647), 1
9: uint64(!((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647)), 1
10: (uint64)3, 0
11: (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647)), (uint64)3), 1
With variables (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647)), (uint64)3)
With lets: (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647)), (uint64)3)
Codegen: uint64, (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647)), (uint64)3)
Codegen: uint64, uint64(!((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647))
Codegen: uint1, !((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647)
Codegen: uint1, ((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) <= (uint64)2147483647)
Codegen: uint1, !((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) > (uint64)2147483647)
Codegen: uint1, ((uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))) > (uint64)2147483647)
Codegen: uint64, (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2)))
Codegen: int64, (let x5 = (int64(Out.extent.2)*int64(Out.stride.2)) in select((x5 >= (int64)0), x5, ((int64)0 - x5)))
Codegen: int64, (int64(Out.extent.2)*int64(Out.stride.2))
Codegen: int64, int64(Out.extent.2)
Codegen: int32, Out.extent.2
Codegen: int64, int64(Out.stride.2)
Codegen: int32, Out.stride.2
Codegen: int64, select(((int64)x5 >= (int64)0), (int64)x5, ((int64)0 - (int64)x5))
Codegen: uint1, ((int64)x5 >= (int64)0)
Codegen: uint1, !((int64)0 > (int64)x5)
Codegen: uint1, ((int64)0 > (int64)x5)
Codegen: int64, (int64)0
Codegen: int64, (int64)x5
Codegen: int64, (int64)x5
Codegen: int64, ((int64)0 - (int64)x5)
Codegen: int64, (int64)0
Codegen: int64, (int64)x5
Codegen: uint64, (uint64)2147483647
Codegen: uint64, (uint64)3
Codegen: uint64, (uint64)shift_left(uint64(!((int64)Out.total_extent.2 <= (int64)2147483647)), (int64)4)
Codegen: uint64, uint64(!((int64)Out.total_extent.2 <= (int64)2147483647))
Codegen: uint1, !((int64)Out.total_extent.2 <= (int64)2147483647)
Codegen: uint1, ((int64)Out.total_extent.2 <= (int64)2147483647)
Codegen: uint1, !((int64)Out.total_extent.2 > (int64)2147483647)
Codegen: uint1, ((int64)Out.total_extent.2 > (int64)2147483647)
Codegen: int64, (int64)Out.total_extent.2
Codegen: int64, (int64)2147483647
Codegen: int64, (int64)4



Input to CSE (uint64)shift_left(uint64(!((int64)Out.total_extent.2 <= (int64)2147483647)), (uint64)4)
After removing lets: (uint64)shift_left(uint64(!((int64)Out.total_extent.2 <= (int64)2147483647)), (uint64)4)
Include: (uint64)shift_left(uint64(!((int64)Out.total_extent.2 <= (int64)2147483647)), (uint64)4); should extract: 1
Include: uint64(!((int64)Out.total_extent.2 <= (int64)2147483647)); should extract: 1
Include: !((int64)Out.total_extent.2 <= (int64)2147483647); should extract: 1
Include: ((int64)Out.total_extent.2 <= (int64)2147483647); should extract: 1
Include: (int64)Out.total_extent.2; should extract: 0
Include: (int64)2147483647; should extract: 0
Include: (uint64)4; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!((int64)Out.total_extent.2 <= (int64)2147483647)), (uint64)4)
0: (int64)Out.total_extent.2, 0
1: (int64)2147483647, 0
2: ((int64)Out.total_extent.2 <= (int64)2147483647), 1
3: !((int64)Out.total_extent.2 <= (int64)2147483647), 1
4: uint64(!((int64)Out.total_extent.2 <= (int64)2147483647)), 1
5: (uint64)4, 0
6: (uint64)shift_left(uint64(!((int64)Out.total_extent.2 <= (int64)2147483647)), (uint64)4), 1
With variables (uint64)shift_left(uint64(!((int64)Out.total_extent.2 <= (int64)2147483647)), (uint64)4)
With lets: (uint64)shift_left(uint64(!((int64)Out.total_extent.2 <= (int64)2147483647)), (uint64)4)
Codegen: uint64, (uint64)shift_left(uint64(!((int64)Out.total_extent.2 <= (int64)2147483647)), (uint64)4)
Codegen: uint64, uint64(!((int64)Out.total_extent.2 <= (int64)2147483647))
Codegen: uint1, !((int64)Out.total_extent.2 <= (int64)2147483647)
Codegen: uint1, ((int64)Out.total_extent.2 <= (int64)2147483647)
Codegen: uint1, !((int64)Out.total_extent.2 > (int64)2147483647)
Codegen: uint1, ((int64)Out.total_extent.2 > (int64)2147483647)
Codegen: int64, (int64)Out.total_extent.2
Codegen: int64, (int64)2147483647
Codegen: uint64, (uint64)4
Codegen: uint64, (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647)), (int64)5)
Codegen: uint64, uint64(!((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647))
Codegen: uint1, !((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647)
Codegen: uint1, ((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647)
Codegen: uint1, !((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) > (uint64)2147483647)
Codegen: uint1, ((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) > (uint64)2147483647)
Codegen: uint64, (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3)))
Codegen: int64, (let x6 = (int64(Out.extent.3)*int64(Out.stride.3)) in select((x6 >= (int64)0), x6, ((int64)0 - x6)))
Codegen: int64, (int64(Out.extent.3)*int64(Out.stride.3))
Codegen: int64, int64(Out.extent.3)
Codegen: int32, Out.extent.3
Codegen: int64, int64(Out.stride.3)
Codegen: int32, Out.stride.3
Codegen: int64, select(((int64)x6 >= (int64)0), (int64)x6, ((int64)0 - (int64)x6))
Codegen: uint1, ((int64)x6 >= (int64)0)
Codegen: uint1, !((int64)0 > (int64)x6)
Codegen: uint1, ((int64)0 > (int64)x6)
Codegen: int64, (int64)0
Codegen: int64, (int64)x6
Codegen: int64, (int64)x6
Codegen: int64, ((int64)0 - (int64)x6)
Codegen: int64, (int64)0
Codegen: int64, (int64)x6
Codegen: uint64, (uint64)2147483647
Codegen: int64, (int64)5



Input to CSE (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647)), (uint64)5)
After removing lets: (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647)), (uint64)5)
Include: (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647)), (uint64)5); should extract: 1
Include: uint64(!((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647)); should extract: 1
Include: !((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647); should extract: 1
Include: ((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647); should extract: 1
Include: (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))); should extract: 1
Include: (int64(Out.extent.3)*int64(Out.stride.3)); should extract: 1
Include: int64(Out.extent.3); should extract: 0
Include: Out.extent.3; should extract: 0
Include: int64(Out.stride.3); should extract: 0
Include: Out.stride.3; should extract: 0
Include: (uint64)2147483647; should extract: 0
Include: (uint64)5; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647)), (uint64)5)
0: Out.extent.3, 0
1: int64(Out.extent.3), 0
2: Out.stride.3, 0
3: int64(Out.stride.3), 0
4: (int64(Out.extent.3)*int64(Out.stride.3)), 1
5: (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), 1
6: (uint64)2147483647, 0
7: ((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), 1
8: !((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647), 1
9: uint64(!((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647)), 1
10: (uint64)5, 0
11: (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647)), (uint64)5), 1
With variables (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647)), (uint64)5)
With lets: (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647)), (uint64)5)
Codegen: uint64, (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647)), (uint64)5)
Codegen: uint64, uint64(!((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647))
Codegen: uint1, !((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647)
Codegen: uint1, ((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) <= (uint64)2147483647)
Codegen: uint1, !((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) > (uint64)2147483647)
Codegen: uint1, ((uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))) > (uint64)2147483647)
Codegen: uint64, (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3)))
Codegen: int64, (let x7 = (int64(Out.extent.3)*int64(Out.stride.3)) in select((x7 >= (int64)0), x7, ((int64)0 - x7)))
Codegen: int64, (int64(Out.extent.3)*int64(Out.stride.3))
Codegen: int64, int64(Out.extent.3)
Codegen: int32, Out.extent.3
Codegen: int64, int64(Out.stride.3)
Codegen: int32, Out.stride.3
Codegen: int64, select(((int64)x7 >= (int64)0), (int64)x7, ((int64)0 - (int64)x7))
Codegen: uint1, ((int64)x7 >= (int64)0)
Codegen: uint1, !((int64)0 > (int64)x7)
Codegen: uint1, ((int64)0 > (int64)x7)
Codegen: int64, (int64)0
Codegen: int64, (int64)x7
Codegen: int64, (int64)x7
Codegen: int64, ((int64)0 - (int64)x7)
Codegen: int64, (int64)0
Codegen: int64, (int64)x7
Codegen: uint64, (uint64)2147483647
Codegen: uint64, (uint64)5
Codegen: uint64, (uint64)shift_left(uint64(!((int64)Out.total_extent.3 <= (int64)2147483647)), (int64)6)
Codegen: uint64, uint64(!((int64)Out.total_extent.3 <= (int64)2147483647))
Codegen: uint1, !((int64)Out.total_extent.3 <= (int64)2147483647)
Codegen: uint1, ((int64)Out.total_extent.3 <= (int64)2147483647)
Codegen: uint1, !((int64)Out.total_extent.3 > (int64)2147483647)
Codegen: uint1, ((int64)Out.total_extent.3 > (int64)2147483647)
Codegen: int64, (int64)Out.total_extent.3
Codegen: int64, (int64)2147483647
Codegen: int64, (int64)6



Input to CSE (uint64)shift_left(uint64(!((int64)Out.total_extent.3 <= (int64)2147483647)), (uint64)6)
After removing lets: (uint64)shift_left(uint64(!((int64)Out.total_extent.3 <= (int64)2147483647)), (uint64)6)
Include: (uint64)shift_left(uint64(!((int64)Out.total_extent.3 <= (int64)2147483647)), (uint64)6); should extract: 1
Include: uint64(!((int64)Out.total_extent.3 <= (int64)2147483647)); should extract: 1
Include: !((int64)Out.total_extent.3 <= (int64)2147483647); should extract: 1
Include: ((int64)Out.total_extent.3 <= (int64)2147483647); should extract: 1
Include: (int64)Out.total_extent.3; should extract: 0
Include: (int64)2147483647; should extract: 0
Include: (uint64)6; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!((int64)Out.total_extent.3 <= (int64)2147483647)), (uint64)6)
0: (int64)Out.total_extent.3, 0
1: (int64)2147483647, 0
2: ((int64)Out.total_extent.3 <= (int64)2147483647), 1
3: !((int64)Out.total_extent.3 <= (int64)2147483647), 1
4: uint64(!((int64)Out.total_extent.3 <= (int64)2147483647)), 1
5: (uint64)6, 0
6: (uint64)shift_left(uint64(!((int64)Out.total_extent.3 <= (int64)2147483647)), (uint64)6), 1
With variables (uint64)shift_left(uint64(!((int64)Out.total_extent.3 <= (int64)2147483647)), (uint64)6)
With lets: (uint64)shift_left(uint64(!((int64)Out.total_extent.3 <= (int64)2147483647)), (uint64)6)
Codegen: uint64, (uint64)shift_left(uint64(!((int64)Out.total_extent.3 <= (int64)2147483647)), (uint64)6)
Codegen: uint64, uint64(!((int64)Out.total_extent.3 <= (int64)2147483647))
Codegen: uint1, !((int64)Out.total_extent.3 <= (int64)2147483647)
Codegen: uint1, ((int64)Out.total_extent.3 <= (int64)2147483647)
Codegen: uint1, !((int64)Out.total_extent.3 > (int64)2147483647)
Codegen: uint1, ((int64)Out.total_extent.3 > (int64)2147483647)
Codegen: int64, (int64)Out.total_extent.3
Codegen: int64, (int64)2147483647
Codegen: uint64, (uint64)6
Codegen: uint64, (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647)), (int64)7)
Codegen: uint64, uint64(!((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647))
Codegen: uint1, !((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647)
Codegen: uint1, ((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647)
Codegen: uint1, !((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) > (uint64)2147483647)
Codegen: uint1, ((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) > (uint64)2147483647)
Codegen: uint64, (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4)))
Codegen: int64, (let x8 = (int64(Out.extent.4)*int64(Out.stride.4)) in select((x8 >= (int64)0), x8, ((int64)0 - x8)))
Codegen: int64, (int64(Out.extent.4)*int64(Out.stride.4))
Codegen: int64, int64(Out.extent.4)
Codegen: int32, Out.extent.4
Codegen: int64, int64(Out.stride.4)
Codegen: int32, Out.stride.4
Codegen: int64, select(((int64)x8 >= (int64)0), (int64)x8, ((int64)0 - (int64)x8))
Codegen: uint1, ((int64)x8 >= (int64)0)
Codegen: uint1, !((int64)0 > (int64)x8)
Codegen: uint1, ((int64)0 > (int64)x8)
Codegen: int64, (int64)0
Codegen: int64, (int64)x8
Codegen: int64, (int64)x8
Codegen: int64, ((int64)0 - (int64)x8)
Codegen: int64, (int64)0
Codegen: int64, (int64)x8
Codegen: uint64, (uint64)2147483647
Codegen: int64, (int64)7



Input to CSE (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647)), (uint64)7)
After removing lets: (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647)), (uint64)7)
Include: (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647)), (uint64)7); should extract: 1
Include: uint64(!((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647)); should extract: 1
Include: !((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647); should extract: 1
Include: ((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647); should extract: 1
Include: (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))); should extract: 1
Include: (int64(Out.extent.4)*int64(Out.stride.4)); should extract: 1
Include: int64(Out.extent.4); should extract: 0
Include: Out.extent.4; should extract: 0
Include: int64(Out.stride.4); should extract: 0
Include: Out.stride.4; should extract: 0
Include: (uint64)2147483647; should extract: 0
Include: (uint64)7; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647)), (uint64)7)
0: Out.extent.4, 0
1: int64(Out.extent.4), 0
2: Out.stride.4, 0
3: int64(Out.stride.4), 0
4: (int64(Out.extent.4)*int64(Out.stride.4)), 1
5: (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), 1
6: (uint64)2147483647, 0
7: ((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), 1
8: !((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647), 1
9: uint64(!((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647)), 1
10: (uint64)7, 0
11: (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647)), (uint64)7), 1
With variables (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647)), (uint64)7)
With lets: (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647)), (uint64)7)
Codegen: uint64, (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647)), (uint64)7)
Codegen: uint64, uint64(!((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647))
Codegen: uint1, !((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647)
Codegen: uint1, ((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) <= (uint64)2147483647)
Codegen: uint1, !((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) > (uint64)2147483647)
Codegen: uint1, ((uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))) > (uint64)2147483647)
Codegen: uint64, (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4)))
Codegen: int64, (let x9 = (int64(Out.extent.4)*int64(Out.stride.4)) in select((x9 >= (int64)0), x9, ((int64)0 - x9)))
Codegen: int64, (int64(Out.extent.4)*int64(Out.stride.4))
Codegen: int64, int64(Out.extent.4)
Codegen: int32, Out.extent.4
Codegen: int64, int64(Out.stride.4)
Codegen: int32, Out.stride.4
Codegen: int64, select(((int64)x9 >= (int64)0), (int64)x9, ((int64)0 - (int64)x9))
Codegen: uint1, ((int64)x9 >= (int64)0)
Codegen: uint1, !((int64)0 > (int64)x9)
Codegen: uint1, ((int64)0 > (int64)x9)
Codegen: int64, (int64)0
Codegen: int64, (int64)x9
Codegen: int64, (int64)x9
Codegen: int64, ((int64)0 - (int64)x9)
Codegen: int64, (int64)0
Codegen: int64, (int64)x9
Codegen: uint64, (uint64)2147483647
Codegen: uint64, (uint64)7
Codegen: uint64, (uint64)shift_left(uint64(!((int64)Out.total_extent.4 <= (int64)2147483647)), (int64)8)
Codegen: uint64, uint64(!((int64)Out.total_extent.4 <= (int64)2147483647))
Codegen: uint1, !((int64)Out.total_extent.4 <= (int64)2147483647)
Codegen: uint1, ((int64)Out.total_extent.4 <= (int64)2147483647)
Codegen: uint1, !((int64)Out.total_extent.4 > (int64)2147483647)
Codegen: uint1, ((int64)Out.total_extent.4 > (int64)2147483647)
Codegen: int64, (int64)Out.total_extent.4
Codegen: int64, (int64)2147483647
Codegen: int64, (int64)8



Input to CSE (uint64)shift_left(uint64(!((int64)Out.total_extent.4 <= (int64)2147483647)), (uint64)8)
After removing lets: (uint64)shift_left(uint64(!((int64)Out.total_extent.4 <= (int64)2147483647)), (uint64)8)
Include: (uint64)shift_left(uint64(!((int64)Out.total_extent.4 <= (int64)2147483647)), (uint64)8); should extract: 1
Include: uint64(!((int64)Out.total_extent.4 <= (int64)2147483647)); should extract: 1
Include: !((int64)Out.total_extent.4 <= (int64)2147483647); should extract: 1
Include: ((int64)Out.total_extent.4 <= (int64)2147483647); should extract: 1
Include: (int64)Out.total_extent.4; should extract: 0
Include: (int64)2147483647; should extract: 0
Include: (uint64)8; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!((int64)Out.total_extent.4 <= (int64)2147483647)), (uint64)8)
0: (int64)Out.total_extent.4, 0
1: (int64)2147483647, 0
2: ((int64)Out.total_extent.4 <= (int64)2147483647), 1
3: !((int64)Out.total_extent.4 <= (int64)2147483647), 1
4: uint64(!((int64)Out.total_extent.4 <= (int64)2147483647)), 1
5: (uint64)8, 0
6: (uint64)shift_left(uint64(!((int64)Out.total_extent.4 <= (int64)2147483647)), (uint64)8), 1
With variables (uint64)shift_left(uint64(!((int64)Out.total_extent.4 <= (int64)2147483647)), (uint64)8)
With lets: (uint64)shift_left(uint64(!((int64)Out.total_extent.4 <= (int64)2147483647)), (uint64)8)
Codegen: uint64, (uint64)shift_left(uint64(!((int64)Out.total_extent.4 <= (int64)2147483647)), (uint64)8)
Codegen: uint64, uint64(!((int64)Out.total_extent.4 <= (int64)2147483647))
Codegen: uint1, !((int64)Out.total_extent.4 <= (int64)2147483647)
Codegen: uint1, ((int64)Out.total_extent.4 <= (int64)2147483647)
Codegen: uint1, !((int64)Out.total_extent.4 > (int64)2147483647)
Codegen: uint1, ((int64)Out.total_extent.4 > (int64)2147483647)
Codegen: int64, (int64)Out.total_extent.4
Codegen: int64, (int64)2147483647
Codegen: uint64, (uint64)8
Codegen: uint64, (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647)), (int64)9)
Codegen: uint64, uint64(!((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647))
Codegen: uint1, !((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647)
Codegen: uint1, ((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647)
Codegen: uint1, !((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) > (uint64)2147483647)
Codegen: uint1, ((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) > (uint64)2147483647)
Codegen: uint64, (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5)))
Codegen: int64, (let x10 = (int64(Out.extent.5)*int64(Out.stride.5)) in select((x10 >= (int64)0), x10, ((int64)0 - x10)))
Codegen: int64, (int64(Out.extent.5)*int64(Out.stride.5))
Codegen: int64, int64(Out.extent.5)
Codegen: int32, Out.extent.5
Codegen: int64, int64(Out.stride.5)
Codegen: int32, Out.stride.5
Codegen: int64, select(((int64)x10 >= (int64)0), (int64)x10, ((int64)0 - (int64)x10))
Codegen: uint1, ((int64)x10 >= (int64)0)
Codegen: uint1, !((int64)0 > (int64)x10)
Codegen: uint1, ((int64)0 > (int64)x10)
Codegen: int64, (int64)0
Codegen: int64, (int64)x10
Codegen: int64, (int64)x10
Codegen: int64, ((int64)0 - (int64)x10)
Codegen: int64, (int64)0
Codegen: int64, (int64)x10
Codegen: uint64, (uint64)2147483647
Codegen: int64, (int64)9



Input to CSE (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647)), (uint64)9)
After removing lets: (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647)), (uint64)9)
Include: (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647)), (uint64)9); should extract: 1
Include: uint64(!((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647)); should extract: 1
Include: !((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647); should extract: 1
Include: ((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647); should extract: 1
Include: (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))); should extract: 1
Include: (int64(Out.extent.5)*int64(Out.stride.5)); should extract: 1
Include: int64(Out.extent.5); should extract: 0
Include: Out.extent.5; should extract: 0
Include: int64(Out.stride.5); should extract: 0
Include: Out.stride.5; should extract: 0
Include: (uint64)2147483647; should extract: 0
Include: (uint64)9; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647)), (uint64)9)
0: Out.extent.5, 0
1: int64(Out.extent.5), 0
2: Out.stride.5, 0
3: int64(Out.stride.5), 0
4: (int64(Out.extent.5)*int64(Out.stride.5)), 1
5: (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), 1
6: (uint64)2147483647, 0
7: ((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), 1
8: !((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647), 1
9: uint64(!((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647)), 1
10: (uint64)9, 0
11: (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647)), (uint64)9), 1
With variables (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647)), (uint64)9)
With lets: (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647)), (uint64)9)
Codegen: uint64, (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647)), (uint64)9)
Codegen: uint64, uint64(!((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647))
Codegen: uint1, !((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647)
Codegen: uint1, ((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) <= (uint64)2147483647)
Codegen: uint1, !((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) > (uint64)2147483647)
Codegen: uint1, ((uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))) > (uint64)2147483647)
Codegen: uint64, (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5)))
Codegen: int64, (let x11 = (int64(Out.extent.5)*int64(Out.stride.5)) in select((x11 >= (int64)0), x11, ((int64)0 - x11)))
Codegen: int64, (int64(Out.extent.5)*int64(Out.stride.5))
Codegen: int64, int64(Out.extent.5)
Codegen: int32, Out.extent.5
Codegen: int64, int64(Out.stride.5)
Codegen: int32, Out.stride.5
Codegen: int64, select(((int64)x11 >= (int64)0), (int64)x11, ((int64)0 - (int64)x11))
Codegen: uint1, ((int64)x11 >= (int64)0)
Codegen: uint1, !((int64)0 > (int64)x11)
Codegen: uint1, ((int64)0 > (int64)x11)
Codegen: int64, (int64)0
Codegen: int64, (int64)x11
Codegen: int64, (int64)x11
Codegen: int64, ((int64)0 - (int64)x11)
Codegen: int64, (int64)0
Codegen: int64, (int64)x11
Codegen: uint64, (uint64)2147483647
Codegen: uint64, (uint64)9
Codegen: uint64, (uint64)shift_left(uint64(!((int64)Out.total_extent.5 <= (int64)2147483647)), (int64)10)
Codegen: uint64, uint64(!((int64)Out.total_extent.5 <= (int64)2147483647))
Codegen: uint1, !((int64)Out.total_extent.5 <= (int64)2147483647)
Codegen: uint1, ((int64)Out.total_extent.5 <= (int64)2147483647)
Codegen: uint1, !((int64)Out.total_extent.5 > (int64)2147483647)
Codegen: uint1, ((int64)Out.total_extent.5 > (int64)2147483647)
Codegen: int64, (int64)Out.total_extent.5
Codegen: int64, (int64)2147483647
Codegen: int64, (int64)10



Input to CSE (uint64)shift_left(uint64(!((int64)Out.total_extent.5 <= (int64)2147483647)), (uint64)10)
After removing lets: (uint64)shift_left(uint64(!((int64)Out.total_extent.5 <= (int64)2147483647)), (uint64)10)
Include: (uint64)shift_left(uint64(!((int64)Out.total_extent.5 <= (int64)2147483647)), (uint64)10); should extract: 1
Include: uint64(!((int64)Out.total_extent.5 <= (int64)2147483647)); should extract: 1
Include: !((int64)Out.total_extent.5 <= (int64)2147483647); should extract: 1
Include: ((int64)Out.total_extent.5 <= (int64)2147483647); should extract: 1
Include: (int64)Out.total_extent.5; should extract: 0
Include: (int64)2147483647; should extract: 0
Include: (uint64)10; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!((int64)Out.total_extent.5 <= (int64)2147483647)), (uint64)10)
0: (int64)Out.total_extent.5, 0
1: (int64)2147483647, 0
2: ((int64)Out.total_extent.5 <= (int64)2147483647), 1
3: !((int64)Out.total_extent.5 <= (int64)2147483647), 1
4: uint64(!((int64)Out.total_extent.5 <= (int64)2147483647)), 1
5: (uint64)10, 0
6: (uint64)shift_left(uint64(!((int64)Out.total_extent.5 <= (int64)2147483647)), (uint64)10), 1
With variables (uint64)shift_left(uint64(!((int64)Out.total_extent.5 <= (int64)2147483647)), (uint64)10)
With lets: (uint64)shift_left(uint64(!((int64)Out.total_extent.5 <= (int64)2147483647)), (uint64)10)
Codegen: uint64, (uint64)shift_left(uint64(!((int64)Out.total_extent.5 <= (int64)2147483647)), (uint64)10)
Codegen: uint64, uint64(!((int64)Out.total_extent.5 <= (int64)2147483647))
Codegen: uint1, !((int64)Out.total_extent.5 <= (int64)2147483647)
Codegen: uint1, ((int64)Out.total_extent.5 <= (int64)2147483647)
Codegen: uint1, !((int64)Out.total_extent.5 > (int64)2147483647)
Codegen: uint1, ((int64)Out.total_extent.5 > (int64)2147483647)
Codegen: int64, (int64)Out.total_extent.5
Codegen: int64, (int64)2147483647
Codegen: uint64, (uint64)10
Codegen: uint64, (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647)), (int64)11)
Codegen: uint64, uint64(!((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647))
Codegen: uint1, !((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647)
Codegen: uint1, ((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647)
Codegen: uint1, !((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) > (uint64)2147483647)
Codegen: uint1, ((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) > (uint64)2147483647)
Codegen: uint64, (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6)))
Codegen: int64, (let x12 = (int64(Out.extent.6)*int64(Out.stride.6)) in select((x12 >= (int64)0), x12, ((int64)0 - x12)))
Codegen: int64, (int64(Out.extent.6)*int64(Out.stride.6))
Codegen: int64, int64(Out.extent.6)
Codegen: int32, Out.extent.6
Codegen: int64, int64(Out.stride.6)
Codegen: int32, Out.stride.6
Codegen: int64, select(((int64)x12 >= (int64)0), (int64)x12, ((int64)0 - (int64)x12))
Codegen: uint1, ((int64)x12 >= (int64)0)
Codegen: uint1, !((int64)0 > (int64)x12)
Codegen: uint1, ((int64)0 > (int64)x12)
Codegen: int64, (int64)0
Codegen: int64, (int64)x12
Codegen: int64, (int64)x12
Codegen: int64, ((int64)0 - (int64)x12)
Codegen: int64, (int64)0
Codegen: int64, (int64)x12
Codegen: uint64, (uint64)2147483647
Codegen: int64, (int64)11



Input to CSE (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647)), (uint64)11)
After removing lets: (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647)), (uint64)11)
Include: (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647)), (uint64)11); should extract: 1
Include: uint64(!((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647)); should extract: 1
Include: !((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647); should extract: 1
Include: ((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647); should extract: 1
Include: (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))); should extract: 1
Include: (int64(Out.extent.6)*int64(Out.stride.6)); should extract: 1
Include: int64(Out.extent.6); should extract: 0
Include: Out.extent.6; should extract: 0
Include: int64(Out.stride.6); should extract: 0
Include: Out.stride.6; should extract: 0
Include: (uint64)2147483647; should extract: 0
Include: (uint64)11; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647)), (uint64)11)
0: Out.extent.6, 0
1: int64(Out.extent.6), 0
2: Out.stride.6, 0
3: int64(Out.stride.6), 0
4: (int64(Out.extent.6)*int64(Out.stride.6)), 1
5: (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), 1
6: (uint64)2147483647, 0
7: ((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), 1
8: !((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647), 1
9: uint64(!((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647)), 1
10: (uint64)11, 0
11: (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647)), (uint64)11), 1
With variables (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647)), (uint64)11)
With lets: (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647)), (uint64)11)
Codegen: uint64, (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647)), (uint64)11)
Codegen: uint64, uint64(!((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647))
Codegen: uint1, !((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647)
Codegen: uint1, ((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) <= (uint64)2147483647)
Codegen: uint1, !((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) > (uint64)2147483647)
Codegen: uint1, ((uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))) > (uint64)2147483647)
Codegen: uint64, (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6)))
Codegen: int64, (let x13 = (int64(Out.extent.6)*int64(Out.stride.6)) in select((x13 >= (int64)0), x13, ((int64)0 - x13)))
Codegen: int64, (int64(Out.extent.6)*int64(Out.stride.6))
Codegen: int64, int64(Out.extent.6)
Codegen: int32, Out.extent.6
Codegen: int64, int64(Out.stride.6)
Codegen: int32, Out.stride.6
Codegen: int64, select(((int64)x13 >= (int64)0), (int64)x13, ((int64)0 - (int64)x13))
Codegen: uint1, ((int64)x13 >= (int64)0)
Codegen: uint1, !((int64)0 > (int64)x13)
Codegen: uint1, ((int64)0 > (int64)x13)
Codegen: int64, (int64)0
Codegen: int64, (int64)x13
Codegen: int64, (int64)x13
Codegen: int64, ((int64)0 - (int64)x13)
Codegen: int64, (int64)0
Codegen: int64, (int64)x13
Codegen: uint64, (uint64)2147483647
Codegen: uint64, (uint64)11
Codegen: uint64, (uint64)shift_left(uint64(!((int64)Out.total_extent.6 <= (int64)2147483647)), (int64)12)
Codegen: uint64, uint64(!((int64)Out.total_extent.6 <= (int64)2147483647))
Codegen: uint1, !((int64)Out.total_extent.6 <= (int64)2147483647)
Codegen: uint1, ((int64)Out.total_extent.6 <= (int64)2147483647)
Codegen: uint1, !((int64)Out.total_extent.6 > (int64)2147483647)
Codegen: uint1, ((int64)Out.total_extent.6 > (int64)2147483647)
Codegen: int64, (int64)Out.total_extent.6
Codegen: int64, (int64)2147483647
Codegen: int64, (int64)12



Input to CSE (uint64)shift_left(uint64(!((int64)Out.total_extent.6 <= (int64)2147483647)), (uint64)12)
After removing lets: (uint64)shift_left(uint64(!((int64)Out.total_extent.6 <= (int64)2147483647)), (uint64)12)
Include: (uint64)shift_left(uint64(!((int64)Out.total_extent.6 <= (int64)2147483647)), (uint64)12); should extract: 1
Include: uint64(!((int64)Out.total_extent.6 <= (int64)2147483647)); should extract: 1
Include: !((int64)Out.total_extent.6 <= (int64)2147483647); should extract: 1
Include: ((int64)Out.total_extent.6 <= (int64)2147483647); should extract: 1
Include: (int64)Out.total_extent.6; should extract: 0
Include: (int64)2147483647; should extract: 0
Include: (uint64)12; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!((int64)Out.total_extent.6 <= (int64)2147483647)), (uint64)12)
0: (int64)Out.total_extent.6, 0
1: (int64)2147483647, 0
2: ((int64)Out.total_extent.6 <= (int64)2147483647), 1
3: !((int64)Out.total_extent.6 <= (int64)2147483647), 1
4: uint64(!((int64)Out.total_extent.6 <= (int64)2147483647)), 1
5: (uint64)12, 0
6: (uint64)shift_left(uint64(!((int64)Out.total_extent.6 <= (int64)2147483647)), (uint64)12), 1
With variables (uint64)shift_left(uint64(!((int64)Out.total_extent.6 <= (int64)2147483647)), (uint64)12)
With lets: (uint64)shift_left(uint64(!((int64)Out.total_extent.6 <= (int64)2147483647)), (uint64)12)
Codegen: uint64, (uint64)shift_left(uint64(!((int64)Out.total_extent.6 <= (int64)2147483647)), (uint64)12)
Codegen: uint64, uint64(!((int64)Out.total_extent.6 <= (int64)2147483647))
Codegen: uint1, !((int64)Out.total_extent.6 <= (int64)2147483647)
Codegen: uint1, ((int64)Out.total_extent.6 <= (int64)2147483647)
Codegen: uint1, !((int64)Out.total_extent.6 > (int64)2147483647)
Codegen: uint1, ((int64)Out.total_extent.6 > (int64)2147483647)
Codegen: int64, (int64)Out.total_extent.6
Codegen: int64, (int64)2147483647
Codegen: uint64, (uint64)12
Codegen: uint64, (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647)), (int64)13)
Codegen: uint64, uint64(!((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647))
Codegen: uint1, !((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647)
Codegen: uint1, ((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647)
Codegen: uint1, !((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) > (uint64)2147483647)
Codegen: uint1, ((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) > (uint64)2147483647)
Codegen: uint64, (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7)))
Codegen: int64, (let x14 = (int64(Out.extent.7)*int64(Out.stride.7)) in select((x14 >= (int64)0), x14, ((int64)0 - x14)))
Codegen: int64, (int64(Out.extent.7)*int64(Out.stride.7))
Codegen: int64, int64(Out.extent.7)
Codegen: int32, Out.extent.7
Codegen: int64, int64(Out.stride.7)
Codegen: int32, Out.stride.7
Codegen: int64, select(((int64)x14 >= (int64)0), (int64)x14, ((int64)0 - (int64)x14))
Codegen: uint1, ((int64)x14 >= (int64)0)
Codegen: uint1, !((int64)0 > (int64)x14)
Codegen: uint1, ((int64)0 > (int64)x14)
Codegen: int64, (int64)0
Codegen: int64, (int64)x14
Codegen: int64, (int64)x14
Codegen: int64, ((int64)0 - (int64)x14)
Codegen: int64, (int64)0
Codegen: int64, (int64)x14
Codegen: uint64, (uint64)2147483647
Codegen: int64, (int64)13



Input to CSE (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647)), (uint64)13)
After removing lets: (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647)), (uint64)13)
Include: (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647)), (uint64)13); should extract: 1
Include: uint64(!((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647)); should extract: 1
Include: !((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647); should extract: 1
Include: ((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647); should extract: 1
Include: (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))); should extract: 1
Include: (int64(Out.extent.7)*int64(Out.stride.7)); should extract: 1
Include: int64(Out.extent.7); should extract: 0
Include: Out.extent.7; should extract: 0
Include: int64(Out.stride.7); should extract: 0
Include: Out.stride.7; should extract: 0
Include: (uint64)2147483647; should extract: 0
Include: (uint64)13; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647)), (uint64)13)
0: Out.extent.7, 0
1: int64(Out.extent.7), 0
2: Out.stride.7, 0
3: int64(Out.stride.7), 0
4: (int64(Out.extent.7)*int64(Out.stride.7)), 1
5: (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), 1
6: (uint64)2147483647, 0
7: ((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), 1
8: !((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647), 1
9: uint64(!((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647)), 1
10: (uint64)13, 0
11: (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647)), (uint64)13), 1
With variables (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647)), (uint64)13)
With lets: (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647)), (uint64)13)
Codegen: uint64, (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647)), (uint64)13)
Codegen: uint64, uint64(!((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647))
Codegen: uint1, !((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647)
Codegen: uint1, ((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) <= (uint64)2147483647)
Codegen: uint1, !((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) > (uint64)2147483647)
Codegen: uint1, ((uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))) > (uint64)2147483647)
Codegen: uint64, (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7)))
Codegen: int64, (let x15 = (int64(Out.extent.7)*int64(Out.stride.7)) in select((x15 >= (int64)0), x15, ((int64)0 - x15)))
Codegen: int64, (int64(Out.extent.7)*int64(Out.stride.7))
Codegen: int64, int64(Out.extent.7)
Codegen: int32, Out.extent.7
Codegen: int64, int64(Out.stride.7)
Codegen: int32, Out.stride.7
Codegen: int64, select(((int64)x15 >= (int64)0), (int64)x15, ((int64)0 - (int64)x15))
Codegen: uint1, ((int64)x15 >= (int64)0)
Codegen: uint1, !((int64)0 > (int64)x15)
Codegen: uint1, ((int64)0 > (int64)x15)
Codegen: int64, (int64)0
Codegen: int64, (int64)x15
Codegen: int64, (int64)x15
Codegen: int64, ((int64)0 - (int64)x15)
Codegen: int64, (int64)0
Codegen: int64, (int64)x15
Codegen: uint64, (uint64)2147483647
Codegen: uint64, (uint64)13
Codegen: uint64, (uint64)shift_left(uint64(!((int64)Out.total_extent.7 <= (int64)2147483647)), (int64)14)
Codegen: uint64, uint64(!((int64)Out.total_extent.7 <= (int64)2147483647))
Codegen: uint1, !((int64)Out.total_extent.7 <= (int64)2147483647)
Codegen: uint1, ((int64)Out.total_extent.7 <= (int64)2147483647)
Codegen: uint1, !((int64)Out.total_extent.7 > (int64)2147483647)
Codegen: uint1, ((int64)Out.total_extent.7 > (int64)2147483647)
Codegen: int64, (int64)Out.total_extent.7
Codegen: int64, (int64)2147483647
Codegen: int64, (int64)14



Input to CSE (uint64)shift_left(uint64(!((int64)Out.total_extent.7 <= (int64)2147483647)), (uint64)14)
After removing lets: (uint64)shift_left(uint64(!((int64)Out.total_extent.7 <= (int64)2147483647)), (uint64)14)
Include: (uint64)shift_left(uint64(!((int64)Out.total_extent.7 <= (int64)2147483647)), (uint64)14); should extract: 1
Include: uint64(!((int64)Out.total_extent.7 <= (int64)2147483647)); should extract: 1
Include: !((int64)Out.total_extent.7 <= (int64)2147483647); should extract: 1
Include: ((int64)Out.total_extent.7 <= (int64)2147483647); should extract: 1
Include: (int64)Out.total_extent.7; should extract: 0
Include: (int64)2147483647; should extract: 0
Include: (uint64)14; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!((int64)Out.total_extent.7 <= (int64)2147483647)), (uint64)14)
0: (int64)Out.total_extent.7, 0
1: (int64)2147483647, 0
2: ((int64)Out.total_extent.7 <= (int64)2147483647), 1
3: !((int64)Out.total_extent.7 <= (int64)2147483647), 1
4: uint64(!((int64)Out.total_extent.7 <= (int64)2147483647)), 1
5: (uint64)14, 0
6: (uint64)shift_left(uint64(!((int64)Out.total_extent.7 <= (int64)2147483647)), (uint64)14), 1
With variables (uint64)shift_left(uint64(!((int64)Out.total_extent.7 <= (int64)2147483647)), (uint64)14)
With lets: (uint64)shift_left(uint64(!((int64)Out.total_extent.7 <= (int64)2147483647)), (uint64)14)
Codegen: uint64, (uint64)shift_left(uint64(!((int64)Out.total_extent.7 <= (int64)2147483647)), (uint64)14)
Codegen: uint64, uint64(!((int64)Out.total_extent.7 <= (int64)2147483647))
Codegen: uint1, !((int64)Out.total_extent.7 <= (int64)2147483647)
Codegen: uint1, ((int64)Out.total_extent.7 <= (int64)2147483647)
Codegen: uint1, !((int64)Out.total_extent.7 > (int64)2147483647)
Codegen: uint1, ((int64)Out.total_extent.7 > (int64)2147483647)
Codegen: int64, (int64)Out.total_extent.7
Codegen: int64, (int64)2147483647
Codegen: uint64, (uint64)14
Codegen: uint64, (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647)), (int64)15)
Codegen: uint64, uint64(!((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647))
Codegen: uint1, !((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647)
Codegen: uint1, ((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647)
Codegen: uint1, !((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) > (uint64)2147483647)
Codegen: uint1, ((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) > (uint64)2147483647)
Codegen: uint64, (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8)))
Codegen: int64, (let x16 = (int64(Out.extent.8)*int64(Out.stride.8)) in select((x16 >= (int64)0), x16, ((int64)0 - x16)))
Codegen: int64, (int64(Out.extent.8)*int64(Out.stride.8))
Codegen: int64, int64(Out.extent.8)
Codegen: int32, Out.extent.8
Codegen: int64, int64(Out.stride.8)
Codegen: int32, Out.stride.8
Codegen: int64, select(((int64)x16 >= (int64)0), (int64)x16, ((int64)0 - (int64)x16))
Codegen: uint1, ((int64)x16 >= (int64)0)
Codegen: uint1, !((int64)0 > (int64)x16)
Codegen: uint1, ((int64)0 > (int64)x16)
Codegen: int64, (int64)0
Codegen: int64, (int64)x16
Codegen: int64, (int64)x16
Codegen: int64, ((int64)0 - (int64)x16)
Codegen: int64, (int64)0
Codegen: int64, (int64)x16
Codegen: uint64, (uint64)2147483647
Codegen: int64, (int64)15



Input to CSE (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647)), (uint64)15)
After removing lets: (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647)), (uint64)15)
Include: (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647)), (uint64)15); should extract: 1
Include: uint64(!((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647)); should extract: 1
Include: !((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647); should extract: 1
Include: ((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647); should extract: 1
Include: (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))); should extract: 1
Include: (int64(Out.extent.8)*int64(Out.stride.8)); should extract: 1
Include: int64(Out.extent.8); should extract: 0
Include: Out.extent.8; should extract: 0
Include: int64(Out.stride.8); should extract: 0
Include: Out.stride.8; should extract: 0
Include: (uint64)2147483647; should extract: 0
Include: (uint64)15; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647)), (uint64)15)
0: Out.extent.8, 0
1: int64(Out.extent.8), 0
2: Out.stride.8, 0
3: int64(Out.stride.8), 0
4: (int64(Out.extent.8)*int64(Out.stride.8)), 1
5: (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), 1
6: (uint64)2147483647, 0
7: ((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), 1
8: !((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647), 1
9: uint64(!((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647)), 1
10: (uint64)15, 0
11: (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647)), (uint64)15), 1
With variables (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647)), (uint64)15)
With lets: (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647)), (uint64)15)
Codegen: uint64, (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647)), (uint64)15)
Codegen: uint64, uint64(!((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647))
Codegen: uint1, !((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647)
Codegen: uint1, ((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) <= (uint64)2147483647)
Codegen: uint1, !((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) > (uint64)2147483647)
Codegen: uint1, ((uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))) > (uint64)2147483647)
Codegen: uint64, (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8)))
Codegen: int64, (let x17 = (int64(Out.extent.8)*int64(Out.stride.8)) in select((x17 >= (int64)0), x17, ((int64)0 - x17)))
Codegen: int64, (int64(Out.extent.8)*int64(Out.stride.8))
Codegen: int64, int64(Out.extent.8)
Codegen: int32, Out.extent.8
Codegen: int64, int64(Out.stride.8)
Codegen: int32, Out.stride.8
Codegen: int64, select(((int64)x17 >= (int64)0), (int64)x17, ((int64)0 - (int64)x17))
Codegen: uint1, ((int64)x17 >= (int64)0)
Codegen: uint1, !((int64)0 > (int64)x17)
Codegen: uint1, ((int64)0 > (int64)x17)
Codegen: int64, (int64)0
Codegen: int64, (int64)x17
Codegen: int64, (int64)x17
Codegen: int64, ((int64)0 - (int64)x17)
Codegen: int64, (int64)0
Codegen: int64, (int64)x17
Codegen: uint64, (uint64)2147483647
Codegen: uint64, (uint64)15
Codegen: uint64, (uint64)shift_left(uint64(!((int64)Out.total_extent.8 <= (int64)2147483647)), (int64)16)
Codegen: uint64, uint64(!((int64)Out.total_extent.8 <= (int64)2147483647))
Codegen: uint1, !((int64)Out.total_extent.8 <= (int64)2147483647)
Codegen: uint1, ((int64)Out.total_extent.8 <= (int64)2147483647)
Codegen: uint1, !((int64)Out.total_extent.8 > (int64)2147483647)
Codegen: uint1, ((int64)Out.total_extent.8 > (int64)2147483647)
Codegen: int64, (int64)Out.total_extent.8
Codegen: int64, (int64)2147483647
Codegen: int64, (int64)16



Input to CSE (uint64)shift_left(uint64(!((int64)Out.total_extent.8 <= (int64)2147483647)), (uint64)16)
After removing lets: (uint64)shift_left(uint64(!((int64)Out.total_extent.8 <= (int64)2147483647)), (uint64)16)
Include: (uint64)shift_left(uint64(!((int64)Out.total_extent.8 <= (int64)2147483647)), (uint64)16); should extract: 1
Include: uint64(!((int64)Out.total_extent.8 <= (int64)2147483647)); should extract: 1
Include: !((int64)Out.total_extent.8 <= (int64)2147483647); should extract: 1
Include: ((int64)Out.total_extent.8 <= (int64)2147483647); should extract: 1
Include: (int64)Out.total_extent.8; should extract: 0
Include: (int64)2147483647; should extract: 0
Include: (uint64)16; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!((int64)Out.total_extent.8 <= (int64)2147483647)), (uint64)16)
0: (int64)Out.total_extent.8, 0
1: (int64)2147483647, 0
2: ((int64)Out.total_extent.8 <= (int64)2147483647), 1
3: !((int64)Out.total_extent.8 <= (int64)2147483647), 1
4: uint64(!((int64)Out.total_extent.8 <= (int64)2147483647)), 1
5: (uint64)16, 0
6: (uint64)shift_left(uint64(!((int64)Out.total_extent.8 <= (int64)2147483647)), (uint64)16), 1
With variables (uint64)shift_left(uint64(!((int64)Out.total_extent.8 <= (int64)2147483647)), (uint64)16)
With lets: (uint64)shift_left(uint64(!((int64)Out.total_extent.8 <= (int64)2147483647)), (uint64)16)
Codegen: uint64, (uint64)shift_left(uint64(!((int64)Out.total_extent.8 <= (int64)2147483647)), (uint64)16)
Codegen: uint64, uint64(!((int64)Out.total_extent.8 <= (int64)2147483647))
Codegen: uint1, !((int64)Out.total_extent.8 <= (int64)2147483647)
Codegen: uint1, ((int64)Out.total_extent.8 <= (int64)2147483647)
Codegen: uint1, !((int64)Out.total_extent.8 > (int64)2147483647)
Codegen: uint1, ((int64)Out.total_extent.8 > (int64)2147483647)
Codegen: int64, (int64)Out.total_extent.8
Codegen: int64, (int64)2147483647
Codegen: uint64, (uint64)16
Codegen: uint64, (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647)), (int64)17)
Codegen: uint64, uint64(!((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647))
Codegen: uint1, !((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647)
Codegen: uint1, ((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647)
Codegen: uint1, !((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) > (uint64)2147483647)
Codegen: uint1, ((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) > (uint64)2147483647)
Codegen: uint64, (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9)))
Codegen: int64, (let x18 = (int64(Out.extent.9)*int64(Out.stride.9)) in select((x18 >= (int64)0), x18, ((int64)0 - x18)))
Codegen: int64, (int64(Out.extent.9)*int64(Out.stride.9))
Codegen: int64, int64(Out.extent.9)
Codegen: int32, Out.extent.9
Codegen: int64, int64(Out.stride.9)
Codegen: int32, Out.stride.9
Codegen: int64, select(((int64)x18 >= (int64)0), (int64)x18, ((int64)0 - (int64)x18))
Codegen: uint1, ((int64)x18 >= (int64)0)
Codegen: uint1, !((int64)0 > (int64)x18)
Codegen: uint1, ((int64)0 > (int64)x18)
Codegen: int64, (int64)0
Codegen: int64, (int64)x18
Codegen: int64, (int64)x18
Codegen: int64, ((int64)0 - (int64)x18)
Codegen: int64, (int64)0
Codegen: int64, (int64)x18
Codegen: uint64, (uint64)2147483647
Codegen: int64, (int64)17



Input to CSE (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647)), (uint64)17)
After removing lets: (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647)), (uint64)17)
Include: (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647)), (uint64)17); should extract: 1
Include: uint64(!((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647)); should extract: 1
Include: !((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647); should extract: 1
Include: ((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647); should extract: 1
Include: (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))); should extract: 1
Include: (int64(Out.extent.9)*int64(Out.stride.9)); should extract: 1
Include: int64(Out.extent.9); should extract: 0
Include: Out.extent.9; should extract: 0
Include: int64(Out.stride.9); should extract: 0
Include: Out.stride.9; should extract: 0
Include: (uint64)2147483647; should extract: 0
Include: (uint64)17; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647)), (uint64)17)
0: Out.extent.9, 0
1: int64(Out.extent.9), 0
2: Out.stride.9, 0
3: int64(Out.stride.9), 0
4: (int64(Out.extent.9)*int64(Out.stride.9)), 1
5: (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), 1
6: (uint64)2147483647, 0
7: ((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), 1
8: !((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647), 1
9: uint64(!((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647)), 1
10: (uint64)17, 0
11: (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647)), (uint64)17), 1
With variables (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647)), (uint64)17)
With lets: (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647)), (uint64)17)
Codegen: uint64, (uint64)shift_left(uint64(!((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647)), (uint64)17)
Codegen: uint64, uint64(!((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647))
Codegen: uint1, !((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647)
Codegen: uint1, ((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) <= (uint64)2147483647)
Codegen: uint1, !((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) > (uint64)2147483647)
Codegen: uint1, ((uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))) > (uint64)2147483647)
Codegen: uint64, (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9)))
Codegen: int64, (let x19 = (int64(Out.extent.9)*int64(Out.stride.9)) in select((x19 >= (int64)0), x19, ((int64)0 - x19)))
Codegen: int64, (int64(Out.extent.9)*int64(Out.stride.9))
Codegen: int64, int64(Out.extent.9)
Codegen: int32, Out.extent.9
Codegen: int64, int64(Out.stride.9)
Codegen: int32, Out.stride.9
Codegen: int64, select(((int64)x19 >= (int64)0), (int64)x19, ((int64)0 - (int64)x19))
Codegen: uint1, ((int64)x19 >= (int64)0)
Codegen: uint1, !((int64)0 > (int64)x19)
Codegen: uint1, ((int64)0 > (int64)x19)
Codegen: int64, (int64)0
Codegen: int64, (int64)x19
Codegen: int64, (int64)x19
Codegen: int64, ((int64)0 - (int64)x19)
Codegen: int64, (int64)0
Codegen: int64, (int64)x19
Codegen: uint64, (uint64)2147483647
Codegen: uint64, (uint64)17
Codegen: uint64, (uint64)shift_left(uint64(!((int64)Out.total_extent.9 <= (int64)2147483647)), (int64)18)
Codegen: uint64, uint64(!((int64)Out.total_extent.9 <= (int64)2147483647))
Codegen: uint1, !((int64)Out.total_extent.9 <= (int64)2147483647)
Codegen: uint1, ((int64)Out.total_extent.9 <= (int64)2147483647)
Codegen: uint1, !((int64)Out.total_extent.9 > (int64)2147483647)
Codegen: uint1, ((int64)Out.total_extent.9 > (int64)2147483647)
Codegen: int64, (int64)Out.total_extent.9
Codegen: int64, (int64)2147483647
Codegen: int64, (int64)18



Input to CSE (uint64)shift_left(uint64(!((int64)Out.total_extent.9 <= (int64)2147483647)), (uint64)18)
After removing lets: (uint64)shift_left(uint64(!((int64)Out.total_extent.9 <= (int64)2147483647)), (uint64)18)
Include: (uint64)shift_left(uint64(!((int64)Out.total_extent.9 <= (int64)2147483647)), (uint64)18); should extract: 1
Include: uint64(!((int64)Out.total_extent.9 <= (int64)2147483647)); should extract: 1
Include: !((int64)Out.total_extent.9 <= (int64)2147483647); should extract: 1
Include: ((int64)Out.total_extent.9 <= (int64)2147483647); should extract: 1
Include: (int64)Out.total_extent.9; should extract: 0
Include: (int64)2147483647; should extract: 0
Include: (uint64)18; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!((int64)Out.total_extent.9 <= (int64)2147483647)), (uint64)18)
0: (int64)Out.total_extent.9, 0
1: (int64)2147483647, 0
2: ((int64)Out.total_extent.9 <= (int64)2147483647), 1
3: !((int64)Out.total_extent.9 <= (int64)2147483647), 1
4: uint64(!((int64)Out.total_extent.9 <= (int64)2147483647)), 1
5: (uint64)18, 0
6: (uint64)shift_left(uint64(!((int64)Out.total_extent.9 <= (int64)2147483647)), (uint64)18), 1
With variables (uint64)shift_left(uint64(!((int64)Out.total_extent.9 <= (int64)2147483647)), (uint64)18)
With lets: (uint64)shift_left(uint64(!((int64)Out.total_extent.9 <= (int64)2147483647)), (uint64)18)
Codegen: uint64, (uint64)shift_left(uint64(!((int64)Out.total_extent.9 <= (int64)2147483647)), (uint64)18)
Codegen: uint64, uint64(!((int64)Out.total_extent.9 <= (int64)2147483647))
Codegen: uint1, !((int64)Out.total_extent.9 <= (int64)2147483647)
Codegen: uint1, ((int64)Out.total_extent.9 <= (int64)2147483647)
Codegen: uint1, !((int64)Out.total_extent.9 > (int64)2147483647)
Codegen: uint1, ((int64)Out.total_extent.9 > (int64)2147483647)
Codegen: int64, (int64)Out.total_extent.9
Codegen: int64, (int64)2147483647
Codegen: uint64, (uint64)18
Codegen: uint64, (uint64)shift_left(uint64(!((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647)), (int64)19)
Codegen: uint64, uint64(!((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647))
Codegen: uint1, !((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647)
Codegen: uint1, ((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647)
Codegen: uint1, !((uint64)abs(int64(P.extent.0)) > (uint64)2147483647)
Codegen: uint1, ((uint64)abs(int64(P.extent.0)) > (uint64)2147483647)
Codegen: uint64, (uint64)abs(int64(P.extent.0))
Codegen: int64, (let x20 = int64(P.extent.0) in select((x20 >= (int64)0), x20, ((int64)0 - x20)))
Codegen: int64, int64(P.extent.0)
Codegen: int32, P.extent.0
Codegen: int64, select(((int64)x20 >= (int64)0), (int64)x20, ((int64)0 - (int64)x20))
Codegen: uint1, ((int64)x20 >= (int64)0)
Codegen: uint1, !((int64)0 > (int64)x20)
Codegen: uint1, ((int64)0 > (int64)x20)
Codegen: int64, (int64)0
Codegen: int64, (int64)x20
Codegen: int64, (int64)x20
Codegen: int64, ((int64)0 - (int64)x20)
Codegen: int64, (int64)0
Codegen: int64, (int64)x20
Codegen: uint64, (uint64)2147483647
Codegen: int64, (int64)19



Input to CSE (uint64)shift_left(uint64(!((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647)), (uint64)19)
After removing lets: (uint64)shift_left(uint64(!((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647)), (uint64)19)
Include: (uint64)shift_left(uint64(!((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647)), (uint64)19); should extract: 1
Include: uint64(!((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647)); should extract: 1
Include: !((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647); should extract: 1
Include: ((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647); should extract: 1
Include: (uint64)abs(int64(P.extent.0)); should extract: 1
Include: int64(P.extent.0); should extract: 0
Include: P.extent.0; should extract: 0
Include: (uint64)2147483647; should extract: 0
Include: (uint64)19; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647)), (uint64)19)
0: P.extent.0, 0
1: int64(P.extent.0), 0
2: (uint64)abs(int64(P.extent.0)), 1
3: (uint64)2147483647, 0
4: ((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), 1
5: !((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647), 1
6: uint64(!((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647)), 1
7: (uint64)19, 0
8: (uint64)shift_left(uint64(!((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647)), (uint64)19), 1
With variables (uint64)shift_left(uint64(!((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647)), (uint64)19)
With lets: (uint64)shift_left(uint64(!((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647)), (uint64)19)
Codegen: uint64, (uint64)shift_left(uint64(!((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647)), (uint64)19)
Codegen: uint64, uint64(!((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647))
Codegen: uint1, !((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647)
Codegen: uint1, ((uint64)abs(int64(P.extent.0)) <= (uint64)2147483647)
Codegen: uint1, !((uint64)abs(int64(P.extent.0)) > (uint64)2147483647)
Codegen: uint1, ((uint64)abs(int64(P.extent.0)) > (uint64)2147483647)
Codegen: uint64, (uint64)abs(int64(P.extent.0))
Codegen: int64, (let x21 = int64(P.extent.0) in select((x21 >= (int64)0), x21, ((int64)0 - x21)))
Codegen: int64, int64(P.extent.0)
Codegen: int32, P.extent.0
Codegen: int64, select(((int64)x21 >= (int64)0), (int64)x21, ((int64)0 - (int64)x21))
Codegen: uint1, ((int64)x21 >= (int64)0)
Codegen: uint1, !((int64)0 > (int64)x21)
Codegen: uint1, ((int64)0 > (int64)x21)
Codegen: int64, (int64)0
Codegen: int64, (int64)x21
Codegen: int64, (int64)x21
Codegen: int64, ((int64)0 - (int64)x21)
Codegen: int64, (int64)0
Codegen: int64, (int64)x21
Codegen: uint64, (uint64)2147483647
Codegen: uint64, (uint64)19
Codegen: uint64, (uint64)shift_left(uint64(!((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647)), (int64)20)
Codegen: uint64, uint64(!((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647))
Codegen: uint1, !((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647)
Codegen: uint1, ((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647)
Codegen: uint1, !((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) > (uint64)2147483647)
Codegen: uint1, ((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) > (uint64)2147483647)
Codegen: uint64, (uint64)abs((int64(P.extent.1)*int64(P.stride.1)))
Codegen: int64, (let x22 = (int64(P.extent.1)*int64(P.stride.1)) in select((x22 >= (int64)0), x22, ((int64)0 - x22)))
Codegen: int64, (int64(P.extent.1)*int64(P.stride.1))
Codegen: int64, int64(P.extent.1)
Codegen: int32, P.extent.1
Codegen: int64, int64(P.stride.1)
Codegen: int32, P.stride.1
Codegen: int64, select(((int64)x22 >= (int64)0), (int64)x22, ((int64)0 - (int64)x22))
Codegen: uint1, ((int64)x22 >= (int64)0)
Codegen: uint1, !((int64)0 > (int64)x22)
Codegen: uint1, ((int64)0 > (int64)x22)
Codegen: int64, (int64)0
Codegen: int64, (int64)x22
Codegen: int64, (int64)x22
Codegen: int64, ((int64)0 - (int64)x22)
Codegen: int64, (int64)0
Codegen: int64, (int64)x22
Codegen: uint64, (uint64)2147483647
Codegen: int64, (int64)20



Input to CSE (uint64)shift_left(uint64(!((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647)), (uint64)20)
After removing lets: (uint64)shift_left(uint64(!((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647)), (uint64)20)
Include: (uint64)shift_left(uint64(!((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647)), (uint64)20); should extract: 1
Include: uint64(!((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647)); should extract: 1
Include: !((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647); should extract: 1
Include: ((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647); should extract: 1
Include: (uint64)abs((int64(P.extent.1)*int64(P.stride.1))); should extract: 1
Include: (int64(P.extent.1)*int64(P.stride.1)); should extract: 1
Include: int64(P.extent.1); should extract: 0
Include: P.extent.1; should extract: 0
Include: int64(P.stride.1); should extract: 0
Include: P.stride.1; should extract: 0
Include: (uint64)2147483647; should extract: 0
Include: (uint64)20; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647)), (uint64)20)
0: P.extent.1, 0
1: int64(P.extent.1), 0
2: P.stride.1, 0
3: int64(P.stride.1), 0
4: (int64(P.extent.1)*int64(P.stride.1)), 1
5: (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), 1
6: (uint64)2147483647, 0
7: ((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), 1
8: !((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647), 1
9: uint64(!((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647)), 1
10: (uint64)20, 0
11: (uint64)shift_left(uint64(!((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647)), (uint64)20), 1
With variables (uint64)shift_left(uint64(!((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647)), (uint64)20)
With lets: (uint64)shift_left(uint64(!((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647)), (uint64)20)
Codegen: uint64, (uint64)shift_left(uint64(!((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647)), (uint64)20)
Codegen: uint64, uint64(!((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647))
Codegen: uint1, !((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647)
Codegen: uint1, ((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) <= (uint64)2147483647)
Codegen: uint1, !((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) > (uint64)2147483647)
Codegen: uint1, ((uint64)abs((int64(P.extent.1)*int64(P.stride.1))) > (uint64)2147483647)
Codegen: uint64, (uint64)abs((int64(P.extent.1)*int64(P.stride.1)))
Codegen: int64, (let x23 = (int64(P.extent.1)*int64(P.stride.1)) in select((x23 >= (int64)0), x23, ((int64)0 - x23)))
Codegen: int64, (int64(P.extent.1)*int64(P.stride.1))
Codegen: int64, int64(P.extent.1)
Codegen: int32, P.extent.1
Codegen: int64, int64(P.stride.1)
Codegen: int32, P.stride.1
Codegen: int64, select(((int64)x23 >= (int64)0), (int64)x23, ((int64)0 - (int64)x23))
Codegen: uint1, ((int64)x23 >= (int64)0)
Codegen: uint1, !((int64)0 > (int64)x23)
Codegen: uint1, ((int64)0 > (int64)x23)
Codegen: int64, (int64)0
Codegen: int64, (int64)x23
Codegen: int64, (int64)x23
Codegen: int64, ((int64)0 - (int64)x23)
Codegen: int64, (int64)0
Codegen: int64, (int64)x23
Codegen: uint64, (uint64)2147483647
Codegen: uint64, (uint64)20
Codegen: uint64, (uint64)shift_left(uint64(!((int64)P.total_extent.1 <= (int64)2147483647)), (int64)21)
Codegen: uint64, uint64(!((int64)P.total_extent.1 <= (int64)2147483647))
Codegen: uint1, !((int64)P.total_extent.1 <= (int64)2147483647)
Codegen: uint1, ((int64)P.total_extent.1 <= (int64)2147483647)
Codegen: uint1, !((int64)P.total_extent.1 > (int64)2147483647)
Codegen: uint1, ((int64)P.total_extent.1 > (int64)2147483647)
Codegen: int64, (int64)P.total_extent.1
Codegen: int64, (int64)2147483647
Codegen: int64, (int64)21



Input to CSE (uint64)shift_left(uint64(!((int64)P.total_extent.1 <= (int64)2147483647)), (uint64)21)
After removing lets: (uint64)shift_left(uint64(!((int64)P.total_extent.1 <= (int64)2147483647)), (uint64)21)
Include: (uint64)shift_left(uint64(!((int64)P.total_extent.1 <= (int64)2147483647)), (uint64)21); should extract: 1
Include: uint64(!((int64)P.total_extent.1 <= (int64)2147483647)); should extract: 1
Include: !((int64)P.total_extent.1 <= (int64)2147483647); should extract: 1
Include: ((int64)P.total_extent.1 <= (int64)2147483647); should extract: 1
Include: (int64)P.total_extent.1; should extract: 0
Include: (int64)2147483647; should extract: 0
Include: (uint64)21; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!((int64)P.total_extent.1 <= (int64)2147483647)), (uint64)21)
0: (int64)P.total_extent.1, 0
1: (int64)2147483647, 0
2: ((int64)P.total_extent.1 <= (int64)2147483647), 1
3: !((int64)P.total_extent.1 <= (int64)2147483647), 1
4: uint64(!((int64)P.total_extent.1 <= (int64)2147483647)), 1
5: (uint64)21, 0
6: (uint64)shift_left(uint64(!((int64)P.total_extent.1 <= (int64)2147483647)), (uint64)21), 1
With variables (uint64)shift_left(uint64(!((int64)P.total_extent.1 <= (int64)2147483647)), (uint64)21)
With lets: (uint64)shift_left(uint64(!((int64)P.total_extent.1 <= (int64)2147483647)), (uint64)21)
Codegen: uint64, (uint64)shift_left(uint64(!((int64)P.total_extent.1 <= (int64)2147483647)), (uint64)21)
Codegen: uint64, uint64(!((int64)P.total_extent.1 <= (int64)2147483647))
Codegen: uint1, !((int64)P.total_extent.1 <= (int64)2147483647)
Codegen: uint1, ((int64)P.total_extent.1 <= (int64)2147483647)
Codegen: uint1, !((int64)P.total_extent.1 > (int64)2147483647)
Codegen: uint1, ((int64)P.total_extent.1 > (int64)2147483647)
Codegen: int64, (int64)P.total_extent.1
Codegen: int64, (int64)2147483647
Codegen: uint64, (uint64)21
Codegen: uint64, (uint64)shift_left(uint64(!((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647)), (int64)22)
Codegen: uint64, uint64(!((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647))
Codegen: uint1, !((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647)
Codegen: uint1, ((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647)
Codegen: uint1, !((uint64)abs(int64(W.extent.0)) > (uint64)2147483647)
Codegen: uint1, ((uint64)abs(int64(W.extent.0)) > (uint64)2147483647)
Codegen: uint64, (uint64)abs(int64(W.extent.0))
Codegen: int64, (let x24 = int64(W.extent.0) in select((x24 >= (int64)0), x24, ((int64)0 - x24)))
Codegen: int64, int64(W.extent.0)
Codegen: int32, W.extent.0
Codegen: int64, select(((int64)x24 >= (int64)0), (int64)x24, ((int64)0 - (int64)x24))
Codegen: uint1, ((int64)x24 >= (int64)0)
Codegen: uint1, !((int64)0 > (int64)x24)
Codegen: uint1, ((int64)0 > (int64)x24)
Codegen: int64, (int64)0
Codegen: int64, (int64)x24
Codegen: int64, (int64)x24
Codegen: int64, ((int64)0 - (int64)x24)
Codegen: int64, (int64)0
Codegen: int64, (int64)x24
Codegen: uint64, (uint64)2147483647
Codegen: int64, (int64)22



Input to CSE (uint64)shift_left(uint64(!((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647)), (uint64)22)
After removing lets: (uint64)shift_left(uint64(!((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647)), (uint64)22)
Include: (uint64)shift_left(uint64(!((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647)), (uint64)22); should extract: 1
Include: uint64(!((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647)); should extract: 1
Include: !((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647); should extract: 1
Include: ((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647); should extract: 1
Include: (uint64)abs(int64(W.extent.0)); should extract: 1
Include: int64(W.extent.0); should extract: 0
Include: W.extent.0; should extract: 0
Include: (uint64)2147483647; should extract: 0
Include: (uint64)22; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647)), (uint64)22)
0: W.extent.0, 0
1: int64(W.extent.0), 0
2: (uint64)abs(int64(W.extent.0)), 1
3: (uint64)2147483647, 0
4: ((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), 1
5: !((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647), 1
6: uint64(!((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647)), 1
7: (uint64)22, 0
8: (uint64)shift_left(uint64(!((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647)), (uint64)22), 1
With variables (uint64)shift_left(uint64(!((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647)), (uint64)22)
With lets: (uint64)shift_left(uint64(!((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647)), (uint64)22)
Codegen: uint64, (uint64)shift_left(uint64(!((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647)), (uint64)22)
Codegen: uint64, uint64(!((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647))
Codegen: uint1, !((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647)
Codegen: uint1, ((uint64)abs(int64(W.extent.0)) <= (uint64)2147483647)
Codegen: uint1, !((uint64)abs(int64(W.extent.0)) > (uint64)2147483647)
Codegen: uint1, ((uint64)abs(int64(W.extent.0)) > (uint64)2147483647)
Codegen: uint64, (uint64)abs(int64(W.extent.0))
Codegen: int64, (let x25 = int64(W.extent.0) in select((x25 >= (int64)0), x25, ((int64)0 - x25)))
Codegen: int64, int64(W.extent.0)
Codegen: int32, W.extent.0
Codegen: int64, select(((int64)x25 >= (int64)0), (int64)x25, ((int64)0 - (int64)x25))
Codegen: uint1, ((int64)x25 >= (int64)0)
Codegen: uint1, !((int64)0 > (int64)x25)
Codegen: uint1, ((int64)0 > (int64)x25)
Codegen: int64, (int64)0
Codegen: int64, (int64)x25
Codegen: int64, (int64)x25
Codegen: int64, ((int64)0 - (int64)x25)
Codegen: int64, (int64)0
Codegen: int64, (int64)x25
Codegen: uint64, (uint64)2147483647
Codegen: uint64, (uint64)22
Codegen: uint64, (uint64)shift_left(uint64(!((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647)), (int64)23)
Codegen: uint64, uint64(!((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647))
Codegen: uint1, !((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647)
Codegen: uint1, ((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647)
Codegen: uint1, !((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) > (uint64)2147483647)
Codegen: uint1, ((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) > (uint64)2147483647)
Codegen: uint64, (uint64)abs((int64(W.extent.1)*int64(W.stride.1)))
Codegen: int64, (let x26 = (int64(W.extent.1)*int64(W.stride.1)) in select((x26 >= (int64)0), x26, ((int64)0 - x26)))
Codegen: int64, (int64(W.extent.1)*int64(W.stride.1))
Codegen: int64, int64(W.extent.1)
Codegen: int32, W.extent.1
Codegen: int64, int64(W.stride.1)
Codegen: int32, W.stride.1
Codegen: int64, select(((int64)x26 >= (int64)0), (int64)x26, ((int64)0 - (int64)x26))
Codegen: uint1, ((int64)x26 >= (int64)0)
Codegen: uint1, !((int64)0 > (int64)x26)
Codegen: uint1, ((int64)0 > (int64)x26)
Codegen: int64, (int64)0
Codegen: int64, (int64)x26
Codegen: int64, (int64)x26
Codegen: int64, ((int64)0 - (int64)x26)
Codegen: int64, (int64)0
Codegen: int64, (int64)x26
Codegen: uint64, (uint64)2147483647
Codegen: int64, (int64)23



Input to CSE (uint64)shift_left(uint64(!((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647)), (uint64)23)
After removing lets: (uint64)shift_left(uint64(!((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647)), (uint64)23)
Include: (uint64)shift_left(uint64(!((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647)), (uint64)23); should extract: 1
Include: uint64(!((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647)); should extract: 1
Include: !((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647); should extract: 1
Include: ((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647); should extract: 1
Include: (uint64)abs((int64(W.extent.1)*int64(W.stride.1))); should extract: 1
Include: (int64(W.extent.1)*int64(W.stride.1)); should extract: 1
Include: int64(W.extent.1); should extract: 0
Include: W.extent.1; should extract: 0
Include: int64(W.stride.1); should extract: 0
Include: W.stride.1; should extract: 0
Include: (uint64)2147483647; should extract: 0
Include: (uint64)23; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647)), (uint64)23)
0: W.extent.1, 0
1: int64(W.extent.1), 0
2: W.stride.1, 0
3: int64(W.stride.1), 0
4: (int64(W.extent.1)*int64(W.stride.1)), 1
5: (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), 1
6: (uint64)2147483647, 0
7: ((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), 1
8: !((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647), 1
9: uint64(!((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647)), 1
10: (uint64)23, 0
11: (uint64)shift_left(uint64(!((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647)), (uint64)23), 1
With variables (uint64)shift_left(uint64(!((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647)), (uint64)23)
With lets: (uint64)shift_left(uint64(!((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647)), (uint64)23)
Codegen: uint64, (uint64)shift_left(uint64(!((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647)), (uint64)23)
Codegen: uint64, uint64(!((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647))
Codegen: uint1, !((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647)
Codegen: uint1, ((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) <= (uint64)2147483647)
Codegen: uint1, !((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) > (uint64)2147483647)
Codegen: uint1, ((uint64)abs((int64(W.extent.1)*int64(W.stride.1))) > (uint64)2147483647)
Codegen: uint64, (uint64)abs((int64(W.extent.1)*int64(W.stride.1)))
Codegen: int64, (let x27 = (int64(W.extent.1)*int64(W.stride.1)) in select((x27 >= (int64)0), x27, ((int64)0 - x27)))
Codegen: int64, (int64(W.extent.1)*int64(W.stride.1))
Codegen: int64, int64(W.extent.1)
Codegen: int32, W.extent.1
Codegen: int64, int64(W.stride.1)
Codegen: int32, W.stride.1
Codegen: int64, select(((int64)x27 >= (int64)0), (int64)x27, ((int64)0 - (int64)x27))
Codegen: uint1, ((int64)x27 >= (int64)0)
Codegen: uint1, !((int64)0 > (int64)x27)
Codegen: uint1, ((int64)0 > (int64)x27)
Codegen: int64, (int64)0
Codegen: int64, (int64)x27
Codegen: int64, (int64)x27
Codegen: int64, ((int64)0 - (int64)x27)
Codegen: int64, (int64)0
Codegen: int64, (int64)x27
Codegen: uint64, (uint64)2147483647
Codegen: uint64, (uint64)23
Codegen: uint64, (uint64)shift_left(uint64(!((int64)W.total_extent.1 <= (int64)2147483647)), (int64)24)
Codegen: uint64, uint64(!((int64)W.total_extent.1 <= (int64)2147483647))
Codegen: uint1, !((int64)W.total_extent.1 <= (int64)2147483647)
Codegen: uint1, ((int64)W.total_extent.1 <= (int64)2147483647)
Codegen: uint1, !((int64)W.total_extent.1 > (int64)2147483647)
Codegen: uint1, ((int64)W.total_extent.1 > (int64)2147483647)
Codegen: int64, (int64)W.total_extent.1
Codegen: int64, (int64)2147483647
Codegen: int64, (int64)24



Input to CSE (uint64)shift_left(uint64(!((int64)W.total_extent.1 <= (int64)2147483647)), (uint64)24)
After removing lets: (uint64)shift_left(uint64(!((int64)W.total_extent.1 <= (int64)2147483647)), (uint64)24)
Include: (uint64)shift_left(uint64(!((int64)W.total_extent.1 <= (int64)2147483647)), (uint64)24); should extract: 1
Include: uint64(!((int64)W.total_extent.1 <= (int64)2147483647)); should extract: 1
Include: !((int64)W.total_extent.1 <= (int64)2147483647); should extract: 1
Include: ((int64)W.total_extent.1 <= (int64)2147483647); should extract: 1
Include: (int64)W.total_extent.1; should extract: 0
Include: (int64)2147483647; should extract: 0
Include: (uint64)24; should extract: 0
Canonical form without lets (uint64)shift_left(uint64(!((int64)W.total_extent.1 <= (int64)2147483647)), (uint64)24)
0: (int64)W.total_extent.1, 0
1: (int64)2147483647, 0
2: ((int64)W.total_extent.1 <= (int64)2147483647), 1
3: !((int64)W.total_extent.1 <= (int64)2147483647), 1
4: uint64(!((int64)W.total_extent.1 <= (int64)2147483647)), 1
5: (uint64)24, 0
6: (uint64)shift_left(uint64(!((int64)W.total_extent.1 <= (int64)2147483647)), (uint64)24), 1
With variables (uint64)shift_left(uint64(!((int64)W.total_extent.1 <= (int64)2147483647)), (uint64)24)
With lets: (uint64)shift_left(uint64(!((int64)W.total_extent.1 <= (int64)2147483647)), (uint64)24)
Codegen: uint64, (uint64)shift_left(uint64(!((int64)W.total_extent.1 <= (int64)2147483647)), (uint64)24)
Codegen: uint64, uint64(!((int64)W.total_extent.1 <= (int64)2147483647))
Codegen: uint1, !((int64)W.total_extent.1 <= (int64)2147483647)
Codegen: uint1, ((int64)W.total_extent.1 <= (int64)2147483647)
Codegen: uint1, !((int64)W.total_extent.1 > (int64)2147483647)
Codegen: uint1, ((int64)W.total_extent.1 > (int64)2147483647)
Codegen: int64, (int64)W.total_extent.1
Codegen: int64, (int64)2147483647
Codegen: uint64, (uint64)24
Codegen: int32, halide_error_buffer_allocation_too_large("Out", (uint64)abs(int64(Out.extent.0)), (uint64)2147483647)
Codegen: (char *), "Out"
Codegen: uint64, (uint64)abs(int64(Out.extent.0))
Codegen: int64, (let x28 = int64(Out.extent.0) in select((x28 >= (int64)0), x28, ((int64)0 - x28)))
Codegen: int64, int64(Out.extent.0)
Codegen: int32, Out.extent.0
Codegen: int64, select(((int64)x28 >= (int64)0), (int64)x28, ((int64)0 - (int64)x28))
Codegen: uint1, ((int64)x28 >= (int64)0)
Codegen: uint1, !((int64)0 > (int64)x28)
Codegen: uint1, ((int64)0 > (int64)x28)
Codegen: int64, (int64)0
Codegen: int64, (int64)x28
Codegen: int64, (int64)x28
Codegen: int64, ((int64)0 - (int64)x28)
Codegen: int64, (int64)0
Codegen: int64, (int64)x28
Codegen: uint64, (uint64)2147483647
Adding user_context to halide_error_buffer_allocation_too_large args
Found halide_error_buffer_allocation_too_large
Codegen: int32, halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1))), (uint64)2147483647)
Codegen: (char *), "Out"
Codegen: uint64, (uint64)abs((int64(Out.extent.1)*int64(Out.stride.1)))
Codegen: int64, (let x29 = (int64(Out.extent.1)*int64(Out.stride.1)) in select((x29 >= (int64)0), x29, ((int64)0 - x29)))
Codegen: int64, (int64(Out.extent.1)*int64(Out.stride.1))
Codegen: int64, int64(Out.extent.1)
Codegen: int32, Out.extent.1
Codegen: int64, int64(Out.stride.1)
Codegen: int32, Out.stride.1
Codegen: int64, select(((int64)x29 >= (int64)0), (int64)x29, ((int64)0 - (int64)x29))
Codegen: uint1, ((int64)x29 >= (int64)0)
Codegen: uint1, !((int64)0 > (int64)x29)
Codegen: uint1, ((int64)0 > (int64)x29)
Codegen: int64, (int64)0
Codegen: int64, (int64)x29
Codegen: int64, (int64)x29
Codegen: int64, ((int64)0 - (int64)x29)
Codegen: int64, (int64)0
Codegen: int64, (int64)x29
Codegen: uint64, (uint64)2147483647
Adding user_context to halide_error_buffer_allocation_too_large args
Found halide_error_buffer_allocation_too_large
Codegen: int32, halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.1, (int64)2147483647)
Codegen: (char *), "Out"
Codegen: int64, (int64)Out.total_extent.1
Codegen: int64, (int64)2147483647
Adding user_context to halide_error_buffer_extents_too_large args
Found halide_error_buffer_extents_too_large
Codegen: int32, halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2))), (uint64)2147483647)
Codegen: (char *), "Out"
Codegen: uint64, (uint64)abs((int64(Out.extent.2)*int64(Out.stride.2)))
Codegen: int64, (let x30 = (int64(Out.extent.2)*int64(Out.stride.2)) in select((x30 >= (int64)0), x30, ((int64)0 - x30)))
Codegen: int64, (int64(Out.extent.2)*int64(Out.stride.2))
Codegen: int64, int64(Out.extent.2)
Codegen: int32, Out.extent.2
Codegen: int64, int64(Out.stride.2)
Codegen: int32, Out.stride.2
Codegen: int64, select(((int64)x30 >= (int64)0), (int64)x30, ((int64)0 - (int64)x30))
Codegen: uint1, ((int64)x30 >= (int64)0)
Codegen: uint1, !((int64)0 > (int64)x30)
Codegen: uint1, ((int64)0 > (int64)x30)
Codegen: int64, (int64)0
Codegen: int64, (int64)x30
Codegen: int64, (int64)x30
Codegen: int64, ((int64)0 - (int64)x30)
Codegen: int64, (int64)0
Codegen: int64, (int64)x30
Codegen: uint64, (uint64)2147483647
Adding user_context to halide_error_buffer_allocation_too_large args
Found halide_error_buffer_allocation_too_large
Codegen: int32, halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.2, (int64)2147483647)
Codegen: (char *), "Out"
Codegen: int64, (int64)Out.total_extent.2
Codegen: int64, (int64)2147483647
Adding user_context to halide_error_buffer_extents_too_large args
Found halide_error_buffer_extents_too_large
Codegen: int32, halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3))), (uint64)2147483647)
Codegen: (char *), "Out"
Codegen: uint64, (uint64)abs((int64(Out.extent.3)*int64(Out.stride.3)))
Codegen: int64, (let x31 = (int64(Out.extent.3)*int64(Out.stride.3)) in select((x31 >= (int64)0), x31, ((int64)0 - x31)))
Codegen: int64, (int64(Out.extent.3)*int64(Out.stride.3))
Codegen: int64, int64(Out.extent.3)
Codegen: int32, Out.extent.3
Codegen: int64, int64(Out.stride.3)
Codegen: int32, Out.stride.3
Codegen: int64, select(((int64)x31 >= (int64)0), (int64)x31, ((int64)0 - (int64)x31))
Codegen: uint1, ((int64)x31 >= (int64)0)
Codegen: uint1, !((int64)0 > (int64)x31)
Codegen: uint1, ((int64)0 > (int64)x31)
Codegen: int64, (int64)0
Codegen: int64, (int64)x31
Codegen: int64, (int64)x31
Codegen: int64, ((int64)0 - (int64)x31)
Codegen: int64, (int64)0
Codegen: int64, (int64)x31
Codegen: uint64, (uint64)2147483647
Adding user_context to halide_error_buffer_allocation_too_large args
Found halide_error_buffer_allocation_too_large
Codegen: int32, halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.3, (int64)2147483647)
Codegen: (char *), "Out"
Codegen: int64, (int64)Out.total_extent.3
Codegen: int64, (int64)2147483647
Adding user_context to halide_error_buffer_extents_too_large args
Found halide_error_buffer_extents_too_large
Codegen: int32, halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4))), (uint64)2147483647)
Codegen: (char *), "Out"
Codegen: uint64, (uint64)abs((int64(Out.extent.4)*int64(Out.stride.4)))
Codegen: int64, (let x32 = (int64(Out.extent.4)*int64(Out.stride.4)) in select((x32 >= (int64)0), x32, ((int64)0 - x32)))
Codegen: int64, (int64(Out.extent.4)*int64(Out.stride.4))
Codegen: int64, int64(Out.extent.4)
Codegen: int32, Out.extent.4
Codegen: int64, int64(Out.stride.4)
Codegen: int32, Out.stride.4
Codegen: int64, select(((int64)x32 >= (int64)0), (int64)x32, ((int64)0 - (int64)x32))
Codegen: uint1, ((int64)x32 >= (int64)0)
Codegen: uint1, !((int64)0 > (int64)x32)
Codegen: uint1, ((int64)0 > (int64)x32)
Codegen: int64, (int64)0
Codegen: int64, (int64)x32
Codegen: int64, (int64)x32
Codegen: int64, ((int64)0 - (int64)x32)
Codegen: int64, (int64)0
Codegen: int64, (int64)x32
Codegen: uint64, (uint64)2147483647
Adding user_context to halide_error_buffer_allocation_too_large args
Found halide_error_buffer_allocation_too_large
Codegen: int32, halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.4, (int64)2147483647)
Codegen: (char *), "Out"
Codegen: int64, (int64)Out.total_extent.4
Codegen: int64, (int64)2147483647
Adding user_context to halide_error_buffer_extents_too_large args
Found halide_error_buffer_extents_too_large
Codegen: int32, halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5))), (uint64)2147483647)
Codegen: (char *), "Out"
Codegen: uint64, (uint64)abs((int64(Out.extent.5)*int64(Out.stride.5)))
Codegen: int64, (let x33 = (int64(Out.extent.5)*int64(Out.stride.5)) in select((x33 >= (int64)0), x33, ((int64)0 - x33)))
Codegen: int64, (int64(Out.extent.5)*int64(Out.stride.5))
Codegen: int64, int64(Out.extent.5)
Codegen: int32, Out.extent.5
Codegen: int64, int64(Out.stride.5)
Codegen: int32, Out.stride.5
Codegen: int64, select(((int64)x33 >= (int64)0), (int64)x33, ((int64)0 - (int64)x33))
Codegen: uint1, ((int64)x33 >= (int64)0)
Codegen: uint1, !((int64)0 > (int64)x33)
Codegen: uint1, ((int64)0 > (int64)x33)
Codegen: int64, (int64)0
Codegen: int64, (int64)x33
Codegen: int64, (int64)x33
Codegen: int64, ((int64)0 - (int64)x33)
Codegen: int64, (int64)0
Codegen: int64, (int64)x33
Codegen: uint64, (uint64)2147483647
Adding user_context to halide_error_buffer_allocation_too_large args
Found halide_error_buffer_allocation_too_large
Codegen: int32, halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.5, (int64)2147483647)
Codegen: (char *), "Out"
Codegen: int64, (int64)Out.total_extent.5
Codegen: int64, (int64)2147483647
Adding user_context to halide_error_buffer_extents_too_large args
Found halide_error_buffer_extents_too_large
Codegen: int32, halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6))), (uint64)2147483647)
Codegen: (char *), "Out"
Codegen: uint64, (uint64)abs((int64(Out.extent.6)*int64(Out.stride.6)))
Codegen: int64, (let x34 = (int64(Out.extent.6)*int64(Out.stride.6)) in select((x34 >= (int64)0), x34, ((int64)0 - x34)))
Codegen: int64, (int64(Out.extent.6)*int64(Out.stride.6))
Codegen: int64, int64(Out.extent.6)
Codegen: int32, Out.extent.6
Codegen: int64, int64(Out.stride.6)
Codegen: int32, Out.stride.6
Codegen: int64, select(((int64)x34 >= (int64)0), (int64)x34, ((int64)0 - (int64)x34))
Codegen: uint1, ((int64)x34 >= (int64)0)
Codegen: uint1, !((int64)0 > (int64)x34)
Codegen: uint1, ((int64)0 > (int64)x34)
Codegen: int64, (int64)0
Codegen: int64, (int64)x34
Codegen: int64, (int64)x34
Codegen: int64, ((int64)0 - (int64)x34)
Codegen: int64, (int64)0
Codegen: int64, (int64)x34
Codegen: uint64, (uint64)2147483647
Adding user_context to halide_error_buffer_allocation_too_large args
Found halide_error_buffer_allocation_too_large
Codegen: int32, halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.6, (int64)2147483647)
Codegen: (char *), "Out"
Codegen: int64, (int64)Out.total_extent.6
Codegen: int64, (int64)2147483647
Adding user_context to halide_error_buffer_extents_too_large args
Found halide_error_buffer_extents_too_large
Codegen: int32, halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7))), (uint64)2147483647)
Codegen: (char *), "Out"
Codegen: uint64, (uint64)abs((int64(Out.extent.7)*int64(Out.stride.7)))
Codegen: int64, (let x35 = (int64(Out.extent.7)*int64(Out.stride.7)) in select((x35 >= (int64)0), x35, ((int64)0 - x35)))
Codegen: int64, (int64(Out.extent.7)*int64(Out.stride.7))
Codegen: int64, int64(Out.extent.7)
Codegen: int32, Out.extent.7
Codegen: int64, int64(Out.stride.7)
Codegen: int32, Out.stride.7
Codegen: int64, select(((int64)x35 >= (int64)0), (int64)x35, ((int64)0 - (int64)x35))
Codegen: uint1, ((int64)x35 >= (int64)0)
Codegen: uint1, !((int64)0 > (int64)x35)
Codegen: uint1, ((int64)0 > (int64)x35)
Codegen: int64, (int64)0
Codegen: int64, (int64)x35
Codegen: int64, (int64)x35
Codegen: int64, ((int64)0 - (int64)x35)
Codegen: int64, (int64)0
Codegen: int64, (int64)x35
Codegen: uint64, (uint64)2147483647
Adding user_context to halide_error_buffer_allocation_too_large args
Found halide_error_buffer_allocation_too_large
Codegen: int32, halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.7, (int64)2147483647)
Codegen: (char *), "Out"
Codegen: int64, (int64)Out.total_extent.7
Codegen: int64, (int64)2147483647
Adding user_context to halide_error_buffer_extents_too_large args
Found halide_error_buffer_extents_too_large
Codegen: int32, halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8))), (uint64)2147483647)
Codegen: (char *), "Out"
Codegen: uint64, (uint64)abs((int64(Out.extent.8)*int64(Out.stride.8)))
Codegen: int64, (let x36 = (int64(Out.extent.8)*int64(Out.stride.8)) in select((x36 >= (int64)0), x36, ((int64)0 - x36)))
Codegen: int64, (int64(Out.extent.8)*int64(Out.stride.8))
Codegen: int64, int64(Out.extent.8)
Codegen: int32, Out.extent.8
Codegen: int64, int64(Out.stride.8)
Codegen: int32, Out.stride.8
Codegen: int64, select(((int64)x36 >= (int64)0), (int64)x36, ((int64)0 - (int64)x36))
Codegen: uint1, ((int64)x36 >= (int64)0)
Codegen: uint1, !((int64)0 > (int64)x36)
Codegen: uint1, ((int64)0 > (int64)x36)
Codegen: int64, (int64)0
Codegen: int64, (int64)x36
Codegen: int64, (int64)x36
Codegen: int64, ((int64)0 - (int64)x36)
Codegen: int64, (int64)0
Codegen: int64, (int64)x36
Codegen: uint64, (uint64)2147483647
Adding user_context to halide_error_buffer_allocation_too_large args
Found halide_error_buffer_allocation_too_large
Codegen: int32, halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.8, (int64)2147483647)
Codegen: (char *), "Out"
Codegen: int64, (int64)Out.total_extent.8
Codegen: int64, (int64)2147483647
Adding user_context to halide_error_buffer_extents_too_large args
Found halide_error_buffer_extents_too_large
Codegen: int32, halide_error_buffer_allocation_too_large("Out", (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9))), (uint64)2147483647)
Codegen: (char *), "Out"
Codegen: uint64, (uint64)abs((int64(Out.extent.9)*int64(Out.stride.9)))
Codegen: int64, (let x37 = (int64(Out.extent.9)*int64(Out.stride.9)) in select((x37 >= (int64)0), x37, ((int64)0 - x37)))
Codegen: int64, (int64(Out.extent.9)*int64(Out.stride.9))
Codegen: int64, int64(Out.extent.9)
Codegen: int32, Out.extent.9
Codegen: int64, int64(Out.stride.9)
Codegen: int32, Out.stride.9
Codegen: int64, select(((int64)x37 >= (int64)0), (int64)x37, ((int64)0 - (int64)x37))
Codegen: uint1, ((int64)x37 >= (int64)0)
Codegen: uint1, !((int64)0 > (int64)x37)
Codegen: uint1, ((int64)0 > (int64)x37)
Codegen: int64, (int64)0
Codegen: int64, (int64)x37
Codegen: int64, (int64)x37
Codegen: int64, ((int64)0 - (int64)x37)
Codegen: int64, (int64)0
Codegen: int64, (int64)x37
Codegen: uint64, (uint64)2147483647
Adding user_context to halide_error_buffer_allocation_too_large args
Found halide_error_buffer_allocation_too_large
Codegen: int32, halide_error_buffer_extents_too_large("Out", (int64)Out.total_extent.9, (int64)2147483647)
Codegen: (char *), "Out"
Codegen: int64, (int64)Out.total_extent.9
Codegen: int64, (int64)2147483647
Adding user_context to halide_error_buffer_extents_too_large args
Found halide_error_buffer_extents_too_large
Codegen: int32, halide_error_buffer_allocation_too_large("P", (uint64)abs(int64(P.extent.0)), (uint64)2147483647)
Codegen: (char *), "P"
Codegen: uint64, (uint64)abs(int64(P.extent.0))
Codegen: int64, (let x38 = int64(P.extent.0) in select((x38 >= (int64)0), x38, ((int64)0 - x38)))
Codegen: int64, int64(P.extent.0)
Codegen: int32, P.extent.0
Codegen: int64, select(((int64)x38 >= (int64)0), (int64)x38, ((int64)0 - (int64)x38))
Codegen: uint1, ((int64)x38 >= (int64)0)
Codegen: uint1, !((int64)0 > (int64)x38)
Codegen: uint1, ((int64)0 > (int64)x38)
Codegen: int64, (int64)0
Codegen: int64, (int64)x38
Codegen: int64, (int64)x38
Codegen: int64, ((int64)0 - (int64)x38)
Codegen: int64, (int64)0
Codegen: int64, (int64)x38
Codegen: uint64, (uint64)2147483647
Adding user_context to halide_error_buffer_allocation_too_large args
Found halide_error_buffer_allocation_too_large
Codegen: int32, halide_error_buffer_allocation_too_large("P", (uint64)abs((int64(P.extent.1)*int64(P.stride.1))), (uint64)2147483647)
Codegen: (char *), "P"
Codegen: uint64, (uint64)abs((int64(P.extent.1)*int64(P.stride.1)))
Codegen: int64, (let x39 = (int64(P.extent.1)*int64(P.stride.1)) in select((x39 >= (int64)0), x39, ((int64)0 - x39)))
Codegen: int64, (int64(P.extent.1)*int64(P.stride.1))
Codegen: int64, int64(P.extent.1)
Codegen: int32, P.extent.1
Codegen: int64, int64(P.stride.1)
Codegen: int32, P.stride.1
Codegen: int64, select(((int64)x39 >= (int64)0), (int64)x39, ((int64)0 - (int64)x39))
Codegen: uint1, ((int64)x39 >= (int64)0)
Codegen: uint1, !((int64)0 > (int64)x39)
Codegen: uint1, ((int64)0 > (int64)x39)
Codegen: int64, (int64)0
Codegen: int64, (int64)x39
Codegen: int64, (int64)x39
Codegen: int64, ((int64)0 - (int64)x39)
Codegen: int64, (int64)0
Codegen: int64, (int64)x39
Codegen: uint64, (uint64)2147483647
Adding user_context to halide_error_buffer_allocation_too_large args
Found halide_error_buffer_allocation_too_large
Codegen: int32, halide_error_buffer_extents_too_large("P", (int64)P.total_extent.1, (int64)2147483647)
Codegen: (char *), "P"
Codegen: int64, (int64)P.total_extent.1
Codegen: int64, (int64)2147483647
Adding user_context to halide_error_buffer_extents_too_large args
Found halide_error_buffer_extents_too_large
Codegen: int32, halide_error_buffer_allocation_too_large("W", (uint64)abs(int64(W.extent.0)), (uint64)2147483647)
Codegen: (char *), "W"
Codegen: uint64, (uint64)abs(int64(W.extent.0))
Codegen: int64, (let x40 = int64(W.extent.0) in select((x40 >= (int64)0), x40, ((int64)0 - x40)))
Codegen: int64, int64(W.extent.0)
Codegen: int32, W.extent.0
Codegen: int64, select(((int64)x40 >= (int64)0), (int64)x40, ((int64)0 - (int64)x40))
Codegen: uint1, ((int64)x40 >= (int64)0)
Codegen: uint1, !((int64)0 > (int64)x40)
Codegen: uint1, ((int64)0 > (int64)x40)
Codegen: int64, (int64)0
Codegen: int64, (int64)x40
Codegen: int64, (int64)x40
Codegen: int64, ((int64)0 - (int64)x40)
Codegen: int64, (int64)0
Codegen: int64, (int64)x40
Codegen: uint64, (uint64)2147483647
Adding user_context to halide_error_buffer_allocation_too_large args
Found halide_error_buffer_allocation_too_large
Codegen: int32, halide_error_buffer_allocation_too_large("W", (uint64)abs((int64(W.extent.1)*int64(W.stride.1))), (uint64)2147483647)
Codegen: (char *), "W"
Codegen: uint64, (uint64)abs((int64(W.extent.1)*int64(W.stride.1)))
Codegen: int64, (let x41 = (int64(W.extent.1)*int64(W.stride.1)) in select((x41 >= (int64)0), x41, ((int64)0 - x41)))
Codegen: int64, (int64(W.extent.1)*int64(W.stride.1))
Codegen: int64, int64(W.extent.1)
Codegen: int32, W.extent.1
Codegen: int64, int64(W.stride.1)
Codegen: int32, W.stride.1
Codegen: int64, select(((int64)x41 >= (int64)0), (int64)x41, ((int64)0 - (int64)x41))
Codegen: uint1, ((int64)x41 >= (int64)0)
Codegen: uint1, !((int64)0 > (int64)x41)
Codegen: uint1, ((int64)0 > (int64)x41)
Codegen: int64, (int64)0
Codegen: int64, (int64)x41
Codegen: int64, (int64)x41
Codegen: int64, ((int64)0 - (int64)x41)
Codegen: int64, (int64)0
Codegen: int64, (int64)x41
Codegen: uint64, (uint64)2147483647
Adding user_context to halide_error_buffer_allocation_too_large args
Found halide_error_buffer_allocation_too_large
Codegen: int32, halide_error_buffer_extents_too_large("W", (int64)W.total_extent.1, (int64)2147483647)
Codegen: (char *), "W"
Codegen: int64, (int64)W.total_extent.1
Codegen: int64, (int64)2147483647
Adding user_context to halide_error_buffer_extents_too_large args
Found halide_error_buffer_extents_too_large
Codegen: gpu_block<CM> (A.s0.n.__block_id_z, 0, (P.extent.1/3600)) {
 gpu_block<CM> (A.s0.nn.__block_id_y, 0, 16) {
  gpu_block<CM> (A.s0.co.__block_id_x, 0, 4) {
   gpu_thread<CM> (.__thread_id_y, 0, 4) {
    gpu_thread<CM> (.__thread_id_x, 0, 4) {
     allocate C[float32 * 392]
     allocate P_im_buf[float32 * 180] in Register
     allocate W_im_buf[float32 * 288] in Register
     C[ramp(0, 1, 392)] = x392(0.000000f)
     for (A.s0.mk, 0, 4) {
      for (A.s0.ci, 0, 8) {
       let var.W_im.load.addr.1 = (((A.s0.mk*8) + A.s0.ci)*36)
       let var.W_im.load.addr.0 = (((.__thread_id_x*4) + A.s0.co.__block_id_x)*8)
       (float32)cm_load_2d(((void *))W, var.W_im.load.addr.0, var.W_im.load.addr.1, W_im_buf, ramp(0, 1, 288), 8, 36)
       punrolled (A.s0.yy_xx, 0, 7) {
        let var.P_im.load.addr.1 = ((A.s0.n.__block_id_z*225) + (A.s0.yy_xx*30))
        let var.P_im.load.addr.0 = (((A.s0.nn.__block_id_y*128) + ((.__thread_id_y*32) + ((A.s0.mk*8) + A.s0.ci)))*4)
        (float32)cm_load_2d(((void *))P, var.P_im.load.addr.0, var.P_im.load.addr.1, P_im_buf, ramp(0, 1, 180), 4, 45)
        punrolled (A.s0.yyy_xxx, 0, 7) {
         punrolled (A.s0.kx, 0, 3) {
          punrolled (A.s0.ky, 0, 3) {
           punrolled (A.s0.cii, 0, 4) {
            C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] = (C[ramp((((A.s0.yy_xx*7) + A.s0.yyy_xxx)*8), 1, 8) aligned(8, 0)] + (W_im_buf[ramp((((A.s0.kx*12) + ((A.s0.ky*4) + A.s0.cii))*8), 1, 8) aligned(8, 0)]*x8(P_im_buf[((((A.s0.kx*15) + ((A.s0.yyy_xxx*2) + A.s0.ky))*4) + A.s0.cii)])))
           }
          }
         }
        }
       }
      }
     }
     free P_im_buf
     free W_im_buf
     let var.Out.store.addr.1 = (A.s0.n.__block_id_z*49)
     let var.Out.store.addr.0 = (((A.s0.nn.__block_id_y*64) + ((.__thread_id_y*16) + ((.__thread_id_x*4) + A.s0.co.__block_id_x)))*8)
     (float32x392)cm_store_2d(((void *))Out, var.Out.store.addr.0, var.Out.store.addr.1, C, ramp(0, 1, 392), 8, 49, "deserializer")
     free C
    }
   }
  }
 }
}

Kernel launch: A.s0.n.__block_id_z
Kernel bounds: (4, 4, 1, 1) threads, (4, 16, (P.extent.1/3600), 1) blocks
Codegen: int32, 0
Not adding C to closure
Not adding A.s0.mk to closure
Not adding A.s0.ci to closure
Not adding .__thread_id_x to closure
Not adding A.s0.co.__block_id_x to closure
Adding W to closure
Not adding var.W_im.load.addr.0 to closure
Not adding var.W_im.load.addr.1 to closure
Not adding W_im_buf to closure
Adding buffer W to closure
Not adding A.s0.n.__block_id_z to closure
Not adding A.s0.yy_xx to closure
Not adding A.s0.nn.__block_id_y to closure
Not adding .__thread_id_y to closure
Not adding A.s0.mk to closure
Not adding A.s0.ci to closure
Adding P to closure
Not adding var.P_im.load.addr.0 to closure
Not adding var.P_im.load.addr.1 to closure
Not adding P_im_buf to closure
Adding buffer P to closure
Not adding A.s0.yy_xx to closure
Not adding A.s0.yyy_xxx to closure
Not adding A.s0.yy_xx to closure
Not adding A.s0.yyy_xxx to closure
Not adding C to closure
Not adding A.s0.kx to closure
Not adding A.s0.ky to closure
Not adding A.s0.cii to closure
Not adding W_im_buf to closure
Not adding A.s0.kx to closure
Not adding A.s0.yyy_xxx to closure
Not adding A.s0.ky to closure
Not adding A.s0.cii to closure
Not adding P_im_buf to closure
Not adding C to closure
Not adding A.s0.n.__block_id_z to closure
Not adding A.s0.nn.__block_id_y to closure
Not adding .__thread_id_y to closure
Not adding .__thread_id_x to closure
Not adding A.s0.co.__block_id_x to closure
Adding Out to closure
Not adding var.Out.store.addr.0 to closure
Not adding var.Out.store.addr.1 to closure
Not adding C to closure
Adding buffer Out to closure
var: Out
var: P
var: W
buffer: Out 0 (write)
buffer: P 0 (read)
buffer: W 0 (read)
CodeGen_CM_Dev::compile kernel_A
Adding CM kernel kernel_A
Compiled launch to kernel "kernel_A"
CodeGen_GPU_Host get_user_context returned 0x546950
bounds.num_blocks[0] = 4
bounds.num_blocks[1] = 16
bounds.num_blocks[2] = (P.extent.1/3600)
bounds.num_threads[0] = 4
bounds.num_threads[1] = 4
bounds.num_threads[2] = 1
Currently, we do not implement CM runtime.
Created device module state global variable
Generating init_kernels for cm
CM kernel:
#include <cm/cm.h>
#include <cm/cmtl.h>
extern "C" _GENX_MAIN_ void kernel_A(
SurfaceIndex _deserializer [[type("image2d_t float")]],
SurfaceIndex _P [[type("image2d_t float")]],
SurfaceIndex _W [[type("image2d_t float")]])
{
  int _A_s0_n___block_id_z = cm_group_id(2);
  int _A_s0_nn___block_id_y = cm_group_id(1);
  int _A_s0_co___block_id_x = cm_group_id(0);
  int ___thread_id_y = cm_local_id(1);
  int ___thread_id_x = cm_local_id(0);
  vector<float, 392> _C;
  vector<float, 180> _P_im_buf;
  vector<float, 288> _W_im_buf;
  _C.select<392, 1>(0) = 0.000000f;
  for (int _A_s0_mk = 0; _A_s0_mk < 0 + 4; _A_s0_mk++)
  {
    for (int _A_s0_ci = 0; _A_s0_ci < 0 + 8; _A_s0_ci++)
    {
      int _270 = (((_A_s0_mk*8)+_A_s0_ci)*36);
      int _271 = (((___thread_id_x*4)+_A_s0_co___block_id_x)*8);
      read(_W, (_271*4), (_270+0), _W_im_buf.select<288, 1>(0).format<float, 36, 8>().select<8, 1, 8, 1>(0, 0));
      read(_W, (_271*4), (_270+8), _W_im_buf.select<288, 1>(0).format<float, 36, 8>().select<8, 1, 8, 1>(8, 0));
      read(_W, (_271*4), (_270+16), _W_im_buf.select<288, 1>(0).format<float, 36, 8>().select<8, 1, 8, 1>(16, 0));
      read(_W, (_271*4), (_270+24), _W_im_buf.select<288, 1>(0).format<float, 36, 8>().select<8, 1, 8, 1>(24, 0));
      read(_W, (_271*4), (_270+32), _W_im_buf.select<288, 1>(0).format<float, 36, 8>().select<4, 1, 8, 1>(32, 0));
      #pragma unroll
      for (int _A_s0_yy_xx = 0; _A_s0_yy_xx < 0 + 7; _A_s0_yy_xx++)
      {
        int _272 = ((_A_s0_n___block_id_z*225)+(_A_s0_yy_xx*30));
        int _273 = (((_A_s0_nn___block_id_y*128)+((___thread_id_y*32)+((_A_s0_mk*8)+_A_s0_ci)))*4);
        read(_P, (_273*4), (_272+0), _P_im_buf.select<180, 1>(0).format<float, 45, 4>().select<16, 1, 4, 1>(0, 0));
        read(_P, (_273*4), (_272+16), _P_im_buf.select<180, 1>(0).format<float, 45, 4>().select<16, 1, 4, 1>(16, 0));
        read(_P, (_273*4), (_272+32), _P_im_buf.select<180, 1>(0).format<float, 45, 4>().select<13, 1, 4, 1>(32, 0));
        #pragma unroll
        for (int _A_s0_yyy_xxx = 0; _A_s0_yyy_xxx < 0 + 7; _A_s0_yyy_xxx++)
        {
          #pragma unroll
          for (int _A_s0_kx = 0; _A_s0_kx < 0 + 3; _A_s0_kx++)
          {
            #pragma unroll
            for (int _A_s0_ky = 0; _A_s0_ky < 0 + 3; _A_s0_ky++)
            {
              #pragma unroll
              for (int _A_s0_cii = 0; _A_s0_cii < 0 + 4; _A_s0_cii++)
              {
                _C.select<8, 1>((((_A_s0_yy_xx*7)+_A_s0_yyy_xxx)*8)) = (_C.select<8, 1>((((_A_s0_yy_xx*7)+_A_s0_yyy_xxx)*8))+(_W_im_buf.select<8, 1>((((_A_s0_kx*12)+((_A_s0_ky*4)+_A_s0_cii))*8))*_P_im_buf(((((_A_s0_kx*15)+((_A_s0_yyy_xxx*2)+_A_s0_ky))*4)+_A_s0_cii))));
              } // for _A_s0_cii
            } // for _A_s0_ky
          } // for _A_s0_kx
        } // for _A_s0_yyy_xxx
      } // for _A_s0_yy_xx
    } // for _A_s0_ci
  } // for _A_s0_mk
  int _274 = (_A_s0_n___block_id_z*49);
  int _275 = (((_A_s0_nn___block_id_y*64)+((___thread_id_y*16)+((___thread_id_x*4)+_A_s0_co___block_id_x)))*8);
  write(_deserializer, (_275*4), (_274+0), _C.select<392, 1>(0).format<float, 49, 8>().select<8, 1, 8, 1>(0, 0));
  write(_deserializer, (_275*4), (_274+8), _C.select<392, 1>(0).format<float, 49, 8>().select<8, 1, 8, 1>(8, 0));
  write(_deserializer, (_275*4), (_274+16), _C.select<392, 1>(0).format<float, 49, 8>().select<8, 1, 8, 1>(16, 0));
  write(_deserializer, (_275*4), (_274+24), _C.select<392, 1>(0).format<float, 49, 8>().select<8, 1, 8, 1>(24, 0));
  write(_deserializer, (_275*4), (_274+32), _C.select<392, 1>(0).format<float, 49, 8>().select<8, 1, 8, 1>(32, 0));
  write(_deserializer, (_275*4), (_274+40), _C.select<392, 1>(0).format<float, 49, 8>().select<8, 1, 8, 1>(40, 0));
  write(_deserializer, (_275*4), (_274+48), _C.select<392, 1>(0).format<float, 49, 8>().select<1, 1, 8, 1>(48, 0));
} // kernel kernel_A

Currently, we do not implement CM runtime, so we just emit source code.
compiling func...
0x62f920
Success
