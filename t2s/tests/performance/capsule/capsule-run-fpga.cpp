/*******************************************************************************
* Copyright 2021 Intel Corporation
*
* Licensed under the BSD-2-Clause Plus Patent License (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* https://opensource.org/licenses/BSDplusPatent
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions
* and limitations under the License.
*
*
* SPDX-License-Identifier: BSD-2-Clause-Patent
*******************************************************************************/
// The header file generated by gemm.cpp
#include "capsule-interface.h"

// Roofline utilities
#include "Roofline.h"

// The only header file needed for including T2S.
#include "HalideBuffer.h"

// For printing output
#include <stdio.h>
#include <iostream>

// For validation of results.
#include <assert.h>

// Loop bounds
#include "const-parameters.h"

#ifdef TINY // For verifying correctness only
    #define N       4
#else
    #define N       64
#endif

using namespace std;

int main()
{
    Halide::Runtime::Buffer<float> I(MK, MX, TOTAL_CI, TOTAL_IY, TOTAL_IX, NN*N), K(MY, MK, TOTAL_CI, TOTAL_CO, KY, KX);
    for (size_t n = 0; n < N*NN; n++)
    for (size_t x = 0; x < TOTAL_IX; x++)
    for (size_t y = 0; y < TOTAL_IY; y++)
    for (size_t ci = 0; ci < TOTAL_CI; ci++) {
        for (size_t mx = 0; mx < MX; mx++) {
            for (size_t mk = 0; mk < MK; mk++) {
                I(mk, mx, ci, y, x, n) = random();
            }
        }
    }
    for (size_t kx = 0; kx < KX; kx++)
    for (size_t ky = 0; ky < KY; ky++)
    for (size_t co = 0; co < TOTAL_CO; co++)
    for (size_t ci = 0; ci < TOTAL_CI; ci++) {
        for (size_t mk = 0; mk < MK; mk++) {
            for (size_t my = 0; my < MY; my++) {
                K(my, mk, ci, co, ky, kx) = random();
            }
        }
    }
    Halide::Runtime::Buffer<float> O(COOO, YY_XX, MY, MX, Y_X, COO, NN, CO, N);
    capsule(I, K, O);

#ifdef TINY
    // Validate the results
    for (int n = 0; n < N; n++)
    for (int nn = 0; nn < NN; nn++)
    for (int co = 0; co < CO; co++)
    for (int coo = 0; coo < COO; coo++)
    for (int cooo = 0; cooo < COOO; cooo++)
    for (int y_x = 0; y_x < Y_X; y_x++)
    for (int yy_xx = 0; yy_xx < YY_XX; yy_xx++)
    for (int mx = 0; mx < MX; mx++)
    for (int my = 0; my < MY; my++) {
        float golden = 0.0f;
        size_t total_oy = (yy_xx + YY_XX*y_x) % OY;
        size_t total_ox = (yy_xx + YY_XX*y_x) / OY;
        for (int kx = 0; kx < KX; kx++)
        for (int ky = 0; ky < KY; ky++)
        for (int mk = 0; mk < MK; mk++)
        for (int ci = 0; ci < TOTAL_CI; ci++) {
            size_t total_iy = total_oy * 2 + ky;
            size_t total_ix = total_ox * 2 + kx;
            size_t total_co = cooo + COOO*coo + COOO*COO*co;
            size_t total_n = nn + NN*n;
            golden += I(mk, mx, ci, total_iy, total_ix, total_n) * K(my, mk, ci, total_co, ky, kx);
        }
        assert(fabs(golden - O(cooo, yy_xx, my, mx, y_x, coo, nn, co, n)) < 0.005*fabs(golden));
    }
#else
    // Report performance. DSPs, FMax and ExecTime are automatically figured out from the static analysis
    // during FPGA synthesis and and the dynamic profile during the FGPA execution.
    // A10PAC on DevCloud has 33GB/s memory bandwidth
    double mem_bandwidth = 33;
    double compute_roof = 2 * DSPs() * FMax();
     // Total operations (GFLOP for CONV), independent of designs
    double number_ops = 2 * (long)(N * NN * TOTAL_CO) * (long)(MY * MX * YY_XX * Y_X) * (long)(TOTAL_CI * MK * KY * KX);
    double number_bytes = (long)(MX * MK * TOTAL_CI * TOTAL_IY * TOTAL_IX * N * NN) * 4
                        + (long)(MY * MK * TOTAL_CI * TOTAL_CO * KY * KX) * 4
                        + (long)(TOTAL_CO * YY_XX * Y_X * MY * MX * N * NN) * 4;
    double exec_time = ExecTime();
    roofline(mem_bandwidth, compute_roof, number_ops, number_bytes, exec_time);
    if (fopen("roofline.png", "r") == NULL) {
        cout << "Failed to draw roofline!\n";
        return 1;
    }
#endif

    printf("Success\n");
    return 0;
}
