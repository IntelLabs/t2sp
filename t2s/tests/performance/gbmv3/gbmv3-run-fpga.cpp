/*******************************************************************************
* Copyright 2021 Intel Corporation
*
* Licensed under the BSD-2-Clause Plus Patent License (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* https://opensource.org/licenses/BSDplusPatent
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions
* and limitations under the License.
*
*
* SPDX-License-Identifier: BSD-2-Clause-Patent
*******************************************************************************/
// The header file generated by gbmv.cpp
#include "gbmv3-interface.h"

// Constant parameters (inner loop bounds) of the design
#include "const-parameters.h"

// Outer loop bounds for testing
#ifdef TINY // For verifying correctness only
    #define J           2
    #define I           2
    #define Ku          2
    #define Kl          2
#else
    #define J           16
    #define I           16
    #define Ku          511
    #define Kl          511
#endif

// Roofline utilities
#include "Roofline.h"

// The only header file needed for including T2S.
#include "HalideBuffer.h"

// For printing output
#include <stdio.h>
#include <iostream>

// For validation of results.
#include <assert.h>

using namespace std;

int main()
{
    const int TOTAL_I = III * II * I;
    const int TOTAL_J = JJJ * JJ * J;

    float alpha = 1;//random();
    float beta = 1;//random();

    Halide::Runtime::Buffer<float> a(TOTAL_J, TOTAL_I), x(TOTAL_J + Ku), y(TOTAL_I);
    for (int i = 0; i < TOTAL_I; i++) {
        for (int j = 0; j < TOTAL_J; j++) {
            if (((j - i) > Ku) || ((i - j) > Kl)) continue;
            a(j, i) = i * TOTAL_J + j;//random();
        }
    }

    for (int j = 0; j < TOTAL_J; j++) {
        x(j + Ku) = j;//random();
    }

    for (int i = 0; i < TOTAL_I; i++) {
        y(i) = i;//random();
    }

    int TOTAL_K = (Ku + 1 + Kl + (KKK * KK - 1)) / (KKK * KK) * (KKK * KK);
    Halide::Runtime::Buffer<float> bandedA(TOTAL_K, TOTAL_I);
    for (int i = 0; i < TOTAL_I; i++) {
        int k = Kl - i;
        for (int j = max(0, i-Kl); j < min(TOTAL_J, i+Ku+1); j++) {
            if (((j - i) > Ku) || ((i - j) > Kl)) continue;
            bandedA(k+j, i) = a(j, i);
        }
    }

    
    // for (int i = 0; i < TOTAL_I; i++) {
    //     for (int k = 0; k < Ku + 1 + Kl; k++) {
    //         cout << bandedA(k, i) << " ";
    //     }
    //     cout << endl;
    // }

    // for (int i = 0; i < Ku + 1 + Kl; i++) {
    //     for (int j = 0; j < TOTAL_J; j++) {
    //         cout << (i * 4 + j) << " " << ((const float *)_halide_buffer_get_host(bandedA))[i * 4 + j] << " ";
    //     }
    //     cout << endl;
    // }

    

    printf("TOTAL_K: %d\n", TOTAL_K);
    int extendedI = ((bandedA.dim(0).extent() + bandedA.dim(1).extent() + III * II - 1) / (III * II));
    printf("bandedA.dim(0).extent() = %d, bandedA.dim(1).extent() = %d\n", bandedA.dim(0).extent(), bandedA.dim(1).extent());

    Halide::Runtime::Buffer<float> o(III, II, I);
    gbmv3(alpha, beta, bandedA, x, y, o);

#ifdef TINY
    // Validate the results
    for (int i = 0; i < I; i++)
        for (int ii = 0; ii < II; ii++)
            for (int iii = 0; iii < III; iii++) {
                // printf("verify %d %f\n", i * 2 + iii, o(0, iii, ii, i));
                int total_i = iii + III * ii + III * II * i;
                if (total_i < 0 || total_i >= TOTAL_I) continue;
                // if (total_i < 0 || total_i >= I * II * III) continue;

                float golden = 0;
                // cout << "y beta " << y(total_i + Ku) << " " << beta << " " << golden << endl;
                for (int j = 0; j < TOTAL_J; j++) {
                    if (j - total_i > Ku || total_i - j > Kl) continue;
                    golden += a(j, total_i) * x(j+Ku);
                }
                golden = golden * alpha + y(total_i) * beta;
                
                // cout << "(" << i << "," << ii << "," << iii << ") " << golden << " " << o(iii, ii, i) << endl;
                assert(golden == o(iii, ii, i) || fabs(golden - o(iii, ii, i)) < 0.005*fabs(golden));
            }
#else
    // Report performance. DSPs, FMax and ExecTime are automatically figured out from the static analysis
    // during FPGA synthesis and and the dynamic profile during the FGPA execution.
#ifdef S10
    double mem_bandwidth = 75;
#else
    double mem_bandwidth = 33;
#endif
    double compute_roof = 2 * DSPs() * FMax();
    double number_ops   = 2 * (double)(III * II * I) * (double)(Ku + 1 + Kl); // Total operations (GFLOP for GBMV), independent of designs
    double number_bytes = 4 * (double)(III * II * I) * (double)(Ku + 1 + Kl) +
                          4 * (double)(JJJ * JJ * J) +
                          4 * (double)(III * II * I);
    double exec_time = ExecTime("kernel_unloader");
    roofline(mem_bandwidth, compute_roof, number_ops, number_bytes, exec_time);
    if (fopen("roofline.png", "r") == NULL) {
        cout << "Failed to draw roofline!\n";
        return 1;
    }

#endif

    printf("Success\n");
    return 0;
}
