/*******************************************************************************
* Copyright 2021 Intel Corporation
*
* Licensed under the BSD-2-Clause Plus Patent License (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* https://opensource.org/licenses/BSDplusPatent
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions
* and limitations under the License.
*
*
* SPDX-License-Identifier: BSD-2-Clause-Patent
*******************************************************************************/
// The header file generated by gemm.cpp
#include "host.h"
#include "sizes.h"
// The only header file needed for including T2S.
#include "HalideBuffer.h"
// For printing output
#include <stdio.h>
#include <iostream>
// For validation of results.
#include <assert.h>

using namespace std;

int main()
{
    const int TOTAL_I = III * II * O_I;
    const int TOTAL_J = JJJ * JJ * O_J;
    const int TOTAL_K = KKK * KK * O_K;

    Halide::Runtime::Buffer<float> a(TOTAL_K, TOTAL_I), b(TOTAL_J, TOTAL_K);
    for (size_t i = 0; i < TOTAL_I; i++) {
        for (size_t k = 0; k < TOTAL_K; k++) {
            a(k, i) = random();
        }
    }
    for (size_t k = 0; k < TOTAL_K; k++) {
        for (size_t j = 0; j < TOTAL_J; j++) {
            b(j, k) = random();
        }
    }

    Halide::Runtime::Buffer<float> c(JJJ, III, JJ, II, O_J, O_I);
    GEMM(a, b, c);

    for (int i = 0; i < O_I; i++)
    for (int j = 0; j < O_J; j++)
        for (int ii = 0; ii < II; ii++)
        for (int jj = 0; jj < JJ; jj++)
            for (int iii = 0; iii < III; iii++)
            for (int jjj = 0; jjj < JJJ; jjj++) {
                size_t total_i = iii + III * ii + III * II * i;
                size_t total_j = jjj + JJJ * jj + JJJ * JJ * j;
                float golden = 0.0f;
                for (int k = 0; k < O_K*KK*KKK; k++)
                    golden += a(k, total_i) * b(total_j, k);
                assert(fabs(golden - c(jjj, iii, jj, ii, j, i)) < 0.005*fabs(golden));
            }

    printf("Success\n");
    return 0;
}
